{"version":3,"sources":["webpack://roosterjsReact/webpack/bootstrap","webpack://roosterjsReact/external \"roosterjs\"","webpack://roosterjsReact/external \"FluentUIReact\"","webpack://roosterjsReact/external \"React\"","webpack://roosterjsReact/./packages-ui/roosterjs-react/lib/common/utils/getLocalizedString.ts","webpack://roosterjsReact/./packages-ui/roosterjs-react/lib/ribbon/component/buttons/alignCenter.ts","webpack://roosterjsReact/./packages-ui/roosterjs-react/lib/ribbon/component/buttons/alignLeft.ts","webpack://roosterjsReact/./packages-ui/roosterjs-react/lib/ribbon/component/buttons/alignRight.ts","webpack://roosterjsReact/./packages-ui/roosterjs-react/lib/ribbon/component/buttons/backgroundColor.ts","webpack://roosterjsReact/./packages-ui/roosterjs-react/lib/ribbon/component/buttons/colorPicker.tsx","webpack://roosterjsReact/./packages-ui/roosterjs-react/lib/ribbon/component/buttons/bold.ts","webpack://roosterjsReact/./packages-ui/roosterjs-react/lib/ribbon/component/buttons/bulletedList.ts","webpack://roosterjsReact/./packages-ui/roosterjs-react/lib/ribbon/component/buttons/clearFormat.ts","webpack://roosterjsReact/./packages-ui/roosterjs-react/lib/ribbon/component/buttons/code.ts","webpack://roosterjsReact/./packages-ui/roosterjs-react/lib/ribbon/component/buttons/decreaseFontSize.ts","webpack://roosterjsReact/./packages-ui/roosterjs-react/lib/ribbon/component/buttons/decreaseIndent.ts","webpack://roosterjsReact/./packages-ui/roosterjs-react/lib/ribbon/component/buttons/font.ts","webpack://roosterjsReact/./packages-ui/roosterjs-react/lib/ribbon/component/buttons/fontSize.ts","webpack://roosterjsReact/./packages-ui/roosterjs-react/lib/ribbon/component/buttons/header.ts","webpack://roosterjsReact/./packages-ui/roosterjs-react/lib/ribbon/component/buttons/increaseFontSize.ts","webpack://roosterjsReact/./packages-ui/roosterjs-react/lib/ribbon/component/buttons/increaseIndent.ts","webpack://roosterjsReact/./packages-ui/roosterjs-react/lib/ribbon/component/buttons/insertImage.ts","webpack://roosterjsReact/./packages-ui/roosterjs-react/lib/ribbon/component/buttons/insertLink.tsx","webpack://roosterjsReact/./packages-ui/roosterjs-react/lib/ribbon/component/buttons/insertTable.tsx","webpack://roosterjsReact/./packages-ui/roosterjs-react/lib/ribbon/component/buttons/italic.ts","webpack://roosterjsReact/./packages-ui/roosterjs-react/lib/ribbon/component/buttons/ltr.ts","webpack://roosterjsReact/./packages-ui/roosterjs-react/lib/ribbon/component/buttons/numberedList.ts","webpack://roosterjsReact/./packages-ui/roosterjs-react/lib/ribbon/component/buttons/quote.ts","webpack://roosterjsReact/./packages-ui/roosterjs-react/lib/ribbon/component/buttons/redo.ts","webpack://roosterjsReact/./packages-ui/roosterjs-react/lib/ribbon/component/buttons/removeLink.ts","webpack://roosterjsReact/./packages-ui/roosterjs-react/lib/ribbon/component/buttons/rtl.ts","webpack://roosterjsReact/./packages-ui/roosterjs-react/lib/ribbon/component/buttons/strikethrough.ts","webpack://roosterjsReact/./packages-ui/roosterjs-react/lib/ribbon/component/buttons/subscript.ts","webpack://roosterjsReact/./packages-ui/roosterjs-react/lib/ribbon/component/buttons/superscript.ts","webpack://roosterjsReact/./packages-ui/roosterjs-react/lib/ribbon/component/buttons/textColor.ts","webpack://roosterjsReact/./packages-ui/roosterjs-react/lib/ribbon/component/buttons/underline.ts","webpack://roosterjsReact/./packages-ui/roosterjs-react/lib/ribbon/component/buttons/undo.ts","webpack://roosterjsReact/./packages-ui/roosterjs-react/lib/index.ts","webpack://roosterjsReact/./packages-ui/roosterjs-react/lib/common/index.ts","webpack://roosterjsReact/./packages-ui/roosterjs-react/lib/rooster/index.ts","webpack://roosterjsReact/./packages-ui/roosterjs-react/lib/rooster/component/Rooster.tsx","webpack://roosterjsReact/./packages-ui/roosterjs-react/lib/rooster/plugin/createUpdateContentPlugin.ts","webpack://roosterjsReact/./packages-ui/roosterjs-react/lib/ribbon/index.ts","webpack://roosterjsReact/./packages-ui/roosterjs-react/lib/ribbon/component/Ribbon.tsx","webpack://roosterjsReact/./packages-ui/roosterjs-react/lib/ribbon/component/getAllButtons.ts","webpack://roosterjsReact/external \"ReactDOM\"","webpack://roosterjsReact/./packages-ui/roosterjs-react/lib/ribbon/plugin/createRibbonPlugin.ts"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","roosterjs","FluentUIReact","React","strings","defaultString","str","alignCenter","unlocalizedText","iconName","onClick","editor","setAlignment","alignLeft","alignRight","backgroundColor","colorPicker","dropDownItems","backgroundColorCyan","backgroundColorGreen","backgroundColorYellow","backgroundColorOrange","backgroundColorRed","backgroundColorMagenta","backgroundColorLightCyan","backgroundColorLightGreen","backgroundColorLightYellow","backgroundColorLightOrange","backgroundColorLightRed","backgroundColorLightMagenta","backgroundColorWhite","backgroundColorLightGray","backgroundColorGray","backgroundColorDarkGray","backgroundColorDarkerGray","backgroundColorBlack","setBackgroundColor","BackgroundColors","classNames","mergeStyleSets","colorPickerContainer","width","padding","background","overflow","colorMenuItem","display","height","minWidth","border","colorSquare","margin","borderStyle","borderWidth","borderColor","colorSquareBorder","colorSquareBorderWhite","TextColors","textColorLightBlue","lightModeColor","darkModeColor","textColorLightGreen","textColorLightYellow","textColorLightOrange","textColorLightRed","textColorLightPurple","textColorBlue","textColorGreen","textColorYellow","textColorOrange","textColorRed","textColorPurple","textColorDarkBlue","textColorDarkGreen","textColorDarkYellow","textColorDarkOrange","textColorDarkRed","textColorDarkPurple","textColorDarkerBlue","textColorDarkerGreen","textColorDarkerYellow","textColorDarkerOrange","textColorDarkerRed","textColorDarkerPurple","textColorWhite","textColorLightGray","textColorGray","textColorDarkGray","textColorDarkerGray","textColorBlack","AllColors","dropDownClassName","itemClassName","allowLivePreview","dropDownItemRender","item","buttonColor","e","title","text","className","style","bold","checked","formatState","isBold","toggleBold","bulletedList","isBullet","toggleBullet","clearFormat","code","toggleCodeBlock","decreaseFontSize","changeFontSize","decreaseIndent","setIndentation","FontNames","family","localizedName","DropDownItems","reduce","items","font","LowerCaseFontMap","toLowerCase","FirstFontRegex","selectedItem","matches","fontName","match","firstName","setFontName","fontSize","FONT_SIZES","map","size","toString","setFontSize","headers","header1","header2","header3","header4","header5","header6","headerDivider","noHeader","header","index","keys","indexOf","toggleHeader","increaseFontSize","increaseIndent","FileInput","tag","attributes","type","accept","insertImage","document","getDocument","fileInput","createElement","body","appendChild","addEventListener","files","length","click","removeChild","insertLink","_","doc","div","existingLink","queryElements","url","href","displayText","textContent","getSelectionRange","ReactDOM","render","InsertLinkDialog","onDismiss","unmountComponentAtNode","initUrl","initDisplayText","linkInput","borderRadius","props","useState","setUrl","setDisplayText","isChanged","setIsChanged","urlInput","useRef","displayTextInput","dialogContentProps","DialogType","normal","onOk","useCallback","focus","createLink","onCancel","onDisplayTextChanged","current","onUrlChanged","WindowProvider","window","defaultView","Dialog","hidden","htmlFor","id","ref","role","onChange","autoFocus","DialogFooter","PrimaryButton","DefaultButton","tableButton","cursor","hovered","tablePane","tablePaneInner","lineHeight","InsertTablePane","col","setCol","row","setRow","updateSize","safeInstanceOf","parseInt","dataset","onMouseEnter","target","onClickButton","createKey","ariaLabels","useMemo","result","j","formatText","isSelected","push","FocusZone","defaultActiveElement","direction","FocusZoneDirection","bidirectional","onActiveElementChanged","replace","insertTable","insertTablePane","split","parseKey","italic","isItalic","toggleItalic","ltr","setDirection","numberedList","isNumbering","toggleNumbering","quote","isBlockQuote","toggleBlockQuote","redo","disabled","canRedo","removeLink","canUnlink","rtl","strikethrough","isStrikeThrough","toggleStrikethrough","subscript","isSubscript","toggleSubscript","superscript","isSuperscript","toggleSuperscript","textColor","setTextColor","underline","isUnderline","toggleUnderline","undo","canUndo","default","defaultEditorCreator","options","Editor","editorDiv","domAttributes","editorOptions","focusOnInit","editorCreator","zoomScale","inDarkMode","useEffect","dispose","setDarkModeState","setZoomScale","tabIndex","updateMode","onUpdate","onBlur","update","getName","initialize","this","disposer","addDomEventHandler","onPluginEvent","event","eventType","forceUpdate","content","getContent","UpdateContentPluginImpl","ribbonClassName","mergeStyles","plugin","buttons","dir","setFormatState","isRtl","onButtonClick","data","onHover","button","startLivePreview","stopLivePreview","commandBarItems","iconProps","rtlIconName","iconOnly","canCheck","subMenuProps","shouldFocusOnMount","focusZoneProps","onItemClick","onRenderContextualMenuItem","defaultRenderer","onMouseOver","undefined","onRender","registerFormatChangedCallback","CommandBar","delayUpdateTime","timer","updateFormat","delayUpdate","callback","onFormatChanged","stopShadowEdit","isInShadowEdit","range","getSelectionRangeEx","areAllCollapsed","startShadowEdit","clearTimeout","setTimeout","getFormatState","some","RibbonPluginImpl"],"mappings":"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","file":"rooster-react-min.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 36);\n","module.exports = roosterjs;","module.exports = FluentUIReact;","module.exports = React;","import { LocalizedStrings } from '../type/LocalizedStrings';\n\n/**\n * Get a localized string\n * @param strings The LocalizedStrings map\n * @param key Key of the string\n * @param defaultString Default unlocalized string, will be used if strings is not specified or the give key doesn't exist in strings\n * @returns A localized string from the string map, or defaultString\n */\nexport default function getLocalizedString<T extends string>(\n    strings: Partial<LocalizedStrings<T>>,\n    key: T,\n    defaultString: string\n) {\n    const str = strings?.[key];\n\n    if (typeof str == 'function') {\n        return str();\n    } else if (typeof str == 'string') {\n        return str;\n    } else {\n        return defaultString;\n    }\n}\n","import RibbonButton from '../../type/RibbonButton';\nimport { Alignment } from 'roosterjs-editor-types';\nimport { setAlignment } from 'roosterjs-editor-api';\n\n/**\n * Key of localized strings of Align center button\n */\nexport type AlignCenterButtonStringKey = 'buttonNameAlignCenter';\n\n/**\n * \"Align center\" button on the format ribbon\n */\nexport const alignCenter: RibbonButton<AlignCenterButtonStringKey> = {\n    key: 'buttonNameAlignCenter',\n    unlocalizedText: 'Align center',\n    iconName: 'AlignCenter',\n    onClick: editor => {\n        setAlignment(editor, Alignment.Center);\n    },\n};\n","import RibbonButton from '../../type/RibbonButton';\nimport { Alignment } from 'roosterjs-editor-types';\nimport { setAlignment } from 'roosterjs-editor-api';\n\n/**\n * Key of localized strings of Align left button\n */\nexport type AlignLeftButtonStringKey = 'buttonNameAlignLeft';\n\n/**\n * \"Align left\" button on the format ribbon\n */\nexport const alignLeft: RibbonButton<AlignLeftButtonStringKey> = {\n    key: 'buttonNameAlignLeft',\n    unlocalizedText: 'Align left',\n    iconName: 'AlignLeft',\n    onClick: editor => {\n        setAlignment(editor, Alignment.Left);\n    },\n};\n","import RibbonButton from '../../type/RibbonButton';\nimport { Alignment } from 'roosterjs-editor-types';\nimport { setAlignment } from 'roosterjs-editor-api';\n\n/**\n * Key of localized strings of Align right button\n */\nexport type AlignRightButtonStringKey = 'buttonNameAlignRight';\n\n/**\n * \"Align right\" button on the format ribbon\n */\nexport const alignRight: RibbonButton<AlignRightButtonStringKey> = {\n    key: 'buttonNameAlignRight',\n    unlocalizedText: 'Align right',\n    iconName: 'AlignRight',\n    onClick: editor => {\n        setAlignment(editor, Alignment.Right);\n    },\n};\n","import RibbonButton from '../../type/RibbonButton';\nimport { BackgroundColorKeys, BackgroundColors, colorPicker } from './colorPicker';\nimport { setBackgroundColor } from 'roosterjs-editor-api';\n\nconst BackgroundColorDropDownItems: Record<BackgroundColorKeys, string> = {\n    backgroundColorCyan: 'Cyan',\n    backgroundColorGreen: 'Green',\n    backgroundColorYellow: 'Yellow',\n    backgroundColorOrange: 'Orange',\n    backgroundColorRed: 'Red',\n    backgroundColorMagenta: 'Magenta',\n    backgroundColorLightCyan: 'Light cyan',\n    backgroundColorLightGreen: 'Light green',\n    backgroundColorLightYellow: 'Light yellow',\n    backgroundColorLightOrange: 'Light orange',\n    backgroundColorLightRed: 'Light red',\n    backgroundColorLightMagenta: 'Light magenta',\n    backgroundColorWhite: 'White',\n    backgroundColorLightGray: 'Light gray',\n    backgroundColorGray: 'Gray',\n    backgroundColorDarkGray: 'Dark gray',\n    backgroundColorDarkerGray: 'Darker gray',\n    backgroundColorBlack: 'Black',\n};\n\n/**\n * Key of localized strings of Background color button\n */\nexport type BackgroundColorButtonStringKey = 'buttonNameBackgroundColor';\n\n/**\n * \"Background color\" button on the format ribbon\n */\nexport const backgroundColor: RibbonButton<BackgroundColorButtonStringKey> = {\n    ...colorPicker,\n    key: 'buttonNameBackgroundColor',\n    unlocalizedText: 'Background color',\n    iconName: 'FabricTextHighlight',\n    dropDownItems: BackgroundColorDropDownItems,\n    onClick: (editor, key: BackgroundColorKeys) => {\n        setBackgroundColor(editor, BackgroundColors[key]);\n    },\n};\n","import * as React from 'react';\nimport RibbonButton from '../../type/RibbonButton';\nimport { mergeStyleSets } from '@fluentui/react/lib/Styling';\nimport { ModeIndependentColor } from 'roosterjs-editor-types';\n\nconst classNames = mergeStyleSets({\n    colorPickerContainer: {\n        width: '192px',\n        padding: '8px',\n        background: 'white',\n        overflow: 'hidden',\n        '& ul': {\n            width: '192px',\n            overflow: 'hidden',\n        },\n    },\n    colorMenuItem: {\n        display: 'inline-block',\n        width: '32px',\n        height: '32px',\n        background: 'white',\n        '& button': {\n            padding: '0px',\n            minWidth: '0px',\n            background: 'transparent',\n            border: 'none',\n        },\n    },\n    colorSquare: {\n        width: '20px',\n        height: '20px',\n        margin: '4px',\n        borderStyle: 'solid',\n        borderWidth: '2px',\n        '&:hover': {\n            borderColor: 'red',\n        },\n    },\n    colorSquareBorder: {\n        borderColor: 'transparent',\n    },\n    colorSquareBorderWhite: {\n        borderColor: '#bebebe',\n    },\n});\n\n/**\n * Localized string keys for text colors\n */\ntype TextColorKeys =\n    | 'textColorLightBlue'\n    | 'textColorLightGreen'\n    | 'textColorLightYellow'\n    | 'textColorLightOrange'\n    | 'textColorLightRed'\n    | 'textColorLightPurple'\n    | 'textColorBlue'\n    | 'textColorGreen'\n    | 'textColorYellow'\n    | 'textColorOrange'\n    | 'textColorRed'\n    | 'textColorPurple'\n    | 'textColorDarkBlue'\n    | 'textColorDarkGreen'\n    | 'textColorDarkYellow'\n    | 'textColorDarkOrange'\n    | 'textColorDarkRed'\n    | 'textColorDarkPurple'\n    | 'textColorDarkerBlue'\n    | 'textColorDarkerGreen'\n    | 'textColorDarkerYellow'\n    | 'textColorDarkerOrange'\n    | 'textColorDarkerRed'\n    | 'textColorDarkerPurple'\n    | 'textColorWhite'\n    | 'textColorLightGray'\n    | 'textColorGray'\n    | 'textColorDarkGray'\n    | 'textColorDarkerGray'\n    | 'textColorBlack';\n\n/**\n * Localized string keys for background colors\n */\ntype BackgroundColorKeys =\n    | 'backgroundColorCyan'\n    | 'backgroundColorGreen'\n    | 'backgroundColorYellow'\n    | 'backgroundColorOrange'\n    | 'backgroundColorRed'\n    | 'backgroundColorMagenta'\n    | 'backgroundColorLightCyan'\n    | 'backgroundColorLightGreen'\n    | 'backgroundColorLightYellow'\n    | 'backgroundColorLightOrange'\n    | 'backgroundColorLightRed'\n    | 'backgroundColorLightMagenta'\n    | 'backgroundColorWhite'\n    | 'backgroundColorLightGray'\n    | 'backgroundColorGray'\n    | 'backgroundColorDarkGray'\n    | 'backgroundColorDarkerGray'\n    | 'backgroundColorBlack';\n\n/**\n * @internal\n */\nconst TextColors: { [key in TextColorKeys]: ModeIndependentColor } = {\n    textColorLightBlue: { lightModeColor: '#51a7f9', darkModeColor: '#0075c2' },\n    textColorLightGreen: { lightModeColor: '#6fc040', darkModeColor: '#207a00' },\n    textColorLightYellow: { lightModeColor: '#f5d427', darkModeColor: '#5d4d00' },\n    textColorLightOrange: { lightModeColor: '#f3901d', darkModeColor: '#ab5500' },\n    textColorLightRed: { lightModeColor: '#ed5c57', darkModeColor: '#df504d' },\n    textColorLightPurple: { lightModeColor: '#b36ae2', darkModeColor: '#ab63da' },\n    textColorBlue: { lightModeColor: '#0c64c0', darkModeColor: '#6da0ff' },\n    textColorGreen: { lightModeColor: '#0c882a', darkModeColor: '#3da848' },\n    textColorYellow: { lightModeColor: '#dcbe22', darkModeColor: '#6d5c00' },\n    textColorOrange: { lightModeColor: '#de6a19', darkModeColor: '#d3610c' },\n    textColorRed: { lightModeColor: '#c82613', darkModeColor: '#ff6847' },\n    textColorPurple: { lightModeColor: '#763e9b', darkModeColor: '#d394f9' },\n    textColorDarkBlue: { lightModeColor: '#174e86', darkModeColor: '#93b8f9' },\n    textColorDarkGreen: { lightModeColor: '#0f5c1a', darkModeColor: '#7fc57b' },\n    textColorDarkYellow: { lightModeColor: '#c3971d', darkModeColor: '#946f00' },\n    textColorDarkOrange: { lightModeColor: '#be5b17', darkModeColor: '#de7633' },\n    textColorDarkRed: { lightModeColor: '#861106', darkModeColor: '#ff9b7c' },\n    textColorDarkPurple: { lightModeColor: '#5e327c', darkModeColor: '#dea9fd' },\n    textColorDarkerBlue: { lightModeColor: '#002451', darkModeColor: '#cedbff' },\n    textColorDarkerGreen: { lightModeColor: '#06400c', darkModeColor: '#a3da9b' },\n    textColorDarkerYellow: { lightModeColor: '#a37519', darkModeColor: '#b5852a' },\n    textColorDarkerOrange: { lightModeColor: '#934511', darkModeColor: '#ef935c' },\n    textColorDarkerRed: { lightModeColor: '#570606', darkModeColor: '#ffc0b1' },\n    textColorDarkerPurple: { lightModeColor: '#3b204d', darkModeColor: '#eecaff' },\n    textColorWhite: { lightModeColor: '#ffffff', darkModeColor: '#333333' },\n    textColorLightGray: { lightModeColor: '#cccccc', darkModeColor: '#535353' },\n    textColorGray: { lightModeColor: '#999999', darkModeColor: '#777777' },\n    textColorDarkGray: { lightModeColor: '#666666', darkModeColor: '#a0a0a0' },\n    textColorDarkerGray: { lightModeColor: '#333333', darkModeColor: '#cfcfcf' },\n    textColorBlack: { lightModeColor: '#000000', darkModeColor: '#ffffff' },\n};\n\n/**\n * @internal\n */\nconst BackgroundColors: { [key in BackgroundColorKeys]: ModeIndependentColor } = {\n    backgroundColorCyan: { lightModeColor: '#00ffff', darkModeColor: '#005357' },\n    backgroundColorGreen: { lightModeColor: '#00ff00', darkModeColor: '#005e00' },\n    backgroundColorYellow: { lightModeColor: '#ffff00', darkModeColor: '#383e00' },\n    backgroundColorOrange: { lightModeColor: '#ff8000', darkModeColor: '#bf4c00' },\n    backgroundColorRed: { lightModeColor: '#ff0000', darkModeColor: '#ff2711' },\n    backgroundColorMagenta: { lightModeColor: '#ff00ff', darkModeColor: '#e700e8' },\n    backgroundColorLightCyan: { lightModeColor: '#80ffff', darkModeColor: '#004c4f' },\n    backgroundColorLightGreen: { lightModeColor: '#80ff80', darkModeColor: '#005400' },\n    backgroundColorLightYellow: { lightModeColor: '#ffff80', darkModeColor: '#343c00' },\n    backgroundColorLightOrange: { lightModeColor: '#ffc080', darkModeColor: '#77480b' },\n    backgroundColorLightRed: { lightModeColor: '#ff8080', darkModeColor: '#bc454a' },\n    backgroundColorLightMagenta: { lightModeColor: '#ff80ff', darkModeColor: '#aa2bad' },\n    backgroundColorWhite: { lightModeColor: '#ffffff', darkModeColor: '#333333' },\n    backgroundColorLightGray: { lightModeColor: '#cccccc', darkModeColor: '#535353' },\n    backgroundColorGray: { lightModeColor: '#999999', darkModeColor: '#777777' },\n    backgroundColorDarkGray: { lightModeColor: '#666666', darkModeColor: '#a0a0a0' },\n    backgroundColorDarkerGray: { lightModeColor: '#333333', darkModeColor: '#cfcfcf' },\n    backgroundColorBlack: { lightModeColor: '#000000', darkModeColor: '#ffffff' },\n};\n\n/**\n * @internal\n */\ntype AllColorKeys = TextColorKeys | BackgroundColorKeys;\n\nconst AllColors: { [key in AllColorKeys]: ModeIndependentColor } = {\n    ...TextColors,\n    ...BackgroundColors,\n};\n\n/**\n * @internal\n * Common part of a color picker button\n */\nconst colorPicker: Pick<\n    RibbonButton<AllColorKeys>,\n    'dropDownClassName' | 'itemClassName' | 'dropDownItemRender' | 'allowLivePreview'\n> = {\n    dropDownClassName: classNames.colorPickerContainer,\n    itemClassName: classNames.colorMenuItem,\n    allowLivePreview: true,\n    dropDownItemRender: (item, onClick) => {\n        const key = item.key as AllColorKeys;\n        const buttonColor = AllColors[key].lightModeColor;\n        return (\n            <button onClick={e => onClick(e, item)} title={item.text}>\n                <div\n                    className={\n                        classNames.colorSquare +\n                        ' ' +\n                        (key == 'textColorWhite' || key == 'backgroundColorWhite'\n                            ? classNames.colorSquareBorderWhite\n                            : classNames.colorSquareBorder)\n                    }\n                    style={{\n                        backgroundColor: buttonColor,\n                    }}></div>\n            </button>\n        );\n    },\n};\n\nexport {\n    TextColorKeys,\n    BackgroundColorKeys,\n    TextColors,\n    BackgroundColors,\n    colorPicker,\n    AllColorKeys,\n};\n","import RibbonButton from '../../type/RibbonButton';\nimport { toggleBold } from 'roosterjs-editor-api';\n\n/**\n * Key of localized strings of Bold button\n */\nexport type BoldButtonStringKey = 'buttonNameBold';\n\n/**\n * \"Bold\" button on the format ribbon\n */\nexport const bold: RibbonButton<BoldButtonStringKey> = {\n    key: 'buttonNameBold',\n    unlocalizedText: 'Bold',\n    iconName: 'Bold',\n    checked: formatState => formatState.isBold,\n    onClick: editor => {\n        toggleBold(editor);\n        return true;\n    },\n};\n","import RibbonButton from '../../type/RibbonButton';\nimport { toggleBullet } from 'roosterjs-editor-api';\n\n/**\n * Key of localized strings of Bulleted list button\n */\nexport type BulletedListButtonStringKey = 'buttonNameBulletedList';\n\n/**\n * \"Bulleted list\" button on the format ribbon\n */\nexport const bulletedList: RibbonButton<BulletedListButtonStringKey> = {\n    key: 'buttonNameBulletedList',\n    unlocalizedText: 'Bulleted list',\n    iconName: 'BulletedList',\n    checked: formatState => formatState.isBullet,\n    onClick: editor => {\n        toggleBullet(editor);\n        return true;\n    },\n};\n","import RibbonButton from '../../type/RibbonButton';\nimport { clearFormat as clearFormatApi } from 'roosterjs-editor-api';\n\n/**\n * Key of localized strings of Clear format button\n */\nexport type ClearFormatButtonStringKey = 'buttonNameClearFormat';\n\n/**\n * \"Clear format\" button on the format ribbon\n */\nexport const clearFormat: RibbonButton<ClearFormatButtonStringKey> = {\n    key: 'buttonNameClearFormat',\n    unlocalizedText: 'Clear format',\n    iconName: 'ClearFormatting',\n    onClick: editor => {\n        clearFormatApi(editor);\n    },\n};\n","import RibbonButton from '../../type/RibbonButton';\nimport { toggleCodeBlock } from 'roosterjs-editor-api';\n\n/**\n * Key of localized strings of Code button\n */\nexport type CodeButtonStringKey = 'buttonNameCode';\n\n/**\n * \"Code\" button on the format ribbon\n */\nexport const code: RibbonButton<CodeButtonStringKey> = {\n    key: 'buttonNameCode',\n    unlocalizedText: 'Code',\n    iconName: 'Code',\n    onClick: editor => {\n        toggleCodeBlock(editor);\n    },\n};\n","import RibbonButton from '../../type/RibbonButton';\nimport { changeFontSize } from 'roosterjs-editor-api';\nimport { FontSizeChange } from 'roosterjs-editor-types';\n\n/**\n * Key of localized strings of Decrease font size button\n */\nexport type DecreaseFontSizeButtonStringKey = 'buttonNameDecreaseFontSize';\n\n/**\n * \"Decrease font size\" button on the format ribbon\n */\nexport const decreaseFontSize: RibbonButton<DecreaseFontSizeButtonStringKey> = {\n    key: 'buttonNameDecreaseFontSize',\n    unlocalizedText: 'Decrease font size',\n    iconName: 'FontDecrease',\n    onClick: editor => {\n        changeFontSize(editor, FontSizeChange.Decrease);\n    },\n};\n","import RibbonButton from '../../type/RibbonButton';\nimport { Indentation } from 'roosterjs-editor-types';\nimport { setIndentation } from 'roosterjs-editor-api';\n\n/**\n * Key of localized strings of Decrease indent size button\n */\nexport type DecreaseIndentButtonStringKey = 'buttonNameDecreaseIntent';\n\n/**\n * \"Decrease indent\" button on the format ribbon\n */\nexport const decreaseIndent: RibbonButton<DecreaseIndentButtonStringKey> = {\n    key: 'buttonNameDecreaseIntent',\n    unlocalizedText: 'Decrease indent',\n    iconName: 'DecreaseIndentLegacy',\n    onClick: editor => {\n        setIndentation(editor, Indentation.Decrease);\n    },\n};\n","import RibbonButton from '../../type/RibbonButton';\nimport { setFontName } from 'roosterjs-editor-api';\n\ninterface FontName {\n    name: string;\n    family: string;\n    localizedName?: string;\n}\nconst FontNames: FontName[] = [\n    { name: 'Arial', family: 'Arial,Helvetica,sans-serif' },\n    { name: 'Arial Black', family: \"'Arial Black',Arial,sans-serif\" },\n    { name: 'Calibri', family: 'Calibri,Helvetica,sans-serif' },\n    { name: 'Calibri Light', family: \"'Calibri Light','Helvetica Light',sans-serif\" },\n    { name: 'Cambria', family: 'Cambria,Georgia,serif' },\n    { name: 'Candara', family: 'Candara,Optima,sans-serif' },\n    { name: 'Century Gothic', family: \"'Century Gothic',sans-serif\" },\n    { name: 'Comic Sans MS', family: \"'Comic Sans MS',Chalkboard,cursive\" },\n    { name: 'Consolas', family: 'Consolas,Courier,monospace' },\n    { name: 'Constantia', family: \"Constantia,'Hoefler Text',serif\" },\n    { name: 'Corbel', family: 'Corbel,Skia,sans-serif' },\n    { name: 'Courier New', family: \"'Courier New',monospace\" },\n    {\n        name: 'Franklin Gothic Book',\n        family: \"'Franklin Gothic Book','Avenir Next Condensed',sans-serif\",\n    },\n    {\n        name: 'Franklin Gothic Demi',\n        family: \"'Franklin Gothic Demi','Avenir Next Condensed Demi Bold',sans-serif\",\n    },\n    {\n        name: 'Franklin Gothic Medium',\n        family: \"'Franklin Gothic Medium','Avenir Next Condensed Medium',sans-serif\",\n    },\n    { name: 'Garamond', family: 'Garamond,Georgia,serif' },\n    { name: 'Georgia', family: 'Georgia,serif' },\n    { name: 'Impact', family: 'Impact,Charcoal,sans-serif' },\n    { name: 'Lucida Console', family: \"'Lucida Console',Monaco,monospace\" },\n    { name: 'Lucida Handwriting', family: \"'Lucida Handwriting','Apple Chancery',cursive\" },\n    { name: 'Lucida Sans Unicode', family: \"'Lucida Sans Unicode','Lucida Grande',sans-serif\" },\n    { name: 'Palatino Linotype', family: \"'Palatino Linotype','Book Antiqua',Palatino,serif\" },\n    {\n        name: 'Segoe UI',\n        family: \"'Segoe UI', 'Segoe UI Web (West European)', 'Helvetica Neue', sans-serif\",\n    },\n    { name: 'Sitka Heading', family: \"'Sitka Heading',Cochin,serif\" },\n    { name: 'Sitka Text', family: \"'Sitka Text',Cochin,serif\" },\n    { name: 'Tahoma', family: 'Tahoma,Geneva,sans-serif' },\n    { name: 'Times', family: \"Times,'Times New Roman',serif\" },\n    { name: 'Times New Roman', family: \"'Times New Roman',Times,serif\" },\n    { name: 'Trebuchet MS', family: \"'Trebuchet MS',Trebuchet,sans-serif\" },\n    { name: 'TW Cen MT', family: \"'TW Cen MT','Century Gothic',sans-serif\" },\n    { name: 'Verdana', family: 'Verdana,Geneva,sans-serif' },\n    { name: '-', family: 'FontDivider0' }, //divider between fonts for different scripts (order is by style)\n    {\n        name: 'Microsoft YaHei',\n        family: \"'Microsoft YaHei','微软雅黑',STHeiti,sans-serif\",\n        localizedName: '微软雅黑',\n    }, //chineseS Microsoft recommended font\n    { name: 'SimHei', family: \"SimHei,'黑体',STHeiti,sans-serif\", localizedName: '黑体' }, //chineseS\n    {\n        name: 'NSimSun',\n        family: \"NSimSun,'新宋体',SimSun,'宋体',SimSun-ExtB,'宋体-ExtB',STSong,serif\",\n        localizedName: '新宋体',\n    }, //chineseS\n    { name: 'FangSong', family: \"FangSong,'仿宋',STFangsong,serif\", localizedName: '仿宋' }, //chineseS\n    { name: 'SimLi', family: \"SimLi,'隶书','Baoli SC',serif\", localizedName: '隶书' }, //chineseS\n    { name: 'KaiTi', family: \"KaiTi,'楷体',STKaiti,serif\", localizedName: '楷体' }, //chineseS\n    { name: '-', family: 'FontDivider1' }, //divider between fonts for different scripts (order is by style)\n    {\n        name: 'Microsoft JhengHei',\n        family: \"'Microsoft JhengHei','微軟正黑體','Apple LiGothic',sans-serif\",\n        localizedName: '微軟正黑體',\n    }, //chineseT Microsoft recommended font\n    {\n        name: 'PMingLiU',\n        family: \"PMingLiU,'新細明體',PMingLiU-ExtB,'新細明體-ExtB','Apple LiSung',serif\",\n        localizedName: '新細明體',\n    }, //chineseT\n    { name: 'DFKai-SB', family: \"DFKai-SB,'標楷體','BiauKai',serif\", localizedName: '標楷體' }, //chineseT\n    { name: '-', family: 'FontDivider2' }, //divider between fonts for different scripts (order is alphabetical by foundry)\n    {\n        name: 'Meiryo',\n        family: \"Meiryo,'メイリオ','Hiragino Sans',sans-serif\",\n        localizedName: 'メイリオ',\n    }, //japanese\n    {\n        name: 'MS PGothic',\n        family:\n            \"'MS PGothic','ＭＳ Ｐゴシック','MS Gothic','ＭＳ ゴシック','Hiragino Kaku Gothic ProN',sans-serif\",\n        localizedName: 'ＭＳ Ｐゴシック',\n    }, //japanese\n    {\n        name: 'MS PMincho',\n        family: \"'MS PMincho','ＭＳ Ｐ明朝','MS Mincho','ＭＳ 明朝','Hiragino Mincho ProN',serif\",\n        localizedName: 'ＭＳ Ｐ明朝',\n    }, //japanese\n    {\n        name: 'Yu Gothic',\n        family: \"'Yu Gothic','游ゴシック','YuGothic',sans-serif\",\n        localizedName: '游ゴシック',\n    }, //japanese\n    { name: 'Yu Mincho', family: \"'Yu Mincho','游明朝','YuMincho',serif\", localizedName: '游明朝' }, //japanese\n    { name: '-', family: 'FontDivider3' }, //divider between fonts for different scripts (order is for legacy reasons)\n    {\n        name: 'Malgun Gothic',\n        family: \"'Malgun Gothic','맑은 고딕',AppleGothic,sans-serif\",\n        localizedName: '맑은 고딕',\n    }, //korean Microsoft recommended font\n    { name: 'Gulim', family: \"Gulim,'굴림','Nanum Gothic',sans-serif\", localizedName: '굴림' }, //korean\n    { name: 'Dotum', family: \"Dotum,'돋움',AppleGothic,sans-serif\", localizedName: '돋움' }, //korean\n    { name: 'Batang', family: \"Batang,'바탕',AppleMyungjo,serif\", localizedName: '바탕' }, //korean\n    { name: 'BatangChe', family: \"BatangChe,'바탕체',AppleMyungjo,serif\", localizedName: '바탕체' }, //korean\n    { name: 'Gungsuh', family: \"Gungsuh,'궁서',GungSeo,serif\", localizedName: '궁서' }, //korean\n    { name: '-', family: 'FontDivider4' }, //divider between fonts for different scripts (order is alphabetical)\n    { name: 'Leelawadee UI', family: \"'Leelawadee UI',Thonburi,sans-serif\" }, //thai Microsoft recommended font\n    { name: 'Angsana New', family: \"'Angsana New','Leelawadee UI',Sathu,serif\" }, //thai\n    { name: 'Cordia New', family: \"'Cordia New','Leelawadee UI',Silom,sans-serif\" }, //thai\n    { name: 'DaunPenh', family: \"DaunPenh,'Leelawadee UI','Khmer MN',sans-serif\" }, //khmer\n    { name: '-', family: 'FontDivider5' }, //divider between fonts for different scripts (order is alphabetical)\n    { name: 'Nirmala UI', family: \"'Nirmala UI',sans-serif\" }, //indic Microsoft recommended font\n    { name: 'Gautami', family: \"Gautami,'Nirmala UI','Telugu MN',sans-serif\" }, //indic\n    { name: 'Iskoola Pota', family: \"'Iskoola Pota','Nirmala UI','Sinhala MN',sans-serif\" }, //indic\n    { name: 'Kalinga', family: \"Kalinga,'Nirmala UI','Oriya MN',sans-serif\" }, //indic\n    { name: 'Kartika', family: \"Kartika,'Nirmala UI','Malayalam MN',sans-serif\" }, //indic\n    { name: 'Latha', family: \"Latha,'Nirmala UI','Tamil MN',sans-serif\" }, //indic\n    { name: 'Mangal', family: \"Mangal,'Nirmala UI','Devanagari Sangam MN',sans-serif\" }, //indic\n    { name: 'Raavi', family: \"Raavi,'Nirmala UI','Gurmukhi MN',sans-serif\" }, //indic\n    { name: 'Shruti', family: \"Shruti,'Nirmala UI','Gujarati Sangam MN',sans-serif\" }, //indic\n    { name: 'Tunga', family: \"Tunga,'Nirmala UI','Kannada MN',sans-serif\" }, //indic\n    { name: 'Vrinda', family: \"Vrinda,'Nirmala UI','Bangla MN',sans-serif\" }, //indic\n    { name: '-', family: 'FontDivider6' }, //divider between fonts for different scripts\n    { name: 'Nyala', family: 'Nyala,Kefa,sans-serif' }, //other-ethiopic\n    { name: 'Sylfaen', family: 'Sylfaen,Mshtakan,Menlo,serif' }, //other-armenian-georgian\n];\n\nconst DropDownItems = FontNames.reduce((items, font) => {\n    items[font.family] = font.localizedName || font.name;\n    return items;\n}, <Record<string, string>>{});\n\nconst LowerCaseFontMap = FontNames.reduce((items, font) => {\n    items[font.name.toLowerCase()] = font.family;\n    return items;\n}, <Record<string, string>>{});\n\nconst FirstFontRegex = /^['\"]?([^'\",]+)/i;\n\n/**\n * Key of localized strings of Font button\n */\nexport type FontButtonStringKey = 'buttonNameFont';\n\n/**\n * \"Font\" button on the format ribbon\n */\nexport const font: RibbonButton<FontButtonStringKey> = {\n    key: 'buttonNameFont',\n    unlocalizedText: 'Font',\n    iconName: 'Font',\n    dropDownItems: DropDownItems,\n    selectedItem: formatState => {\n        const matches = formatState.fontName?.match(FirstFontRegex);\n        const firstName = matches?.[1]?.toLowerCase();\n        const selectedKey = (firstName && LowerCaseFontMap[firstName]) || '';\n\n        return selectedKey;\n    },\n    onClick: (editor, font) => {\n        setFontName(editor, font);\n    },\n    allowLivePreview: true,\n};\n","import RibbonButton from '../../type/RibbonButton';\nimport { FONT_SIZES, setFontSize } from 'roosterjs-editor-api';\n\n/**\n * Key of localized strings of Font size button\n */\nexport type FontSizeButtonStringKey = 'buttonNameFontSize';\n\n/**\n * \"Font Size\" button on the format ribbon\n */\nexport const fontSize: RibbonButton<FontSizeButtonStringKey> = {\n    key: 'buttonNameFontSize',\n    unlocalizedText: 'Font size',\n    iconName: 'FontSize',\n    dropDownItems: FONT_SIZES.reduce((map, size) => {\n        map[size + 'pt'] = size.toString();\n        return map;\n    }, <Record<string, string>>{}),\n    selectedItem: formatState => formatState.fontSize,\n    onClick: (editor, size) => {\n        setFontSize(editor, size);\n    },\n    allowLivePreview: true,\n};\n","import RibbonButton from '../../type/RibbonButton';\nimport { toggleHeader } from 'roosterjs-editor-api';\n\nconst headers = {\n    header1: 'Header 1',\n    header2: 'Header 2',\n    header3: 'Header 3',\n    header4: 'Header 4',\n    header5: 'Header 5',\n    header6: 'Header 6',\n    headerDivider: '-',\n    noHeader: 'No header',\n};\n\n/**\n * Key of localized strings of Header button\n */\nexport type HeaderButtonStringKey = 'buttonNameHeader';\n\n/**\n * \"Header\" button on the format ribbon\n */\nexport const header: RibbonButton<HeaderButtonStringKey> = {\n    key: 'buttonNameHeader',\n    unlocalizedText: 'Header',\n    iconName: 'Header1',\n    dropDownItems: headers,\n    onClick: (editor, key) => {\n        const index = Object.keys(headers).indexOf(key) + 1;\n\n        if (index > 6) {\n            toggleHeader(editor, 0);\n        } else if (index > 0) {\n            toggleHeader(editor, index);\n        }\n    },\n};\n","import RibbonButton from '../../type/RibbonButton';\nimport { changeFontSize } from 'roosterjs-editor-api';\nimport { FontSizeChange } from 'roosterjs-editor-types';\n\n/**\n * Key of localized strings of Increase font size button\n */\nexport type IncreaseFontSizeButtonStringKey = 'buttonNameIncreaseFontSize';\n\n/**\n * \"Increase font size\" button on the format ribbon\n */\nexport const increaseFontSize: RibbonButton<IncreaseFontSizeButtonStringKey> = {\n    key: 'buttonNameIncreaseFontSize',\n    unlocalizedText: 'Increase font size',\n    iconName: 'FontIncrease',\n    onClick: editor => {\n        changeFontSize(editor, FontSizeChange.Increase);\n    },\n};\n","import RibbonButton from '../../type/RibbonButton';\nimport { Indentation } from 'roosterjs-editor-types';\nimport { setIndentation } from 'roosterjs-editor-api';\n\n/**\n * Key of localized strings of Increase indent size button\n */\nexport type IncreaseIndentButtonStringKey = 'buttonNameIncreaseIndent';\n\n/**\n * \"Increase indent\" button on the format ribbon\n */\nexport const increaseIndent: RibbonButton<IncreaseIndentButtonStringKey> = {\n    key: 'buttonNameIncreaseIndent',\n    unlocalizedText: 'Increase indent',\n    iconName: 'IncreaseIndentLegacy',\n    onClick: editor => {\n        setIndentation(editor, Indentation.Increase);\n    },\n};\n","import RibbonButton from '../../type/RibbonButton';\nimport { createElement } from 'roosterjs-editor-dom';\nimport { CreateElementData } from 'roosterjs-editor-types';\nimport { insertImage as insertImageApi } from 'roosterjs-editor-api';\n\nconst FileInput: CreateElementData = {\n    tag: 'input',\n    attributes: {\n        type: 'file',\n        accept: 'image/*',\n        display: 'none',\n    },\n};\n\n/**\n * Key of localized strings of Insert image button\n */\nexport type InsertImageButtonStringKey = 'buttonNameInsertImage';\n\n/**\n * \"Insert image\" button on the format ribbon\n */\nexport const insertImage: RibbonButton<InsertImageButtonStringKey> = {\n    key: 'buttonNameInsertImage',\n    unlocalizedText: 'Insert image',\n    iconName: 'Photo2',\n    onClick: editor => {\n        const document = editor.getDocument();\n        const fileInput = createElement(FileInput, document) as HTMLInputElement;\n        document.body.appendChild(fileInput);\n\n        fileInput.addEventListener('change', () => {\n            for (let i = 0; i < fileInput.files.length; i++) {\n                insertImageApi(editor, fileInput.files[i]);\n            }\n        });\n\n        try {\n            fileInput.click();\n        } finally {\n            document.body.removeChild(fileInput);\n        }\n    },\n};\n","import * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport getLocalizedString from '../../../common/utils/getLocalizedString';\nimport RibbonButton from '../../type/RibbonButton';\nimport { createLink } from 'roosterjs-editor-api';\nimport { DefaultButton, PrimaryButton } from '@fluentui/react/lib/Button';\nimport { Dialog, DialogFooter, DialogType } from '@fluentui/react/lib/Dialog';\nimport { IEditor, QueryScope } from 'roosterjs-editor-types';\nimport { mergeStyleSets } from '@fluentui/react/lib/Styling';\nimport { WindowProvider } from '@fluentui/react/lib/WindowProvider';\nimport {\n    CancelButtonStringKey,\n    LocalizedStrings,\n    OkButtonStringKey,\n} from '../../../common/type/LocalizedStrings';\n\n/**\n * Key of localized strings of Insert link button\n */\nexport type InsertLinkButtonStringKey =\n    | 'buttonNameInsertLink'\n    | 'insertLinkTitle'\n    | OkButtonStringKey\n    | CancelButtonStringKey;\n\n/**\n * \"Insert link\" button on the format ribbon\n */\nexport const insertLink: RibbonButton<InsertLinkButtonStringKey> = {\n    key: 'buttonNameInsertLink',\n    unlocalizedText: 'Insert link',\n    iconName: 'Link',\n    onClick: (editor, _, strings) => {\n        const doc = editor.getDocument();\n        let div = doc.createElement('div');\n        doc.body.appendChild(div);\n        const onDismiss = () => {\n            ReactDOM.unmountComponentAtNode(div);\n            doc.body.removeChild(div);\n            div = null;\n        };\n\n        const existingLink = editor.queryElements<HTMLAnchorElement>(\n            'a[href]',\n            QueryScope.OnSelection\n        )[0];\n        const url = existingLink?.href || '';\n        const displayText =\n            existingLink?.textContent || editor.getSelectionRange()?.toString() || '';\n        ReactDOM.render(\n            <InsertLinkDialog\n                editor={editor}\n                onDismiss={onDismiss}\n                initUrl={url}\n                initDisplayText={displayText}\n                strings={strings}\n            />,\n            div\n        );\n    },\n};\n\nconst classNames = mergeStyleSets({\n    linkInput: {\n        width: '100%',\n        minWidth: '250px',\n        height: '32px',\n        margin: '5px 0',\n        border: '1px solid black',\n        borderRadius: '2px',\n        padding: '0 0 0 5px',\n    },\n});\n\nfunction InsertLinkDialog(props: {\n    editor: IEditor;\n    initDisplayText: string;\n    initUrl: string;\n    onDismiss: (url?: string, displayText?: string) => void;\n    strings: LocalizedStrings<InsertLinkButtonStringKey>;\n}) {\n    const { editor, onDismiss, initUrl, initDisplayText, strings } = props;\n    const [url, setUrl] = React.useState(initUrl);\n    const [displayText, setDisplayText] = React.useState(initDisplayText);\n    const [isChanged, setIsChanged] = React.useState(false);\n    const urlInput = React.useRef<HTMLInputElement>();\n    const displayTextInput = React.useRef<HTMLInputElement>();\n    const dialogContentProps = {\n        type: DialogType.normal,\n        title: getLocalizedString(strings, 'insertLinkTitle', 'Insert link'),\n    };\n\n    const onOk = React.useCallback(() => {\n        onDismiss();\n        editor.focus();\n\n        if (isChanged && url && displayText) {\n            createLink(editor, url, url, displayText);\n        }\n    }, [onDismiss, url, displayText, isChanged]);\n\n    const onCancel = React.useCallback(() => {\n        onDismiss();\n    }, [onDismiss]);\n\n    const onDisplayTextChanged = React.useCallback(() => {\n        setDisplayText(displayTextInput.current.value);\n        setIsChanged(true);\n    }, [displayTextInput, setIsChanged]);\n\n    const onUrlChanged = React.useCallback(() => {\n        if (url == displayText) {\n            setDisplayText(urlInput.current.value);\n        }\n        setUrl(urlInput.current.value);\n        setIsChanged(true);\n    }, [setUrl, url, displayText, setDisplayText, setIsChanged]);\n\n    return (\n        <WindowProvider window={editor.getDocument().defaultView}>\n            <Dialog dialogContentProps={dialogContentProps} hidden={false} onDismiss={onCancel}>\n                <div>\n                    <div>\n                        <label htmlFor=\"linkInput\">Web address (URL)</label>\n                        <input\n                            id=\"linkInput\"\n                            ref={urlInput}\n                            role=\"textbox\"\n                            type=\"text\"\n                            className={classNames.linkInput}\n                            value={url}\n                            onChange={onUrlChanged}\n                            autoFocus={true}\n                        />\n                    </div>\n                    <div>\n                        <label htmlFor=\"displayTextInput\">Display as</label>\n                        <input\n                            id=\"displayTextInput\"\n                            ref={displayTextInput}\n                            role=\"textbox\"\n                            type=\"text\"\n                            className={classNames.linkInput}\n                            value={displayText}\n                            onChange={onDisplayTextChanged}\n                        />\n                    </div>\n                </div>\n                <DialogFooter>\n                    <PrimaryButton\n                        text={getLocalizedString(strings, 'buttonNameOK', 'OK')}\n                        onClick={onOk}\n                    />\n                    <DefaultButton\n                        text={getLocalizedString(strings, 'buttonNameCancel', 'Cancel')}\n                        onClick={onCancel}\n                    />\n                </DialogFooter>\n            </Dialog>\n        </WindowProvider>\n    );\n}\n","import * as React from 'react';\nimport RibbonButton from '../../type/RibbonButton';\nimport { FocusZone, FocusZoneDirection } from '@fluentui/react/lib/FocusZone';\nimport { IContextualMenuItem } from '@fluentui/react/lib/ContextualMenu';\nimport { insertTable as insertTableApi } from 'roosterjs-editor-api';\nimport { mergeStyleSets } from '@fluentui/react/lib/Styling';\nimport { safeInstanceOf } from 'roosterjs-editor-dom';\n\nconst MaxRows = 10;\nconst MaxCols = 10;\nconst classNames = mergeStyleSets({\n    tableButton: {\n        width: '15px',\n        height: '15px',\n        margin: '1px 1px 0 0',\n        border: 'solid 1px #a19f9d',\n        display: 'inline-block',\n        cursor: 'pointer',\n        backgroundColor: 'transparent',\n    },\n    hovered: {\n        border: 'solid 1px #DB626C',\n    },\n    tablePane: {\n        width: '160px',\n        minWidth: 'auto',\n        padding: '4px',\n    },\n    tablePaneInner: {\n        lineHeight: '12px',\n    },\n    title: {\n        margin: '5px 0',\n    },\n});\n\n/**\n * Key of localized strings of Insert table button\n */\nexport type InsertTableButtonStringKey = 'buttonNameInsertTable' | 'insertTablePane';\n\n/**\n * \"Insert table\" button on the format ribbon\n */\nexport const insertTable: RibbonButton<InsertTableButtonStringKey> = {\n    key: 'buttonNameInsertTable',\n    unlocalizedText: 'Insert table',\n    iconName: 'Table',\n    dropDownItems: {\n        insertTablePane: '{0} x {1} table',\n    },\n    onClick: (editor, key) => {\n        const { row, col } = parseKey(key);\n        insertTableApi(editor, col, row);\n    },\n    dropDownItemRender: (item, onClick) => {\n        return <InsertTablePane item={item} onClick={onClick} />;\n    },\n    dropDownClassName: classNames.tablePane,\n};\n\nfunction InsertTablePane(props: {\n    item: IContextualMenuItem;\n    onClick: (\n        e: React.MouseEvent<Element> | React.KeyboardEvent<Element>,\n        item: IContextualMenuItem\n    ) => void;\n}) {\n    const { item, onClick } = props;\n    const [col, setCol] = React.useState(1);\n    const [row, setRow] = React.useState(1);\n\n    const updateSize = React.useCallback(\n        (t: EventTarget) => {\n            if (safeInstanceOf(t, 'HTMLElement')) {\n                const col = parseInt(t.dataset.col);\n                const row = parseInt(t.dataset.row);\n\n                if (col > 0 && col <= MaxCols && row > 0 && row <= MaxRows) {\n                    setCol(col);\n                    setRow(row);\n                }\n            }\n        },\n        [setCol, setRow]\n    );\n\n    const onMouseEnter = React.useCallback(\n        (e: React.MouseEvent<HTMLButtonElement>) => {\n            updateSize(e.target);\n        },\n        [updateSize]\n    );\n\n    const onClickButton = React.useCallback(\n        (e: React.MouseEvent<HTMLButtonElement>) => {\n            onClick(e, {\n                ...item,\n                key: createKey(row, col),\n            });\n        },\n        [row, col, onClick]\n    );\n\n    const ariaLabels = React.useMemo<string[][]>(() => {\n        const result: string[][] = [];\n        for (let i = 1; i <= MaxCols; i++) {\n            let col: string[] = [];\n            for (let j = 1; j <= MaxRows; j++) {\n                col[j] = formatText(item.text, i, j);\n            }\n            result[i] = col;\n        }\n        return result;\n    }, [item.text]);\n\n    const items = React.useMemo(() => {\n        const items: JSX.Element[] = [];\n\n        for (let i = 1; i <= MaxRows; i++) {\n            for (let j = 1; j <= MaxCols; j++) {\n                const key = `cell_${i}_${j}`;\n                const isSelected = j <= col && i <= row;\n                items.push(\n                    <button\n                        className={\n                            classNames.tableButton + ' ' + (isSelected ? classNames.hovered : '')\n                        }\n                        onClick={onClickButton}\n                        key={key}\n                        id={key}\n                        data-col={j}\n                        data-row={i}\n                        data-is-focusable={true}\n                        onMouseEnter={onMouseEnter}\n                        aria-label={ariaLabels[i][j]}\n                    />\n                );\n            }\n        }\n\n        return items;\n    }, [col, row]);\n\n    const text = formatText(item.text, row, col);\n\n    return (\n        <div className={classNames.tablePaneInner}>\n            <div className={classNames.title}>{text}</div>\n            <FocusZone\n                defaultActiveElement=\"cell_1_1\"\n                direction={FocusZoneDirection.bidirectional}\n                onActiveElementChanged={updateSize}>\n                {items}\n            </FocusZone>\n        </div>\n    );\n}\n\nfunction formatText(text: string, row: number, col: number) {\n    return text.replace('{0}', col.toString()).replace('{1}', row.toString());\n}\n\nfunction createKey(row: number, col: number) {\n    return `${row},${col}`;\n}\n\nfunction parseKey(key: string): { row: number; col: number } {\n    const [row, col] = key.split(',');\n    return {\n        row: parseInt(row),\n        col: parseInt(col),\n    };\n}\n","import RibbonButton from '../../type/RibbonButton';\nimport { toggleItalic } from 'roosterjs-editor-api';\n\n/**\n * Key of localized strings of Italic button\n */\nexport type ItalicButtonStringKey = 'buttonNameItalic';\n\n/**\n * \"Italic\" button on the format ribbon\n */\nexport const italic: RibbonButton<ItalicButtonStringKey> = {\n    key: 'buttonNameItalic',\n    unlocalizedText: 'Italic',\n    iconName: 'Italic',\n    checked: formatState => formatState.isItalic,\n    onClick: editor => {\n        toggleItalic(editor);\n        return true;\n    },\n};\n","import RibbonButton from '../../type/RibbonButton';\nimport { Direction } from 'roosterjs-editor-types';\nimport { setDirection } from 'roosterjs-editor-api';\n\n/**\n * Key of localized strings of Left to right button\n */\nexport type LtrButtonStringKey = 'buttonNameLtr';\n\n/**\n * \"Left to right\" button on the format ribbon\n */\nexport const ltr: RibbonButton<LtrButtonStringKey> = {\n    key: 'buttonNameLtr',\n    unlocalizedText: 'Left to right',\n    iconName: 'BidiLtr',\n    onClick: editor => {\n        setDirection(editor, Direction.LeftToRight);\n    },\n};\n","import RibbonButton from '../../type/RibbonButton';\nimport { toggleNumbering } from 'roosterjs-editor-api';\n\n/**\n * Key of localized strings of Numbered list button\n */\nexport type NumberedListButtonStringKey = 'buttonNameNumberedList';\n\n/**\n * \"Numbered list\" button on the format ribbon\n */\nexport const numberedList: RibbonButton<NumberedListButtonStringKey> = {\n    key: 'buttonNameNumberedList',\n    unlocalizedText: 'Numbered list',\n    iconName: 'NumberedList',\n    checked: formatState => formatState.isNumbering,\n    onClick: editor => {\n        toggleNumbering(editor);\n        return true;\n    },\n};\n","import RibbonButton from '../../type/RibbonButton';\nimport { toggleBlockQuote } from 'roosterjs-editor-api';\n\n/**\n * Key of localized strings of Quote button\n */\nexport type QuoteButtonStringKey = 'buttonNameQuote';\n\n/**\n * \"Quote\" button on the format ribbon\n */\nexport const quote: RibbonButton<QuoteButtonStringKey> = {\n    key: 'buttonNameQuote',\n    unlocalizedText: 'Quote',\n    iconName: 'RightDoubleQuote',\n    checked: formatState => formatState.isBlockQuote,\n    onClick: editor => {\n        toggleBlockQuote(editor);\n        return true;\n    },\n};\n","import RibbonButton from '../../type/RibbonButton';\n/**\n * Key of localized strings of Redo button\n */\nexport type RedoButtonStringKey = 'buttonNameRedo';\n\n/**\n * \"Redo\" button on the format ribbon\n */\nexport const redo: RibbonButton<RedoButtonStringKey> = {\n    key: 'buttonNameRedo',\n    unlocalizedText: 'Redo',\n    iconName: 'Redo',\n    disabled: formatState => !formatState.canRedo,\n    onClick: editor => {\n        editor.redo();\n        return true;\n    },\n};\n","import RibbonButton from '../../type/RibbonButton';\nimport { removeLink as removeLinkApi } from 'roosterjs-editor-api';\n\n/**\n * Key of localized strings of REmove link button\n */\nexport type RemoveLinkButtonStringKey = 'buttonNameRemoveLink';\n\n/**\n * \"Remove link\" button on the format ribbon\n */\nexport const removeLink: RibbonButton<RemoveLinkButtonStringKey> = {\n    key: 'buttonNameRemoveLink',\n    unlocalizedText: 'Remove link',\n    iconName: 'RemoveLink',\n    disabled: formatState => !formatState.canUnlink,\n    onClick: editor => {\n        removeLinkApi(editor);\n    },\n};\n","import RibbonButton from '../../type/RibbonButton';\nimport { Direction } from 'roosterjs-editor-types';\nimport { setDirection } from 'roosterjs-editor-api';\n\n/**\n * Key of localized strings of Right to left button\n */\nexport type RtlButtonStringKey = 'buttonNameRtl';\n\n/**\n * \"Right to left\" button on the format ribbon\n */\nexport const rtl: RibbonButton<RtlButtonStringKey> = {\n    key: 'buttonNameRtl',\n    unlocalizedText: 'Right to left',\n    iconName: 'BidiRtl',\n    onClick: editor => {\n        setDirection(editor, Direction.RightToLeft);\n    },\n};\n","import RibbonButton from '../../type/RibbonButton';\nimport { toggleStrikethrough } from 'roosterjs-editor-api';\n\n/**\n * Key of localized strings of Strikethrough button\n */\nexport type StrikethroughButtonStringKey = 'buttonNameStrikethrough';\n\n/**\n * \"Strikethrough\" button on the format ribbon\n */\nexport const strikethrough: RibbonButton<StrikethroughButtonStringKey> = {\n    key: 'buttonNameStrikethrough',\n    unlocalizedText: 'Strikethrough',\n    iconName: 'Strikethrough',\n    checked: formatState => formatState.isStrikeThrough,\n    onClick: editor => {\n        toggleStrikethrough(editor);\n        return true;\n    },\n};\n","import RibbonButton from '../../type/RibbonButton';\nimport { toggleSubscript } from 'roosterjs-editor-api';\n\n/**\n * Key of localized strings of Subscript button\n */\nexport type SubscriptButtonStringKey = 'buttonNameSubscript';\n\n/**\n * \"Subscript\" button on the format ribbon\n */\nexport const subscript: RibbonButton<SubscriptButtonStringKey> = {\n    key: 'buttonNameSubscript',\n    unlocalizedText: 'Subscript',\n    iconName: 'Subscript',\n    checked: formatState => formatState.isSubscript,\n    onClick: editor => {\n        toggleSubscript(editor);\n        return true;\n    },\n};\n","import RibbonButton from '../../type/RibbonButton';\nimport { toggleSuperscript } from 'roosterjs-editor-api';\n\n/**\n * Key of localized strings of Superscript button\n */\nexport type SuperscriptButtonStringKey = 'buttonNameSuperscript';\n\n/**\n * \"Superscript\" button on the format ribbon\n */\nexport const superscript: RibbonButton<SuperscriptButtonStringKey> = {\n    key: 'buttonNameSuperscript',\n    unlocalizedText: 'Superscript',\n    iconName: 'Superscript',\n    checked: formatState => formatState.isSuperscript,\n    onClick: editor => {\n        toggleSuperscript(editor);\n        return true;\n    },\n};\n","import RibbonButton from '../../type/RibbonButton';\nimport { colorPicker, TextColorKeys, TextColors } from './colorPicker';\nimport { setTextColor } from 'roosterjs-editor-api';\n\nconst TextColorDropDownItems: Record<TextColorKeys, string> = {\n    textColorLightBlue: 'Light blue',\n    textColorLightGreen: 'Light green',\n    textColorLightYellow: 'Light yellow',\n    textColorLightOrange: 'Light orange',\n    textColorLightRed: 'Light red',\n    textColorLightPurple: 'Light purple',\n    textColorBlue: 'Blue',\n    textColorGreen: 'Green',\n    textColorYellow: 'Yellow',\n    textColorOrange: 'Orange',\n    textColorRed: 'Red',\n    textColorPurple: 'Purple',\n    textColorDarkBlue: 'Dark blue',\n    textColorDarkGreen: 'Dark green',\n    textColorDarkYellow: 'Dark yellow',\n    textColorDarkOrange: 'Dark orange',\n    textColorDarkRed: 'Dark red',\n    textColorDarkPurple: 'Dark purple',\n    textColorDarkerBlue: 'Darker blue',\n    textColorDarkerGreen: 'Darker green',\n    textColorDarkerYellow: 'Darker yellow',\n    textColorDarkerOrange: 'Darker orange',\n    textColorDarkerRed: 'Darker red',\n    textColorDarkerPurple: 'Darker purple',\n    textColorWhite: 'White',\n    textColorLightGray: 'Light gray',\n    textColorGray: 'Gray',\n    textColorDarkGray: 'Dark gray',\n    textColorDarkerGray: 'Darker gray',\n    textColorBlack: 'Black',\n};\n/**\n * Key of localized strings of Text color button\n */\nexport type TextColorButtonStringKey = 'buttonNameTextColor' | TextColorKeys;\n\n/**\n * \"Text color\" button on the format ribbon\n */\nexport const textColor: RibbonButton<TextColorButtonStringKey> = {\n    ...colorPicker,\n    key: 'buttonNameTextColor',\n    unlocalizedText: 'Text color',\n    iconName: 'FontColor',\n    dropDownItems: TextColorDropDownItems,\n    onClick: (editor, key: TextColorKeys) => {\n        setTextColor(editor, TextColors[key]);\n    },\n};\n","import RibbonButton from '../../type/RibbonButton';\nimport { toggleUnderline } from 'roosterjs-editor-api';\n\n/**\n * Key of localized strings of Underline button\n */\nexport type UnderlineButtonStringKey = 'buttonNameUnderline';\n\n/**\n * \"Underline\" button on the format ribbon\n */\nexport const underline: RibbonButton<UnderlineButtonStringKey> = {\n    key: 'buttonNameUnderline',\n    unlocalizedText: 'Underline',\n    iconName: 'Underline',\n    checked: formatState => formatState.isUnderline,\n    onClick: editor => {\n        toggleUnderline(editor);\n        return true;\n    },\n};\n","import RibbonButton from '../../type/RibbonButton';\n/**\n * Key of localized strings of Undo button\n */\nexport type UndoButtonStringKey = 'buttonNameUndo';\n\n/**\n * \"Undo\" button on the format ribbon\n */\nexport const undo: RibbonButton<UndoButtonStringKey> = {\n    key: 'buttonNameUndo',\n    unlocalizedText: 'Undo',\n    iconName: 'undo',\n    disabled: formatState => !formatState.canUndo,\n    onClick: editor => {\n        editor.undo();\n        return true;\n    },\n};\n","export * from './common/index';\nexport * from './rooster/index';\nexport * from './ribbon/index';\n","export {\n    LocalizedStrings,\n    OkButtonStringKey,\n    CancelButtonStringKey,\n} from './type/LocalizedStrings';\nexport { default as getLocalizedString } from './utils/getLocalizedString';\n","export { default as RoosterProps } from './type/RoosterProps';\nexport { UpdateMode } from './type/UpdateMode';\nexport { default as UpdateContentPlugin } from './type/UpdateContentPlugin';\n\nexport { default as Rooster } from './component/Rooster';\n\nexport { default as createUpdateContentPlugin } from './plugin/createUpdateContentPlugin';\n","import * as React from 'react';\nimport RoosterProps from '../type/RoosterProps';\nimport { Editor } from 'roosterjs-editor-core';\nimport { EditorOptions, IEditor } from 'roosterjs-editor-types';\n\n/**\n * Main component of react wrapper for roosterjs\n * @param props Properties of this component\n * @returns The react component\n */\nexport default function Rooster(props: RoosterProps) {\n    const editorDiv = React.useRef<HTMLDivElement>(null);\n    const editor = React.useRef<IEditor>(null);\n\n    const { domAttributes, editorOptions, focusOnInit, editorCreator } = props;\n    const { zoomScale, inDarkMode } = editorOptions || {};\n\n    React.useEffect(() => {\n        editor.current = (editorCreator || defaultEditorCreator)(editorDiv.current, editorOptions);\n\n        if (focusOnInit) {\n            editor.current.focus();\n        }\n\n        return () => {\n            if (editor.current) {\n                editor.current.dispose();\n                editor.current = null;\n            }\n        };\n    }, [editorCreator]);\n\n    React.useEffect(() => {\n        editor.current.setDarkModeState(!!inDarkMode);\n    }, [inDarkMode]);\n\n    React.useEffect(() => {\n        editor.current.setZoomScale(zoomScale);\n    }, [zoomScale]);\n\n    return <div ref={editorDiv} tabIndex={0} {...(domAttributes || {})}></div>;\n}\n\nfunction defaultEditorCreator(div: HTMLDivElement, options: EditorOptions) {\n    return new Editor(div, options);\n}\n","import UpdateContentPlugin from '../type/UpdateContentPlugin';\nimport { IEditor, PluginEvent, PluginEventType } from 'roosterjs-editor-types';\nimport { UpdateMode } from '../type/UpdateMode';\n\n/**\n * A plugin to help get HTML content from editor\n */\nclass UpdateContentPluginImpl implements UpdateContentPlugin {\n    private editor: IEditor;\n    private disposer: () => void;\n\n    /**\n     * Create a new instance of UpdateContentPlugin class\n     * @param updateMode Mode of automatic update. It can be a combination of multiple UpdateMode values\n     * @param onUpdate A callback to be invoked when update happens\n     */\n    constructor(\n        private updateMode: UpdateMode,\n        private onUpdate: (html: string, mode: UpdateMode) => void\n    ) {}\n\n    /**\n     * Get a friendly name of this plugin\n     */\n    getName() {\n        return 'UpdateContent';\n    }\n\n    /**\n     * Initialize this plugin\n     * @param editor The editor instance\n     */\n    initialize(editor: IEditor) {\n        this.editor = editor;\n        this.disposer = this.editor.addDomEventHandler('blur', this.onBlur);\n    }\n\n    /**\n     * Dispose this plugin\n     */\n    dispose() {\n        this.disposer?.();\n        this.disposer = null;\n        this.editor = null;\n    }\n\n    /**\n     * Handle events triggered from editor\n     * @param event PluginEvent object\n     */\n    onPluginEvent(event: PluginEvent) {\n        switch (event.eventType) {\n            case PluginEventType.EditorReady:\n                this.update(UpdateMode.OnInitialize);\n                break;\n\n            case PluginEventType.BeforeDispose:\n                this.update(UpdateMode.OnDispose);\n                break;\n\n            case PluginEventType.ContentChanged:\n                this.update(UpdateMode.OnContentChangedEvent);\n                break;\n\n            case PluginEventType.Input:\n                this.update(UpdateMode.OnUserInput);\n                break;\n        }\n    }\n\n    /**\n     * Trigger a force update. onUpdate callback will be invoked with HTML content of editor\n     */\n    forceUpdate() {\n        this.update(UpdateMode.Force);\n    }\n\n    private onBlur = () => {\n        this.update(UpdateMode.OnBlur);\n    };\n\n    private update(mode: UpdateMode) {\n        if (\n            this.editor &&\n            (mode == UpdateMode.Force || ((this.updateMode || 0) & mode) == mode) &&\n            this.onUpdate\n        ) {\n            const content = this.editor.getContent();\n            this.onUpdate(content, mode);\n        }\n    }\n}\n\n/**\n * Create a new instance of UpdateContentPlugin class\n * @param updateMode Mode of automatic update. It can be a combination of multiple UpdateMode values\n * @param onUpdate A callback to be invoked when update happens\n */\nexport default function createUpdateContentPlugin(\n    updateMode: UpdateMode,\n    onUpdate: (html: string, mode: UpdateMode) => void\n): UpdateContentPlugin {\n    return new UpdateContentPluginImpl(updateMode, onUpdate);\n}\n","export { default as RibbonPlugin } from './type/RibbonPlugin';\nexport { default as RibbonButton } from './type/RibbonButton';\nexport { default as RibbonProps } from './type/RibbonProps';\n\nexport { default as Ribbon } from './component/Ribbon';\nexport { default as getAllButtons, AllButtonsStringKey } from './component/getAllButtons';\nexport { bold, BoldButtonStringKey } from './component/buttons/bold';\nexport { italic, ItalicButtonStringKey } from './component/buttons/italic';\nexport { underline, UnderlineButtonStringKey } from './component/buttons/underline';\nexport { font, FontButtonStringKey } from './component/buttons/font';\nexport { fontSize, FontSizeButtonStringKey } from './component/buttons/fontSize';\nexport {\n    increaseFontSize,\n    IncreaseFontSizeButtonStringKey,\n} from './component/buttons/increaseFontSize';\nexport {\n    decreaseFontSize,\n    DecreaseFontSizeButtonStringKey,\n} from './component/buttons/decreaseFontSize';\nexport { textColor, TextColorButtonStringKey } from './component/buttons/textColor';\nexport {\n    backgroundColor,\n    BackgroundColorButtonStringKey,\n} from './component/buttons/backgroundColor';\nexport { bulletedList, BulletedListButtonStringKey } from './component/buttons/bulletedList';\nexport { numberedList, NumberedListButtonStringKey } from './component/buttons/numberedList';\nexport { decreaseIndent, DecreaseIndentButtonStringKey } from './component/buttons/decreaseIndent';\nexport { increaseIndent, IncreaseIndentButtonStringKey } from './component/buttons/increaseIndent';\nexport { quote, QuoteButtonStringKey } from './component/buttons/quote';\nexport { alignLeft, AlignLeftButtonStringKey } from './component/buttons/alignLeft';\nexport { alignCenter, AlignCenterButtonStringKey } from './component/buttons/alignCenter';\nexport { alignRight, AlignRightButtonStringKey } from './component/buttons/alignRight';\nexport { insertLink, InsertLinkButtonStringKey } from './component/buttons/insertLink';\nexport { removeLink, RemoveLinkButtonStringKey } from './component/buttons/removeLink';\nexport { insertTable, InsertTableButtonStringKey } from './component/buttons/insertTable';\nexport { insertImage, InsertImageButtonStringKey } from './component/buttons/insertImage';\nexport { superscript, SuperscriptButtonStringKey } from './component/buttons/superscript';\nexport { subscript, SubscriptButtonStringKey } from './component/buttons/subscript';\nexport { strikethrough, StrikethroughButtonStringKey } from './component/buttons/strikethrough';\nexport { header, HeaderButtonStringKey } from './component/buttons/header';\nexport { code, CodeButtonStringKey } from './component/buttons/code';\nexport { ltr, LtrButtonStringKey } from './component/buttons/ltr';\nexport { rtl, RtlButtonStringKey } from './component/buttons/rtl';\nexport { undo, UndoButtonStringKey } from './component/buttons/undo';\nexport { redo, RedoButtonStringKey } from './component/buttons/redo';\nexport { clearFormat, ClearFormatButtonStringKey } from './component/buttons/clearFormat';\nexport { TextColorKeys, BackgroundColorKeys } from './component/buttons/colorPicker';\n\nexport { default as createRibbonPlugin } from './plugin/createRibbonPlugin';\n","import * as React from 'react';\nimport getLocalizedString from '../../common/utils/getLocalizedString';\nimport RibbonButton from '../type/RibbonButton';\nimport RibbonProps from '../type/RibbonProps';\nimport { CommandBar, ICommandBarItemProps } from '@fluentui/react/lib/CommandBar';\nimport { FocusZoneDirection } from '@fluentui/react/lib/FocusZone';\nimport { FormatState } from 'roosterjs-editor-types';\nimport { IContextualMenuItem } from '@fluentui/react/lib/ContextualMenu';\nimport { mergeStyles } from '@fluentui/react/lib/Styling';\n\nconst ribbonClassName = mergeStyles({\n    '& .ms-CommandBar': {\n        padding: '0px',\n    },\n});\n\n/**\n * The format ribbon component of roosterjs-react\n * @param props Properties of format ribbon component\n * @returns The format ribbon component\n */\nexport default function Ribbon<T extends string>(props: RibbonProps<T>) {\n    const { plugin, buttons, strings, dir } = props;\n    const [formatState, setFormatState] = React.useState<FormatState>(null);\n    const isRtl = dir == 'rtl';\n\n    const onClick = React.useCallback(\n        (_, item: IContextualMenuItem) => {\n            plugin?.onButtonClick(item.data as RibbonButton<T>, item.key, strings);\n        },\n        [plugin, strings]\n    );\n\n    const onHover = React.useCallback(\n        (button: RibbonButton<T>, key: string) => {\n            plugin.startLivePreview(button, key, strings);\n        },\n        [plugin, strings]\n    );\n\n    const onDismiss = React.useCallback(() => {\n        plugin.stopLivePreview();\n    }, [plugin]);\n\n    const commandBarItems = React.useMemo((): ICommandBarItemProps[] => {\n        return buttons.map(\n            (button): ICommandBarItemProps => {\n                const selectedItem = formatState && button.selectedItem?.(formatState);\n                const dropDownItems = button.dropDownItems;\n\n                const result: ICommandBarItemProps = {\n                    key: button.key,\n                    data: button,\n                    iconProps: {\n                        iconName:\n                            isRtl && button.rtlIconName ? button.rtlIconName : button.iconName,\n                    },\n                    iconOnly: true,\n                    text: getLocalizedString(strings, button.key, button.unlocalizedText),\n                    canCheck: true,\n                    checked: (formatState && button.checked?.(formatState)) || false,\n                    disabled: (formatState && button.disabled?.(formatState)) || false,\n                };\n\n                if (dropDownItems) {\n                    result.subMenuProps = {\n                        className: button.dropDownClassName,\n                        shouldFocusOnMount: true,\n                        focusZoneProps: { direction: FocusZoneDirection.bidirectional },\n                        onDismiss: onDismiss,\n                        onItemClick: onClick,\n                        onRenderContextualMenuItem: button.allowLivePreview\n                            ? (props, defaultRenderer) => (\n                                  <div onMouseOver={e => onHover(button, props.key)}>\n                                      {defaultRenderer(props)}\n                                  </div>\n                              )\n                            : undefined,\n                        items: Object.keys(button.dropDownItems).map(key => ({\n                            key: key,\n                            text: getLocalizedString(strings, key, dropDownItems[key]),\n                            data: button,\n                            canCheck: !!button.selectedItem,\n                            checked: selectedItem == key || false,\n                            className: button.itemClassName,\n                            onRender: button.dropDownItemRender\n                                ? item => button.dropDownItemRender(item, onClick)\n                                : undefined,\n                        })),\n                    };\n                } else {\n                    result.onClick = onClick;\n                }\n\n                return result;\n            }\n        );\n    }, [buttons, formatState, isRtl, strings, onClick, onDismiss, onHover]);\n\n    React.useEffect(() => {\n        const disposer = plugin?.registerFormatChangedCallback(setFormatState);\n\n        return () => {\n            disposer?.();\n        };\n    }, [plugin]);\n\n    return (\n        <CommandBar\n            items={commandBarItems}\n            {...props}\n            className={ribbonClassName + ' ' + (props?.className || '')}\n        />\n    );\n}\n","import RibbonButton from '../type/RibbonButton';\nimport { alignCenter, AlignCenterButtonStringKey } from './buttons/alignCenter';\nimport { alignLeft, AlignLeftButtonStringKey } from './buttons/alignLeft';\nimport { alignRight, AlignRightButtonStringKey } from './buttons/alignRight';\nimport { backgroundColor, BackgroundColorButtonStringKey } from './buttons/backgroundColor';\nimport { bold, BoldButtonStringKey } from './buttons/bold';\nimport { bulletedList, BulletedListButtonStringKey } from './buttons/bulletedList';\nimport { clearFormat, ClearFormatButtonStringKey } from './buttons/clearFormat';\nimport { code, CodeButtonStringKey } from './buttons/code';\nimport { decreaseFontSize, DecreaseFontSizeButtonStringKey } from './buttons/decreaseFontSize';\nimport { decreaseIndent, DecreaseIndentButtonStringKey } from './buttons/decreaseIndent';\nimport { font, FontButtonStringKey } from './buttons/font';\nimport { fontSize, FontSizeButtonStringKey } from './buttons/fontSize';\nimport { header, HeaderButtonStringKey } from './buttons/header';\nimport { increaseFontSize, IncreaseFontSizeButtonStringKey } from './buttons/increaseFontSize';\nimport { increaseIndent, IncreaseIndentButtonStringKey } from './buttons/increaseIndent';\nimport { insertImage, InsertImageButtonStringKey } from './buttons/insertImage';\nimport { insertLink, InsertLinkButtonStringKey } from './buttons/insertLink';\nimport { insertTable, InsertTableButtonStringKey } from './buttons/insertTable';\nimport { italic, ItalicButtonStringKey } from './buttons/italic';\nimport { ltr, LtrButtonStringKey } from './buttons/ltr';\nimport { numberedList, NumberedListButtonStringKey } from './buttons/numberedList';\nimport { quote, QuoteButtonStringKey } from './buttons/quote';\nimport { redo, RedoButtonStringKey } from './buttons/redo';\nimport { removeLink, RemoveLinkButtonStringKey } from './buttons/removeLink';\nimport { rtl, RtlButtonStringKey } from './buttons/rtl';\nimport { strikethrough, StrikethroughButtonStringKey } from './buttons/strikethrough';\nimport { subscript, SubscriptButtonStringKey } from './buttons/subscript';\nimport { superscript, SuperscriptButtonStringKey } from './buttons/superscript';\nimport { textColor, TextColorButtonStringKey } from './buttons/textColor';\nimport { underline, UnderlineButtonStringKey } from './buttons/underline';\nimport { undo, UndoButtonStringKey } from './buttons/undo';\n\n/**\n * A public type for localized string keys of all buttons\n */\nexport type AllButtonsStringKey =\n    | AlignLeftButtonStringKey\n    | AlignCenterButtonStringKey\n    | AlignRightButtonStringKey\n    | BackgroundColorButtonStringKey\n    | BoldButtonStringKey\n    | BulletedListButtonStringKey\n    | ClearFormatButtonStringKey\n    | CodeButtonStringKey\n    | DecreaseFontSizeButtonStringKey\n    | DecreaseIndentButtonStringKey\n    | FontButtonStringKey\n    | FontSizeButtonStringKey\n    | HeaderButtonStringKey\n    | IncreaseFontSizeButtonStringKey\n    | IncreaseIndentButtonStringKey\n    | InsertImageButtonStringKey\n    | InsertLinkButtonStringKey\n    | InsertTableButtonStringKey\n    | ItalicButtonStringKey\n    | LtrButtonStringKey\n    | NumberedListButtonStringKey\n    | QuoteButtonStringKey\n    | RedoButtonStringKey\n    | RemoveLinkButtonStringKey\n    | RtlButtonStringKey\n    | StrikethroughButtonStringKey\n    | SubscriptButtonStringKey\n    | SuperscriptButtonStringKey\n    | TextColorButtonStringKey\n    | UnderlineButtonStringKey\n    | UndoButtonStringKey;\n\n/**\n * A shortcut to get all format buttons provided by roosterjs-react\n * @returns An array of all buttons\n */\nexport default function getAllButtons(): RibbonButton<AllButtonsStringKey>[] {\n    return [\n        bold,\n        italic,\n        underline,\n        font,\n        fontSize,\n        increaseFontSize,\n        decreaseFontSize,\n        textColor,\n        backgroundColor,\n        bulletedList,\n        numberedList,\n        decreaseIndent,\n        increaseIndent,\n        quote,\n        alignLeft,\n        alignCenter,\n        alignRight,\n        insertLink,\n        removeLink,\n        insertTable,\n        insertImage,\n        superscript,\n        subscript,\n        strikethrough,\n        header,\n        code,\n        ltr,\n        rtl,\n        undo,\n        redo,\n        clearFormat,\n    ];\n}\n","module.exports = ReactDOM;","import RibbonButton from '../type/RibbonButton';\nimport RibbonPlugin from '../type/RibbonPlugin';\nimport { FormatState, IEditor, PluginEvent, PluginEventType } from 'roosterjs-editor-types';\nimport { getFormatState } from 'roosterjs-editor-api';\nimport { LocalizedStrings } from '../../common/type/LocalizedStrings';\n\n/**\n * A plugin to connect format ribbon component and the editor\n */\nclass RibbonPluginImpl implements RibbonPlugin {\n    private editor: IEditor;\n    private onFormatChanged: (formatState: FormatState) => void;\n    private timer = 0;\n    private formatState: FormatState;\n\n    /**\n     * Construct a new instance of RibbonPlugin object\n     * @param delayUpdateTime The time to wait before refresh the button when user do some editing operation in editor\n     */\n    constructor(private delayUpdateTime: number = 200) {}\n\n    /**\n     * Get a friendly name of this plugin\n     */\n    getName() {\n        return 'Ribbon';\n    }\n\n    /**\n     * Initialize this plugin\n     * @param editor The editor instance\n     */\n    initialize(editor: IEditor) {\n        this.editor = editor;\n    }\n\n    /**\n     * Dispose this plugin\n     */\n    dispose() {\n        this.editor = null;\n    }\n\n    /**\n     * Handle events triggered from editor\n     * @param event PluginEvent object\n     */\n    onPluginEvent(event: PluginEvent) {\n        switch (event.eventType) {\n            case PluginEventType.EditorReady:\n            case PluginEventType.ContentChanged:\n            case PluginEventType.ZoomChanged:\n                this.updateFormat();\n                break;\n\n            case PluginEventType.KeyDown:\n            case PluginEventType.MouseDown:\n                this.delayUpdate();\n                break;\n        }\n    }\n\n    /**\n     * Register a callback to be invoked when format state of editor is changed, returns a disposer function.\n     */\n    registerFormatChangedCallback(callback: (formatState: FormatState) => void) {\n        this.onFormatChanged = callback;\n\n        return () => {\n            this.onFormatChanged = null;\n        };\n    }\n\n    /**\n     * When user clicks on a button, call this method to let the plugin to handle this click event\n     * @param button The button that is clicked\n     * @param key Key of child menu item that is clicked if any\n     * @param strings The localized string map for this button\n     */\n    onButtonClick<T extends string>(button: RibbonButton<T>, key: T, strings: LocalizedStrings<T>) {\n        if (this.editor) {\n            this.editor.stopShadowEdit();\n\n            if (button.onClick(this.editor, key, strings)) {\n                this.updateFormat();\n            }\n        }\n    }\n\n    /**\n     * Enter live preview state (shadow edit) of editor if there is a non-collapsed selection\n     * @param button The button that triggered this action\n     * @param key Key of the hovered button sub item\n     * @param strings The localized string map for this button\n     */\n    startLivePreview<T extends string>(\n        button: RibbonButton<T>,\n        key: string,\n        strings: LocalizedStrings<T>\n    ) {\n        if (this.editor) {\n            const isInShadowEdit = this.editor.isInShadowEdit();\n\n            // If editor is already in shadow edit, no need to check again.\n            // And the check result may be incorrect because the content is changed from last shadow edit and the cached selection path won't apply\n            const range = !isInShadowEdit && this.editor.getSelectionRangeEx();\n\n            if (isInShadowEdit || (range && !range.areAllCollapsed)) {\n                this.editor.startShadowEdit();\n                button.onClick(this.editor, key, strings);\n            }\n        }\n    }\n\n    /**\n     * Leave live preview state (shadow edit) of editor\n     */\n    stopLivePreview() {\n        this.editor?.stopShadowEdit();\n    }\n\n    private delayUpdate() {\n        const window = this.editor.getDocument().defaultView;\n\n        if (this.timer) {\n            window.clearTimeout(this.timer);\n        }\n\n        this.timer = window.setTimeout(() => {\n            this.timer = 0;\n            this.updateFormat?.();\n        }, this.delayUpdateTime);\n    }\n\n    private updateFormat() {\n        if (this.editor && this.onFormatChanged) {\n            const newFormatState = getFormatState(this.editor);\n\n            if (\n                !this.formatState ||\n                Object.keys(newFormatState).some(\n                    (key: keyof FormatState) => newFormatState[key] != this.formatState[key]\n                )\n            ) {\n                this.formatState = newFormatState;\n                this.onFormatChanged(newFormatState);\n            }\n        }\n    }\n}\n\n/**\n * Create a new instance of RibbonPlugin object\n * @param delayUpdateTime The time to wait before refresh the button when user do some editing operation in editor\n */\nexport default function createRibbonPlugin(delayUpdateTime?: number): RibbonPlugin {\n    return new RibbonPluginImpl(delayUpdateTime);\n}\n"],"sourceRoot":""}