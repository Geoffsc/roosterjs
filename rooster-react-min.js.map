{"version":3,"sources":["webpack://roosterjsReact/webpack/bootstrap","webpack://roosterjsReact/external \"roosterjs\"","webpack://roosterjsReact/external \"React\"","webpack://roosterjsReact/./packages-ui/roosterjs-react/lib/components/Ribbon/buttons/bold.ts","webpack://roosterjsReact/./packages-ui/roosterjs-react/lib/components/Ribbon/buttons/italic.ts","webpack://roosterjsReact/./packages-ui/roosterjs-react/lib/components/Ribbon/buttons/underline.ts","webpack://roosterjsReact/./packages-ui/roosterjs-react/lib/index.ts","webpack://roosterjsReact/./packages-ui/roosterjs-react/lib/components/Rooster/index.ts","webpack://roosterjsReact/./packages-ui/roosterjs-react/lib/components/Rooster/Rooster.tsx","webpack://roosterjsReact/./packages-ui/roosterjs-react/lib/components/Ribbon/index.ts","webpack://roosterjsReact/./packages-ui/roosterjs-react/lib/components/Ribbon/Ribbon.tsx","webpack://roosterjsReact/external \"FluentUIReact\"","webpack://roosterjsReact/./packages-ui/roosterjs-react/lib/components/Ribbon/getAllButtons.ts","webpack://roosterjsReact/./packages-ui/roosterjs-react/lib/plugins/UpdateContentPlugin/index.ts","webpack://roosterjsReact/./packages-ui/roosterjs-react/lib/plugins/UpdateContentPlugin/UpdateContentPlugin.ts","webpack://roosterjsReact/./packages-ui/roosterjs-react/lib/plugins/RibbonPlugin/index.ts","webpack://roosterjsReact/./packages-ui/roosterjs-react/lib/plugins/RibbonPlugin/RibbonPlugin.ts"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","roosterjs","React","bold","unlocalizedText","iconName","checked","formatState","isBold","onClick","editor","toggleBold","italic","isItalic","toggleItalic","underline","isUnderline","toggleUnderline","default","defaultEditorCreator","div","options","Editor","props","editorDiv","useRef","domAttributes","editorOptions","focusOnInit","editorCreator","zoomScale","inDarkMode","useEffect","current","focus","dispose","setDarkModeState","setZoomScale","ref","tabIndex","getButtonText","button","strings","str","plugin","buttons","isRtl","useState","setFormatState","useCallback","item","onButtonClick","commandBarItems","useMemo","map","iconProps","rtlIconName","iconOnly","text","disabled","onRender","disposer","registerFormatChangedCallback","CommandBar","items","dir","FluentUIReact","updateMode","onUpdate","onBlur","update","getName","initialize","this","addDomEventHandler","onPluginEvent","event","eventType","forceUpdate","content","getContent","delayUpdateTime","timer","updateFormat","delayUpdate","callback","onFormatChanged","window","getDocument","defaultView","clearTimeout","setTimeout","getFormatState"],"mappings":"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","file":"rooster-react-min.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 5);\n","module.exports = roosterjs;","module.exports = React;","import RibbonButton from '../../../plugins/RibbonPlugin/RibbonButton';\nimport { toggleBold } from 'roosterjs-editor-api';\n\n/**\n * \"Bold\" button on the format ribbon\n */\nexport const bold: RibbonButton = {\n    key: 'bold',\n    unlocalizedText: 'Bold',\n    iconName: 'Bold',\n    checked: formatState => formatState.isBold,\n    onClick: editor => {\n        toggleBold(editor);\n        return true;\n    },\n};\n","import RibbonButton from '../../../plugins/RibbonPlugin/RibbonButton';\nimport { toggleItalic } from 'roosterjs-editor-api';\n\n/**\n * \"Italic\" button on the format ribbon\n */\nexport const italic: RibbonButton = {\n    key: 'italic',\n    unlocalizedText: 'Italic',\n    iconName: 'Italic',\n    checked: formatState => formatState.isItalic,\n    onClick: editor => {\n        toggleItalic(editor);\n        return true;\n    },\n};\n","import RibbonButton from '../../../plugins/RibbonPlugin/RibbonButton';\nimport { toggleUnderline } from 'roosterjs-editor-api';\n\n/**\n * \"Underline\" button on the format ribbon\n */\nexport const underline: RibbonButton = {\n    key: 'underline',\n    unlocalizedText: 'Underline',\n    iconName: 'Underline',\n    checked: formatState => formatState.isUnderline,\n    onClick: editor => {\n        toggleUnderline(editor);\n        return true;\n    },\n};\n","export * from './components/Rooster/index';\nexport * from './components/Ribbon/index';\n\nexport * from './plugins/UpdateContentPlugin/index';\nexport * from './plugins/RibbonPlugin/index';\n","export { default as Rooster } from './Rooster';\nexport { default as RoosterProps } from './RoosterProps';\n","import * as React from 'react';\nimport RoosterProps from './RoosterProps';\nimport { Editor } from 'roosterjs-editor-core';\nimport { EditorOptions, IEditor } from 'roosterjs-editor-types';\n\n/**\n * Main component of react wrapper for roosterjs\n * @param props Properties of this component\n * @returns The react component\n */\nexport default function Rooster(props: RoosterProps) {\n    const editorDiv = React.useRef<HTMLDivElement>(null);\n    const editor = React.useRef<IEditor>(null);\n\n    const { domAttributes, editorOptions, focusOnInit, editorCreator } = props;\n    const { zoomScale, inDarkMode } = editorOptions || {};\n\n    React.useEffect(() => {\n        editor.current = (editorCreator || defaultEditorCreator)(editorDiv.current, editorOptions);\n\n        if (focusOnInit) {\n            editor.current.focus();\n        }\n\n        return () => {\n            if (editor.current) {\n                editor.current.dispose();\n                editor.current = null;\n            }\n        };\n    }, [editorCreator]);\n\n    React.useEffect(() => {\n        editor.current.setDarkModeState(!!inDarkMode);\n    }, [inDarkMode]);\n\n    React.useEffect(() => {\n        editor.current.setZoomScale(zoomScale);\n    }, [zoomScale]);\n\n    return <div ref={editorDiv} tabIndex={0} {...(domAttributes || {})}></div>;\n}\n\nfunction defaultEditorCreator(div: HTMLDivElement, options: EditorOptions) {\n    return new Editor(div, options);\n}\n","export { default as Ribbon } from './Ribbon';\nexport { default as RibbonProps } from './RibbonProps';\nexport { default as getAllButtons } from './getAllButtons';\nexport { bold } from './buttons/bold';\nexport { italic } from './buttons/italic';\nexport { underline } from './buttons/underline';\n","import * as React from 'react';\nimport RibbonButton from '../../plugins/RibbonPlugin/RibbonButton';\nimport RibbonProps from './RibbonProps';\nimport { CommandBar, ICommandBarItemProps } from '@fluentui/react/lib/CommandBar';\nimport { FormatState } from 'roosterjs-editor-types';\n\n/**\n * The format ribbon component of roosterjs-react\n * @param props Properties of format ribbon component\n * @returns The format ribbon component\n */\nexport default function Ribbon(props: RibbonProps) {\n    const { plugin, buttons, strings, isRtl } = props;\n    const [formatState, setFormatState] = React.useState<FormatState>(null);\n\n    const onClick = React.useCallback(\n        (item: RibbonButton) => {\n            plugin?.onButtonClick(item);\n        },\n        [plugin]\n    );\n\n    const commandBarItems = React.useMemo(\n        () =>\n            buttons.map(\n                (button): ICommandBarItemProps => {\n                    return {\n                        key: button.key,\n                        iconProps: {\n                            iconName:\n                                isRtl && button.rtlIconName ? button.rtlIconName : button.iconName,\n                        },\n                        iconOnly: true,\n                        text: getButtonText(button, strings),\n                        checked: (formatState && button.checked?.(formatState)) || false,\n                        disabled: (formatState && button.disabled?.(formatState)) || false,\n                        onClick: () => onClick(button),\n                        onRender: button.onRender,\n                    };\n                }\n            ),\n        [buttons, formatState, isRtl]\n    );\n\n    React.useEffect(() => {\n        const disposer = plugin?.registerFormatChangedCallback(setFormatState);\n\n        return () => {\n            disposer?.();\n        };\n    }, [plugin]);\n\n    return <CommandBar items={commandBarItems} dir={isRtl ? 'rtl' : 'ltr'} />;\n}\n\nfunction getButtonText(button: RibbonButton, strings?: Record<string, string | (() => string)>) {\n    const str = strings?.[button.key];\n\n    if (typeof str == 'function') {\n        return str();\n    } else if (typeof str == 'string') {\n        return str;\n    } else {\n        return button.unlocalizedText;\n    }\n}\n","module.exports = FluentUIReact;","import RibbonButton from '../../plugins/RibbonPlugin/RibbonButton';\nimport { bold } from './buttons/bold';\nimport { italic } from './buttons/italic';\nimport { underline } from './buttons/underline';\n\n/**\n * A shortcut to get all format buttons provided by roosterjs-react\n * @returns An array of all buttons\n */\nexport default function getAllButtons(): RibbonButton[] {\n    return [bold, italic, underline];\n}\n","export { UpdateMode } from './UpdateMode';\nexport { default as UpdateContentPlugin } from './UpdateContentPlugin';\n","import { EditorPlugin, IEditor, PluginEvent, PluginEventType } from 'roosterjs-editor-types';\nimport { UpdateMode } from './UpdateMode';\n\n/**\n * A plugin to help get HTML content from editor\n */\nexport default class UpdateContentPlugin implements EditorPlugin {\n    private editor: IEditor;\n    private disposer: () => void;\n\n    /**\n     * Create a new instance of UpdateContentPlugin class\n     * @param updateMode Mode of automatic update. It can be a combination of multiple UpdateMode values\n     * @param onUpdate A callback to be invoked when update happens\n     */\n    constructor(\n        private updateMode: UpdateMode,\n        private onUpdate: (html: string, mode: UpdateMode) => void\n    ) {}\n\n    /**\n     * Get a friendly name of this plugin\n     */\n    getName() {\n        return 'UpdateContent';\n    }\n\n    /**\n     * Initialize this plugin\n     * @param editor The editor instance\n     */\n    initialize(editor: IEditor) {\n        this.editor = editor;\n        this.disposer = this.editor.addDomEventHandler('blur', this.onBlur);\n    }\n\n    /**\n     * Dispose this plugin\n     */\n    dispose() {\n        this.disposer?.();\n        this.disposer = null;\n        this.editor = null;\n    }\n\n    /**\n     * Handle events triggered from editor\n     * @param event PluginEvent object\n     */\n    onPluginEvent(event: PluginEvent) {\n        switch (event.eventType) {\n            case PluginEventType.EditorReady:\n                this.update(UpdateMode.OnInitialize);\n                break;\n\n            case PluginEventType.BeforeDispose:\n                this.update(UpdateMode.OnDispose);\n                break;\n\n            case PluginEventType.ContentChanged:\n                this.update(UpdateMode.OnContentChangedEvent);\n                break;\n\n            case PluginEventType.Input:\n                this.update(UpdateMode.OnUserInput);\n                break;\n        }\n    }\n\n    /**\n     * Trigger a force update. onUpdate callback will be invoked with HTML content of editor\n     */\n    forceUpdate() {\n        this.update(UpdateMode.Force);\n    }\n\n    private onBlur = () => {\n        this.update(UpdateMode.OnBlur);\n    };\n\n    private update(mode: UpdateMode) {\n        if (\n            this.editor &&\n            (mode == UpdateMode.Force || ((this.updateMode || 0) & mode) == mode) &&\n            this.onUpdate\n        ) {\n            const content = this.editor.getContent();\n            this.onUpdate(content, mode);\n        }\n    }\n}\n","export { default as RibbonPlugin } from './RibbonPlugin';\nexport { default as IRibbonPlugin } from './IRibbonPlugin';\nexport { default as RibbonButton } from './RibbonButton';\n","import IRibbonPlugin from './IRibbonPlugin';\nimport RibbonButton from './RibbonButton';\nimport { FormatState, IEditor, PluginEvent, PluginEventType } from 'roosterjs-editor-types';\nimport { getFormatState } from 'roosterjs-editor-api';\n\n/**\n * A plugin to connect format ribbon component and the editor\n */\nexport default class RibbonPlugin implements IRibbonPlugin {\n    private editor: IEditor;\n    private onFormatChanged: (formatState: FormatState) => void;\n    private timer = 0;\n\n    /**\n     * Construct a new instance of RibbonPlugin object\n     * @param delayUpdateTime The time to wait before refresh the button when user do some editing operation in editor\n     */\n    constructor(private delayUpdateTime: number = 200) {}\n\n    /**\n     * Get a friendly name of this plugin\n     */\n    getName() {\n        return 'Ribbon';\n    }\n\n    /**\n     * Initialize this plugin\n     * @param editor The editor instance\n     */\n    initialize(editor: IEditor) {\n        this.editor = editor;\n    }\n\n    /**\n     * Dispose this plugin\n     */\n    dispose() {\n        this.editor = null;\n    }\n\n    /**\n     * Handle events triggered from editor\n     * @param event PluginEvent object\n     */\n    onPluginEvent(event: PluginEvent) {\n        switch (event.eventType) {\n            case PluginEventType.EditorReady:\n            case PluginEventType.ContentChanged:\n                this.updateFormat();\n                break;\n\n            case PluginEventType.KeyDown:\n            case PluginEventType.MouseDown:\n                this.delayUpdate();\n                break;\n        }\n    }\n\n    /**\n     * Register a callback to be invoked when format state of editor is changed, returns a disposer function.\n     */\n    registerFormatChangedCallback(callback: (formatState: FormatState) => void) {\n        this.onFormatChanged = callback;\n\n        return () => {\n            this.onFormatChanged = null;\n        };\n    }\n\n    /**\n     * When user clicks on a button, call this method to let the plugin to handle this click event\n     */\n    onButtonClick(button: RibbonButton) {\n        if (this.editor && button.onClick(this.editor)) {\n            this.updateFormat();\n        }\n    }\n\n    private delayUpdate() {\n        const window = this.editor.getDocument().defaultView;\n\n        if (this.timer) {\n            window.clearTimeout(this.timer);\n        }\n\n        this.timer = window.setTimeout(() => {\n            this.timer = 0;\n            this.updateFormat?.();\n        }, this.delayUpdateTime);\n    }\n\n    private updateFormat() {\n        if (this.editor && this.onFormatChanged) {\n            const formatState = getFormatState(this.editor);\n            this.onFormatChanged(formatState);\n        }\n    }\n}\n"],"sourceRoot":""}