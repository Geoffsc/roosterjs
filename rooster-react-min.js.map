{"version":3,"sources":["webpack://roosterjsReact/webpack/bootstrap","webpack://roosterjsReact/external \"roosterjs\"","webpack://roosterjsReact/external \"FluentUIReact\"","webpack://roosterjsReact/external \"React\"","webpack://roosterjsReact/./packages-ui/roosterjs-react/lib/common/index.ts","webpack://roosterjsReact/./packages-ui/roosterjs-react/lib/contextMenu/utils/createContextMenuProvider.ts","webpack://roosterjsReact/./packages-ui/roosterjs-react/lib/common/utils/getLocalizedString.ts","webpack://roosterjsReact/./packages-ui/roosterjs-react/lib/inputDialog/utils/showInputDialog.tsx","webpack://roosterjsReact/./packages-ui/roosterjs-react/lib/rooster/type/UpdateMode.ts","webpack://roosterjsReact/./packages-ui/roosterjs-react/lib/ribbon/type/KnownRibbonButton.ts","webpack://roosterjsReact/./packages-ui/roosterjs-react/lib/ribbon/component/buttons/colorPicker.tsx","webpack://roosterjsReact/./packages-ui/roosterjs-react/lib/pasteOptions/utils/buttons.ts","webpack://roosterjsReact/./packages-ui/roosterjs-react/lib/index.ts","webpack://roosterjsReact/./packages-ui/roosterjs-react/lib/common/utils/createUIUtilities.tsx","webpack://roosterjsReact/external \"ReactDOM\"","webpack://roosterjsReact/./packages-ui/roosterjs-react/lib/rooster/index.ts","webpack://roosterjsReact/./packages-ui/roosterjs-react/lib/rooster/component/Rooster.tsx","webpack://roosterjsReact/./packages-ui/roosterjs-react/lib/rooster/plugin/createUpdateContentPlugin.ts","webpack://roosterjsReact/./packages-ui/roosterjs-react/lib/ribbon/index.ts","webpack://roosterjsReact/./packages-ui/roosterjs-react/lib/ribbon/component/Ribbon.tsx","webpack://roosterjsReact/./packages-ui/roosterjs-react/lib/ribbon/component/buttons/moreCommands.ts","webpack://roosterjsReact/./packages-ui/roosterjs-react/lib/ribbon/component/getButtons.ts","webpack://roosterjsReact/./packages-ui/roosterjs-react/lib/ribbon/component/buttons/alignCenter.ts","webpack://roosterjsReact/./packages-ui/roosterjs-react/lib/ribbon/component/buttons/alignLeft.ts","webpack://roosterjsReact/./packages-ui/roosterjs-react/lib/ribbon/component/buttons/alignRight.ts","webpack://roosterjsReact/./packages-ui/roosterjs-react/lib/ribbon/component/buttons/backgroundColor.ts","webpack://roosterjsReact/./packages-ui/roosterjs-react/lib/ribbon/component/buttons/bold.ts","webpack://roosterjsReact/./packages-ui/roosterjs-react/lib/ribbon/component/buttons/bulletedList.ts","webpack://roosterjsReact/./packages-ui/roosterjs-react/lib/ribbon/component/buttons/clearFormat.ts","webpack://roosterjsReact/./packages-ui/roosterjs-react/lib/ribbon/component/buttons/code.ts","webpack://roosterjsReact/./packages-ui/roosterjs-react/lib/ribbon/component/buttons/decreaseFontSize.ts","webpack://roosterjsReact/./packages-ui/roosterjs-react/lib/ribbon/component/buttons/decreaseIndent.ts","webpack://roosterjsReact/./packages-ui/roosterjs-react/lib/ribbon/component/buttons/font.ts","webpack://roosterjsReact/./packages-ui/roosterjs-react/lib/ribbon/component/buttons/fontSize.ts","webpack://roosterjsReact/./packages-ui/roosterjs-react/lib/ribbon/component/buttons/header.ts","webpack://roosterjsReact/./packages-ui/roosterjs-react/lib/ribbon/component/buttons/increaseFontSize.ts","webpack://roosterjsReact/./packages-ui/roosterjs-react/lib/ribbon/component/buttons/increaseIndent.ts","webpack://roosterjsReact/./packages-ui/roosterjs-react/lib/ribbon/component/buttons/insertImage.ts","webpack://roosterjsReact/./packages-ui/roosterjs-react/lib/ribbon/component/buttons/insertLink.ts","webpack://roosterjsReact/./packages-ui/roosterjs-react/lib/inputDialog/component/InputDialog.tsx","webpack://roosterjsReact/./packages-ui/roosterjs-react/lib/inputDialog/component/InputDialogItem.tsx","webpack://roosterjsReact/./packages-ui/roosterjs-react/lib/ribbon/component/buttons/insertTable.tsx","webpack://roosterjsReact/./packages-ui/roosterjs-react/lib/ribbon/component/buttons/italic.ts","webpack://roosterjsReact/./packages-ui/roosterjs-react/lib/ribbon/component/buttons/ltr.ts","webpack://roosterjsReact/./packages-ui/roosterjs-react/lib/ribbon/component/buttons/numberedList.ts","webpack://roosterjsReact/./packages-ui/roosterjs-react/lib/ribbon/component/buttons/quote.ts","webpack://roosterjsReact/./packages-ui/roosterjs-react/lib/ribbon/component/buttons/redo.ts","webpack://roosterjsReact/./packages-ui/roosterjs-react/lib/ribbon/component/buttons/removeLink.ts","webpack://roosterjsReact/./packages-ui/roosterjs-react/lib/ribbon/component/buttons/rtl.ts","webpack://roosterjsReact/./packages-ui/roosterjs-react/lib/ribbon/component/buttons/strikethrough.ts","webpack://roosterjsReact/./packages-ui/roosterjs-react/lib/ribbon/component/buttons/subscript.ts","webpack://roosterjsReact/./packages-ui/roosterjs-react/lib/ribbon/component/buttons/superscript.ts","webpack://roosterjsReact/./packages-ui/roosterjs-react/lib/ribbon/component/buttons/textColor.ts","webpack://roosterjsReact/./packages-ui/roosterjs-react/lib/ribbon/component/buttons/underline.ts","webpack://roosterjsReact/./packages-ui/roosterjs-react/lib/ribbon/component/buttons/undo.ts","webpack://roosterjsReact/./packages-ui/roosterjs-react/lib/ribbon/plugin/createRibbonPlugin.ts","webpack://roosterjsReact/./packages-ui/roosterjs-react/lib/contextMenu/index.ts","webpack://roosterjsReact/./packages-ui/roosterjs-react/lib/contextMenu/plugin/createContextMenuPlugin.tsx","webpack://roosterjsReact/./packages-ui/roosterjs-react/lib/contextMenu/menus/createListEditMenuProvider.ts","webpack://roosterjsReact/./packages-ui/roosterjs-react/lib/contextMenu/menus/createImageEditMenuProvider.tsx","webpack://roosterjsReact/./packages-ui/roosterjs-react/lib/contextMenu/menus/createTableEditMenuProvider.ts","webpack://roosterjsReact/./packages-ui/roosterjs-react/lib/pasteOptions/index.ts","webpack://roosterjsReact/./packages-ui/roosterjs-react/lib/pasteOptions/plugin/createPasteOptionPlugin.ts","webpack://roosterjsReact/./packages-ui/roosterjs-react/lib/pasteOptions/component/showPasteOptionPane.tsx"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","roosterjs","FluentUIReact","React","default","menuName","items","strings","shouldAddMenuItems","context","uiUtilities","getName","this","initialize","editor","dispose","getContextMenuItems","node","targetNode","filter","item","shouldShow","map","convertMenuItems","setUIUtilities","data","text","unlocalizedText","ariaLabel","onClick","subMenuProps","subItems","onItemClick","_","menuItem","keys","undefined","ContextMenuProviderImpl","defaultString","str","dialogTitleKey","unlocalizedTitle","onChange","Promise","resolve","disposer","component","onOk","result","onCancel","renderComponent","UpdateMode","KnownRibbonButtonKey","BackgroundColorDropDownItems","backgroundColorCyan","backgroundColorGreen","backgroundColorYellow","backgroundColorOrange","backgroundColorRed","backgroundColorMagenta","backgroundColorLightCyan","backgroundColorLightGreen","backgroundColorLightYellow","backgroundColorLightOrange","backgroundColorLightRed","backgroundColorLightMagenta","backgroundColorWhite","backgroundColorLightGray","backgroundColorGray","backgroundColorDarkGray","backgroundColorDarkerGray","backgroundColorBlack","classNames","mergeStyleSets","colorPickerContainer","width","padding","overflow","colorMenuItem","display","height","minWidth","background","border","colorSquare","margin","borderStyle","borderWidth","borderColor","colorSquareBorder","colorSquareBorderWhite","TextColors","textColorLightBlue","lightModeColor","darkModeColor","textColorLightGreen","textColorLightYellow","textColorLightOrange","textColorLightRed","textColorLightPurple","textColorBlue","textColorGreen","textColorYellow","textColorOrange","textColorRed","textColorPurple","textColorDarkBlue","textColorDarkGreen","textColorDarkYellow","textColorDarkOrange","textColorDarkRed","textColorDarkPurple","textColorDarkerBlue","textColorDarkerGreen","textColorDarkerYellow","textColorDarkerOrange","textColorDarkerRed","textColorDarkerPurple","textColorWhite","textColorLightGray","textColorGray","textColorDarkGray","textColorDarkerGray","textColorBlack","BackgroundColors","AllColors","getColorPickerDropDown","itemClassName","allowLivePreview","itemRender","buttonColor","e","title","className","style","backgroundColor","commandBarSubMenuProperties","Buttons","pasteOptionPasteAsIs","shortcut","icon","pasteOptionPasteText","pasteOptionMergeFormat","ButtonKeys","container","theme","element","doc","ownerDocument","div","createElement","body","appendChild","ReactDOM","render","WindowProvider","window","defaultView","ThemeProvider","unmountComponentAtNode","removeChild","isRightToLeft","getComputedStyles","defaultEditorCreator","options","Editor","props","editorDiv","useRef","useTheme","focusOnInit","editorCreator","zoomScale","inDarkMode","plugins","useEffect","createUIUtilities","current","forEach","plugin","isReactEditorPlugin","focus","setDarkModeState","setZoomScale","divProps","getNativeProps","divProperties","ref","tabIndex","updateMode","onUpdate","onBlur","update","OnBlur","addDomEventHandler","onPluginEvent","event","eventType","OnInitialize","OnDispose","OnContentChangedEvent","OnUserInput","forceUpdate","Force","content","getContent","UpdateContentPluginImpl","AllButtonKeys","ribbonClassName","mergeStyles","rtlIcon","transform","buttons","dir","useState","formatState","setFormatState","isRtl","useCallback","onButtonClick","onHover","button","startLivePreview","onDismiss","stopLivePreview","flipIcon","defaultRender","commandBarItems","useMemo","selectedItem","dropDownMenu","getSelectedItemKey","iconProps","iconName","onRenderIcon","flipWhenRtl","iconOnly","canCheck","checked","isChecked","disabled","isDisabled","commandBarProperties","shouldFocusOnMount","focusZoneProps","direction","FocusZoneDirection","bidirectional","onRenderContextualMenuItem","defaultRenderer","onMouseOver","onRender","registerFormatChangedCallback","moreCommandsBtn","moreCommands","CommandBar","overflowButtonProps","KnownRibbonButtons","Bold","bold","Italic","italic","Underline","underline","Font","font","FontSize","fontSize","IncreaseFontSize","increaseFontSize","DecreaseFontSize","decreaseFontSize","TextColor","textColor","BackgroundColor","BulletedList","bulletedList","NumberedList","numberedList","DecreaseIndent","decreaseIndent","IncreaseIndent","increaseIndent","Quote","quote","AlignLeft","alignLeft","AlignCenter","alignCenter","AlignRight","alignRight","InsertLink","insertLink","RemoveLink","removeLink","InsertTable","insertTable","InsertImage","insertImage","Superscript","superscript","Subscript","subscript","Strikethrough","strikethrough","Header","header","Code","code","Ltr","ltr","Rtl","rtl","Undo","undo","Redo","redo","ClearFormat","clearFormat","keyOrButtons","keyOrButton","setAlignment","setBackgroundColor","isBold","toggleBold","isBullet","toggleBullet","toggleCodeBlock","changeFontSize","setIndentation","FontNames","family","localizedName","DropDownItems","reduce","LowerCaseFontMap","toLowerCase","FirstFontRegex","matches","fontName","match","firstName","setFontName","FONT_SIZES","size","toString","setFontSize","headers","header1","header2","header3","header4","header5","header6","headerDivider","noHeader","headerLevel","index","indexOf","toggleHeader","FileInput","tag","attributes","type","accept","document","getDocument","fileInput","addEventListener","files","length","click","existingLink","queryElements","url","href","displayText","textContent","getSelectionRange","autoFocus","labelKey","unlocalizedLabel","initValue","itemName","newValue","values","then","createLink","dialogContentProps","DialogType","normal","getLocalizedString","currentValues","setCurrentValues","onSubmit","onItemChanged","newValues","Dialog","hidden","onEnterKey","onChanged","DialogFooter","PrimaryButton","DefaultButton","inputBox","borderRadius","onValueChange","onKeyPress","which","TextField","role","tableButton","cursor","hovered","tablePane","tablePaneInner","lineHeight","InsertTablePane","col","setCol","row","setRow","updateSize","safeInstanceOf","parseInt","dataset","onMouseEnter","target","onClickButton","createKey","ariaLabels","j","formatText","isSelected","push","id","FocusZone","defaultActiveElement","onActiveElementChanged","replace","split","parseKey","insertTablePane","isItalic","toggleItalic","setDirection","isNumbering","toggleNumbering","isBlockQuote","toggleBlockQuote","canRedo","canUnlink","isStrikeThrough","toggleStrikethrough","isSubscript","toggleSubscript","isSuperscript","toggleSuperscript","setTextColor","isUnderline","toggleUnderline","canUndo","delayUpdateTime","timer","updateFormat","delayUpdate","callback","onFormatChanged","stopShadowEdit","isInShadowEdit","range","getSelectionRangeEx","areAllCollapsed","startShadowEdit","clearTimeout","setTimeout","getFormatState","some","RibbonPluginImpl","normalizedITems","dividerKey","normalizeItems","ContextualMenu","dismiss","ContextMenu","ContextMenuPlugin","ListNumberResetMenuItem","li","getElementAtCursor","setOrderedListNumbering","ListNumberEditMenuItem","listAndLi","getEditingList","list","start","child","firstChild","nextSibling","Math","floor","isContentEditable","ImageAltTextMenuItem","image","alt","altText","select","setImageAltText","ImageResizeMenuItem","menuNameImageSizeBestFit","menuNameImageSizeSmall","menuNameImageSizeMedium","menuNameImageSizeOriginal","addUndoSnapshot","percentage","resizeByPercentage","resetImage","ImageCropMenuItem","isFeatureEnabled","canRegenerateImage","imageEdit","setEditingImage","ImageRemoveMenuItem","contains","deleteNode","shouldShowImageEditItems","imageEditPlugin","TableEditOperationMap","menuNameTableInsertAbove","menuNameTableInsertBelow","menuNameTableInsertLeft","menuNameTableInsertRight","menuNameTableDeleteTable","menuNameTableDeleteColumn","menuNameTableDeleteRow","menuNameTableMergeAbove","menuNameTableMergeBelow","menuNameTableMergeLeft","menuNameTableMergeRight","menuNameTableMergeCells","menuNameTableSplitHorizontally","menuNameTableSplitVertically","menuNameTableAlignLeft","menuNameTableAlignCenter","menuNameTableAlignRight","menuNameTableAlignTop","menuNameTableAlignMiddle","menuNameTableAlignBottom","editTable","TableEditInsertMenuItem","TableEditDeleteMenuItem","TableEditMergeMenuItem","TableEditSplitMenuItem","TableEditAlignMenuItem","td","table","getEditingTable","clipboardData","pasteOptionRef","onDismissed","onPaste","paste","setSelectedKey","showPasteOptionPane","handlePasteOptionPaneEvent","source","types","selectedKey","getSelectedKey","keyboardEvent","rawEvent","ctrlKey","String","fromCharCode","cancelEvent","buttonCount","diff","focusedPosition","getFocusedPosition","preventDefault","stopPropagation","PasteOptionPlugin","getPasteOptionClassNames","memoizeFunction","palette","pastePane","paddingLeft","optionPane","textAlign","buttonsContainer","justifyContent","flex","themeLighter","themeLight","PasteOptionButton","buttonName","IconButton","PasteOptionComponent","forwardRef","position","rect","getPositionRect","x","left","right","y","bottom","useImperativeHandle","buttonPane","evt","FocusEvent","relatedTarget","Node","onClickShowSubMenu","Callout","gapSpace","isBeakVisible","directionalHint","DirectionalHint","bottomRightEdge","bottomLeftEdge","directionalHintForRTL","preventDismissOnScroll","Icon","onGetRef"],"mappings":"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","file":"rooster-react-min.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 11);\n","module.exports = roosterjs;","module.exports = FluentUIReact;","module.exports = React;","export {\n    LocalizedStrings,\n    OkButtonStringKey,\n    CancelButtonStringKey,\n    MenuItemSplitterKey0,\n} from './type/LocalizedStrings';\nexport { default as UIUtilities } from './type/UIUtilities';\nexport { default as ReactEditorPlugin } from './type/ReactEditorPlugin';\nexport { default as createUIUtilities } from './utils/createUIUtilities';\nexport { default as getLocalizedString } from './utils/getLocalizedString';\n","import ContextMenuItem from '../types/ContextMenuItem';\nimport getLocalizedString from '../../common/utils/getLocalizedString';\nimport { ContextMenuProvider, EditorPlugin, IEditor } from 'roosterjs-editor-types';\nimport { IContextualMenuItem } from '@fluentui/react/lib/ContextualMenu';\nimport { LocalizedStrings, ReactEditorPlugin, UIUtilities } from '../../common/index';\n\n/**\n * A plugin of editor to provide context menu items\n */\nclass ContextMenuProviderImpl<TString extends string, TContext>\n    implements ContextMenuProvider<IContextualMenuItem>, ReactEditorPlugin {\n    private editor: IEditor;\n    private targetNode: Node;\n    private uiUtilities: UIUtilities | null = null;\n\n    /**\n     * Create a new instance of ContextMenuProviderImpl class\n     * @param menuName Name of this group of menus\n     * @param items Menu items that will be show\n     * @param strings Localized strings of these menu items\n     * @param shouldAddMenuItems A general checker to decide if we should add this group of menu items\n     */\n    constructor(\n        private menuName: string,\n        private items: ContextMenuItem<TString, TContext>[],\n        private strings?: LocalizedStrings<TString>,\n        private shouldAddMenuItems?: (editor: IEditor, node: Node) => boolean,\n        private context?: TContext\n    ) {}\n\n    /**\n     * Get a friendly name of  this plugin\n     */\n    getName() {\n        return this.menuName;\n    }\n\n    /**\n     * Initialize this plugin. This should only be called from Editor\n     * @param editor Editor instance\n     */\n    initialize(editor: IEditor) {\n        this.editor = editor;\n    }\n\n    /**\n     * Dispose this plugin\n     */\n    dispose() {\n        this.editor = null;\n    }\n\n    getContextMenuItems(node: Node) {\n        this.targetNode = node;\n\n        return this.shouldAddMenuItems(this.editor, node)\n            ? this.items\n                  .filter(item => !item.shouldShow || item.shouldShow(this.editor, node))\n                  .map(item => this.convertMenuItems(item))\n            : [];\n    }\n\n    setUIUtilities(uiUtilities: UIUtilities) {\n        this.uiUtilities = uiUtilities;\n    }\n\n    private convertMenuItems(item: ContextMenuItem<TString, TContext>): IContextualMenuItem {\n        return {\n            key: item.key,\n            data: item,\n            text: getLocalizedString(this.strings, item.key, item.unlocalizedText),\n            ariaLabel: getLocalizedString(this.strings, item.key, item.unlocalizedText),\n            onClick: () => this.onClick(item, item.key),\n            subMenuProps: item.subItems\n                ? {\n                      onItemClick: (_, menuItem) => this.onClick(item, menuItem.data),\n                      items: Object.keys(item.subItems).map((key: keyof typeof item.subItems) => ({\n                          key: key,\n                          data: key,\n                          text: getLocalizedString(this.strings, key, item.subItems[key]),\n                      })),\n                  }\n                : undefined,\n        };\n    }\n\n    private onClick(item: ContextMenuItem<TString, TContext>, key: TString) {\n        item.onClick(\n            key,\n            this.editor,\n            this.targetNode,\n            this.strings,\n            this.uiUtilities,\n            this.context\n        );\n    }\n}\n\n/**\n * Create a new instance of ContextMenuProviderImpl class\n * @param menuName Name of this group of menus\n * @param items Menu items that will be show\n * @param strings Localized strings of these menu items\n * @param shouldAddMenuItems A general checker to decide if we should add this group of menu items\n */\nexport default function createContextMenuProvider<TString extends string, TContext>(\n    menuName: string,\n    items: ContextMenuItem<TString>[],\n    strings?: LocalizedStrings<TString>,\n    shouldAddMenuItems?: (editor: IEditor, node: Node) => boolean,\n    context?: TContext\n): EditorPlugin {\n    return new ContextMenuProviderImpl(menuName, items, strings, shouldAddMenuItems, context);\n}\n","import { LocalizedStrings } from '../type/LocalizedStrings';\n\n/**\n * Get a localized string\n * @param strings The LocalizedStrings map\n * @param key Key of the string\n * @param defaultString Default unlocalized string, will be used if strings is not specified or the give key doesn't exist in strings\n * @returns A localized string from the string map, or defaultString\n */\nexport default function getLocalizedString<T extends string>(\n    strings: Partial<LocalizedStrings<T>>,\n    key: T,\n    defaultString: string\n) {\n    const str = strings?.[key];\n\n    if (typeof str == 'function') {\n        return str();\n    } else if (typeof str == 'string') {\n        return str;\n    } else {\n        return defaultString;\n    }\n}\n","import * as React from 'react';\nimport DialogItem from '../type/DialogItem';\nimport InputDialog from '../component/InputDialog';\nimport {\n    CancelButtonStringKey,\n    LocalizedStrings,\n    OkButtonStringKey,\n    UIUtilities,\n} from '../../common/index';\n\n/**\n * @internal\n */\nexport default function showInputDialog<Strings extends string, ItemNames extends string>(\n    uiUtilities: UIUtilities,\n    dialogTitleKey: Strings,\n    unlocalizedTitle: string,\n    items: Record<ItemNames, DialogItem<Strings>>,\n    strings: LocalizedStrings<Strings | OkButtonStringKey | CancelButtonStringKey>,\n    onChange?: (\n        changedItemName: ItemNames,\n        newValue: string,\n        currentValues: Record<ItemNames, string>\n    ) => Record<ItemNames, string> | null\n): Promise<Record<ItemNames, string> | null> {\n    return new Promise<Record<ItemNames, string> | null>(resolve => {\n        let disposer: null | (() => void) = null;\n        const onOk = (result: Record<ItemNames, string>) => {\n            disposer?.();\n            resolve(result);\n        };\n        const onCancel = () => {\n            disposer?.();\n            resolve(null);\n        };\n        const component = (\n            <InputDialog\n                dialogTitleKey={dialogTitleKey}\n                unlocalizedTitle={unlocalizedTitle}\n                items={items}\n                strings={strings}\n                onOk={onOk}\n                onCancel={onCancel}\n                onChange={onChange}\n            />\n        );\n\n        disposer = uiUtilities.renderComponent(component);\n    });\n}\n","/**\n * Update mode for UpdateContentPlugins\n */\nexport enum UpdateMode {\n    /**\n     * Force update, triggered from UpdateContentPlugin.forceUpdate()\n     */\n    Force = 0,\n\n    /**\n     * Update when editor is initialized\n     */\n    OnInitialize = 1,\n\n    /**\n     * Update when editor is about to be disposed\n     */\n    OnDispose = 2,\n\n    /**\n     * Update when user input in editor\n     */\n    OnUserInput = 4,\n\n    /**\n     * Update when ContentChangedEvent is triggered from a plugin\n     */\n    OnContentChangedEvent = 8,\n\n    /**\n     * Update when editor loses focus\n     */\n    OnBlur = 16,\n}\n","/**\n * Keys of known ribbon buttons (buttons included in roosterjs-react)\n */\nexport enum KnownRibbonButtonKey {\n    /**\n     * \"Bold\" button on the format ribbon\n     */\n    Bold,\n\n    /**\n     * \"Italic\" button on the format ribbon\n     */\n    Italic,\n\n    /**\n     * \"Underline\" button on the format ribbon\n     */\n    Underline,\n\n    /**\n     * \"Font\" button on the format ribbon\n     */\n    Font,\n\n    /**\n     * \"FontSize\" button on the format ribbon\n     */\n    FontSize,\n\n    /**\n     * \"IncreaseFontSize\" button on the format ribbon\n     */\n    IncreaseFontSize,\n\n    /**\n     * \"DecreaseFontSize\" button on the format ribbon\n     */\n    DecreaseFontSize,\n\n    /**\n     * \"TextColor\" button on the format ribbon\n     */\n    TextColor,\n\n    /**\n     * \"BackgroundColor\" button on the format ribbon\n     */\n    BackgroundColor,\n\n    /**\n     * \"BulletedList\" button on the format ribbon\n     */\n    BulletedList,\n\n    /**\n     * \"NumberedList\" button on the format ribbon\n     */\n    NumberedList,\n\n    /**\n     * \"DecreaseIndent\" button on the format ribbon\n     */\n    DecreaseIndent,\n\n    /**\n     * \"IncreaseIndent\" button on the format ribbon\n     */\n    IncreaseIndent,\n\n    /**\n     * \"Quote\" button on the format ribbon\n     */\n    Quote,\n\n    /**\n     * \"AlignLeft\" button on the format ribbon\n     */\n    AlignLeft,\n\n    /**\n     * \"AlignCenter\" button on the format ribbon\n     */\n    AlignCenter,\n\n    /**\n     * \"AlignRight\" button on the format ribbon\n     */\n    AlignRight,\n\n    /**\n     * \"InsertLink\" button on the format ribbon\n     */\n    InsertLink,\n\n    /**\n     * \"RemoveLink\" button on the format ribbon\n     */\n    RemoveLink,\n\n    /**\n     * \"InsertTable\" button on the format ribbon\n     */\n    InsertTable,\n\n    /**\n     * \"InsertImage\" button on the format ribbon\n     */\n    InsertImage,\n\n    /**\n     * \"Superscript\" button on the format ribbon\n     */\n    Superscript,\n\n    /**\n     * \"Subscript\" button on the format ribbon\n     */\n    Subscript,\n\n    /**\n     * \"Strikethrough\" button on the format ribbon\n     */\n    Strikethrough,\n\n    /**\n     * \"Header\" button on the format ribbon\n     */\n    Header,\n\n    /**\n     * \"Code\" button on the format ribbon\n     */\n    Code,\n\n    /**\n     * \"Ltr\" button on the format ribbon\n     */\n    Ltr,\n\n    /**\n     * \"Rtl\" button on the format ribbon\n     */\n    Rtl,\n\n    /**\n     * \"Undo\" button on the format ribbon\n     */\n    Undo,\n\n    /**\n     * \"Redo\" button on the format ribbon\n     */\n    Redo,\n\n    /**\n     * \"ClearFormat\" button on the format ribbon\n     */\n    ClearFormat,\n}\n","import * as React from 'react';\nimport RibbonButtonDropDown from '../../type/RibbonButtonDropDown';\nimport { BackgroundColorKeys, TextColorKeys } from '../../type/RibbonButtonStringKeys';\nimport { mergeStyleSets } from '@fluentui/react/lib/Styling';\nimport { ModeIndependentColor } from 'roosterjs-editor-types';\n\n/**\n * @internal\n * List of colors in drop down list\n */\nexport const BackgroundColorDropDownItems: Record<BackgroundColorKeys, string> = {\n    backgroundColorCyan: 'Cyan',\n    backgroundColorGreen: 'Green',\n    backgroundColorYellow: 'Yellow',\n    backgroundColorOrange: 'Orange',\n    backgroundColorRed: 'Red',\n    backgroundColorMagenta: 'Magenta',\n    backgroundColorLightCyan: 'Light cyan',\n    backgroundColorLightGreen: 'Light green',\n    backgroundColorLightYellow: 'Light yellow',\n    backgroundColorLightOrange: 'Light orange',\n    backgroundColorLightRed: 'Light red',\n    backgroundColorLightMagenta: 'Light magenta',\n    backgroundColorWhite: 'White',\n    backgroundColorLightGray: 'Light gray',\n    backgroundColorGray: 'Gray',\n    backgroundColorDarkGray: 'Dark gray',\n    backgroundColorDarkerGray: 'Darker gray',\n    backgroundColorBlack: 'Black',\n};\n\nconst classNames = mergeStyleSets({\n    colorPickerContainer: {\n        width: '192px',\n        padding: '8px',\n        overflow: 'hidden',\n        '& ul': {\n            width: '192px',\n            overflow: 'hidden',\n        },\n    },\n    colorMenuItem: {\n        display: 'inline-block',\n        width: '32px',\n        height: '32px',\n        '& button': {\n            padding: '0px',\n            minWidth: '0px',\n            background: 'transparent',\n            border: 'none',\n        },\n    },\n    colorSquare: {\n        width: '20px',\n        height: '20px',\n        margin: '4px',\n        borderStyle: 'solid',\n        borderWidth: '2px',\n        '&:hover': {\n            borderColor: 'red',\n        },\n    },\n    colorSquareBorder: {\n        borderColor: 'transparent',\n    },\n    colorSquareBorderWhite: {\n        borderColor: '#bebebe',\n    },\n});\n\n/**\n * @internal\n */\nconst TextColors: { [key in TextColorKeys]: ModeIndependentColor } = {\n    textColorLightBlue: { lightModeColor: '#51a7f9', darkModeColor: '#0075c2' },\n    textColorLightGreen: { lightModeColor: '#6fc040', darkModeColor: '#207a00' },\n    textColorLightYellow: { lightModeColor: '#f5d427', darkModeColor: '#5d4d00' },\n    textColorLightOrange: { lightModeColor: '#f3901d', darkModeColor: '#ab5500' },\n    textColorLightRed: { lightModeColor: '#ed5c57', darkModeColor: '#df504d' },\n    textColorLightPurple: { lightModeColor: '#b36ae2', darkModeColor: '#ab63da' },\n    textColorBlue: { lightModeColor: '#0c64c0', darkModeColor: '#6da0ff' },\n    textColorGreen: { lightModeColor: '#0c882a', darkModeColor: '#3da848' },\n    textColorYellow: { lightModeColor: '#dcbe22', darkModeColor: '#6d5c00' },\n    textColorOrange: { lightModeColor: '#de6a19', darkModeColor: '#d3610c' },\n    textColorRed: { lightModeColor: '#c82613', darkModeColor: '#ff6847' },\n    textColorPurple: { lightModeColor: '#763e9b', darkModeColor: '#d394f9' },\n    textColorDarkBlue: { lightModeColor: '#174e86', darkModeColor: '#93b8f9' },\n    textColorDarkGreen: { lightModeColor: '#0f5c1a', darkModeColor: '#7fc57b' },\n    textColorDarkYellow: { lightModeColor: '#c3971d', darkModeColor: '#946f00' },\n    textColorDarkOrange: { lightModeColor: '#be5b17', darkModeColor: '#de7633' },\n    textColorDarkRed: { lightModeColor: '#861106', darkModeColor: '#ff9b7c' },\n    textColorDarkPurple: { lightModeColor: '#5e327c', darkModeColor: '#dea9fd' },\n    textColorDarkerBlue: { lightModeColor: '#002451', darkModeColor: '#cedbff' },\n    textColorDarkerGreen: { lightModeColor: '#06400c', darkModeColor: '#a3da9b' },\n    textColorDarkerYellow: { lightModeColor: '#a37519', darkModeColor: '#b5852a' },\n    textColorDarkerOrange: { lightModeColor: '#934511', darkModeColor: '#ef935c' },\n    textColorDarkerRed: { lightModeColor: '#570606', darkModeColor: '#ffc0b1' },\n    textColorDarkerPurple: { lightModeColor: '#3b204d', darkModeColor: '#eecaff' },\n    textColorWhite: { lightModeColor: '#ffffff', darkModeColor: '#333333' },\n    textColorLightGray: { lightModeColor: '#cccccc', darkModeColor: '#535353' },\n    textColorGray: { lightModeColor: '#999999', darkModeColor: '#777777' },\n    textColorDarkGray: { lightModeColor: '#666666', darkModeColor: '#a0a0a0' },\n    textColorDarkerGray: { lightModeColor: '#333333', darkModeColor: '#cfcfcf' },\n    textColorBlack: { lightModeColor: '#000000', darkModeColor: '#ffffff' },\n};\n\n/**\n * @internal\n */\nconst BackgroundColors: { [key in BackgroundColorKeys]: ModeIndependentColor } = {\n    backgroundColorCyan: { lightModeColor: '#00ffff', darkModeColor: '#005357' },\n    backgroundColorGreen: { lightModeColor: '#00ff00', darkModeColor: '#005e00' },\n    backgroundColorYellow: { lightModeColor: '#ffff00', darkModeColor: '#383e00' },\n    backgroundColorOrange: { lightModeColor: '#ff8000', darkModeColor: '#bf4c00' },\n    backgroundColorRed: { lightModeColor: '#ff0000', darkModeColor: '#ff2711' },\n    backgroundColorMagenta: { lightModeColor: '#ff00ff', darkModeColor: '#e700e8' },\n    backgroundColorLightCyan: { lightModeColor: '#80ffff', darkModeColor: '#004c4f' },\n    backgroundColorLightGreen: { lightModeColor: '#80ff80', darkModeColor: '#005400' },\n    backgroundColorLightYellow: { lightModeColor: '#ffff80', darkModeColor: '#343c00' },\n    backgroundColorLightOrange: { lightModeColor: '#ffc080', darkModeColor: '#77480b' },\n    backgroundColorLightRed: { lightModeColor: '#ff8080', darkModeColor: '#bc454a' },\n    backgroundColorLightMagenta: { lightModeColor: '#ff80ff', darkModeColor: '#aa2bad' },\n    backgroundColorWhite: { lightModeColor: '#ffffff', darkModeColor: '#333333' },\n    backgroundColorLightGray: { lightModeColor: '#cccccc', darkModeColor: '#535353' },\n    backgroundColorGray: { lightModeColor: '#999999', darkModeColor: '#777777' },\n    backgroundColorDarkGray: { lightModeColor: '#666666', darkModeColor: '#a0a0a0' },\n    backgroundColorDarkerGray: { lightModeColor: '#333333', darkModeColor: '#cfcfcf' },\n    backgroundColorBlack: { lightModeColor: '#000000', darkModeColor: '#ffffff' },\n};\n\n/**\n * @internal\n */\ntype AllColorKeys = TextColorKeys | BackgroundColorKeys;\n\nconst AllColors: { [key in AllColorKeys]: ModeIndependentColor } = {\n    ...TextColors,\n    ...BackgroundColors,\n};\n\n/**\n * @internal\n * Common part of a color picker button\n */\nfunction getColorPickerDropDown(items: Record<string, string>): RibbonButtonDropDown {\n    return {\n        items,\n        itemClassName: classNames.colorMenuItem,\n        allowLivePreview: true,\n        itemRender: (item, onClick) => {\n            const key = item.key as AllColorKeys;\n            const buttonColor = AllColors[key].lightModeColor;\n            return (\n                <button onClick={e => onClick(e, item)} title={item.text}>\n                    <div\n                        className={\n                            classNames.colorSquare +\n                            ' ' +\n                            (key == 'textColorWhite' || key == 'backgroundColorWhite'\n                                ? classNames.colorSquareBorderWhite\n                                : classNames.colorSquareBorder)\n                        }\n                        style={{\n                            backgroundColor: buttonColor,\n                        }}></div>\n                </button>\n            );\n        },\n        commandBarSubMenuProperties: {\n            className: classNames.colorPickerContainer,\n        },\n    };\n}\n\nexport { TextColors, BackgroundColors, getColorPickerDropDown };\n","import { PasteOptionButtonKeys } from '../type/PasteOptionStringKeys';\n\n/**\n * @internal\n */\nexport interface PasteOptionButtonType {\n    unlocalizedText: string;\n    shortcut: string;\n    icon: string;\n}\n\n/**\n * @internal\n */\nexport const Buttons: Record<PasteOptionButtonKeys, PasteOptionButtonType> = {\n    pasteOptionPasteAsIs: {\n        unlocalizedText: 'Paste as is',\n        shortcut: 'P',\n        icon: 'Paste',\n    },\n    pasteOptionPasteText: {\n        unlocalizedText: 'Paste text',\n        shortcut: 'T',\n        icon: 'PasteAsText',\n    },\n    pasteOptionMergeFormat: {\n        unlocalizedText: 'Paste text and merge format',\n        shortcut: 'M',\n        icon: 'ClipboardList',\n    },\n};\n\n/**\n * @internal\n */\nexport const ButtonKeys: PasteOptionButtonKeys[] = Object.keys(Buttons) as PasteOptionButtonKeys[];\n","export * from './common/index';\nexport * from './rooster/index';\nexport * from './ribbon/index';\nexport * from './contextMenu/index';\nexport * from './pasteOptions/index';\n","import * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport UIUtilities from '../type/UIUtilities';\nimport { getComputedStyles } from 'roosterjs-editor-dom';\nimport { PartialTheme, ThemeProvider } from '@fluentui/react/lib/Theme';\nimport { WindowProvider } from '@fluentui/react/lib/WindowProvider';\n\n/**\n * Create the UI Utilities object for plugins to render additional react components\n * @param container Container DIV of editor\n * @param theme Current theme used by editor\n * @returns A UIUtilities object\n */\nexport default function createUIUtilities(\n    container: HTMLDivElement,\n    theme: PartialTheme\n): UIUtilities {\n    return {\n        renderComponent: element => {\n            const doc = container.ownerDocument;\n            const div = doc.createElement('div');\n            doc.body.appendChild(div);\n\n            ReactDOM.render(\n                <WindowProvider window={doc.defaultView}>\n                    <ThemeProvider theme={theme}>{element}</ThemeProvider>\n                </WindowProvider>,\n                div\n            );\n\n            return () => {\n                ReactDOM.unmountComponentAtNode(div);\n                doc.body.removeChild(div);\n            };\n        },\n        isRightToLeft: () => {\n            const dir = container && getComputedStyles(container, 'direction')[0];\n\n            return dir == 'rtl';\n        },\n    };\n}\n","module.exports = ReactDOM;","export { default as RoosterProps } from './type/RoosterProps';\nexport { UpdateMode } from './type/UpdateMode';\nexport { default as UpdateContentPlugin } from './type/UpdateContentPlugin';\n\nexport { default as Rooster } from './component/Rooster';\n\nexport { default as createUpdateContentPlugin } from './plugin/createUpdateContentPlugin';\n","import * as React from 'react';\nimport RoosterProps from '../type/RoosterProps';\nimport { createUIUtilities, ReactEditorPlugin } from '../../common/index';\nimport { divProperties, getNativeProps } from '@fluentui/react/lib/Utilities';\nimport { Editor } from 'roosterjs-editor-core';\nimport { EditorOptions, EditorPlugin, IEditor } from 'roosterjs-editor-types';\nimport { useTheme } from '@fluentui/react/lib/Theme';\n\n/**\n * Main component of react wrapper for roosterjs\n * @param props Properties of this component\n * @returns The react component\n */\nexport default function Rooster(props: RoosterProps) {\n    const editorDiv = React.useRef<HTMLDivElement>(null);\n    const editor = React.useRef<IEditor>(null);\n    const theme = useTheme();\n\n    const { focusOnInit, editorCreator, zoomScale, inDarkMode, plugins } = props;\n\n    React.useEffect(() => {\n        if (plugins) {\n            const uiUtilities = createUIUtilities(editorDiv.current, theme);\n\n            plugins.forEach(plugin => {\n                if (isReactEditorPlugin(plugin)) {\n                    plugin.setUIUtilities(uiUtilities);\n                }\n            });\n        }\n    }, [theme, editorCreator]);\n\n    React.useEffect(() => {\n        editor.current = (editorCreator || defaultEditorCreator)(editorDiv.current, props);\n\n        if (focusOnInit) {\n            editor.current.focus();\n        }\n\n        return () => {\n            if (editor.current) {\n                editor.current.dispose();\n                editor.current = null;\n            }\n        };\n    }, [editorCreator]);\n\n    React.useEffect(() => {\n        editor.current.setDarkModeState(!!inDarkMode);\n    }, [inDarkMode]);\n\n    React.useEffect(() => {\n        editor.current.setZoomScale(zoomScale);\n    }, [zoomScale]);\n\n    const divProps = getNativeProps<React.HTMLAttributes<HTMLDivElement>>(props, divProperties);\n    return <div ref={editorDiv} tabIndex={0} {...(divProps || {})}></div>;\n}\n\nfunction defaultEditorCreator(div: HTMLDivElement, options: EditorOptions) {\n    return new Editor(div, options);\n}\n\nfunction isReactEditorPlugin(plugin: EditorPlugin): plugin is ReactEditorPlugin {\n    return !!(plugin as ReactEditorPlugin)?.setUIUtilities;\n}\n","import UpdateContentPlugin from '../type/UpdateContentPlugin';\nimport { IEditor, PluginEvent, PluginEventType } from 'roosterjs-editor-types';\nimport { UpdateMode } from '../type/UpdateMode';\n\n/**\n * A plugin to help get HTML content from editor\n */\nclass UpdateContentPluginImpl implements UpdateContentPlugin {\n    private editor: IEditor;\n    private disposer: () => void;\n\n    /**\n     * Create a new instance of UpdateContentPlugin class\n     * @param updateMode Mode of automatic update. It can be a combination of multiple UpdateMode values\n     * @param onUpdate A callback to be invoked when update happens\n     */\n    constructor(\n        private updateMode: UpdateMode,\n        private onUpdate: (html: string, mode: UpdateMode) => void\n    ) {}\n\n    /**\n     * Get a friendly name of this plugin\n     */\n    getName() {\n        return 'UpdateContent';\n    }\n\n    /**\n     * Initialize this plugin\n     * @param editor The editor instance\n     */\n    initialize(editor: IEditor) {\n        this.editor = editor;\n        this.disposer = this.editor.addDomEventHandler('blur', this.onBlur);\n    }\n\n    /**\n     * Dispose this plugin\n     */\n    dispose() {\n        this.disposer?.();\n        this.disposer = null;\n        this.editor = null;\n    }\n\n    /**\n     * Handle events triggered from editor\n     * @param event PluginEvent object\n     */\n    onPluginEvent(event: PluginEvent) {\n        switch (event.eventType) {\n            case PluginEventType.EditorReady:\n                this.update(UpdateMode.OnInitialize);\n                break;\n\n            case PluginEventType.BeforeDispose:\n                this.update(UpdateMode.OnDispose);\n                break;\n\n            case PluginEventType.ContentChanged:\n                this.update(UpdateMode.OnContentChangedEvent);\n                break;\n\n            case PluginEventType.Input:\n                this.update(UpdateMode.OnUserInput);\n                break;\n        }\n    }\n\n    /**\n     * Trigger a force update. onUpdate callback will be invoked with HTML content of editor\n     */\n    forceUpdate() {\n        this.update(UpdateMode.Force);\n    }\n\n    private onBlur = () => {\n        this.update(UpdateMode.OnBlur);\n    };\n\n    private update(mode: UpdateMode) {\n        if (\n            this.editor &&\n            (mode == UpdateMode.Force || ((this.updateMode || 0) & mode) == mode) &&\n            this.onUpdate\n        ) {\n            const content = this.editor.getContent();\n            this.onUpdate(content, mode);\n        }\n    }\n}\n\n/**\n * Create a new instance of UpdateContentPlugin class\n * @param updateMode Mode of automatic update. It can be a combination of multiple UpdateMode values\n * @param onUpdate A callback to be invoked when update happens\n */\nexport default function createUpdateContentPlugin(\n    updateMode: UpdateMode,\n    onUpdate: (html: string, mode: UpdateMode) => void\n): UpdateContentPlugin {\n    return new UpdateContentPluginImpl(updateMode, onUpdate);\n}\n","export { default as RibbonPlugin } from './type/RibbonPlugin';\nexport { default as RibbonButton } from './type/RibbonButton';\nexport { default as RibbonButtonDropDown } from './type/RibbonButtonDropDown';\nexport { default as RibbonProps } from './type/RibbonProps';\nexport { KnownRibbonButtonKey } from './type/KnownRibbonButton';\nexport {\n    BoldButtonStringKey,\n    ItalicButtonStringKey,\n    UnderlineButtonStringKey,\n    FontButtonStringKey,\n    FontSizeButtonStringKey,\n    IncreaseFontSizeButtonStringKey,\n    DecreaseFontSizeButtonStringKey,\n    TextColorButtonStringKey,\n    BackgroundColorButtonStringKey,\n    BulletedListButtonStringKey,\n    NumberedListButtonStringKey,\n    MoreCommandsButtonStringKey,\n    DecreaseIndentButtonStringKey,\n    IncreaseIndentButtonStringKey,\n    QuoteButtonStringKey,\n    AlignLeftButtonStringKey,\n    AlignCenterButtonStringKey,\n    AlignRightButtonStringKey,\n    InsertLinkButtonStringKey,\n    RemoveLinkButtonStringKey,\n    InsertTableButtonStringKey,\n    InsertImageButtonStringKey,\n    SuperscriptButtonStringKey,\n    SubscriptButtonStringKey,\n    StrikethroughButtonStringKey,\n    HeaderButtonStringKey,\n    CodeButtonStringKey,\n    LtrButtonStringKey,\n    RtlButtonStringKey,\n    UndoButtonStringKey,\n    RedoButtonStringKey,\n    ClearFormatButtonStringKey,\n    TextColorKeys,\n    BackgroundColorKeys,\n    AllButtonStringKeys,\n    CellShadeButtonStringKey,\n} from './type/RibbonButtonStringKeys';\n\nexport { default as Ribbon } from './component/Ribbon';\nexport { default as getButtons, AllButtonKeys } from './component/getButtons';\n\nexport { default as createRibbonPlugin } from './plugin/createRibbonPlugin';\n","import * as React from 'react';\nimport getLocalizedString from '../../common/utils/getLocalizedString';\nimport RibbonButton from '../type/RibbonButton';\nimport RibbonProps from '../type/RibbonProps';\nimport { CommandBar, ICommandBarItemProps } from '@fluentui/react/lib/CommandBar';\nimport { FocusZoneDirection } from '@fluentui/react/lib/FocusZone';\nimport { FormatState } from 'roosterjs-editor-types';\nimport { IContextualMenuItem, IContextualMenuItemProps } from '@fluentui/react/lib/ContextualMenu';\nimport { mergeStyles } from '@fluentui/react/lib/Styling';\nimport { moreCommands } from './buttons/moreCommands';\n\nconst ribbonClassName = mergeStyles({\n    '& .ms-CommandBar': {\n        padding: '0px',\n    },\n});\n\nconst rtlIcon = mergeStyles({\n    transform: 'scaleX(-1)',\n});\n\n/**\n * The format ribbon component of roosterjs-react\n * @param props Properties of format ribbon component\n * @returns The format ribbon component\n */\nexport default function Ribbon<T extends string>(props: RibbonProps<T>) {\n    const { plugin, buttons, strings, dir } = props;\n    const [formatState, setFormatState] = React.useState<FormatState>(null);\n    const isRtl = dir == 'rtl';\n\n    const onClick = React.useCallback(\n        (_, item: IContextualMenuItem) => {\n            plugin?.onButtonClick(item.data as RibbonButton<T>, item.key, strings);\n        },\n        [plugin, strings]\n    );\n\n    const onHover = React.useCallback(\n        (button: RibbonButton<T>, key: string) => {\n            plugin.startLivePreview(button, key, strings);\n        },\n        [plugin, strings]\n    );\n\n    const onDismiss = React.useCallback(() => {\n        plugin.stopLivePreview();\n    }, [plugin]);\n\n    const flipIcon = React.useCallback(\n        (\n            props?: IContextualMenuItemProps,\n            defaultRender?: (props?: IContextualMenuItemProps) => JSX.Element | null\n        ): JSX.Element | null => {\n            return <span className={rtlIcon}>{defaultRender(props)}</span>;\n        },\n        []\n    );\n\n    const commandBarItems = React.useMemo((): ICommandBarItemProps[] => {\n        return buttons.map(\n            (button): ICommandBarItemProps => {\n                const selectedItem =\n                    formatState && button.dropDownMenu?.getSelectedItemKey?.(formatState);\n                const dropDownMenu = button.dropDownMenu;\n\n                const result: ICommandBarItemProps = {\n                    key: button.key,\n                    data: button,\n                    iconProps: {\n                        iconName: button.iconName,\n                    },\n                    onRenderIcon: isRtl && button.flipWhenRtl ? flipIcon : undefined,\n                    iconOnly: true,\n                    text: getLocalizedString(strings, button.key, button.unlocalizedText),\n                    ariaLabel: getLocalizedString(strings, button.key, button.unlocalizedText),\n                    canCheck: true,\n                    checked: (formatState && button.isChecked?.(formatState)) || false,\n                    disabled: (formatState && button.isDisabled?.(formatState)) || false,\n                    ...(button.commandBarProperties || {}),\n                };\n\n                if (dropDownMenu) {\n                    result.subMenuProps = {\n                        shouldFocusOnMount: true,\n                        focusZoneProps: { direction: FocusZoneDirection.bidirectional },\n                        onDismiss: onDismiss,\n                        onItemClick: onClick,\n                        onRenderContextualMenuItem: dropDownMenu.allowLivePreview\n                            ? (props, defaultRenderer) => (\n                                  <div onMouseOver={e => onHover(button, props.key)}>\n                                      {defaultRenderer(props)}\n                                  </div>\n                              )\n                            : undefined,\n                        items: Object.keys(dropDownMenu.items).map(key => ({\n                            key: key,\n                            text: getLocalizedString(strings, key, dropDownMenu.items[key]),\n                            data: button,\n                            canCheck: !!dropDownMenu.getSelectedItemKey,\n                            checked: selectedItem == key || false,\n                            className: dropDownMenu.itemClassName,\n                            onRender: dropDownMenu.itemRender\n                                ? item => dropDownMenu.itemRender(item, onClick)\n                                : undefined,\n                        })),\n                        ...(dropDownMenu.commandBarSubMenuProperties || {}),\n                    };\n                } else {\n                    result.onClick = onClick;\n                }\n\n                return result;\n            }\n        );\n    }, [buttons, formatState, isRtl, strings, onClick, onDismiss, onHover]);\n\n    React.useEffect(() => {\n        const disposer = plugin?.registerFormatChangedCallback(setFormatState);\n\n        return () => {\n            disposer?.();\n        };\n    }, [plugin]);\n\n    const moreCommandsBtn = moreCommands as RibbonButton<T>;\n\n    return (\n        <CommandBar\n            items={commandBarItems}\n            {...props}\n            className={ribbonClassName + ' ' + (props?.className || '')}\n            overflowButtonProps={{\n                ariaLabel: getLocalizedString(\n                    strings,\n                    moreCommandsBtn.key,\n                    moreCommandsBtn.unlocalizedText\n                ),\n            }}\n        />\n    );\n}\n","import RibbonButton from '../../type/RibbonButton';\nimport { MoreCommandsButtonStringKey } from '../../type/RibbonButtonStringKeys';\n\n/**\n * @internal\n * \"More commands\" (overflow) button on the format ribbon\n */\nexport const moreCommands: RibbonButton<MoreCommandsButtonStringKey> = {\n    key: 'buttonNameMoreCommands',\n    unlocalizedText: 'More commands',\n    iconName: 'MoreCommands',\n    onClick: editor => {\n        return true;\n    },\n};\n","import RibbonButton from '../type/RibbonButton';\nimport { alignCenter } from './buttons/alignCenter';\nimport { alignLeft } from './buttons/alignLeft';\nimport { alignRight } from './buttons/alignRight';\nimport { AllButtonStringKeys } from '../type/RibbonButtonStringKeys';\nimport { backgroundColor } from './buttons/backgroundColor';\nimport { bold } from './buttons/bold';\nimport { bulletedList } from './buttons/bulletedList';\nimport { clearFormat } from './buttons/clearFormat';\nimport { code } from './buttons/code';\nimport { decreaseFontSize } from './buttons/decreaseFontSize';\nimport { decreaseIndent } from './buttons/decreaseIndent';\nimport { font } from './buttons/font';\nimport { fontSize } from './buttons/fontSize';\nimport { header } from './buttons/header';\nimport { increaseFontSize } from './buttons/increaseFontSize';\nimport { increaseIndent } from './buttons/increaseIndent';\nimport { insertImage } from './buttons/insertImage';\nimport { insertLink } from './buttons/insertLink';\nimport { insertTable } from './buttons/insertTable';\nimport { italic } from './buttons/italic';\nimport { KnownRibbonButtonKey } from '../type/KnownRibbonButton';\nimport { ltr } from './buttons/ltr';\nimport { numberedList } from './buttons/numberedList';\nimport { quote } from './buttons/quote';\nimport { redo } from './buttons/redo';\nimport { removeLink } from './buttons/removeLink';\nimport { rtl } from './buttons/rtl';\nimport { strikethrough } from './buttons/strikethrough';\nimport { subscript } from './buttons/subscript';\nimport { superscript } from './buttons/superscript';\nimport { textColor } from './buttons/textColor';\nimport { underline } from './buttons/underline';\nimport { undo } from './buttons/undo';\n\nconst KnownRibbonButtons: { [key in KnownRibbonButtonKey]: RibbonButton<AllButtonStringKeys> } = {\n    [KnownRibbonButtonKey.Bold]: bold,\n    [KnownRibbonButtonKey.Italic]: italic,\n    [KnownRibbonButtonKey.Underline]: underline,\n    [KnownRibbonButtonKey.Font]: font,\n    [KnownRibbonButtonKey.FontSize]: fontSize,\n    [KnownRibbonButtonKey.IncreaseFontSize]: increaseFontSize,\n    [KnownRibbonButtonKey.DecreaseFontSize]: decreaseFontSize,\n    [KnownRibbonButtonKey.TextColor]: textColor,\n    [KnownRibbonButtonKey.BackgroundColor]: backgroundColor,\n    [KnownRibbonButtonKey.BulletedList]: bulletedList,\n    [KnownRibbonButtonKey.NumberedList]: numberedList,\n    [KnownRibbonButtonKey.DecreaseIndent]: decreaseIndent,\n    [KnownRibbonButtonKey.IncreaseIndent]: increaseIndent,\n    [KnownRibbonButtonKey.Quote]: quote,\n    [KnownRibbonButtonKey.AlignLeft]: alignLeft,\n    [KnownRibbonButtonKey.AlignCenter]: alignCenter,\n    [KnownRibbonButtonKey.AlignRight]: alignRight,\n    [KnownRibbonButtonKey.InsertLink]: insertLink,\n    [KnownRibbonButtonKey.RemoveLink]: removeLink,\n    [KnownRibbonButtonKey.InsertTable]: insertTable,\n    [KnownRibbonButtonKey.InsertImage]: insertImage,\n    [KnownRibbonButtonKey.Superscript]: superscript,\n    [KnownRibbonButtonKey.Subscript]: subscript,\n    [KnownRibbonButtonKey.Strikethrough]: strikethrough,\n    [KnownRibbonButtonKey.Header]: header,\n    [KnownRibbonButtonKey.Code]: code,\n    [KnownRibbonButtonKey.Ltr]: ltr,\n    [KnownRibbonButtonKey.Rtl]: rtl,\n    [KnownRibbonButtonKey.Undo]: undo,\n    [KnownRibbonButtonKey.Redo]: redo,\n    [KnownRibbonButtonKey.ClearFormat]: clearFormat,\n};\n\n/**\n * An array of keys of all known ribbon buttons\n */\nexport const AllButtonKeys = [\n    KnownRibbonButtonKey.Bold,\n    KnownRibbonButtonKey.Italic,\n    KnownRibbonButtonKey.Underline,\n    KnownRibbonButtonKey.Font,\n    KnownRibbonButtonKey.FontSize,\n    KnownRibbonButtonKey.IncreaseFontSize,\n    KnownRibbonButtonKey.DecreaseFontSize,\n    KnownRibbonButtonKey.TextColor,\n    KnownRibbonButtonKey.BackgroundColor,\n    KnownRibbonButtonKey.BulletedList,\n    KnownRibbonButtonKey.NumberedList,\n    KnownRibbonButtonKey.DecreaseIndent,\n    KnownRibbonButtonKey.IncreaseIndent,\n    KnownRibbonButtonKey.Quote,\n    KnownRibbonButtonKey.AlignLeft,\n    KnownRibbonButtonKey.AlignCenter,\n    KnownRibbonButtonKey.AlignRight,\n    KnownRibbonButtonKey.InsertLink,\n    KnownRibbonButtonKey.RemoveLink,\n    KnownRibbonButtonKey.InsertTable,\n    KnownRibbonButtonKey.InsertImage,\n    KnownRibbonButtonKey.Superscript,\n    KnownRibbonButtonKey.Subscript,\n    KnownRibbonButtonKey.Strikethrough,\n    KnownRibbonButtonKey.Header,\n    KnownRibbonButtonKey.Code,\n    KnownRibbonButtonKey.Ltr,\n    KnownRibbonButtonKey.Rtl,\n    KnownRibbonButtonKey.Undo,\n    KnownRibbonButtonKey.Redo,\n    KnownRibbonButtonKey.ClearFormat,\n];\n\n/**\n * A shortcut to get all format buttons provided by roosterjs-react\n * @param keyOrButtons An array of buttons or known button key. Default value is all known buttons provided by roosterjs-react\n * @returns An array of all buttons\n */\nexport default function getButtons<StringKey extends string = null>(\n    keyOrButtons: (KnownRibbonButtonKey | RibbonButton<StringKey>)[] = AllButtonKeys\n): RibbonButton<AllButtonStringKeys | StringKey>[] {\n    return keyOrButtons.map(keyOrButton =>\n        typeof keyOrButton == 'number' ? KnownRibbonButtons[keyOrButton] : keyOrButton\n    );\n}\n","import RibbonButton from '../../type/RibbonButton';\nimport { AlignCenterButtonStringKey } from '../../type/RibbonButtonStringKeys';\nimport { Alignment } from 'roosterjs-editor-types';\nimport { setAlignment } from 'roosterjs-editor-api';\n\n/**\n * @internal\n * \"Align center\" button on the format ribbon\n */\nexport const alignCenter: RibbonButton<AlignCenterButtonStringKey> = {\n    key: 'buttonNameAlignCenter',\n    unlocalizedText: 'Align center',\n    iconName: 'AlignCenter',\n    onClick: editor => {\n        setAlignment(editor, Alignment.Center);\n    },\n};\n","import RibbonButton from '../../type/RibbonButton';\nimport { AlignLeftButtonStringKey } from '../../type/RibbonButtonStringKeys';\nimport { Alignment } from 'roosterjs-editor-types';\nimport { setAlignment } from 'roosterjs-editor-api';\n\n/**\n * @internal\n * \"Align left\" button on the format ribbon\n */\nexport const alignLeft: RibbonButton<AlignLeftButtonStringKey> = {\n    key: 'buttonNameAlignLeft',\n    unlocalizedText: 'Align left',\n    iconName: 'AlignLeft',\n    onClick: editor => {\n        setAlignment(editor, Alignment.Left);\n    },\n};\n","import RibbonButton from '../../type/RibbonButton';\nimport { Alignment } from 'roosterjs-editor-types';\nimport { AlignRightButtonStringKey } from '../../type/RibbonButtonStringKeys';\nimport { setAlignment } from 'roosterjs-editor-api';\n\n/**\n * @internal\n * \"Align right\" button on the format ribbon\n */\nexport const alignRight: RibbonButton<AlignRightButtonStringKey> = {\n    key: 'buttonNameAlignRight',\n    unlocalizedText: 'Align right',\n    iconName: 'AlignRight',\n    onClick: editor => {\n        setAlignment(editor, Alignment.Right);\n    },\n};\n","import RibbonButton from '../../type/RibbonButton';\nimport { IEditor } from 'roosterjs-editor-types';\nimport { setBackgroundColor } from 'roosterjs-editor-api';\nimport {\n    BackgroundColors,\n    BackgroundColorDropDownItems,\n    getColorPickerDropDown,\n} from './colorPicker';\n\nimport {\n    BackgroundColorKeys,\n    BackgroundColorButtonStringKey,\n} from '../../type/RibbonButtonStringKeys';\n\n/**\n * @internal\n * \"Background color\" button on the format ribbon\n */\nexport const backgroundColor: RibbonButton<BackgroundColorButtonStringKey> = {\n    dropDownMenu: getColorPickerDropDown(BackgroundColorDropDownItems),\n    key: 'buttonNameBackgroundColor',\n    unlocalizedText: 'Background color',\n    iconName: 'FabricTextHighlight',\n    onClick: (editor: IEditor, key: BackgroundColorKeys) => {\n        setBackgroundColor(editor, BackgroundColors[key]);\n    },\n};\n","import RibbonButton from '../../type/RibbonButton';\nimport { BoldButtonStringKey } from '../../type/RibbonButtonStringKeys';\nimport { toggleBold } from 'roosterjs-editor-api';\n\n/**\n * @internal\n * \"Bold\" button on the format ribbon\n */\nexport const bold: RibbonButton<BoldButtonStringKey> = {\n    key: 'buttonNameBold',\n    unlocalizedText: 'Bold',\n    iconName: 'Bold',\n    isChecked: formatState => formatState.isBold,\n    onClick: editor => {\n        toggleBold(editor);\n        return true;\n    },\n};\n","import RibbonButton from '../../type/RibbonButton';\nimport { BulletedListButtonStringKey } from '../../type/RibbonButtonStringKeys';\nimport { toggleBullet } from 'roosterjs-editor-api';\n\n/**\n * @internal\n * \"Bulleted list\" button on the format ribbon\n */\nexport const bulletedList: RibbonButton<BulletedListButtonStringKey> = {\n    key: 'buttonNameBulletedList',\n    unlocalizedText: 'Bulleted list',\n    iconName: 'BulletedList',\n    isChecked: formatState => formatState.isBullet,\n    onClick: editor => {\n        toggleBullet(editor);\n        return true;\n    },\n};\n","import RibbonButton from '../../type/RibbonButton';\nimport { clearFormat as clearFormatApi } from 'roosterjs-editor-api';\nimport { ClearFormatButtonStringKey } from '../../type/RibbonButtonStringKeys';\n\n/**\n * @internal\n * \"Clear format\" button on the format ribbon\n */\nexport const clearFormat: RibbonButton<ClearFormatButtonStringKey> = {\n    key: 'buttonNameClearFormat',\n    unlocalizedText: 'Clear format',\n    iconName: 'ClearFormatting',\n    onClick: editor => {\n        clearFormatApi(editor);\n    },\n};\n","import RibbonButton from '../../type/RibbonButton';\nimport { CodeButtonStringKey } from '../../type/RibbonButtonStringKeys';\nimport { toggleCodeBlock } from 'roosterjs-editor-api';\n\n/**\n * @internal\n * \"Code\" button on the format ribbon\n */\nexport const code: RibbonButton<CodeButtonStringKey> = {\n    key: 'buttonNameCode',\n    unlocalizedText: 'Code',\n    iconName: 'Code',\n    onClick: editor => {\n        toggleCodeBlock(editor);\n    },\n};\n","import RibbonButton from '../../type/RibbonButton';\nimport { changeFontSize } from 'roosterjs-editor-api';\nimport { DecreaseFontSizeButtonStringKey } from '../../type/RibbonButtonStringKeys';\nimport { FontSizeChange } from 'roosterjs-editor-types';\n\n/**\n * @internal\n * \"Decrease font size\" button on the format ribbon\n */\nexport const decreaseFontSize: RibbonButton<DecreaseFontSizeButtonStringKey> = {\n    key: 'buttonNameDecreaseFontSize',\n    unlocalizedText: 'Decrease font size',\n    iconName: 'FontDecrease',\n    onClick: editor => {\n        changeFontSize(editor, FontSizeChange.Decrease);\n    },\n};\n","import RibbonButton from '../../type/RibbonButton';\nimport { DecreaseIndentButtonStringKey } from '../../type/RibbonButtonStringKeys';\nimport { Indentation } from 'roosterjs-editor-types';\nimport { setIndentation } from 'roosterjs-editor-api';\n\n/**\n * @internal\n * \"Decrease indent\" button on the format ribbon\n */\nexport const decreaseIndent: RibbonButton<DecreaseIndentButtonStringKey> = {\n    key: 'buttonNameDecreaseIndent',\n    unlocalizedText: 'Decrease indent',\n    iconName: 'DecreaseIndentLegacy',\n    flipWhenRtl: true,\n    onClick: editor => {\n        setIndentation(editor, Indentation.Decrease);\n    },\n};\n","import RibbonButton from '../../type/RibbonButton';\nimport { FontButtonStringKey } from '../../type/RibbonButtonStringKeys';\nimport { setFontName } from 'roosterjs-editor-api';\n\ninterface FontName {\n    name: string;\n    family: string;\n    localizedName?: string;\n}\nconst FontNames: FontName[] = [\n    { name: 'Arial', family: 'Arial,Helvetica,sans-serif' },\n    { name: 'Arial Black', family: \"'Arial Black',Arial,sans-serif\" },\n    { name: 'Calibri', family: 'Calibri,Helvetica,sans-serif' },\n    { name: 'Calibri Light', family: \"'Calibri Light','Helvetica Light',sans-serif\" },\n    { name: 'Cambria', family: 'Cambria,Georgia,serif' },\n    { name: 'Candara', family: 'Candara,Optima,sans-serif' },\n    { name: 'Century Gothic', family: \"'Century Gothic',sans-serif\" },\n    { name: 'Comic Sans MS', family: \"'Comic Sans MS',Chalkboard,cursive\" },\n    { name: 'Consolas', family: 'Consolas,Courier,monospace' },\n    { name: 'Constantia', family: \"Constantia,'Hoefler Text',serif\" },\n    { name: 'Corbel', family: 'Corbel,Skia,sans-serif' },\n    { name: 'Courier New', family: \"'Courier New',monospace\" },\n    {\n        name: 'Franklin Gothic Book',\n        family: \"'Franklin Gothic Book','Avenir Next Condensed',sans-serif\",\n    },\n    {\n        name: 'Franklin Gothic Demi',\n        family: \"'Franklin Gothic Demi','Avenir Next Condensed Demi Bold',sans-serif\",\n    },\n    {\n        name: 'Franklin Gothic Medium',\n        family: \"'Franklin Gothic Medium','Avenir Next Condensed Medium',sans-serif\",\n    },\n    { name: 'Garamond', family: 'Garamond,Georgia,serif' },\n    { name: 'Georgia', family: 'Georgia,serif' },\n    { name: 'Impact', family: 'Impact,Charcoal,sans-serif' },\n    { name: 'Lucida Console', family: \"'Lucida Console',Monaco,monospace\" },\n    { name: 'Lucida Handwriting', family: \"'Lucida Handwriting','Apple Chancery',cursive\" },\n    { name: 'Lucida Sans Unicode', family: \"'Lucida Sans Unicode','Lucida Grande',sans-serif\" },\n    { name: 'Palatino Linotype', family: \"'Palatino Linotype','Book Antiqua',Palatino,serif\" },\n    {\n        name: 'Segoe UI',\n        family: \"'Segoe UI', 'Segoe UI Web (West European)', 'Helvetica Neue', sans-serif\",\n    },\n    { name: 'Sitka Heading', family: \"'Sitka Heading',Cochin,serif\" },\n    { name: 'Sitka Text', family: \"'Sitka Text',Cochin,serif\" },\n    { name: 'Tahoma', family: 'Tahoma,Geneva,sans-serif' },\n    { name: 'Times', family: \"Times,'Times New Roman',serif\" },\n    { name: 'Times New Roman', family: \"'Times New Roman',Times,serif\" },\n    { name: 'Trebuchet MS', family: \"'Trebuchet MS',Trebuchet,sans-serif\" },\n    { name: 'TW Cen MT', family: \"'TW Cen MT','Century Gothic',sans-serif\" },\n    { name: 'Verdana', family: 'Verdana,Geneva,sans-serif' },\n    { name: '-', family: 'FontDivider0' }, //divider between fonts for different scripts (order is by style)\n    {\n        name: 'Microsoft YaHei',\n        family: \"'Microsoft YaHei','微软雅黑',STHeiti,sans-serif\",\n        localizedName: '微软雅黑',\n    }, //chineseS Microsoft recommended font\n    { name: 'SimHei', family: \"SimHei,'黑体',STHeiti,sans-serif\", localizedName: '黑体' }, //chineseS\n    {\n        name: 'NSimSun',\n        family: \"NSimSun,'新宋体',SimSun,'宋体',SimSun-ExtB,'宋体-ExtB',STSong,serif\",\n        localizedName: '新宋体',\n    }, //chineseS\n    { name: 'FangSong', family: \"FangSong,'仿宋',STFangsong,serif\", localizedName: '仿宋' }, //chineseS\n    { name: 'SimLi', family: \"SimLi,'隶书','Baoli SC',serif\", localizedName: '隶书' }, //chineseS\n    { name: 'KaiTi', family: \"KaiTi,'楷体',STKaiti,serif\", localizedName: '楷体' }, //chineseS\n    { name: '-', family: 'FontDivider1' }, //divider between fonts for different scripts (order is by style)\n    {\n        name: 'Microsoft JhengHei',\n        family: \"'Microsoft JhengHei','微軟正黑體','Apple LiGothic',sans-serif\",\n        localizedName: '微軟正黑體',\n    }, //chineseT Microsoft recommended font\n    {\n        name: 'PMingLiU',\n        family: \"PMingLiU,'新細明體',PMingLiU-ExtB,'新細明體-ExtB','Apple LiSung',serif\",\n        localizedName: '新細明體',\n    }, //chineseT\n    { name: 'DFKai-SB', family: \"DFKai-SB,'標楷體','BiauKai',serif\", localizedName: '標楷體' }, //chineseT\n    { name: '-', family: 'FontDivider2' }, //divider between fonts for different scripts (order is alphabetical by foundry)\n    {\n        name: 'Meiryo',\n        family: \"Meiryo,'メイリオ','Hiragino Sans',sans-serif\",\n        localizedName: 'メイリオ',\n    }, //japanese\n    {\n        name: 'MS PGothic',\n        family:\n            \"'MS PGothic','ＭＳ Ｐゴシック','MS Gothic','ＭＳ ゴシック','Hiragino Kaku Gothic ProN',sans-serif\",\n        localizedName: 'ＭＳ Ｐゴシック',\n    }, //japanese\n    {\n        name: 'MS PMincho',\n        family: \"'MS PMincho','ＭＳ Ｐ明朝','MS Mincho','ＭＳ 明朝','Hiragino Mincho ProN',serif\",\n        localizedName: 'ＭＳ Ｐ明朝',\n    }, //japanese\n    {\n        name: 'Yu Gothic',\n        family: \"'Yu Gothic','游ゴシック','YuGothic',sans-serif\",\n        localizedName: '游ゴシック',\n    }, //japanese\n    { name: 'Yu Mincho', family: \"'Yu Mincho','游明朝','YuMincho',serif\", localizedName: '游明朝' }, //japanese\n    { name: '-', family: 'FontDivider3' }, //divider between fonts for different scripts (order is for legacy reasons)\n    {\n        name: 'Malgun Gothic',\n        family: \"'Malgun Gothic','맑은 고딕',AppleGothic,sans-serif\",\n        localizedName: '맑은 고딕',\n    }, //korean Microsoft recommended font\n    { name: 'Gulim', family: \"Gulim,'굴림','Nanum Gothic',sans-serif\", localizedName: '굴림' }, //korean\n    { name: 'Dotum', family: \"Dotum,'돋움',AppleGothic,sans-serif\", localizedName: '돋움' }, //korean\n    { name: 'Batang', family: \"Batang,'바탕',AppleMyungjo,serif\", localizedName: '바탕' }, //korean\n    { name: 'BatangChe', family: \"BatangChe,'바탕체',AppleMyungjo,serif\", localizedName: '바탕체' }, //korean\n    { name: 'Gungsuh', family: \"Gungsuh,'궁서',GungSeo,serif\", localizedName: '궁서' }, //korean\n    { name: '-', family: 'FontDivider4' }, //divider between fonts for different scripts (order is alphabetical)\n    { name: 'Leelawadee UI', family: \"'Leelawadee UI',Thonburi,sans-serif\" }, //thai Microsoft recommended font\n    { name: 'Angsana New', family: \"'Angsana New','Leelawadee UI',Sathu,serif\" }, //thai\n    { name: 'Cordia New', family: \"'Cordia New','Leelawadee UI',Silom,sans-serif\" }, //thai\n    { name: 'DaunPenh', family: \"DaunPenh,'Leelawadee UI','Khmer MN',sans-serif\" }, //khmer\n    { name: '-', family: 'FontDivider5' }, //divider between fonts for different scripts (order is alphabetical)\n    { name: 'Nirmala UI', family: \"'Nirmala UI',sans-serif\" }, //indic Microsoft recommended font\n    { name: 'Gautami', family: \"Gautami,'Nirmala UI','Telugu MN',sans-serif\" }, //indic\n    { name: 'Iskoola Pota', family: \"'Iskoola Pota','Nirmala UI','Sinhala MN',sans-serif\" }, //indic\n    { name: 'Kalinga', family: \"Kalinga,'Nirmala UI','Oriya MN',sans-serif\" }, //indic\n    { name: 'Kartika', family: \"Kartika,'Nirmala UI','Malayalam MN',sans-serif\" }, //indic\n    { name: 'Latha', family: \"Latha,'Nirmala UI','Tamil MN',sans-serif\" }, //indic\n    { name: 'Mangal', family: \"Mangal,'Nirmala UI','Devanagari Sangam MN',sans-serif\" }, //indic\n    { name: 'Raavi', family: \"Raavi,'Nirmala UI','Gurmukhi MN',sans-serif\" }, //indic\n    { name: 'Shruti', family: \"Shruti,'Nirmala UI','Gujarati Sangam MN',sans-serif\" }, //indic\n    { name: 'Tunga', family: \"Tunga,'Nirmala UI','Kannada MN',sans-serif\" }, //indic\n    { name: 'Vrinda', family: \"Vrinda,'Nirmala UI','Bangla MN',sans-serif\" }, //indic\n    { name: '-', family: 'FontDivider6' }, //divider between fonts for different scripts\n    { name: 'Nyala', family: 'Nyala,Kefa,sans-serif' }, //other-ethiopic\n    { name: 'Sylfaen', family: 'Sylfaen,Mshtakan,Menlo,serif' }, //other-armenian-georgian\n];\n\nconst DropDownItems = FontNames.reduce((items, font) => {\n    items[font.family] = font.localizedName || font.name;\n    return items;\n}, <Record<string, string>>{});\n\nconst LowerCaseFontMap = FontNames.reduce((items, font) => {\n    items[font.name.toLowerCase()] = font.family;\n    return items;\n}, <Record<string, string>>{});\n\nconst FirstFontRegex = /^['\"]?([^'\",]+)/i;\n\n/**\n * @internal\n * \"Font\" button on the format ribbon\n */\nexport const font: RibbonButton<FontButtonStringKey> = {\n    key: 'buttonNameFont',\n    unlocalizedText: 'Font',\n    iconName: 'Font',\n    dropDownMenu: {\n        items: DropDownItems,\n        getSelectedItemKey: formatState => {\n            const matches = formatState.fontName?.match(FirstFontRegex);\n            const firstName = matches?.[1]?.toLowerCase();\n            const selectedKey = (firstName && LowerCaseFontMap[firstName]) || '';\n\n            return selectedKey;\n        },\n        allowLivePreview: true,\n    },\n    onClick: (editor, font) => {\n        setFontName(editor, font);\n    },\n};\n","import RibbonButton from '../../type/RibbonButton';\nimport { FONT_SIZES, setFontSize } from 'roosterjs-editor-api';\nimport { FontSizeButtonStringKey } from '../../type/RibbonButtonStringKeys';\n\n/**\n * @internal\n * \"Font Size\" button on the format ribbon\n */\nexport const fontSize: RibbonButton<FontSizeButtonStringKey> = {\n    key: 'buttonNameFontSize',\n    unlocalizedText: 'Font size',\n    iconName: 'FontSize',\n    dropDownMenu: {\n        items: FONT_SIZES.reduce((map, size) => {\n            map[size + 'pt'] = size.toString();\n            return map;\n        }, <Record<string, string>>{}),\n        getSelectedItemKey: formatState => formatState.fontSize,\n        allowLivePreview: true,\n    },\n    onClick: (editor, size) => {\n        setFontSize(editor, size);\n    },\n};\n","import RibbonButton from '../../type/RibbonButton';\nimport { HeaderButtonStringKey } from '../../type/RibbonButtonStringKeys';\nimport { toggleHeader } from 'roosterjs-editor-api';\n\nconst headers = {\n    header1: 'Header 1',\n    header2: 'Header 2',\n    header3: 'Header 3',\n    header4: 'Header 4',\n    header5: 'Header 5',\n    header6: 'Header 6',\n    headerDivider: '-',\n    noHeader: 'No header',\n};\n\n/**\n * @internal\n * \"Header\" button on the format ribbon\n */\nexport const header: RibbonButton<HeaderButtonStringKey> = {\n    key: 'buttonNameHeader',\n    unlocalizedText: 'Header',\n    iconName: 'Header1',\n    dropDownMenu: {\n        items: headers,\n        getSelectedItemKey: formatState => {\n            return formatState.headerLevel > 0 ? 'header' + formatState.headerLevel : 'noHeader';\n        },\n    },\n    onClick: (editor, key) => {\n        const index = Object.keys(headers).indexOf(key) + 1;\n\n        if (index > 6) {\n            toggleHeader(editor, 0);\n        } else if (index > 0) {\n            toggleHeader(editor, index);\n        }\n    },\n};\n","import RibbonButton from '../../type/RibbonButton';\nimport { changeFontSize } from 'roosterjs-editor-api';\nimport { FontSizeChange } from 'roosterjs-editor-types';\nimport { IncreaseFontSizeButtonStringKey } from '../../type/RibbonButtonStringKeys';\n\n/**\n * @internal\n * \"Increase font size\" button on the format ribbon\n */\nexport const increaseFontSize: RibbonButton<IncreaseFontSizeButtonStringKey> = {\n    key: 'buttonNameIncreaseFontSize',\n    unlocalizedText: 'Increase font size',\n    iconName: 'FontIncrease',\n    onClick: editor => {\n        changeFontSize(editor, FontSizeChange.Increase);\n    },\n};\n","import RibbonButton from '../../type/RibbonButton';\nimport { IncreaseIndentButtonStringKey } from '../../type/RibbonButtonStringKeys';\nimport { Indentation } from 'roosterjs-editor-types';\nimport { setIndentation } from 'roosterjs-editor-api';\n\n/**\n * @internal\n * \"Increase indent\" button on the format ribbon\n */\nexport const increaseIndent: RibbonButton<IncreaseIndentButtonStringKey> = {\n    key: 'buttonNameIncreaseIndent',\n    unlocalizedText: 'Increase indent',\n    iconName: 'IncreaseIndentLegacy',\n    flipWhenRtl: true,\n    onClick: editor => {\n        setIndentation(editor, Indentation.Increase);\n    },\n};\n","import RibbonButton from '../../type/RibbonButton';\nimport { createElement } from 'roosterjs-editor-dom';\nimport { CreateElementData } from 'roosterjs-editor-types';\nimport { insertImage as insertImageApi } from 'roosterjs-editor-api';\nimport { InsertImageButtonStringKey } from '../../type/RibbonButtonStringKeys';\n\nconst FileInput: CreateElementData = {\n    tag: 'input',\n    attributes: {\n        type: 'file',\n        accept: 'image/*',\n        display: 'none',\n    },\n};\n\n/**\n * @internal\n * \"Insert image\" button on the format ribbon\n */\nexport const insertImage: RibbonButton<InsertImageButtonStringKey> = {\n    key: 'buttonNameInsertImage',\n    unlocalizedText: 'Insert image',\n    iconName: 'Photo2',\n    onClick: editor => {\n        const document = editor.getDocument();\n        const fileInput = createElement(FileInput, document) as HTMLInputElement;\n        document.body.appendChild(fileInput);\n\n        fileInput.addEventListener('change', () => {\n            for (let i = 0; i < fileInput.files.length; i++) {\n                insertImageApi(editor, fileInput.files[i]);\n            }\n        });\n\n        try {\n            fileInput.click();\n        } finally {\n            document.body.removeChild(fileInput);\n        }\n    },\n};\n","import RibbonButton from '../../type/RibbonButton';\nimport showInputDialog from '../../../inputDialog/utils/showInputDialog';\nimport { createLink } from 'roosterjs-editor-api';\nimport { InsertLinkButtonStringKey } from '../../type/RibbonButtonStringKeys';\nimport { QueryScope } from 'roosterjs-editor-types';\n\n/**\n * @internal\n * \"Insert link\" button on the format ribbon\n */\nexport const insertLink: RibbonButton<InsertLinkButtonStringKey> = {\n    key: 'buttonNameInsertLink',\n    unlocalizedText: 'Insert link',\n    iconName: 'Link',\n    onClick: (editor, _, strings, uiUtilities) => {\n        const existingLink = editor.queryElements<HTMLAnchorElement>(\n            'a[href]',\n            QueryScope.OnSelection\n        )[0];\n        const url = existingLink?.href || '';\n        const displayText =\n            existingLink?.textContent || editor.getSelectionRange()?.toString() || '';\n        const items = {\n            url: {\n                autoFocus: true,\n                labelKey: 'insertLinkDialogUrl',\n                unlocalizedLabel: 'Web address (URL)',\n                initValue: url,\n            },\n            displayText: {\n                labelKey: 'insertLinkDialogDisplayAs',\n                unlocalizedLabel: 'Display as',\n                initValue: displayText,\n            },\n        };\n\n        showInputDialog(\n            uiUtilities,\n            'insertLinkTitle',\n            'Insert link',\n            items,\n            strings,\n            (itemName, newValue, values) => {\n                if (itemName == 'url' && values.displayText == values.url) {\n                    values.displayText = newValue;\n                    values.url = newValue;\n                    return values;\n                } else {\n                    return null;\n                }\n            }\n        ).then(result => {\n            editor.focus();\n\n            if (\n                result &&\n                result.displayText &&\n                result.url &&\n                (result.displayText != displayText || result.url != url)\n            ) {\n                createLink(editor, result.url, result.url, result.displayText);\n            }\n        });\n    },\n};\n","import * as React from 'react';\nimport DialogItem from '../type/DialogItem';\nimport InputDialogItem from './InputDialogItem';\nimport {\n    CancelButtonStringKey,\n    getLocalizedString,\n    LocalizedStrings,\n    OkButtonStringKey,\n} from '../../common/index';\nimport { DefaultButton, PrimaryButton } from '@fluentui/react/lib/Button';\nimport { Dialog, DialogFooter, DialogType } from '@fluentui/react/lib/Dialog';\n\n/**\n * @internal\n */\nexport interface InputDialogProps<Strings extends string, ItemNames extends string> {\n    dialogTitleKey: Strings;\n    unlocalizedTitle: string;\n    items: Record<ItemNames, DialogItem<Strings>>;\n    strings: LocalizedStrings<Strings | OkButtonStringKey | CancelButtonStringKey>;\n    onChange?: (\n        changedItemName: ItemNames,\n        newValue: string,\n        currentValues: Record<ItemNames, string>\n    ) => Record<ItemNames, string> | null;\n    onOk: (values: Record<ItemNames, string>) => void;\n    onCancel: () => void;\n}\n\n/**\n * @internal\n */\nexport default function InputDialog<Strings extends string, ItemNames extends string>(\n    props: InputDialogProps<Strings, ItemNames>\n) {\n    const { items, strings, dialogTitleKey, unlocalizedTitle, onOk, onCancel, onChange } = props;\n    const dialogContentProps = React.useMemo(\n        () => ({\n            type: DialogType.normal,\n            title: getLocalizedString(strings, dialogTitleKey, unlocalizedTitle),\n        }),\n        [strings, dialogTitleKey, unlocalizedTitle]\n    );\n    const [currentValues, setCurrentValues] = React.useState<Record<ItemNames, string>>(\n        Object.keys(items).reduce((result: Record<ItemNames, string>, key: keyof typeof items) => {\n            result[key] = items[key].initValue;\n            return result;\n        }, {} as Record<ItemNames, string>)\n    );\n\n    const onSubmit = React.useCallback(() => {\n        onOk?.(currentValues);\n    }, [onOk, currentValues]);\n    const onItemChanged = React.useCallback(\n        (itemName: ItemNames, newValue: string) => {\n            const newValues = onChange?.(itemName, newValue, { ...currentValues }) || {\n                ...currentValues,\n                [itemName]: newValue,\n            };\n\n            setCurrentValues(newValues);\n        },\n        [setCurrentValues, currentValues]\n    );\n\n    return (\n        <Dialog dialogContentProps={dialogContentProps} hidden={false} onDismiss={onCancel}>\n            <div>\n                {Object.keys(items).map((key: keyof typeof items) => (\n                    <InputDialogItem\n                        key={key}\n                        itemName={key}\n                        items={items}\n                        strings={strings}\n                        currentValues={currentValues}\n                        onEnterKey={onSubmit}\n                        onChanged={onItemChanged}\n                    />\n                ))}\n            </div>\n            <DialogFooter>\n                <PrimaryButton\n                    text={getLocalizedString(strings, 'buttonNameOK', 'OK')}\n                    onClick={onSubmit}\n                />\n                <DefaultButton\n                    text={getLocalizedString(strings, 'buttonNameCancel', 'Cancel')}\n                    onClick={onCancel}\n                />\n            </DialogFooter>\n        </Dialog>\n    );\n}\n","import * as React from 'react';\nimport DialogItem from '../type/DialogItem';\nimport { getLocalizedString, LocalizedStrings } from '../../common/index';\nimport { Keys } from 'roosterjs-editor-types';\nimport { mergeStyleSets } from '@fluentui/react/lib/Styling';\nimport { TextField } from '@fluentui/react/lib/TextField';\n\n/**\n * @internal\n */\nexport interface InputDialogItemProps<Strings extends string, ItemNames extends string> {\n    itemName: ItemNames;\n    strings: LocalizedStrings<Strings>;\n    items: Record<ItemNames, DialogItem<Strings>>;\n    currentValues: Record<ItemNames, string>;\n    onEnterKey: () => void;\n    onChanged: (itemName: string, newValue: string) => void;\n}\n\nconst classNames = mergeStyleSets({\n    inputBox: {\n        width: '100%',\n        minWidth: '250px',\n        height: '32px',\n        margin: '5px 0 16px',\n        borderRadius: '2px',\n    },\n});\n\n/**\n * @internal\n */\nexport default function InputDialogItem<Strings extends string, ItemNames extends string>(\n    props: InputDialogItemProps<Strings, ItemNames>\n) {\n    const { itemName, strings, items, currentValues, onChanged, onEnterKey } = props;\n    const { labelKey, unlocalizedLabel, autoFocus } = items[itemName];\n    const value = currentValues[itemName];\n    const onValueChange = React.useCallback(\n        (_, newValue) => {\n            onChanged(itemName, newValue);\n        },\n        [itemName, onChanged]\n    );\n\n    const onKeyPress = React.useCallback(\n        (e: React.KeyboardEvent<HTMLInputElement>) => {\n            if (e.which == Keys.ENTER) {\n                onEnterKey();\n            }\n        },\n        [onEnterKey]\n    );\n\n    return (\n        <div>\n            {labelKey ? <div>{getLocalizedString(strings, labelKey, unlocalizedLabel)}</div> : null}\n            <div>\n                <TextField\n                    role=\"textbox\"\n                    type=\"text\"\n                    className={classNames.inputBox}\n                    value={value}\n                    onChange={onValueChange}\n                    onKeyPress={onKeyPress}\n                    autoFocus={autoFocus}\n                />\n            </div>\n        </div>\n    );\n}\n","import * as React from 'react';\nimport RibbonButton from '../../type/RibbonButton';\nimport { FocusZone, FocusZoneDirection } from '@fluentui/react/lib/FocusZone';\nimport { IContextualMenuItem } from '@fluentui/react/lib/ContextualMenu';\nimport { insertTable as insertTableApi } from 'roosterjs-editor-api';\nimport { InsertTableButtonStringKey } from '../../type/RibbonButtonStringKeys';\nimport { mergeStyleSets } from '@fluentui/react/lib/Styling';\nimport { safeInstanceOf } from 'roosterjs-editor-dom';\n\nconst MaxRows = 10;\nconst MaxCols = 10;\nconst classNames = mergeStyleSets({\n    tableButton: {\n        width: '15px',\n        height: '15px',\n        margin: '1px 1px 0 0',\n        border: 'solid 1px #a19f9d',\n        display: 'inline-block',\n        cursor: 'pointer',\n        backgroundColor: 'transparent',\n    },\n    hovered: {\n        border: 'solid 1px #DB626C',\n    },\n    tablePane: {\n        width: '160px',\n        minWidth: 'auto',\n        padding: '4px',\n    },\n    tablePaneInner: {\n        lineHeight: '12px',\n    },\n    title: {\n        margin: '5px 0',\n    },\n});\n\n/**\n * @internal\n * \"Insert table\" button on the format ribbon\n */\nexport const insertTable: RibbonButton<InsertTableButtonStringKey> = {\n    key: 'buttonNameInsertTable',\n    unlocalizedText: 'Insert table',\n    iconName: 'Table',\n    onClick: (editor, key) => {\n        const { row, col } = parseKey(key);\n        insertTableApi(editor, col, row);\n    },\n    dropDownMenu: {\n        items: {\n            insertTablePane: '{0} x {1} table',\n        },\n        itemRender: (item, onClick) => {\n            return <InsertTablePane item={item} onClick={onClick} />;\n        },\n        commandBarSubMenuProperties: {\n            className: classNames.tablePane,\n        },\n    },\n};\n\nfunction InsertTablePane(props: {\n    item: IContextualMenuItem;\n    onClick: (\n        e: React.MouseEvent<Element> | React.KeyboardEvent<Element>,\n        item: IContextualMenuItem\n    ) => void;\n}) {\n    const { item, onClick } = props;\n    const [col, setCol] = React.useState(1);\n    const [row, setRow] = React.useState(1);\n\n    const updateSize = React.useCallback(\n        (t: EventTarget) => {\n            if (safeInstanceOf(t, 'HTMLElement')) {\n                const col = parseInt(t.dataset.col);\n                const row = parseInt(t.dataset.row);\n\n                if (col > 0 && col <= MaxCols && row > 0 && row <= MaxRows) {\n                    setCol(col);\n                    setRow(row);\n                }\n            }\n        },\n        [setCol, setRow]\n    );\n\n    const onMouseEnter = React.useCallback(\n        (e: React.MouseEvent<HTMLButtonElement>) => {\n            updateSize(e.target);\n        },\n        [updateSize]\n    );\n\n    const onClickButton = React.useCallback(\n        (e: React.MouseEvent<HTMLButtonElement>) => {\n            onClick(e, {\n                ...item,\n                key: createKey(row, col),\n            });\n        },\n        [row, col, onClick]\n    );\n\n    const ariaLabels = React.useMemo<string[][]>(() => {\n        const result: string[][] = [];\n        for (let i = 1; i <= MaxCols; i++) {\n            let col: string[] = [];\n            for (let j = 1; j <= MaxRows; j++) {\n                col[j] = formatText(item.text, i, j);\n            }\n            result[i] = col;\n        }\n        return result;\n    }, [item.text]);\n\n    const items = React.useMemo(() => {\n        const items: JSX.Element[] = [];\n\n        for (let i = 1; i <= MaxRows; i++) {\n            for (let j = 1; j <= MaxCols; j++) {\n                const key = `cell_${i}_${j}`;\n                const isSelected = j <= col && i <= row;\n                items.push(\n                    <button\n                        className={\n                            classNames.tableButton + ' ' + (isSelected ? classNames.hovered : '')\n                        }\n                        onClick={onClickButton}\n                        key={key}\n                        id={key}\n                        data-col={j}\n                        data-row={i}\n                        data-is-focusable={true}\n                        onMouseEnter={onMouseEnter}\n                        aria-label={ariaLabels[i][j]}\n                    />\n                );\n            }\n        }\n\n        return items;\n    }, [col, row]);\n\n    const text = formatText(item.text, row, col);\n\n    return (\n        <div className={classNames.tablePaneInner}>\n            <div className={classNames.title}>{text}</div>\n            <FocusZone\n                defaultActiveElement=\"cell_1_1\"\n                direction={FocusZoneDirection.bidirectional}\n                onActiveElementChanged={updateSize}>\n                {items}\n            </FocusZone>\n        </div>\n    );\n}\n\nfunction formatText(text: string, row: number, col: number) {\n    return text.replace('{0}', col.toString()).replace('{1}', row.toString());\n}\n\nfunction createKey(row: number, col: number) {\n    return `${row},${col}`;\n}\n\nfunction parseKey(key: string): { row: number; col: number } {\n    const [row, col] = key.split(',');\n    return {\n        row: parseInt(row),\n        col: parseInt(col),\n    };\n}\n","import RibbonButton from '../../type/RibbonButton';\nimport { ItalicButtonStringKey } from '../../type/RibbonButtonStringKeys';\nimport { toggleItalic } from 'roosterjs-editor-api';\n\n/**\n * @internal\n * \"Italic\" button on the format ribbon\n */\nexport const italic: RibbonButton<ItalicButtonStringKey> = {\n    key: 'buttonNameItalic',\n    unlocalizedText: 'Italic',\n    iconName: 'Italic',\n    isChecked: formatState => formatState.isItalic,\n    onClick: editor => {\n        toggleItalic(editor);\n        return true;\n    },\n};\n","import RibbonButton from '../../type/RibbonButton';\nimport { Direction } from 'roosterjs-editor-types';\nimport { LtrButtonStringKey } from '../../type/RibbonButtonStringKeys';\nimport { setDirection } from 'roosterjs-editor-api';\n\n/**\n * @internal\n * \"Left to right\" button on the format ribbon\n */\nexport const ltr: RibbonButton<LtrButtonStringKey> = {\n    key: 'buttonNameLtr',\n    unlocalizedText: 'Left to right',\n    iconName: 'BidiLtr',\n    onClick: editor => {\n        setDirection(editor, Direction.LeftToRight);\n    },\n};\n","import RibbonButton from '../../type/RibbonButton';\nimport { NumberedListButtonStringKey } from '../../type/RibbonButtonStringKeys';\nimport { toggleNumbering } from 'roosterjs-editor-api';\n\n/**\n * @internal\n * \"Numbered list\" button on the format ribbon\n */\nexport const numberedList: RibbonButton<NumberedListButtonStringKey> = {\n    key: 'buttonNameNumberedList',\n    unlocalizedText: 'Numbered list',\n    iconName: 'NumberedList',\n    isChecked: formatState => formatState.isNumbering,\n    onClick: editor => {\n        toggleNumbering(editor);\n        return true;\n    },\n};\n","import RibbonButton from '../../type/RibbonButton';\nimport { QuoteButtonStringKey } from '../../type/RibbonButtonStringKeys';\nimport { toggleBlockQuote } from 'roosterjs-editor-api';\n\n/**\n * @internal\n * \"Quote\" button on the format ribbon\n */\nexport const quote: RibbonButton<QuoteButtonStringKey> = {\n    key: 'buttonNameQuote',\n    unlocalizedText: 'Quote',\n    iconName: 'RightDoubleQuote',\n    isChecked: formatState => formatState.isBlockQuote,\n    onClick: editor => {\n        toggleBlockQuote(editor);\n        return true;\n    },\n};\n","import RibbonButton from '../../type/RibbonButton';\nimport { RedoButtonStringKey } from '../../type/RibbonButtonStringKeys';\n\n/**\n * @internal\n * \"Redo\" button on the format ribbon\n */\nexport const redo: RibbonButton<RedoButtonStringKey> = {\n    key: 'buttonNameRedo',\n    unlocalizedText: 'Redo',\n    iconName: 'Redo',\n    isDisabled: formatState => !formatState.canRedo,\n    onClick: editor => {\n        editor.redo();\n        return true;\n    },\n};\n","import RibbonButton from '../../type/RibbonButton';\nimport { removeLink as removeLinkApi } from 'roosterjs-editor-api';\nimport { RemoveLinkButtonStringKey } from '../../type/RibbonButtonStringKeys';\n\n/**\n * @internal\n * \"Remove link\" button on the format ribbon\n */\nexport const removeLink: RibbonButton<RemoveLinkButtonStringKey> = {\n    key: 'buttonNameRemoveLink',\n    unlocalizedText: 'Remove link',\n    iconName: 'RemoveLink',\n    isDisabled: formatState => !formatState.canUnlink,\n    onClick: editor => {\n        removeLinkApi(editor);\n    },\n};\n","import RibbonButton from '../../type/RibbonButton';\nimport { Direction } from 'roosterjs-editor-types';\nimport { RtlButtonStringKey } from '../../type/RibbonButtonStringKeys';\nimport { setDirection } from 'roosterjs-editor-api';\n\n/**\n * @internal\n * \"Right to left\" button on the format ribbon\n */\nexport const rtl: RibbonButton<RtlButtonStringKey> = {\n    key: 'buttonNameRtl',\n    unlocalizedText: 'Right to left',\n    iconName: 'BidiRtl',\n    onClick: editor => {\n        setDirection(editor, Direction.RightToLeft);\n    },\n};\n","import RibbonButton from '../../type/RibbonButton';\nimport { StrikethroughButtonStringKey } from '../../type/RibbonButtonStringKeys';\nimport { toggleStrikethrough } from 'roosterjs-editor-api';\n\n/**\n * @internal\n * \"Strikethrough\" button on the format ribbon\n */\nexport const strikethrough: RibbonButton<StrikethroughButtonStringKey> = {\n    key: 'buttonNameStrikethrough',\n    unlocalizedText: 'Strikethrough',\n    iconName: 'Strikethrough',\n    isChecked: formatState => formatState.isStrikeThrough,\n    onClick: editor => {\n        toggleStrikethrough(editor);\n        return true;\n    },\n};\n","import RibbonButton from '../../type/RibbonButton';\nimport { SubscriptButtonStringKey } from '../../type/RibbonButtonStringKeys';\nimport { toggleSubscript } from 'roosterjs-editor-api';\n\n/**\n * @internal\n * \"Subscript\" button on the format ribbon\n */\nexport const subscript: RibbonButton<SubscriptButtonStringKey> = {\n    key: 'buttonNameSubscript',\n    unlocalizedText: 'Subscript',\n    iconName: 'Subscript',\n    isChecked: formatState => formatState.isSubscript,\n    onClick: editor => {\n        toggleSubscript(editor);\n        return true;\n    },\n};\n","import RibbonButton from '../../type/RibbonButton';\nimport { SuperscriptButtonStringKey } from '../../type/RibbonButtonStringKeys';\nimport { toggleSuperscript } from 'roosterjs-editor-api';\n\n/**\n * @internal\n * \"Superscript\" button on the format ribbon\n */\nexport const superscript: RibbonButton<SuperscriptButtonStringKey> = {\n    key: 'buttonNameSuperscript',\n    unlocalizedText: 'Superscript',\n    iconName: 'Superscript',\n    isChecked: formatState => formatState.isSuperscript,\n    onClick: editor => {\n        toggleSuperscript(editor);\n        return true;\n    },\n};\n","import RibbonButton from '../../type/RibbonButton';\nimport { getColorPickerDropDown, TextColors } from './colorPicker';\nimport { setTextColor } from 'roosterjs-editor-api';\nimport { TextColorButtonStringKey, TextColorKeys } from '../../type/RibbonButtonStringKeys';\n\nconst TextColorDropDownItems: Record<TextColorKeys, string> = {\n    textColorLightBlue: 'Light blue',\n    textColorLightGreen: 'Light green',\n    textColorLightYellow: 'Light yellow',\n    textColorLightOrange: 'Light orange',\n    textColorLightRed: 'Light red',\n    textColorLightPurple: 'Light purple',\n    textColorBlue: 'Blue',\n    textColorGreen: 'Green',\n    textColorYellow: 'Yellow',\n    textColorOrange: 'Orange',\n    textColorRed: 'Red',\n    textColorPurple: 'Purple',\n    textColorDarkBlue: 'Dark blue',\n    textColorDarkGreen: 'Dark green',\n    textColorDarkYellow: 'Dark yellow',\n    textColorDarkOrange: 'Dark orange',\n    textColorDarkRed: 'Dark red',\n    textColorDarkPurple: 'Dark purple',\n    textColorDarkerBlue: 'Darker blue',\n    textColorDarkerGreen: 'Darker green',\n    textColorDarkerYellow: 'Darker yellow',\n    textColorDarkerOrange: 'Darker orange',\n    textColorDarkerRed: 'Darker red',\n    textColorDarkerPurple: 'Darker purple',\n    textColorWhite: 'White',\n    textColorLightGray: 'Light gray',\n    textColorGray: 'Gray',\n    textColorDarkGray: 'Dark gray',\n    textColorDarkerGray: 'Darker gray',\n    textColorBlack: 'Black',\n};\n\n/**\n * @internal\n * \"Text color\" button on the format ribbon\n */\nexport const textColor: RibbonButton<TextColorButtonStringKey> = {\n    dropDownMenu: getColorPickerDropDown(TextColorDropDownItems),\n    key: 'buttonNameTextColor',\n    unlocalizedText: 'Text color',\n    iconName: 'FontColor',\n    onClick: (editor, key: TextColorKeys) => {\n        setTextColor(editor, TextColors[key]);\n    },\n};\n","import RibbonButton from '../../type/RibbonButton';\nimport { toggleUnderline } from 'roosterjs-editor-api';\nimport { UnderlineButtonStringKey } from '../../type/RibbonButtonStringKeys';\n\n/**\n * @internal\n * \"Underline\" button on the format ribbon\n */\nexport const underline: RibbonButton<UnderlineButtonStringKey> = {\n    key: 'buttonNameUnderline',\n    unlocalizedText: 'Underline',\n    iconName: 'Underline',\n    isChecked: formatState => formatState.isUnderline,\n    onClick: editor => {\n        toggleUnderline(editor);\n        return true;\n    },\n};\n","import RibbonButton from '../../type/RibbonButton';\nimport { UndoButtonStringKey } from '../../type/RibbonButtonStringKeys';\n\n/**\n * @internal\n * \"Undo\" button on the format ribbon\n */\nexport const undo: RibbonButton<UndoButtonStringKey> = {\n    key: 'buttonNameUndo',\n    unlocalizedText: 'Undo',\n    iconName: 'undo',\n    isDisabled: formatState => !formatState.canUndo,\n    onClick: editor => {\n        editor.undo();\n        return true;\n    },\n};\n","import RibbonButton from '../type/RibbonButton';\nimport RibbonPlugin from '../type/RibbonPlugin';\nimport { FormatState, IEditor, PluginEvent, PluginEventType } from 'roosterjs-editor-types';\nimport { getFormatState } from 'roosterjs-editor-api';\nimport { LocalizedStrings, UIUtilities } from '../../common/index';\n\n/**\n * A plugin to connect format ribbon component and the editor\n */\nclass RibbonPluginImpl implements RibbonPlugin {\n    private editor: IEditor;\n    private onFormatChanged: (formatState: FormatState) => void;\n    private timer = 0;\n    private formatState: FormatState;\n    private uiUtilities: UIUtilities;\n\n    /**\n     * Construct a new instance of RibbonPlugin object\n     * @param delayUpdateTime The time to wait before refresh the button when user do some editing operation in editor\n     */\n    constructor(private delayUpdateTime: number = 200) {}\n\n    /**\n     * Get a friendly name of this plugin\n     */\n    getName() {\n        return 'Ribbon';\n    }\n\n    /**\n     * Initialize this plugin\n     * @param editor The editor instance\n     */\n    initialize(editor: IEditor) {\n        this.editor = editor;\n    }\n\n    /**\n     * Dispose this plugin\n     */\n    dispose() {\n        this.editor = null;\n    }\n\n    /**\n     * Handle events triggered from editor\n     * @param event PluginEvent object\n     */\n    onPluginEvent(event: PluginEvent) {\n        switch (event.eventType) {\n            case PluginEventType.EditorReady:\n            case PluginEventType.ContentChanged:\n            case PluginEventType.ZoomChanged:\n                this.updateFormat();\n                break;\n\n            case PluginEventType.KeyDown:\n            case PluginEventType.MouseDown:\n                this.delayUpdate();\n                break;\n        }\n    }\n\n    /**\n     * Set the UI utilities objects to this plugin to help render additional UI elements\n     * @param uiUtilities The UI utilities object to set\n     */\n    setUIUtilities(uiUtilities: UIUtilities) {\n        this.uiUtilities = uiUtilities;\n    }\n\n    /**\n     * Register a callback to be invoked when format state of editor is changed, returns a disposer function.\n     */\n    registerFormatChangedCallback(callback: (formatState: FormatState) => void) {\n        this.onFormatChanged = callback;\n\n        return () => {\n            this.onFormatChanged = null;\n        };\n    }\n\n    /**\n     * When user clicks on a button, call this method to let the plugin to handle this click event\n     * @param button The button that is clicked\n     * @param key Key of child menu item that is clicked if any\n     * @param strings The localized string map for this button\n     */\n    onButtonClick<T extends string>(button: RibbonButton<T>, key: T, strings: LocalizedStrings<T>) {\n        if (this.editor) {\n            this.editor.stopShadowEdit();\n\n            button.onClick(this.editor, key, strings, this.uiUtilities);\n\n            if (button.isChecked || button.isDisabled || button.dropDownMenu?.getSelectedItemKey) {\n                this.updateFormat();\n            }\n        }\n    }\n\n    /**\n     * Enter live preview state (shadow edit) of editor if there is a non-collapsed selection\n     * @param button The button that triggered this action\n     * @param key Key of the hovered button sub item\n     * @param strings The localized string map for this button\n     */\n    startLivePreview<T extends string>(\n        button: RibbonButton<T>,\n        key: string,\n        strings: LocalizedStrings<T>\n    ) {\n        if (this.editor) {\n            const isInShadowEdit = this.editor.isInShadowEdit();\n\n            // If editor is already in shadow edit, no need to check again.\n            // And the check result may be incorrect because the content is changed from last shadow edit and the cached selection path won't apply\n            const range = !isInShadowEdit && this.editor.getSelectionRangeEx();\n\n            if (isInShadowEdit || (range && !range.areAllCollapsed)) {\n                this.editor.startShadowEdit();\n                button.onClick(this.editor, key, strings, this.uiUtilities);\n            }\n        }\n    }\n\n    /**\n     * Leave live preview state (shadow edit) of editor\n     */\n    stopLivePreview() {\n        this.editor?.stopShadowEdit();\n    }\n\n    private delayUpdate() {\n        const window = this.editor.getDocument().defaultView;\n\n        if (this.timer) {\n            window.clearTimeout(this.timer);\n        }\n\n        this.timer = window.setTimeout(() => {\n            this.timer = 0;\n            this.updateFormat?.();\n        }, this.delayUpdateTime);\n    }\n\n    private updateFormat() {\n        if (this.editor && this.onFormatChanged) {\n            const newFormatState = getFormatState(this.editor);\n\n            if (\n                !this.formatState ||\n                Object.keys(newFormatState).some(\n                    (key: keyof FormatState) => newFormatState[key] != this.formatState[key]\n                )\n            ) {\n                this.formatState = newFormatState;\n                this.onFormatChanged(newFormatState);\n            }\n        }\n    }\n}\n\n/**\n * Create a new instance of RibbonPlugin object\n * @param delayUpdateTime The time to wait before refresh the button when user do some editing operation in editor\n */\nexport default function createRibbonPlugin(delayUpdateTime?: number): RibbonPlugin {\n    return new RibbonPluginImpl(delayUpdateTime);\n}\n","export { default as createContextMenuPlugin } from './plugin/createContextMenuPlugin';\nexport { default as createContextMenuProvider } from './utils/createContextMenuProvider';\nexport { default as createListEditMenuProvider } from './menus/createListEditMenuProvider';\nexport { default as createImageEditMenuProvider } from './menus/createImageEditMenuProvider';\nexport { default as createTableEditMenuProvider } from './menus/createTableEditMenuProvider';\nexport { default as ContextMenuItem } from './types/ContextMenuItem';\nexport {\n    ListNumberMenuItemStringKey,\n    ImageEditMenuItemStringKey,\n    TableEditMenuItemStringKey,\n} from './types/ContextMenuItemStringKeys';\n","import * as React from 'react';\nimport { ContextMenu } from 'roosterjs-editor-plugins';\nimport { ContextualMenu, IContextualMenuItem } from '@fluentui/react/lib/ContextualMenu';\nimport { ReactEditorPlugin, UIUtilities } from '../../common/index';\n\nfunction normalizeItems(items: IContextualMenuItem[]) {\n    let dividerKey = 0;\n    return items.map(\n        item =>\n            item || {\n                name: '-',\n                key: 'divider_' + (dividerKey++).toString(),\n            }\n    );\n}\n\nclass ContextMenuPlugin extends ContextMenu<IContextualMenuItem> implements ReactEditorPlugin {\n    private uiUtilities: UIUtilities | null = null;\n    private disposer: (() => void) | null = null;\n\n    constructor() {\n        super({\n            render: (container, items, onDismiss) => {\n                const normalizedITems = normalizeItems(items);\n\n                if (normalizedITems.length > 0) {\n                    this.disposer = this.uiUtilities.renderComponent(\n                        <ContextualMenu\n                            target={container}\n                            onDismiss={onDismiss}\n                            items={normalizedITems}\n                        />\n                    );\n                }\n            },\n            dismiss: _ => {\n                this.disposer?.();\n                this.disposer = null;\n            },\n        });\n    }\n\n    setUIUtilities(uiUtilities: UIUtilities) {\n        this.uiUtilities = uiUtilities;\n    }\n}\n\n/**\n * Create a new instance of ContextMenu plugin with context menu implementation based on FluentUI.\n */\nexport default function createContextMenuPlugin(): ContextMenu<IContextualMenuItem> {\n    return new ContextMenuPlugin();\n}\n","import ContextMenuItem from '../types/ContextMenuItem';\nimport createContextMenuProvider from '../utils/createContextMenuProvider';\nimport showInputDialog from '../../inputDialog/utils/showInputDialog';\nimport { EditorPlugin, IEditor } from 'roosterjs-editor-types';\nimport { ListNumberMenuItemStringKey } from '../types/ContextMenuItemStringKeys';\nimport { LocalizedStrings } from '../../common/type/LocalizedStrings';\nimport { safeInstanceOf } from 'roosterjs-editor-dom';\nimport { setOrderedListNumbering } from 'roosterjs-editor-api';\n\nconst ListNumberResetMenuItem: ContextMenuItem<ListNumberMenuItemStringKey> = {\n    key: 'menuNameListNumberReset',\n    unlocalizedText: 'Restart at 1',\n    onClick: (_, editor, node) => {\n        const li = editor.getElementAtCursor('LI', node) as HTMLLIElement;\n        setOrderedListNumbering(editor, li, 1);\n    },\n};\n\nconst ListNumberEditMenuItem: ContextMenuItem<ListNumberMenuItemStringKey> = {\n    key: 'menuNameListNumberEdit',\n    unlocalizedText: 'Set numbering value',\n    onClick: (_, editor, node, strings, uiUtilities) => {\n        const listAndLi = getEditingList(editor, node);\n\n        if (listAndLi) {\n            const { list, li } = listAndLi;\n            let startNumber = list.start;\n\n            for (let child = list.firstChild; child; child = child.nextSibling) {\n                if (child === li) {\n                    break;\n                } else if (safeInstanceOf(child, 'HTMLLIElement')) {\n                    startNumber += 1;\n                }\n            }\n\n            showInputDialog(\n                uiUtilities,\n                'menuNameListNumberEdit',\n                'Set numbering value',\n                {\n                    value: {\n                        labelKey: 'dialogTextSetListNumber',\n                        unlocalizedLabel: 'Set value to',\n                        initValue: startNumber.toString(),\n                    },\n                },\n                strings\n            ).then(values => {\n                editor.focus();\n\n                if (values) {\n                    const result = parseInt(values.value);\n\n                    if (result > 0 && result != startNumber) {\n                        setOrderedListNumbering(editor, li, Math.floor(result));\n                    }\n                }\n            });\n        }\n    },\n};\n\nfunction getEditingList(editor: IEditor, node: Node) {\n    const li = editor.getElementAtCursor('LI', node) as HTMLLIElement;\n    const list = li && (editor.getElementAtCursor('ol', li) as HTMLOListElement);\n\n    return list?.isContentEditable ? { list, li } : null;\n}\n\n/**\n * Create a new instance of ContextMenuProvider to support list number editing functionalities in context menu\n * @returns A new ContextMenuProvider\n */\nexport default function createListEditMenuProvider(\n    strings?: LocalizedStrings<ListNumberMenuItemStringKey>\n): EditorPlugin {\n    return createContextMenuProvider(\n        'listEdit',\n        [ListNumberResetMenuItem, ListNumberEditMenuItem],\n        strings,\n        (editor, node) => !!getEditingList(editor, node)\n    );\n}\n","import ContextMenuItem from '../types/ContextMenuItem';\nimport createContextMenuProvider from '../utils/createContextMenuProvider';\nimport showInputDialog from '../../inputDialog/utils/showInputDialog';\nimport { ImageEditMenuItemStringKey } from '../types/ContextMenuItemStringKeys';\nimport { LocalizedStrings } from '../../common/type/LocalizedStrings';\nimport { safeInstanceOf } from 'roosterjs-editor-dom';\nimport { setImageAltText } from 'roosterjs-editor-api';\nimport {\n    canRegenerateImage,\n    ImageEdit,\n    resetImage,\n    resizeByPercentage,\n} from 'roosterjs-editor-plugins';\nimport {\n    ExperimentalFeatures,\n    IEditor,\n    ImageEditOperation,\n    EditorPlugin,\n} from 'roosterjs-editor-types';\n\nconst ImageAltTextMenuItem: ContextMenuItem<ImageEditMenuItemStringKey> = {\n    key: 'menuNameImageAltText',\n    unlocalizedText: 'Add alternate text',\n    onClick: (_, editor, node, strings, uiUtilities) => {\n        const image = node as HTMLImageElement;\n        const initValue = image.alt;\n\n        showInputDialog(\n            uiUtilities,\n            'menuNameImageAltText',\n            'Set numbering value',\n            {\n                altText: {\n                    labelKey: null,\n                    unlocalizedLabel: null,\n                    initValue: initValue,\n                },\n            },\n            strings\n        ).then(values => {\n            editor.focus();\n            editor.select(image);\n\n            if (values) {\n                setImageAltText(editor, values.altText);\n            }\n        });\n    },\n};\n\nconst ImageResizeMenuItem: ContextMenuItem<ImageEditMenuItemStringKey> = {\n    key: 'menuNameImageResize',\n    unlocalizedText: 'Size',\n    subItems: {\n        menuNameImageSizeBestFit: 'Best fit',\n        menuNameImageSizeSmall: 'Small',\n        menuNameImageSizeMedium: 'Medium',\n        menuNameImageSizeOriginal: 'Original',\n    },\n    onClick: (key, editor, node) => {\n        editor.addUndoSnapshot(() => {\n            let percentage = 0;\n            switch (key) {\n                case 'menuNameImageSizeSmall':\n                    percentage = 0.25;\n                    break;\n                case 'menuNameImageSizeMedium':\n                    percentage = 0.5;\n                    break;\n                case 'menuNameImageSizeOriginal':\n                    percentage = 1;\n                    break;\n            }\n\n            if (percentage > 0) {\n                resizeByPercentage(\n                    editor,\n                    node as HTMLImageElement,\n                    percentage,\n                    10 /*minWidth*/,\n                    10 /*minHeight*/\n                );\n            } else {\n                resetImage(editor, node as HTMLImageElement);\n            }\n        });\n    },\n};\n\nconst ImageCropMenuItem: ContextMenuItem<ImageEditMenuItemStringKey, ImageEdit> = {\n    key: 'menuNameImageCrop',\n    unlocalizedText: 'Crop image',\n    shouldShow: (editor, node) => {\n        return (\n            editor.isFeatureEnabled(ExperimentalFeatures.ImageCrop) &&\n            canRegenerateImage(node as HTMLImageElement)\n        );\n    },\n    onClick: (_, editor, node, strings, uiUtilities, imageEdit) => {\n        imageEdit.setEditingImage(node as HTMLImageElement, ImageEditOperation.Crop);\n    },\n};\n\nconst ImageRemoveMenuItem: ContextMenuItem<ImageEditMenuItemStringKey, ImageEdit> = {\n    key: 'menuNameImageRemove',\n    unlocalizedText: 'Remove image',\n    onClick: (_, editor, node, strings, uiUtilities, imageEdit) => {\n        if (editor.contains(node)) {\n            editor.addUndoSnapshot(() => {\n                editor.deleteNode(node);\n                imageEdit.setEditingImage(null /*editingImage*/);\n            }, 'DeleteImage');\n        }\n    },\n};\n\nfunction shouldShowImageEditItems(editor: IEditor, node: Node) {\n    return safeInstanceOf(node, 'HTMLImageElement') && node.isContentEditable;\n}\n\n/**\n * Create a new instance of ContextMenuProvider to support image editing functionalities in context menu\n * @returns A new ContextMenuProvider\n */\nexport default function createImageEditMenuProvider(\n    imageEditPlugin: ImageEdit,\n    strings?: LocalizedStrings<ImageEditMenuItemStringKey>\n): EditorPlugin {\n    return createContextMenuProvider(\n        'imageEdit',\n        [ImageAltTextMenuItem, ImageResizeMenuItem, ImageCropMenuItem, ImageRemoveMenuItem],\n        strings,\n        shouldShowImageEditItems,\n        imageEditPlugin\n    );\n}\n","import ContextMenuItem from '../types/ContextMenuItem';\nimport createContextMenuProvider from '../utils/createContextMenuProvider';\nimport { EditorPlugin, IEditor, TableOperation } from 'roosterjs-editor-types';\nimport { editTable } from 'roosterjs-editor-api';\nimport { LocalizedStrings } from '../../common/type/LocalizedStrings';\nimport { TableEditMenuItemStringKey } from '../types/ContextMenuItemStringKeys';\n\nconst TableEditOperationMap: Partial<Record<TableEditMenuItemStringKey, TableOperation>> = {\n    menuNameTableInsertAbove: TableOperation.InsertAbove,\n    menuNameTableInsertBelow: TableOperation.InsertBelow,\n    menuNameTableInsertLeft: TableOperation.InsertLeft,\n    menuNameTableInsertRight: TableOperation.InsertRight,\n    menuNameTableDeleteTable: TableOperation.DeleteTable,\n    menuNameTableDeleteColumn: TableOperation.DeleteColumn,\n    menuNameTableDeleteRow: TableOperation.DeleteRow,\n    menuNameTableMergeAbove: TableOperation.MergeAbove,\n    menuNameTableMergeBelow: TableOperation.MergeBelow,\n    menuNameTableMergeLeft: TableOperation.MergeLeft,\n    menuNameTableMergeRight: TableOperation.MergeRight,\n    menuNameTableMergeCells: TableOperation.MergeCells,\n    menuNameTableSplitHorizontally: TableOperation.SplitHorizontally,\n    menuNameTableSplitVertically: TableOperation.SplitVertically,\n    menuNameTableAlignLeft: TableOperation.AlignCellLeft,\n    menuNameTableAlignCenter: TableOperation.AlignCellCenter,\n    menuNameTableAlignRight: TableOperation.AlignCellRight,\n    menuNameTableAlignTop: TableOperation.AlignCellTop,\n    menuNameTableAlignMiddle: TableOperation.AlignCellMiddle,\n    menuNameTableAlignBottom: TableOperation.AlignCellBottom,\n};\n\nfunction onClick(key: TableEditMenuItemStringKey, editor: IEditor) {\n    editor.focus();\n    editTable(editor, TableEditOperationMap[key]);\n}\n\nconst TableEditInsertMenuItem: ContextMenuItem<TableEditMenuItemStringKey> = {\n    key: 'menuNameTableInsert',\n    unlocalizedText: 'Insert',\n    subItems: {\n        menuNameTableInsertAbove: 'Insert above',\n        menuNameTableInsertBelow: 'Insert below',\n        menuNameTableInsertLeft: 'Insert left',\n        menuNameTableInsertRight: 'Insert right',\n    },\n    onClick,\n};\n\nconst TableEditDeleteMenuItem: ContextMenuItem<TableEditMenuItemStringKey> = {\n    key: 'menuNameTableDelete',\n    unlocalizedText: 'Delete',\n    subItems: {\n        menuNameTableDeleteColumn: 'Delete column',\n        menuNameTableDeleteRow: 'Delete row',\n        menuNameTableDeleteTable: 'Delete table',\n    },\n    onClick,\n};\n\nconst TableEditMergeMenuItem: ContextMenuItem<TableEditMenuItemStringKey> = {\n    key: 'menuNameTableMerge',\n    unlocalizedText: 'Merge',\n    subItems: {\n        menuNameTableMergeAbove: 'Merge above',\n        menuNameTableMergeBelow: 'Merge below',\n        menuNameTableMergeLeft: 'Merge left',\n        menuNameTableMergeRight: 'Merge right',\n        '-': '-',\n        menuNameTableMergeCells: 'Merge selected cells',\n    },\n    onClick,\n};\n\nconst TableEditSplitMenuItem: ContextMenuItem<TableEditMenuItemStringKey> = {\n    key: 'menuNameTableSplit',\n    unlocalizedText: 'Split',\n    subItems: {\n        menuNameTableSplitHorizontally: 'Split horizontally',\n        menuNameTableSplitVertically: 'Split vertically',\n    },\n    onClick,\n};\n\nconst TableEditAlignMenuItem: ContextMenuItem<TableEditMenuItemStringKey> = {\n    key: 'menuNameTableAlign',\n    unlocalizedText: 'Align cell',\n    subItems: {\n        menuNameTableAlignLeft: 'Align left',\n        menuNameTableAlignCenter: 'Align center',\n        menuNameTableAlignRight: 'Align right',\n        '-': '-',\n        menuNameTableAlignTop: 'Align top',\n        menuNameTableAlignMiddle: 'Align middle',\n        menuNameTableAlignBottom: 'Align bottom',\n    },\n    onClick,\n};\n\nfunction getEditingTable(editor: IEditor, node: Node) {\n    const td = editor.getElementAtCursor('TD,TH', node) as HTMLTableCellElement;\n    const table = td && (editor.getElementAtCursor('table', td) as HTMLTableElement);\n\n    return table?.isContentEditable ? { table, td } : null;\n}\n\n/**\n * Create a new instance of ContextMenuProvider to support table editing functionalities in context menu\n * @returns A new ContextMenuProvider\n */\nexport default function createTableEditMenuProvider(\n    strings?: LocalizedStrings<TableEditMenuItemStringKey>\n): EditorPlugin {\n    return createContextMenuProvider(\n        'tableEdit',\n        [\n            TableEditInsertMenuItem,\n            TableEditDeleteMenuItem,\n            TableEditMergeMenuItem,\n            TableEditSplitMenuItem,\n            TableEditAlignMenuItem,\n        ],\n        strings,\n        (editor, node) => !!getEditingTable(editor, node)\n    );\n}\n","export { PasteOptionButtonKeys, PasteOptionStringKeys } from './type/PasteOptionStringKeys';\nexport { default as createPasteOptionPlugin } from './plugin/createPasteOptionPlugin';\n","import showPasteOptionPane, { PasteOptionPane } from '../component/showPasteOptionPane';\nimport { ButtonKeys, Buttons } from '../utils/buttons';\nimport { ClipboardData, IEditor, Keys, PluginEvent, PluginEventType } from 'roosterjs-editor-types';\nimport { LocalizedStrings, ReactEditorPlugin, UIUtilities } from '../../common/index';\nimport { PasteOptionButtonKeys, PasteOptionStringKeys } from '../type/PasteOptionStringKeys';\n\nclass PasteOptionPlugin implements ReactEditorPlugin {\n    private clipboardData: ClipboardData | null = null;\n    private editor: IEditor | null = null;\n    private uiUtilities: UIUtilities | null = null;\n    private pasteOptionRef: PasteOptionPane | null = null;\n\n    constructor(private strings?: LocalizedStrings<PasteOptionStringKeys>) {}\n\n    getName() {\n        return 'PasteOption';\n    }\n\n    initialize(editor: IEditor) {\n        this.editor = editor;\n    }\n\n    dispose() {\n        this.pasteOptionRef?.dismiss();\n        this.editor = null;\n    }\n\n    onPluginEvent(event: PluginEvent) {\n        if (event.eventType == PluginEventType.Scroll) {\n            if (this.pasteOptionRef) {\n                this.showPasteOptionPane();\n            }\n        } else if (this.pasteOptionRef) {\n            this.handlePasteOptionPaneEvent(event);\n        } else if (event.eventType == PluginEventType.ContentChanged) {\n            if (event.source == 'Paste') {\n                const clipboardData = event.data as ClipboardData;\n\n                // Only show paste option when we pasted HTML with some format\n                if (clipboardData?.text && clipboardData.types?.indexOf('text/html') >= 0) {\n                    this.clipboardData = clipboardData;\n                    this.showPasteOptionPane();\n                }\n            } else {\n                this.pasteOptionRef?.dismiss();\n            }\n        }\n    }\n\n    setUIUtilities(uiUtilities: UIUtilities) {\n        this.uiUtilities = uiUtilities;\n    }\n\n    private handlePasteOptionPaneEvent(event: PluginEvent) {\n        if (event.eventType == PluginEventType.KeyDown) {\n            const selectedKey = this.pasteOptionRef.getSelectedKey();\n\n            if (!selectedKey) {\n                switch (event.rawEvent.which) {\n                    case Keys.CTRL_LEFT:\n                        this.pasteOptionRef.setSelectedKey(ButtonKeys[0]);\n                        cancelEvent(event.rawEvent);\n                        break;\n\n                    case Keys.ESCAPE:\n                        this.pasteOptionRef.dismiss();\n                        cancelEvent(event.rawEvent);\n                        break;\n\n                    default:\n                        this.pasteOptionRef.dismiss();\n                        break;\n                }\n            } else {\n                const keyboardEvent = event.rawEvent;\n\n                if (keyboardEvent.which != Keys.CTRL_LEFT && keyboardEvent.ctrlKey) {\n                    // Dismiss the paste option when pressing hotkey CTRL+<any key>\n                    this.pasteOptionRef.dismiss();\n                    return;\n                }\n\n                for (let i = 0; i < ButtonKeys.length; i++) {\n                    const key = ButtonKeys[i];\n                    const button = Buttons[key];\n                    if (button.shortcut == String.fromCharCode(keyboardEvent.which)) {\n                        this.onPaste(key);\n                        cancelEvent(keyboardEvent);\n                        return;\n                    }\n                }\n\n                switch (keyboardEvent.which) {\n                    case Keys.ESCAPE:\n                        this.pasteOptionRef.dismiss();\n                        break;\n                    case Keys.LEFT:\n                    case Keys.RIGHT:\n                        const buttonCount = ButtonKeys.length;\n                        const diff =\n                            (keyboardEvent.which == Keys.RIGHT) == this.uiUtilities.isRightToLeft()\n                                ? -1\n                                : 1;\n                        this.pasteOptionRef.setSelectedKey(\n                            ButtonKeys[\n                                (ButtonKeys.indexOf(selectedKey) + diff + buttonCount) % buttonCount\n                            ]\n                        );\n                        break;\n                    case Keys.ENTER:\n                        this.onPaste(selectedKey);\n                        break;\n                    case Keys.CTRL_LEFT:\n                        // Noop\n                        break;\n                    default:\n                        this.pasteOptionRef.dismiss();\n                        return;\n                }\n\n                cancelEvent(keyboardEvent);\n            }\n        }\n    }\n\n    private onDismissed = () => {\n        this.pasteOptionRef = null;\n    };\n\n    private onPaste = (key: PasteOptionButtonKeys) => {\n        if (this.clipboardData) {\n            this.editor.focus();\n\n            switch (key) {\n                case 'pasteOptionPasteAsIs':\n                    this.editor.paste(this.clipboardData);\n                    break;\n\n                case 'pasteOptionPasteText':\n                    this.editor.paste(this.clipboardData, true /*pasteAsText*/);\n                    break;\n\n                case 'pasteOptionMergeFormat':\n                    this.editor.paste(\n                        this.clipboardData,\n                        false /*pasteAsText*/,\n                        true /*applyCurrentFormat*/\n                    );\n                    break;\n            }\n\n            this.pasteOptionRef?.setSelectedKey(key);\n        }\n    };\n\n    private showPasteOptionPane() {\n        this.pasteOptionRef?.dismiss();\n\n        const focusedPosition = this.editor.getFocusedPosition();\n\n        showPasteOptionPane(\n            this.uiUtilities,\n            focusedPosition,\n            this.strings,\n            this.onPaste,\n            this.onDismissed,\n            ref => (this.pasteOptionRef = ref)\n        );\n    }\n}\n\nfunction cancelEvent(event: UIEvent) {\n    event.preventDefault();\n    event.stopPropagation();\n}\n\n/**\n * Create a new instance of PasteOption plugin to show an option pane when paste, so that user can choose\n * an option to change the paste result, including:\n * - Paste as is\n * - Paste as text\n * - Paste and merge format\n * @param strings Localized string for this plugin\n * @returns A paste option plugin\n */\nexport default function createPasteOptionPlugin(\n    strings?: LocalizedStrings<PasteOptionStringKeys>\n): ReactEditorPlugin {\n    return new PasteOptionPlugin(strings);\n}\n","import * as React from 'react';\nimport { ButtonKeys, Buttons } from '../utils/buttons';\nimport { Callout, DirectionalHint } from '@fluentui/react/lib/Callout';\nimport { getLocalizedString, LocalizedStrings, UIUtilities } from '../../common/index';\nimport { getPositionRect } from 'roosterjs-editor-dom';\nimport { Icon } from '@fluentui/react/lib/Icon';\nimport { IconButton } from '@fluentui/react/lib/Button';\nimport { memoizeFunction } from '@fluentui/react/lib/Utilities';\nimport { mergeStyleSets } from '@fluentui/react/lib/Styling';\nimport { Theme, useTheme } from '@fluentui/react/lib/Theme';\nimport type { PasteOptionButtonKeys, PasteOptionStringKeys } from '../type/PasteOptionStringKeys';\nimport type { NodePosition } from 'roosterjs-editor-types';\n\nconst getPasteOptionClassNames = memoizeFunction((theme: Theme) => {\n    const palette = theme.palette;\n\n    return mergeStyleSets({\n        pastePane: {\n            paddingLeft: '4px',\n            minWidth: '72px',\n        },\n        optionPane: {\n            textAlign: 'center',\n            padding: '4px',\n        },\n        icon: {\n            fontSize: '14px',\n        },\n        buttonsContainer: {\n            justifyContent: 'center',\n            display: 'flex',\n        },\n        button: {\n            width: '32px',\n            height: '32px',\n            margin: '0 4px 4px 0',\n            borderRadius: '2px',\n            flex: '0 0 auto',\n            '&:hover': {\n                backgroundColor: palette.themeLighter,\n            },\n        },\n        isChecked: {\n            backgroundColor: palette.themeLight,\n            '&:hover': {\n                backgroundColor: palette.themeLighter,\n            },\n        },\n    });\n});\n\ninterface PasteOptionButtonProps {\n    buttonName: PasteOptionButtonKeys;\n    className: string;\n    paste: (key: PasteOptionButtonKeys) => void;\n    strings: LocalizedStrings<PasteOptionStringKeys>;\n}\n\nfunction PasteOptionButton(props: PasteOptionButtonProps) {\n    const { buttonName, paste, strings, className } = props;\n    const button = Buttons[buttonName];\n    const onClick = React.useCallback(() => {\n        paste(buttonName);\n    }, [paste, buttonName]);\n\n    return (\n        <IconButton\n            className={className}\n            onClick={onClick}\n            title={\n                getLocalizedString(strings, buttonName, button.unlocalizedText) +\n                (button.shortcut ? ` (${button.shortcut})` : '')\n            }\n            iconProps={{ iconName: button.icon }}\n        />\n    );\n}\n\ninterface PasteOptionProps {\n    strings: LocalizedStrings<PasteOptionStringKeys>;\n    position: NodePosition;\n    isRtl: boolean;\n    paste: (key: PasteOptionButtonKeys) => void;\n    dismiss: () => void;\n}\n\n/**\n * @internal\n */\nexport interface PasteOptionPane {\n    getSelectedKey: () => PasteOptionButtonKeys | null;\n    setSelectedKey: (index: PasteOptionButtonKeys) => void;\n    dismiss: () => void;\n}\n\nconst PasteOptionComponent = React.forwardRef(function PasteOptionFunc(\n    props: PasteOptionProps,\n    ref: React.Ref<PasteOptionPane>\n) {\n    const { strings, position, paste, dismiss, isRtl } = props;\n    const theme = useTheme();\n    const classNames = getPasteOptionClassNames(theme);\n    const [selectedKey, setSelectedKey] = React.useState<PasteOptionButtonKeys | null>(null);\n\n    const rect = position && getPositionRect(position);\n    const target = rect && { x: props.isRtl ? rect.left : rect.right, y: rect.bottom };\n\n    React.useImperativeHandle(\n        ref,\n        () => ({\n            dismiss,\n            setSelectedKey,\n            getSelectedKey: () => selectedKey,\n        }),\n        [dismiss, paste, isRtl, selectedKey, setSelectedKey]\n    );\n\n    const buttonPane = React.useRef<HTMLDivElement>(null);\n    const onDismiss = React.useCallback(\n        (evt: UIEvent) => {\n            const target =\n                evt instanceof FocusEvent && evt.relatedTarget instanceof Node\n                    ? evt.relatedTarget\n                    : null;\n            const clickOnButtonPane =\n                target &&\n                buttonPane.current &&\n                (buttonPane.current == target || buttonPane.current.contains(target));\n            if (!clickOnButtonPane) {\n                dismiss();\n            }\n        },\n        [dismiss]\n    );\n\n    const onClickShowSubMenu = React.useCallback(\n        (event: React.MouseEvent<HTMLDivElement>) => {\n            setSelectedKey(ButtonKeys[0]);\n            event.preventDefault();\n            event.stopPropagation();\n        },\n        [setSelectedKey]\n    );\n\n    return (\n        <Callout\n            gapSpace={10}\n            isBeakVisible={false}\n            target={target}\n            directionalHint={\n                isRtl ? DirectionalHint.bottomRightEdge : DirectionalHint.bottomLeftEdge\n            }\n            directionalHintForRTL={DirectionalHint.bottomRightEdge}\n            preventDismissOnScroll={true}\n            onDismiss={onDismiss}>\n            <div ref={buttonPane} className={classNames.pastePane}>\n                <div onClick={onClickShowSubMenu} className={classNames.optionPane}>\n                    <Icon iconName={'Paste'} className={classNames.icon} />\n                    {getLocalizedString(strings, 'pasteOptionPaneText', '(Ctrl)')}\n                </div>\n                {selectedKey && (\n                    <div className={classNames.buttonsContainer}>\n                        {Object.keys(Buttons).map((key: PasteOptionButtonKeys) => (\n                            <PasteOptionButton\n                                key={key}\n                                strings={strings}\n                                paste={paste}\n                                buttonName={key}\n                                className={\n                                    classNames.button +\n                                    ' ' +\n                                    (selectedKey == key ? classNames.isChecked : '')\n                                }\n                            />\n                        ))}\n                    </div>\n                )}\n            </div>\n        </Callout>\n    );\n});\n\n/**\n * @internal Show paste open pane component\n * @param uiUtilities The UI utilities object to help render component\n * @param position Target position\n * @param strings Localize string for this component\n * @param onPaste A callback to be called when user click on a paste button\n * @param onDismissed A callback to be called when this component is dismissed\n * @param onGetRef A callback to be called to set a reference of this component\n */\nexport default function showPasteOptionPane(\n    uiUtilities: UIUtilities,\n    position: NodePosition,\n    strings: LocalizedStrings<PasteOptionStringKeys>,\n    onPaste: (key: PasteOptionButtonKeys) => void,\n    onDismissed: () => void,\n    onGetRef: (ref: PasteOptionPane) => void\n) {\n    let disposer: (() => void) | null = null;\n    const onDismiss = () => {\n        disposer?.();\n        disposer = null;\n        onDismissed();\n    };\n\n    disposer = uiUtilities.renderComponent(\n        <PasteOptionComponent\n            ref={onGetRef}\n            position={position}\n            strings={strings}\n            isRtl={uiUtilities.isRightToLeft()}\n            dismiss={onDismiss}\n            paste={onPaste}\n        />\n    );\n}\n"],"sourceRoot":""}