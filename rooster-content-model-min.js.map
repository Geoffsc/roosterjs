{"version":3,"file":"rooster-content-model-min.js","mappings":"wJAMa,EAAAA,6BAAyD,CAClEC,EAAG,CACCC,WAAW,GAEfC,WAAY,CACRC,UAAW,MACXC,aAAc,MACdC,WAAY,OACZC,YAAa,QAEjBC,KAAM,CACFC,WAAY,aAEhBC,GAAI,CACAC,WAAY,OACZC,SAAU,OAEdC,GAAI,CACAF,WAAY,OACZC,SAAU,SAEdE,GAAI,CACAH,WAAY,OACZC,SAAU,UAEdG,GAAI,CACAJ,WAAY,OACZC,SAAU,OAEdI,GAAI,CACAL,WAAY,OACZC,SAAU,UAEdK,GAAI,CACAN,WAAY,OACZC,SAAU,UAEdM,EAAG,CACCd,UAAW,MACXC,aAAc,OAElBc,IAAK,CACDV,WAAY,YACZW,WAAY,MACZhB,UAAW,MACXC,aAAc,O,6FCjDtB,IAAMgB,EAA6C,CAC/CC,QAAS,SAMA,EAAAC,oBAAuC,CAChDC,QAASH,EACTI,QAASJ,EACTK,MAAOL,EACPM,EAAG,CACChB,WAAY,QAEhBR,WAAY,CACRmB,QAAS,QACTlB,UAAW,MACXC,aAAc,MACdC,WAAY,OACZC,YAAa,QAEjBqB,GAAIP,EACJQ,OAAQ,CACJP,QAAS,QACTQ,UAAW,UAEfC,GAAIV,EACJW,IAAKX,EACLY,GAAIZ,EACJa,GAAIb,EACJc,GAAI,CACAC,UAAW,UAEfC,SAAUhB,EACViB,WAAYjB,EACZkB,OAAQlB,EACRmB,OAAQnB,EACRoB,KAAMpB,EACNX,GAAI,CACAY,QAAS,QACTX,WAAY,OACZC,SAAU,OAEdC,GAAI,CACAS,QAAS,QACTX,WAAY,OACZC,SAAU,SAEdE,GAAI,CACAQ,QAAS,QACTX,WAAY,OACZC,SAAU,UAEdG,GAAI,CACAO,QAAS,QACTX,WAAY,QAEhBK,GAAI,CACAM,QAAS,QACTX,WAAY,OACZC,SAAU,UAEdK,GAAI,CACAK,QAAS,QACTX,WAAY,OACZC,SAAU,UAEd8B,OAAQrB,EACRsB,GAAItB,EACJuB,EAAG,CACCR,UAAW,UAEfS,GAAI,CACAvB,QAAS,aAEbwB,KAAMzB,EACN0B,IAAK1B,EACL2B,GAAI3B,EACJH,EAAG,CACCI,QAAS,QACTlB,UAAW,MACXC,aAAc,OAElBc,IAAK,CACDG,QAAS,QACTb,WAAY,YACZW,WAAY,MACZhB,UAAW,MACXC,aAAc,OAElB4C,EAAG,CACCC,eAAgB,gBAEpBC,QAAS9B,EACT+B,OAAQ,CACJF,eAAgB,gBAEpBG,OAAQ,CACJ1C,WAAY,QAEhB2C,IAAK,CACDC,cAAe,MACf3C,SAAU,WAEd4C,IAAK,CACDD,cAAe,QACf3C,SAAU,WAEd6C,MAAO,CACHnC,QAAS,QACToC,UAAW,cAEfC,GAAI,CACArC,QAAS,cAEbsC,GAAI,CACAtC,QAAS,cAEbuC,EAAG,CACCX,eAAgB,aAEpBY,GAAIzC,E,mMC3HR,UACA,UACA,UAmCA,SAAgB0C,EACZC,EACAC,GAEA,OAAOC,OAAOC,OACV,CAAC,EACDF,EASG,CAAEG,eAAe,GAMjB,CACHC,aAd8BJ,aAAa,EAAbA,EAAeK,WAWQ,CAAEC,UAAW,OAAU,CAAC,EAI7EC,cAAe,CAAC,EAEhBC,WAAY,CACRC,OAAQ,GACRC,iBAAkB,KAMnB,CACHC,KAAM,CACFC,OAAQ,CAAC,EACTC,QAAS,CAAC,GAEdtE,KAAM,CACFqE,OAAQ,CAAC,GAEbE,eAAgB,CACZF,OAAQ,CAAC,EACTG,QAAS,KAjCbhB,EAER,CAwCA,SAAgBiB,EACZC,GAEA,MAAO,CACHC,kBAAmBjB,OAAOC,OAAM,MAAbD,QAAM,oBACrB,CAAC,EACD,EAAAkB,sBAAmB,YAChBF,EAAQG,KAAI,SAAAC,GAAK,OAAAA,aAAC,EAADA,EAAGC,iBAAH,MAAqB,IAE7CC,cAAeC,EACXP,EAAQG,KAAI,SAAAC,GAAK,OAAAA,aAAC,EAADA,EAAGI,oBAAH,IACjBR,EAAQG,KAAI,SAAAC,GAAK,OAAAA,aAAC,EAADA,EAAGK,uBAAH,KAErBC,yBAA0B,EAAAR,oBAC1BS,qBAAoB,uBAE5B,CASA,SAAgBJ,EACZK,EACAC,QADA,IAAAD,IAAAA,EAAA,SACA,IAAAC,IAAAA,EAAA,IAEA,IAAMC,EAAoB9B,OAAOC,OAAM,MAAbD,QAAM,oBAAQ,CAAC,IAAC,YAAK4B,IAAS,IAExD,OAAO,IAAAG,eAAc,EAAAC,8BAA8BC,QAAO,SAACC,EAAQC,G,MACzDC,GAAQ,IAAAJ,6BAA6BG,GACtChB,KACG,SAAAkB,GACI,YAAkCC,IAAjCR,EAAkBO,GACb,EAAAV,qBAAqBU,GACrBP,EAAkBO,EAFxB,KAIPE,OAAM,4CACAV,EAAuBV,KACtB,SAAAqB,GAAO,MAAI,OAAe,QAAd,EAAAA,aAAO,EAAPA,EAAUL,UAAI,QAAI,EAA0B,MAC3D,IAKT,OAFAD,EAAOC,GAAOC,EAEPF,CACX,GAAG,CAAC,EACR,CAjHA,mCACInC,G,IACA,wDAEA,OAAOF,EAAkCkB,EAAuBC,GAAUjB,EAC9E,EAOA,sCAoDA,2BAyBA,sB,+FClHA,cACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,SACA,UACA,UACA,UACA,UACA,UACA,SACA,UAMa,EAAAmB,oBAA2C,CACpDnF,EAAG,EAAA0G,cACHhF,EAAG,EAAAiF,sBACHzG,WAAY,EAAAyG,sBACZhF,GAAI,EAAAiF,YACJrG,KAAM,EAAAsG,cACN9E,IAAK,EAAA4E,sBACLzE,GAAI,EAAAyE,sBACJG,KAAM,EAAAC,cACNpE,EAAG,EAAAgE,sBACHK,IAAK,EAAAC,eACLxG,GAAI,EAAAyG,iBACJtG,GAAI,EAAAsG,iBACJrG,GAAI,EAAAqG,iBACJpG,GAAI,EAAAoG,iBACJnG,GAAI,EAAAmG,iBACJlG,GAAI,EAAAkG,iBACJxE,GAAI,EAAAyE,YACJvE,GAAI,EAAAwE,kBACJrE,GAAI,EAAAsE,cACJpG,EAAG,EAAAqG,WACHpG,IAAK,EAAAqG,yBACLvE,EAAG,EAAA2D,sBACHzD,QAAS,EAAAyD,sBACTa,KAAM,EAAAb,sBACNxD,OAAQ,EAAAwD,sBACRvD,OAAQ,EAAAuD,sBACRtD,IAAK,EAAAsD,sBACLpD,IAAK,EAAAoD,sBACLnD,MAAO,EAAAiE,eACP7D,EAAG,EAAA+C,sBACH9C,GAAI,EAAAwD,cAEJ,IAAK,EAAAK,iBACL,QAAS,EAAAC,cACTC,QAAS,EAAAC,iBACTC,OAAQ,EAAAC,gBACRC,MAAO,EAAAC,eACPC,UAAW,EAAAC,mB,6FC9Df,cACA,UAcA,6BACIC,EACAC,EACAC,GAEA,IAAMC,GAAQ,IAAAC,4BAA2BH,EAAQI,eAOjD,OALAJ,EAAQC,UAAYA,EACpBD,EAAQnD,kBAAkB8C,MAAMO,EAAOH,EAAMC,IAE7C,IAAAK,uBAAsBH,GAEfA,CACX,C,wGC5BA,UACA,UACA,UACA,UAOMI,EAAuB,CAAC,IAAK,QAKnC,0BACIC,EACAhB,EACAS,EACA9D,GAEA,IAAMsE,EAAYR,EAAQvD,eAAeC,QAAUsD,EAAQvD,oBAAiByB,EACtEuC,EAAqBH,EAAqBI,QAAQnB,EAAQ7C,UAAY,GAE5E,IAAAiE,aAAYpB,EAASS,EAAQ9C,cAAc0D,MAAOZ,EAAQjE,YAAaiE,GAEvE,IAAMjE,GAAc,EAAH,eAAQiE,EAAQjE,aAUjC,IARA,IAAA4E,aAAYpB,EAASS,EAAQ9C,cAAc2D,UAAW9E,EAAaiE,GAEnE,EAAAc,cAAcC,SAAQ,SAAAC,GACdjF,EAAYiF,KACZhB,EAAQjE,YAAYiF,GAASjF,EAAYiF,GAEjD,KAEKP,EAAoB,CACrB,IAAMQ,GAAY,IAAAC,kBACd,EACAnF,EACAG,EACAsE,IAGJ,IAAAW,UAASZ,EAAOU,E,CAGpBjB,EAAQnD,kBAAkB8C,MAAMY,EAAOhB,EAASS,EACpD,C,uFChDA,cACA,UAMa,EAAAzB,YAA+C,SAACgC,EAAOhB,EAASS,G,MACnE1G,GAAK,IAAA8H,UAASpB,EAAQ9D,eAExB8D,EAAQlE,gBACRxC,EAAG+H,YAAa,GAGpB,IAAMJ,GAAY,IAAAK,YAAWf,EAAOjH,EAAI0G,EAAQjE,aAC9B,QAAlB,EAAAiE,EAAQuB,kBAAU,SAAEC,UAAUjC,EAAS0B,EAAW,CAAC3H,GACvD,C,oJChBA,UACA,UACA,UAuCA,SAAgBmI,EACZlB,EACAZ,EACAK,IAEI,IAAA0B,cAAa/B,EAAO,iBAA0C,QAAvBA,EAAMqB,MAAMhI,QACnDgH,EAAQnD,kBAAkB0C,QAAQgB,EAAOZ,EAAOK,IACzC,IAAA0B,cAAa/B,EAAO,cAC3BK,EAAQnD,kBAAkB,SAAS0D,EAAOZ,EAAOK,EAEzD,CAUA,SAAgB2B,EACZC,EACA5B,EACAO,EACAsB,EACAC,G,MAEIF,GAASC,IACT7B,EAAQlE,eAAgB,GAExB,IAAAiG,oBAAmBxB,EAAOP,IAG1B4B,GAASE,GAA4C,UAAV,QAAjB,EAAA9B,EAAQC,iBAAS,eAAE+B,QACxChC,EAAQC,UAAUgC,MAAMC,YACzB,IAAAH,oBAAmBxB,EAAOP,GAE9BA,EAAQlE,eAAgB,EAEhC,CAjEa,EAAA8D,eAA+C,SACxDW,EACA4B,EACAnC,GAKA,IAHM,oBAAmC,IAAAoC,4BAA2BpC,EAASmC,GAAO,GAA7EN,EAAe,KAAEC,EAAa,KACjCF,EAAQ,EAEHjC,EAAQwC,EAAOE,WAAY1C,EAAOA,EAAQA,EAAM2C,YACrDX,EAAuBC,EAAO5B,EAASO,EAAOsB,EAAiBC,GAE/DL,EAAiBlB,EAAOZ,EAAOK,GAE/B4B,IAGJD,EAAuBC,EAAO5B,EAASO,EAAOsB,EAAiBC,EACnE,EASA,qBAoBA,0B,yFC7DA,cACA,UACA,SAMa,EAAAtD,cAA+C,SAAC+B,EAAOhB,EAASS,IACzE,IAAAuC,aAAYvC,EAAS,CAAE9H,KAAM,gBAAiB,YAC1C,IAAAyI,aAAYpB,EAASS,EAAQ9C,cAAchF,KAAM8H,EAAQ9H,KAAKqE,OAAQyD,IAEtE,IAAA1B,uBAAsBiC,EAAOhB,EAASS,EAC1C,GACJ,C,4GCdA,UACA,UASa,EAAAF,mBAA6C,SAACS,EAAOhB,EAASS,GAIvE,IAHA,IAAI4B,EAAQ,EACN,gBAAmC,IAAAQ,4BAA2BpC,EAAST,GAAQ,GAA9EsC,EAAe,KAAEC,EAAa,KAE5BnC,EAAQJ,EAAQ8C,WAAY1C,EAAOA,EAAQA,EAAM2C,aACtD,IAAAX,wBAAuBC,EAAO5B,EAASO,EAAOsB,EAAiBC,IAE/D,IAAAhC,oBAAmBS,EAAOZ,EAAOK,GACjC4B,KAGJ,IAAAD,wBAAuBC,EAAO5B,EAASO,EAAOsB,EAAiBC,EACnE,C,4FCtBA,cACA,UAaa,EAAAtC,iBAAkD,SAACe,EAAOhB,EAASS,GAC5E,IAAMtD,EAAU6C,EAAQ7C,QAAQ8F,cAC1BC,EAQV,SAAkClD,EAAsBS,GACpD,OAAO,IAAA0C,iBAAgBnD,IAAuC,SAA3BA,EAAQoD,gBACrC3C,EAAQnD,kBAAkB4C,OAC1B,IACV,CAZuBmD,CAAyBrD,EAASS,IAczD,SAAqCT,EAAeS,GAChD,OAAO,IAAA6C,yBAAwBtD,GAAWS,EAAQnD,kBAAkBgD,UAAY,IACpF,CAfQiD,CAA4BvD,EAASS,IACrCA,EAAQnD,kBAAkBH,IACzBA,EAAQgE,QAAQ,MAAQ,GAAKV,EAAQnD,kBAAkB8C,OACxDK,EAAQnD,kBAAkB,KAC9B4F,EAAUlC,EAAOhB,EAASS,EAC9B,C,2FCtBA,cACA,UACA,UACA,UACA,UACA,SASa,EAAAN,gBAAiD,SAACa,EAAOhB,EAASS,GAC3E,IAAM+C,GAAgB,IAAAC,gBAAezD,EAASS,IAE9C,IAAAuC,aACIvC,EACA,CAAEiD,QAASF,EAAgB,aAAU7E,EAAW+C,UAAW,UAC3D,W,MACUiC,GAAc,IAAAC,cAAa5D,GAAS,EAAqBS,EAAQ9D,eASvE,IAPA,IAAAyE,aAAYpB,EAASS,EAAQ9C,cAAcuC,OAAQyD,EAAYE,aAAcpD,GAGzEA,EAAQlE,gBACRoH,EAAY7B,YAAa,GAGzB0B,GACA,IAAA5B,UAASZ,EAAO2C,OACb,CACH,IAAMjC,GAAY,IAAAK,YAAWf,EAAO2C,GAClB,QAAlB,EAAAlD,EAAQuB,kBAAU,SAAEC,UAAUjC,EAAS0B,EAAW,CAACiC,G,CAE3D,GAER,C,yFCtCA,cACA,UACA,SAGMG,EAAY,CAAC,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,QAmBtD,EAAA3E,cAAmD,SAAC6B,EAAOhB,EAASS,IAC7E,IAAAuC,aACIvC,EACA,CACIiD,SAAS,IAAAD,gBAAezD,EAASS,GAAW,uBAAyB,iBAEzE,WACI,IAxBSsD,EACXC,EAuBQpL,EAAaoH,EAAQiE,aAAa,QAClClL,GAzBGgL,EAyBoB/D,EAAQiE,aAAa,QAxBpDD,EAAUE,SAASH,GAAQ,IAE7BI,OAAOC,MAAMJ,QACb,EACOA,EAAU,EACVF,EAAU,GACVE,EAAUF,EAAUO,OACpBP,EAAUA,EAAUO,OAAS,GAE7BP,EAAUE,EAAU,IAgBjBM,EAAYtE,EAAQiE,aAAa,SACjCjH,EAASyD,EAAQ9D,cAEnB/D,IACAoE,EAAOpE,WAAaA,GAGpBG,IACAiE,EAAOjE,SAAWA,GAGlBuL,IACAtH,EAAOsH,UAAYA,IAGvB,IAAAlD,aAAYpB,EAASS,EAAQ9C,cAAc+F,QAASjD,EAAQ9D,cAAe8D,GAE3EA,EAAQnD,kBAAkB8C,MAAMY,EAAOhB,EAASS,EACpD,GAER,C,kICrDA,UACA,UACA,UACA,UACA,UACA,UACA,SAaa,EAAAc,cAA0D,CACnE,aACA,cACA,cACA,gBAMS,EAAA5B,yBAA0D,SACnEqB,EACAhB,EACAS,IAEA,IAAAuC,aAAYvC,EAAS,CAAEiD,QAAS,uBAAwBhC,UAAW,iBAAkB,YACjF,IAAAN,aAAYpB,EAASS,EAAQ9C,cAAc0D,MAAOZ,EAAQjE,YAAaiE,IACvE,IAAAW,aAAYpB,EAASS,EAAQ9C,cAAc4G,eAAgB9D,EAAQ9D,cAAe8D,GAElF,IAAMzD,GAAM,iBACLyD,EAAQjE,cAGf,IAAA4E,aAAYpB,EAASS,EAAQ9C,cAAc2D,UAAWtE,EAAQyD,GAE9D,IAAMtD,EAC2C,UAA7C,IAAAqH,iBAAgBxE,EAASS,GAAShH,QAC5BuG,EAAQ7C,QAAQ8F,cAChB,MACJwB,GAAkB,IAAAC,uBAAsBvH,EAASH,GAevD,GAVA,EAAAuE,cAAcC,SAAQ,SAAAC,UACXhB,EAAQjE,YAAYiF,EAC/B,IAEAhB,EAAQnD,kBAAkB8C,MAAMqE,EAAiBzE,EAASS,GAEtDT,EAAQyB,MAAM1I,UAAgD,GAApCmL,SAASlE,EAAQyB,MAAM1I,YACjD0L,EAAgBE,cAAe,GAyB3C,SAAmCF,GAC/B,IAAM3B,EAAa2B,EAAgBG,OAAO,GAE1C,MAC+B,OAA3BH,EAAgBtH,SACiB,GAAjCsH,EAAgBG,OAAOP,QACC,aAAxBvB,EAAW+B,WACX/B,EAAWgC,UAEnB,CA/BYC,CAA0BN,GAAkB,CAG5C,IAAM/C,EAAY+C,EAAgBG,OAAO,GAErCH,EAAgBE,eAChBjD,EAAU/E,cAAgBN,OAAOC,OAAO,CAAC,EAAGoF,EAAU/E,cAAe,CACjE5D,SAAU,OAIlBsD,OAAOC,OAAOoF,EAAU1E,OAAQyH,EAAgBzH,SAChD,IAAAgI,yBAAwBtD,IACxB,IAAAE,UAASZ,EAAOU,E,MAEhB,IAAAE,UAASZ,EAAOyD,EAExB,KAEA,IAAA7C,UAASZ,GAAO,IAAAW,kBAAgB,EAAqBlB,EAAQjE,aACjE,C,4FCnFA,cACA,UACA,UACA,UACA,UACA,UACA,SAGMyI,EAAuD,SAACjE,EAAOhB,EAASS,GAC1E,IAAMY,GAAQ,IAAA6D,oBAAmBlF,GAC3BmF,EAAmB1E,EAAQlE,eAEjC,IAAAyG,aACIvC,EACA,CACIiD,QAAS,QACThC,UAAW,QACX3E,KAAM,UAEV,YACI,IAAA6E,UAASZ,EAAOK,GAEhBZ,EAAQnD,kBAAkB8C,MAAMiB,EAAOrB,EAASS,EACpD,IAGA0E,GAAoB1E,EAAQlE,gBAC5B8E,EAAMS,YAAa,EAE3B,EAEMsD,EAAyD,SAACpE,EAAOhB,EAASS,G,MACtEiD,GAAU,IAAA2B,sBAAqBrF,EAASS,EAAQ9D,eAChDwI,EAAmB1E,EAAQlE,eAEjC,IAAA+I,eAAc5B,EAASjD,GACvB,IAAMiB,GAAY,IAAAK,YAAWf,EAAO0C,GAClB,QAAlB,EAAAjD,EAAQuB,kBAAU,SAAEC,UAAUjC,EAAS0B,EAAW,CAACgC,KAEnD,IAAAV,aACIvC,EACA,CACIiD,QACI,UAER,WACIjD,EAAQnD,kBAAkB8C,MAAMsD,EAAS1D,EAASS,EACtD,IAGA0E,GAAoB1E,EAAQlE,gBAC5BmH,EAAQ5B,YAAa,EAE7B,EAKa,EAAAhC,iBAAkD,SAACkB,EAAOhB,EAASS,KAC1D,IAAAgD,gBAAezD,EAASS,GACpCwE,EACAG,GAEIpE,EAAOhB,EAASS,EAC9B,C,4FCjEA,cACA,UACA,UACA,QACA,UACA,UACA,SAMa,EAAAnB,iBAAyD,SAAC0B,EAAOhB,EAASS,IACnF,IAAAuC,aACIvC,EACA,CAAEiD,QAAS,uBAAwBhC,UAAW,eAAgBxE,eAAgB,UAC9E,WACI,IAAMP,EAA2C,CAAC,GAElD,IAAAyE,aAAYpB,EAASS,EAAQ9C,cAAc4G,eAAgB5H,EAAe8D,IAK1E,IAAArC,eAAczB,GAAe6E,SAAQ,SAAAhD,UAC1BiC,EAAQ9D,cAAc6B,EACjC,IAEAiC,EAAQvD,gBAAiB,IAAAqI,0BAAyBvF,EAAQ7C,QAASR,IAEnE,IAAA6I,gBAAexE,EAAOhB,EAASS,EACnC,KAGJ,IAAAmB,UAASZ,GAAO,IAAAW,kBAAgB,EAAqBlB,EAAQjE,aACjE,C,uFCnCA,cACA,UACA,UACA,SAMa,EAAA+C,YAA+C,SAACyB,EAAOhB,EAASS,IACzE,IAAAuC,aACIvC,EACA,CACIiB,UAAW,iBAEf,YACI,IAAAN,aAAYpB,EAASS,EAAQ9C,cAAc8H,QAAShF,EAAQjE,YAAaiE,GAEzE,IAAM3F,GAAK,IAAA4K,eAAc,KAAMjF,EAAQjE,aAEnCwD,EAAQ+D,OACRjJ,EAAGiJ,KAAO/D,EAAQ+D,MAGlBtD,EAAQlE,gBACRzB,EAAGgH,YAAa,IAGpB,IAAAF,UAASZ,EAAOlG,EACpB,GAER,C,yFC/BA,cACA,UACA,UACA,UACA,SAMa,EAAAuE,eAAqD,SAAC2B,EAAOhB,EAASS,IAC/E,IAAAuC,aAAYvC,EAAS,CAAEiD,QAAS,iBAAkB,W,QACxCiC,EAAuClF,EAAQ9D,eAErD,IAAAyE,aAAYpB,EAASS,EAAQ9C,cAAc+F,QAASiC,EAAalF,IACjE,IAAAW,aAAYpB,EAASS,EAAQ9C,cAAciI,MAAOD,EAAalF,IAC/D,IAAAW,aAAYpB,EAASS,EAAQ9C,cAAc0D,MAAOZ,EAAQjE,YAAaiE,GAEvE,IAAMmF,GAAQ,IAAAC,aAAY7F,EAAQ8F,IAAKH,GACjCI,EAAM/F,EAAQ+F,IACdC,EAAQhG,EAAQgG,OAEtB,IAAA5E,aAAYpB,EAASS,EAAQ9C,cAAcV,QAAS2I,EAAM3I,QAASwD,IACnE,IAAA6E,eAAcM,EAAOnF,GAEjBsF,IACAH,EAAMG,IAAMA,GAEZC,IACAJ,EAAMI,MAAQA,GAEdvF,EAAQlE,gBACRqJ,EAAM9D,YAAa,GAEQ,UAAV,QAAjB,EAAArB,EAAQC,iBAAS,eAAE+B,OAAmBhC,EAAQC,UAAUkF,OAAS5F,IACjE4F,EAAMK,4BAA6B,EACnCL,EAAM9D,YAAa,GAGvB,IAAMJ,GAAY,IAAAK,YAAWf,EAAO4E,GAClB,QAAlB,EAAAnF,EAAQuB,kBAAU,SAAEC,UAAUjC,EAAS0B,EAAW,CAACkE,GACvD,GACJ,C,iGC1CA,cACA,UACA,UACA,UACA,UACA,UACA,UACA,SAOMM,EAA8D,CAChE,eACA,YACA,gBACA,aACA,cACA,eACA,iBACA,oBACA,kBACA,mBACA,QACA,SACA,WACA,YACA,WACA,aAEEC,EAA4B,CAAC,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,IAAK,KACtEpF,EAAuB,CAAC,IAAK,QAKtB,EAAAhC,sBAAuD,SAACiC,EAAOhB,EAASS,GACjF,IAAM2F,GAAU,IAAA3C,gBAAezD,EAASS,GAExC,IACK2F,GAAoC,gBAAzBpG,EAAQyB,MAAMhI,UAsDlC,SAAkCuG,EAAsBS,GAEpD,GAAI0F,EAA0BhF,QAAQnB,EAAQ7C,UAAY,EACtD,OAAO,EAGX,IAAMsE,EAAQzB,EAAQyB,MAChB4E,GAAe,IAAA7B,iBAAgBxE,EAASS,GAExC6F,EAAU7E,EAAM8E,iBAAiB,oBAGvC,SAAID,GAAsB,eAAXA,OAOXJ,EAA6BM,MACzB,SAAAhI,GAAO,OAAA0F,SAAUzC,EAAMjD,IAAoB6H,EAAa7H,IAAmB,IAAM,CAA1E,MAOS,QAApBiD,EAAMhJ,YAA6C,QAArBgJ,EAAM/I,eAKpCsH,EAAQiE,aAAa,UAK7B,CA1FQwC,CAAyBzG,EAASS,IAElC,IAAAd,0BAAyBqB,EAAOhB,EAASS,QACtC,GAAI2F,EAAS,CAChB,IAAMnF,EAAYR,EAAQvD,eAAeC,QAAUsD,EAAQvD,oBAAiByB,EACtEuC,EAAqBH,EAAqBI,QAAQnB,EAAQ7C,UAAY,GAE5E,IAAA6F,aAAYvC,EAAS,CAAEiD,QAAS,uBAAwBhC,UAAW,iBAAkB,WACjF,IAAM/E,EAA2C,CAAC,GAElD,IAAAyE,aAAYpB,EAASS,EAAQ9C,cAAc4G,eAAgB5H,EAAe8D,GAC1EpE,OAAOC,OAAOmE,EAAQ9D,cAAeA,IAErC,IAAA6I,gBAAexE,EAAOhB,EAASS,EAAS9D,EAC5C,IAEIyJ,IAAYlF,IACZ,IAAAU,UACIZ,GACA,IAAAW,kBACI,EACAlB,EAAQjE,iBACRmC,EACAsC,G,MAKZ,IAAA+B,aACIvC,EACA,CACIiD,QAAS,eACThC,UAAW,eACX3E,KAAM,gBAEV,YACI,IAAAqE,aAAYpB,EAASS,EAAQ9C,cAAc+F,QAASjD,EAAQ9D,cAAe8D,GAEvEA,EAAQ1D,KAAKC,OAAO0J,MAA2B,KAAnB1G,EAAQ7C,UACpC,IAAAiE,aACIpB,EACAS,EAAQ9C,cAAcgJ,iBACtBlG,EAAQ1D,KAAKC,OACbyD,GAIRA,EAAQnD,kBAAkB8C,MAAMY,EAAOhB,EAASS,EACpD,GAGZ,C,yFC9FA,cACA,UACA,SAMa,EAAA3B,cAA+C,SAACkC,EAAOhB,EAASS,GACrET,EAAQ4G,aAAa,SACrB,IAAA5D,aAAYvC,EAAS,CAAE1D,KAAM,gBAAiB,YAC1C,IAAAqE,aAAYpB,EAASS,EAAQ9C,cAAcZ,KAAM0D,EAAQ1D,KAAKC,OAAQyD,IACtE,IAAAW,aAAYpB,EAASS,EAAQ9C,cAAcV,QAASwD,EAAQ1D,KAAKE,QAASwD,IAE1E,IAAA1B,uBAAsBiC,EAAOhB,EAASS,EAC1C,KAGA,IAAA1B,uBAAsBiC,EAAOhB,EAASS,EAE9C,C,6FCpBA,cACA,UACA,SAMa,EAAAjB,kBAAqD,SAACwB,EAAOhB,EAASS,G,MACvE7D,EAAe6D,EAAO,WAE9B,GAAI7D,EAAWiK,YAAcjK,EAAWC,OAAOwH,OAAS,GACpD,IAAArB,aACIvC,EACA,CACIiD,QAAS,yBAEb,YACI,IAAAtC,aACIpB,EACAS,EAAQ9C,cAAc4G,eACtB9D,EAAQ9D,cACR8D,GAGJ,IAAMqG,GAAW,IAAAC,gBAAenK,EAAWC,OAAQ4D,EAAQ9D,gBAC3D,IAAAyE,aACIpB,EACAS,EAAQ9C,cAAcqJ,gBACtBF,EAAS9J,OACTyD,GAGJ7D,EAAWiK,WAAYjC,OAAOqC,KAAKH,IAEnC,IAAA1F,aACIpB,EACAS,EAAQ9C,cAAcmJ,SACtBA,EAASjK,OAAOiK,EAASjK,OAAOwH,OAAS,GAAGrH,OAC5CyD,GAGJA,EAAQnD,kBAAkB8C,MAAM0G,EAAU9G,EAASS,GAEnD,IAAMqC,EAAagE,EAASlC,OAAO,GAGL,GAA1BkC,EAASlC,OAAOP,QACQ,aAAxBvB,EAAW+B,WACX/B,EAAWgC,aAEXzI,OAAOC,OAAOwK,EAAS9J,OAAQ8F,EAAW9F,QAC1C8F,EAAW9F,OAAS,CAAC,EAE7B,QAED,CACH,IAAMkK,EAAqC,QAArB,EAAAtK,EAAWiK,kBAAU,eAAEjC,OACvCuC,EAAWD,aAAa,EAAbA,GAAgBA,aAAa,EAAbA,EAAe7C,QAAS,GAEzD5D,EAAQnD,kBAAkB,KACC,eAAvB6J,aAAQ,EAARA,EAAUtC,WAA4BsC,EAAWnG,EACjDhB,EACAS,E,CAGZ,C,yFClEA,cACA,UACA,UACA,SACA,UAMa,EAAAhB,cAAuE,SAChFuB,EACAhB,EACAS,IAEA,IAAAuC,aACIvC,EACA,CACIiD,QAAS,uBACThC,UAAW,yBAEf,WACI,IAAM0F,GAA+B,IAAAC,iBACjCrH,EAAQ7C,QACRsD,EAAQjE,aAEJI,EAAe6D,EAAO,YAE9B,IAAAW,aAAYpB,EAASS,EAAQ9C,cAAcV,QAASmK,EAAMnK,QAASwD,IACnE,IAAAW,aAAYpB,EAASS,EAAQ9C,cAAc2J,UAAWF,EAAMpK,OAAQyD,IAGpE,IAAA8G,oBAAmBH,GAAO,SAAAI,GAWtB,OAVAA,EAAWA,GAAY,CAAC,GACxB,IAAApG,aAAYpB,EAAS,CAAC,EAAAyH,+BAA+BC,OAAQF,EAAU/G,QAG/B,IAA7B+G,EAASG,uBACsB,IAA/BH,EAASI,qBAEhBJ,EAAW,MAGRA,CACX,KAEA,IAAApG,aAAYpB,EAASS,EAAQ9C,cAAc+F,QAASjD,EAAQ9D,cAAe8D,GAE3E,IAAMoH,EAAqBjL,EAAWiK,WAEtCjK,EAAWiK,WAAajK,EAAWiK,YAAc7F,EACjDpE,EAAWC,OAAOoK,KAAKG,GAEvB,IACI3G,EAAQnD,kBAAkB8C,MAAMY,EAAOhB,EAASS,E,SAEhD7D,EAAWC,OAAOiL,MAClBlL,EAAWiK,WAAagB,C,CAEhC,GAER,C,sFC7DA,cACA,UACA,UACA,QACA,UACA,SAMa,EAAAnI,WAA4C,SAACsB,EAAOhB,EAASS,IACtE,IAAAuC,aACIvC,EACA,CAAEvD,eAAgB,QAASwG,QAAS,uBAAwBhC,UAAW,iBACvE,WACIjB,EAAQvD,gBAAiB,IAAAqI,0BAAyBvF,EAAQ7C,SAE1D,IAAMR,EAA2C,CAAC,GAElD,IAAAyE,aAAYpB,EAASS,EAAQ9C,cAAc4G,eAAgB5H,EAAe8D,GAC1EpE,OAAOC,OAAOmE,EAAQ9D,cAAeA,IAErC,IAAA6I,gBAAexE,EAAOhB,EAASS,EAAS9D,EAC5C,KAGJ,IAAAiF,UAASZ,GAAO,IAAAW,kBAAgB,EAAqBlB,EAAQjE,aACjE,C,uGC5BA,UACA,SACA,UACA,UACA,UACA,UACA,UACA,SAsQA,SAASuL,EAAUC,GAIf,IAHA,IAAIzJ,EAAmB,GACnB0J,EAAUD,EAAUA,EAAU3D,OAAS,GAElCtJ,EAAIiN,EAAU3D,OAAS,EAAGtJ,GAAK,EAAGA,SAClB4D,IAAjBqJ,EAAUjN,GACVwD,EAAOxD,GAAK,GAEZwD,EAAOxD,GAAKkN,EAAUD,EAAUjN,GAChCkN,EAAUD,EAAUjN,IAI5B,OAAOwD,CACX,CA5Pa,EAAAsB,eAAqD,SAC9DmB,EACAkH,EACAzH,IAEA,IAAAuC,aACIvC,EACA,CAAEiD,QAAS,uBAAwBhC,UAAW,yBAC9C,W,SACI,IAAAN,aAAY8G,EAAczH,EAAQ9C,cAAc0D,MAAOZ,EAAQjE,YAAaiE,GAE5E,IAAM7E,GAAQ,IAAAuM,aAAYD,EAAaE,KAAK/D,OAAQ5D,EAAQjE,aACtD6L,EAA4C,UAAV,QAAjB,EAAA5H,EAAQC,iBAAS,eAAE+B,MAAkBhC,EAAQC,UAAY,KAE1E4H,GADgBD,aAAc,EAAdA,EAAgBzM,QACKsM,EAEvCzH,EAAQ8H,oBACR3M,EAAM4M,cAAgBN,GAGR,QAAlB,EAAAzH,EAAQuB,kBAAU,SAAEyG,QAAQP,EAActM,IAE1C,IAAAwF,aAAY8G,EAAczH,EAAQ9C,cAAc/B,MAAOA,EAAMoB,OAAQyD,IACrE,IAAAW,aAAY8G,EAAczH,EAAQ9C,cAAc+K,YAAa9M,EAAMoB,OAAQyD,IAC3E,IAAAW,aACI8G,EACAzH,EAAQ9C,cAAc4G,eACtB9D,EAAQ9D,cACR8D,IAEJ,IAAAW,aAAY8G,EAAczH,EAAQ9C,cAAcV,QAASrB,EAAMqB,QAASwD,IACxE,IAAAmB,UAASZ,EAAOpF,GAMhB,IAJA,IAAM+M,EAA4B,CAAC,GAC7BC,EAAyB,CAAC,GAC1BC,EAAYpI,EAAQoI,WAAa,E,WAE9BC,GACL,IAAMC,EAAKb,EAAaE,KAAKU,GACvBE,EAAWpN,EAAMwM,KAAKU,GAEtBG,EAAQF,EAAGG,YAGb,IAAA/G,cAAa8G,EAAO,mBACnB,IAAAE,iBAAgBF,EAAO,WACpB,IAAAE,iBAAgBF,EAAO,WACvB,IAAAE,iBAAgBF,EAAO,WAE3B,IAAA7H,aAAY6H,EAAOxI,EAAQ9C,cAAcqL,SAAUA,EAAShM,OAAQyD,GAC7DA,EAAQ8H,oBACfS,EAASR,cAAgBO,IAG7B,IAAA3H,aAAY2H,EAAItI,EAAQ9C,cAAcqL,SAAUA,EAAShM,OAAQyD,IAEjE,IAAAuC,aAAYvC,EAAS,CAAEiB,UAAW,eAAgBgC,QAAS,iBAAkB,WACzE,IAAMd,EAASmG,EAAGK,cACZC,EAAYzG,aAAM,EAANA,EAAQzF,SAGtByF,GACc,SAAbyG,GAAqC,SAAbA,GAAqC,SAAbA,KAGjD,IAAAjI,aACIwB,EACAnC,EAAQ9C,cAAc0D,MACtBZ,EAAQjE,YACRiE,IAEJ,IAAAW,aACIwB,EACAnC,EAAQ9C,cAAc4G,eACtB9D,EAAQ9D,cACR8D,KAIR,IAAAW,aAAY2H,EAAItI,EAAQ9C,cAAc0D,MAAOZ,EAAQjE,YAAaiE,IAClE,IAAAW,aACI2H,EACAtI,EAAQ9C,cAAc4G,eACtB9D,EAAQ9D,cACR8D,GAGJ,I,iBACQ6I,EAAeC,GAInB,KAAOP,EAASQ,MAAMD,GAAYA,KAElC,IAAMzN,EAAKiN,EAAGS,MAAMF,GACdG,EAAyBhJ,EAAQlE,cACjCmN,EAASH,EAAYzN,EAAG6N,QACxBC,EAASd,EAAMhN,EAAG+N,QAClBC,OAA4CnL,IAA5BgK,EAAgBe,GAChCK,OAA0CpL,IAAzBiK,EAAagB,GAEpC,GAAIE,GAAiBC,EAAgB,CACjC,IAAMC,GAAO,IAAAC,uBAAsBnO,IAE/BkO,EAAKE,MAAQ,GAAKF,EAAKG,OAAS,KAC5BL,IACAnB,EAAgBe,GACZf,EAAgBY,GAAaS,EAAKE,MAAQrB,GAG9CkB,IACAnB,EAAagB,GACThB,EAAaE,GAAOkB,EAAKG,OAAStB,G,EAKlD,IAAA7F,aACIvC,EACA,CAAEiB,UAAW,eAAgBgC,QAAS,iBACtC,YACI,IAAAtC,aACItF,EACA2E,EAAQ9C,cAAc0D,MACtBZ,EAAQjE,YACRiE,IAEJ,IAAAW,aACItF,EACA2E,EAAQ9C,cAAcyM,mBACtB3J,EAAQ9D,cACR8D,GAGJ,IAAM4J,GAAU,iBACT5J,EAAQjE,aAETS,EAAyB,CAAC,GAEhC,IAAAmE,aACItF,EACA2E,EAAQ9C,cAAc2M,UACtBD,EACA5J,IAEJ,IAAAW,aACItF,EACA2E,EAAQ9C,cAAc+K,YACtB2B,EACA5J,IAEJ,IAAAW,aAAYtF,EAAI2E,EAAQ9C,cAAcV,QAASA,EAASwD,GAExD,IACI,IAAIkJ,EAAU,EACdA,GAAW7N,EAAG6N,QACdA,IAAWJ,IAEX,IAAK,IAAIM,EAAU,EAAGA,GAAW/N,EAAG+N,QAASA,IAAW,CACpD,IAAMU,EAAmB,GAAXZ,GAA2B,GAAXE,EACxBW,GAAO,IAAAC,iBACTd,EAAU,EACVE,EAAU,EACI,MAAd/N,EAAGqB,QACHkN,GAGJG,EAAKvN,SAAU,EAAH,eAAQA,GAEpB,IAAMyN,EAAa9O,EAAMwM,KAAKU,EAAMe,EAAU,GAM9C,GAJIa,IACAA,EAAWlB,MAAMD,GAAaiB,GAG9BD,EAAO,CACH9J,EAAQ8H,oBACRiC,EAAKhC,cAAgB1M,GAGnB,MAAyB2E,EAAQ7D,WAA/BiK,EAAU,aAAEhK,EAAM,SAE1B4D,EAAQ7D,WAAWiK,gBAAalI,EAChC8B,EAAQ7D,WAAWC,OAAS,GAE5B,IACI4D,EAAQnD,kBAAkB8C,MAAMoK,EAAM1O,EAAI2E,E,SAE1CA,EAAQ7D,WAAWiK,WAAaA,EAChCpG,EAAQ7D,WAAWC,OAASA,C,EAIpC,IAAM8N,EAAwBlK,EAAQlE,eAGjCkN,GAA0BkB,GAC1BrC,GACGD,GACAS,GAAOT,EAAeuC,UACtB9B,GAAOT,EAAewC,SACtBtB,GAAalB,EAAeyC,aAC5BvB,GAAalB,EAAe0C,cAEhCP,EAAK1I,YAAa,E,CAIlC,I,EAxHeyH,C,EAAfD,EAAY,EAAGC,EAAY,EAC/BD,EAAYP,EAAGS,MAAMnF,OACrBiF,I,EAFIA,EAAeC,GAAAA,EAAY,CA2HvC,IAEA,IAAK,IAAIyB,EAAM,EAAGA,EAAMhC,EAASQ,MAAMnF,OAAQ2G,IACtChC,EAASQ,MAAMwB,KAChBhC,EAASQ,MAAMwB,IAAO,IAAAP,kBAClB,GACA,GACA,EACAhK,EAAQjE,a,EAtLfsM,EAAM,EAAGA,EAAMZ,EAAaE,KAAK/D,OAAQyE,I,EAAzCA,GA4LTlN,EAAMqP,OAASlD,EAAUY,GAEzB,IAAMuC,EAAUnD,EAAUa,GAE1BhN,EAAMwM,KAAK5G,SAAQ,SAACsH,EAAK/N,GACjBmQ,EAAQnQ,GAAK,IACb+N,EAAIqB,OAASe,EAAQnQ,GAE7B,GACJ,GAER,C,uGC3QA,UACA,UACA,UACA,SACA,UACA,UACA,UAYa,EAAAgF,cAAwC,SACjDiB,EACAmK,EACA1K,G,MAEI2K,EAAMD,EAASE,WAAa,GAC5B,gBAAiC,IAAAxI,4BAA2BpC,EAAS0K,GAAS,GAA7EG,EAAc,KAAEC,EAAY,KAC3BC,EAA6C,GAC7C9J,GAAY,IAAA+J,iBAAgBzK,EAAOP,EAAQjE,aAEjD,GAAI8O,GAAkB,EAAG,CACrB,IAAMI,EAAUN,EAAIO,UAAU,EAAGL,GACjCE,EAASvE,KAAK2E,EAAe5K,EAAO0K,EAAShK,EAAWjB,IACxDA,EAAQlE,eAAgB,GAExB,IAAAiG,oBAAmBxB,EAAOP,GAE1B2K,EAAMA,EAAIO,UAAUL,GACpBC,GAAgBD,C,CAGhBC,GAAgB,IACVG,EAAUN,EAAIO,UAAU,EAAGJ,GACjCC,EAASvE,KAAK2E,EAAe5K,EAAO0K,EAAShK,EAAWjB,KAGpDA,EAAQC,WACmB,SAA1BD,EAAQC,UAAU+B,MAAoBhC,EAAQC,UAAUgC,MAAMC,YAE/D,IAAAH,oBAAmBxB,EAAOP,GAG9BA,EAAQlE,eAAgB,EACxB6O,EAAMA,EAAIO,UAAUJ,IAGxBC,EAASvE,KAAK2E,EAAe5K,EAAOoK,EAAK1J,EAAWjB,IAClC,QAAlB,EAAAA,EAAQuB,kBAAU,SAAEC,UAChBkJ,EACAzJ,EACA8J,EAASK,QAAO,SAACpO,GAA6B,QAAEA,CAAF,IAEtD,EAGA,IAAMqO,EAA+B,CAAC,MAAO,WAAY,WAAY,gBAErE,SAASF,EACL5K,EACA+K,EACArK,EACAjB,G,MAEIuL,EAoBJ,OAlBID,MAEK,IAAAE,eAAcF,KACY,QAA1B,EAAArK,aAAS,EAATA,EAAW8J,SAASnH,cAAM,QAAI,GAAK,GACpCyH,EAA6B3K,SAAQO,aAAS,EAATA,EAAW1E,OAAOzD,aAAc,KAAO,KAE5EyS,GAAY,IAAAE,YAAWH,EAAMtL,EAAQ9D,eAEjC8D,EAAQlE,gBACRyP,EAAUlK,YAAa,IAG3B,IAAAwD,eAAc0G,EAAWvL,IAEzB,IAAAsB,YAAWf,EAAOgL,EAAWvL,EAAQjE,cAItCwP,CACX,C,8FC5FA,cACA,UACA,UAMA,8BAAmChL,EAA+BP,GAC9D,IAAM0L,GAAS,IAAAC,uBAAsB3L,EAAQ9D,gBAE7C,IAAA2I,eAAc6G,EAAQ1L,IAEtB,IAAAsB,YAAWf,EAAOmL,EAAQ1L,EAAQjE,YACtC,C,0FCdA,cAQA,0BAAiE6P,EAAOC,GACpE,GAAID,GAAMC,EACN,OAAO,EAEP,IAAMC,GAAQ,IAAAnO,eAAciO,GACtBG,GAAQ,IAAApO,eAAckO,GAE5B,OAAOC,EAAMlI,QAAUmI,EAAMnI,QAAUkI,EAAME,OAAM,SAAAjO,GAAO,OAAA6N,EAAG7N,IAAQ8N,EAAG9N,EAAd,GAElE,C,+FCdA,iCAAsCwB,GAClC,OAAOA,EAAQiK,uBACnB,C,2FCLA,cAUA,2BACIjK,EACAS,GAEA,IAAIiM,EAAM1M,EAAQ7C,QAAQ8F,cAE1B,OAAO,EAAAvJ,oBAAoBgT,IAAQ,CAAC,CACxC,C,oGCRA,sCACIjM,EACAkM,G,MAEMjK,EAAmC,UAAV,QAAjB,EAAAjC,EAAQC,iBAAS,eAAE+B,MAAkBhC,EAAQC,UAAUgC,MAAQ,KAK7E,MAAO,EAHWA,aAAK,EAALA,EAAOkK,iBAAkBD,EAAmBjK,EAAMmK,aAAe,GACnEnK,aAAK,EAALA,EAAOoK,eAAgBH,EAAmBjK,EAAMqK,WAAc,EAGlF,C,0FCnBA,cAGMC,EAAuB,CAAC,QAAS,YAAa,QAAS,aAAc,QAQ3E,0BAA+BhN,EAAsBS,GACjD,IAAMhH,EAAUuG,EAAQyB,MAAMhI,UAAW,IAAA+K,iBAAgBxE,EAASS,GAAShH,SAAW,GAEtF,OAAOuT,EAAqB7L,QAAQ1H,IAAY,CACpD,C,uFCfA,cAcA,uBACIuG,EACAnB,EACA7B,EACAyD,GAEA,IAAM4F,GAAe,IAAA7B,iBAAgBxE,EAASS,GAE9C5B,EAAQ2C,SAAQ,SAAAyL,GACZA,SAAAA,EAASjQ,EAAQgD,EAASS,EAAS4F,EACvC,GACJ,C,oGCzBA,UA6BM6G,EAA6D,CAAC,mBAC9DC,EAA2D,CAC7D,aACA,cACA,cACA,gBAiGJ,SAASC,EACLpQ,EACAqQ,GAEA,OAAQA,GACJ,IAAK,QACD,MAAO,CAAC,EAEZ,UAAK1O,EACD,OAAO3B,EAEX,QACI,IAAM,GAAS,EAAH,eAAQA,GAcpB,OAZA,IAAAoB,eAAcpB,GAAQwE,SAAQ,SAAAhD,IAEN,wBAAf6O,GACGH,EAAsB/L,QAAQ3C,IAC1B,GACQ,wBAAf6O,GACGF,EAAsBhM,QAAQ3C,IAAyC,WAEpE,EAAOA,EAEtB,IAEO,EAEnB,CAvHA,uBACIiC,EACApD,EACAiQ,GAGI,IAuEJtQ,EAvEIL,EAKA8D,EAAO,cAJPjE,EAIAiE,EAAO,YAHD8M,EAGN9M,EAAO,KAFD+M,EAEN/M,EAAO,KADSgN,EAChBhN,EAAO,eACHiD,EAAmDrG,EAAO,QAAjDqE,EAA0CrE,EAAO,UAAtCN,EAA+BM,EAAO,KAAhC1E,EAAyB0E,EAAO,KAA1BH,EAAmBG,EAAO,eAElE,IACIoD,EAAQ9D,cAAgByQ,EAAoBzQ,EAAe+G,GAC3DjD,EAAQjE,YAAc4Q,EAAoB5Q,EAAakF,GACvDjB,EAAQ1D,KAchB,SACIwQ,EACAxQ,GAEA,OAAQA,GACJ,IAAK,cACD,MAAO,CACHC,OAAQ,CACJ3E,WAAW,GAEf4E,QAAS,CAAC,GAGlB,IAAK,QACD,MAAO,CACHD,OAAQ,CAAC,EACTC,QAAS,CAAC,GAIlB,QACI,MAAO,CACHA,QAASsQ,EAAWtQ,QACpBD,QAAQ,EAAF,eAAOuQ,EAAWvQ,SAGxC,CAxCuB0Q,CAAkBH,EAAYxQ,GAC7C0D,EAAQ9H,KAyChB,SAA2B6U,EAA8B7U,GACrD,OAAQA,GACJ,IAAK,cACD,MAAO,CACHqE,OAAQ,CACJpE,WAAY,cAGxB,IAAK,QACD,MAAO,CACHoE,OAAQ,CAAC,GAEjB,QACI,OAAOwQ,EAEnB,CAxDuBG,CAAkBH,EAAY7U,GAC7C8H,EAAQvD,gBA0DZF,EA1DoDyQ,EA8D3C,UA9D4DvQ,EA+DtD,CACHF,OAAQ,CAAC,EACTG,QAAS,IAGNH,GAlEXsQ,G,SAEA7M,EAAQ9D,cAAgBA,EACxB8D,EAAQjE,YAAcA,EACtBiE,EAAQ1D,KAAOwQ,EACf9M,EAAQ9H,KAAO6U,EACf/M,EAAQvD,eAAiBuQ,C,CAEjC,C,6ICrEA,cAGMG,EAAmB,UACnBC,EAAqB,UACrBC,EAAmB,QACnBC,EAAyB,cAK/B,2BAAgCC,GAC5B,OAAO,IAAA7L,cAAa6L,EAAM,iBAAmBA,EAAKC,UAAUC,SAASN,EACzE,EAKA,gCACIO,EACAnR,GAEA,GAAImR,GAAaP,EACb,OAAO,EACyC,GAAzCO,EAAUhN,QAAQ0M,GACzB7Q,EAAOoR,WAAaD,EAAUxC,UAAUkC,GACM,GAAvCM,EAAUhN,QAAQ2M,GACzB9Q,EAAOqR,GAAKF,EAAUxC,UAAUmC,GACoB,GAA7CK,EAAUhN,QAAQ4M,KACzB/Q,EAAOsR,WAAmE,KAAtDH,EAAUxC,UAAUoC,IAEhD,EAKA,oCAAyC/Q,G,MACrC,OAAOA,EAAOuR,aACR,GACGX,EAAgB,IAAIC,GAAsC,QAAjB,EAAA7Q,EAAOoR,kBAAU,QAAI,IAAE,KAC/DpR,EAAOqR,GAAK,GAAGP,EAAmB9Q,EAAOqR,GAAE,IAAM,IAClDN,GAAyB/Q,EAAOsR,WAAa,IAAM,IAChE,C,uFCrCA,yBACIE,GAEA,OAAOnS,OAAOoS,KAAKD,EACvB,C,yFCHA,2BACIxO,EACA0M,G,MAEA,OAAuB,QAAhB,EAAA1M,aAAO,EAAPA,EAAS7C,eAAO,eAAEuR,sBAAuBhC,CACpD,C,sFCuCA,wBACIsB,EACAW,GAEA,QAASX,GAAQA,EAAKY,UAAYC,KAAKF,EAC3C,C,8FCtDA,cACA,UAGMG,GAA8B,IAAAC,wBAChC,CACIpH,kBAAkB,IAAAqH,yBACd,OACArQ,EAAuB,MAI3BiJ,oBAAoB,IAAAoH,yBAChB,OACArQ,EAAuB,OAK/B,GACA,GAQJ,8BACIsQ,EACA3B,GAEA,OAAO,IAAA4B,gBAAeD,EAAM3B,EAAUwB,EAC1C,C,wGClCA,cAIMK,EAAyB,cAS/B,0BACIxO,EACA2M,EACA8B,GAEA,IAAMC,EAAiB1O,EAAM1D,QAAQkS,GACjCX,EAAgB,KAEpB,IACIA,EAAMc,KAAK5H,MAAM2H,E,CACnB,SAAM,CAgBR,OAdID,KAAe,IAAAG,UAASf,EAAKY,KAC7BZ,EAAM,MAGNlB,KACAkB,EAAMlB,EAASkB,IAIHY,KAAc,IAAAG,UAASf,EAAKY,KACpCzO,EAAM1D,QAAQkS,GAA0BG,KAAKE,UAAUhB,WAFhD7N,EAAM1D,QAAQkS,IAMtBX,CACX,EAMA,uBAA+B7N,GAC3B,QAASA,EAAM1D,QAAQkS,EAC3B,C,gEChBA,mBAAgCM,GAC5B,MAAO,GAAGC,MAAMC,KAAKF,EACzB,C,gGC5Ba,EAAAG,uBAAyD,CAClElI,MAAO,SAAC1K,EAAQgD,EAAS6P,EAAGxJ,GACxB,IAAMyJ,EAAM9P,EAAQyB,MAAM/E,WAAasD,EAAQ8P,KAAOzJ,EAAa3J,UAE/DoT,IACA9S,EAAON,UAAmB,OAAPoT,EAAe,MAAQ,MAElD,EACAC,MAAO,SAAC/S,EAAQgD,GACRhD,EAAON,YACPsD,EAAQyB,MAAM/E,UAAYM,EAAON,UAEzC,E,8FCZS,EAAAsT,qBAAqD,CAC9DtI,MAAO,SAAC1K,EAAQgD,GACZ,IAAMvG,EAAUuG,EAAQyB,MAAMhI,QAE1BA,IACAuD,EAAOvD,QAAUA,EAEzB,EACAsW,MAAO,SAAC/S,EAAQgD,GACRhD,EAAOvD,UACPuG,EAAQyB,MAAMhI,QAAUuD,EAAOvD,QAEvC,E,kGClBJ,cACA,UAWa,EAAAwW,uBAET,CACAvI,MAAO,SAAC1K,EAAQgD,EAASS,EAAS4F,GAC9B,EAAAuJ,uBAAuBlI,MAAM1K,EAAQgD,EAASS,EAAS4F,GAEvD,IAAM6J,EAAYlQ,EAAQiE,aAAa,SAEnCiM,IACAlT,EAAOkT,WAAY,IAAAC,WAAUD,EAAWlT,EAAON,kBACxCM,EAAO/C,iBACPwG,EAAQjE,YAAYvC,UAEnC,EACA8V,MAAO,SAAC/S,EAAQgD,GACZ,IAAM8P,EAAyC,OAApB9S,EAAON,UAAqB,MAAQ,MAE3DM,EAAOkT,WACPlQ,EAAQoQ,aAAa,QAAS,EAAAC,UAAUrT,EAAOkT,WAAWJ,GAElE,E,iGC1BS,EAAAQ,wBAA2D,CACpE5I,MAAO,SAAC1K,EAAQgD,EAASS,EAAS4F,GAC9B,IAAMkK,EAAavQ,EAAQyB,MAAM8O,YAAclK,EAAakK,WAExDA,GAA4B,WAAdA,IACdvT,EAAOuT,WAAaA,EAE5B,EACAR,MAAO,SAAC/S,EAAQgD,GACRhD,EAAOuT,aACPvQ,EAAQyB,MAAM8O,WAAavT,EAAOuT,WAE1C,E,+FClBJ,cAIMC,EAAiE,CACnE,YACA,cACA,eACA,cAMS,EAAAC,oBAAmD,CAC5D/I,MAAO,SAAC1K,EAAQgD,EAAS6P,EAAGxJ,GACxBmK,EAAWhP,SAAQ,SAAAhD,GACf,IAAMC,EAAQuB,EAAQyB,MAAMjD,IAAQ6H,EAAa7H,GAEjD,GAAIC,EACA,OAAQD,GACJ,IAAK,YACL,IAAK,eACDxB,EAAOwB,GAAOC,EACd,MAEJ,IAAK,aACL,IAAK,cACDzB,EAAOwB,GAAOxB,EAAOwB,IACf,IAAAkS,oBAAmB1T,EAAOwB,IAAQ,GAAIwB,IACtC,IAAA0Q,oBAAmBjS,EAAOuB,GAC1B,KACAvB,EAItB,GACJ,EACAsR,MAAO,SAAC/S,EAAQgD,EAASS,GACrB+P,EAAWhP,SAAQ,SAAAhD,GACf,IAAMC,EAAQzB,EAAOwB,GAEjBC,GAASgC,EAAQkQ,eAAenS,KAChCwB,EAAQyB,MAAMjD,GAAOC,GAAS,IAEtC,GACJ,E,6FC3CJ,IAAMmS,EAAmE,CACrE,aACA,eACA,gBACA,eAMS,EAAAC,qBAAqD,CAC9DnJ,MAAO,SAAC1K,EAAQgD,GACZ4Q,EAAYpP,SAAQ,SAAAhD,GAChB,IAAMC,EAAQuB,EAAQyB,MAAMjD,GAExBC,IACAzB,EAAOwB,GAAOC,EAEtB,GACJ,EACAsR,MAAO,SAAC/S,EAAQgD,GACZ4Q,EAAYpP,SAAQ,SAAAhD,GAChB,IAAMC,EAAQzB,EAAOwB,GACjBC,IACAuB,EAAQyB,MAAMjD,GAAOC,EAE7B,GACJ,E,kGC9BJ,cACA,UAOa,EAAAqS,uBAA2E,CACpFpJ,MAAO,SAAC1K,EAAQgD,EAASS,EAAS4F,G,MAC9B,EAAAuJ,uBAAuBlI,MAAM1K,EAAQgD,EAASS,EAAS4F,GAEvD,IAAIpM,EAAY+F,EAAQyB,MAAMxH,WAAaoM,EAAapM,UAGjC,MAAnB+F,EAAQ7C,SACiC,UAApB,QAArB,EAAA6C,EAAQoJ,qBAAa,eAAE3H,MAAMhI,UACiB,WAA9CuG,EAAQoJ,cAAc3H,MAAMsP,eAC5B/Q,EAAQyB,MAAMuP,YAGd/W,EAAY+F,EAAQyB,MAAMuP,WAG1B/W,IACA+C,EAAO/C,WAAY,IAAAkW,WAAUlW,EAAW+C,EAAON,WAEvD,EACAqT,MAAO,SAAC/S,EAAQgD,GACZ,IAAM8P,EAAyC,OAApB9S,EAAON,UAAqB,MAAQ,MAE/D,GAAIM,EAAO/C,UAAW,CAClB,IAAM,EAAS+F,EAAQoJ,cACjBC,EAAY,aAAM,EAAN,EAAQlM,QAEH,MAAnB6C,EAAQ7C,UAAmB,GAAwB,MAAbkM,GAAkC,MAAbA,EAK3DrJ,EAAQyB,MAAMxH,UAAY,EAAAoW,UAAUrT,EAAO/C,WAAW6V,IAJtD9P,EAAQyB,MAAMuP,UAAYhU,EAAO/C,UACjC+F,EAAQoJ,cAAc3H,MAAMsP,cAAgB,SAC5C/Q,EAAQoJ,cAAc3H,MAAMhI,QAAU,O,CAKlD,E,iGCrCS,EAAAwX,wBAA2D,CACpEvJ,MAAO,SAAC1K,EAAQgD,EAAS6P,EAAGxJ,GACxB,IAAM9M,EAAayG,EAAQyB,MAAMlI,YAAc8M,EAAa9M,WAExDA,IACAyD,EAAOzD,WAAaA,EAE5B,EACAwW,MAAO,SAAC/S,EAAQgD,EAASS,GACrB,IAAMlH,EAAakH,EAAQkQ,eAAepX,WACtCyD,EAAOzD,YAAcA,IACrByG,EAAQyB,MAAMlI,WAAayD,EAAOzD,YAAc,SAExD,E,wGCnBJ,cAOa,EAAA2X,6BAAqE,CAC9ExJ,MAAO,SAAC1K,EAAQgD,EAASS,EAAS4F,GAC9B,IAAM8K,GACF,IAAAC,UACIpR,GACA,EACAS,EAAQ4Q,mBACN5Q,EAAQ6Q,aACTjL,EAAa8K,gBAElBA,IACAnU,EAAOmU,gBAAkBA,EAEjC,EACApB,MAAO,SAAC/S,EAAQgD,EAASS,GACjBzD,EAAOmU,kBACP,IAAAI,UACIvR,EACAhD,EAAOmU,iBACP,EACA1Q,EAAQ4Q,mBACN5Q,EAAQ6Q,WAGtB,E,gGCzBS,EAAAE,uBAAyD,CAClE9J,MAAO,SAAC1K,EAAQgD,G,MACoB,eAAf,QAAb,EAAAA,EAAQyB,aAAK,eAAE5F,aACfmB,EAAOyU,cAAe,EAE9B,EACA1B,MAAO,SAAC/S,EAAQgD,GACRhD,EAAOyU,eACPzR,EAAQyB,MAAM5F,UAAY,aAElC,E,0GCVS,EAAA6V,WAAiE,CAC1E,YACA,cACA,eACA,aACA,gBAMS,EAAAC,oBAAmD,CAC5DjK,MAAO,SAAC1K,EAAQgD,GACZ,EAAA0R,WAAWlQ,SAAQ,SAAAhD,GACf,IAAMC,EAAQuB,EAAQyB,MAAMjD,GAExBC,IACAzB,EAAOwB,GAAgB,QAATC,EAAkB,GAAKA,EAE7C,GACJ,EACAsR,MAAO,SAAC/S,EAAQgD,GACZ,EAAA0R,WAAWlQ,SAAQ,SAAAhD,GACf,IAAMC,EAAQzB,EAAOwB,GAEjBC,IACAuB,EAAQyB,MAAMjD,GAAOC,EAE7B,GACJ,E,gGC7BS,EAAAmT,uBAAyD,CAClElK,MAAO,SAAC1K,EAAQgD,G,OACK,QAAb,EAAAA,EAAQyB,aAAK,eAAEoQ,aACf7U,EAAO6U,UAAY7R,EAAQyB,MAAMoQ,UAEzC,EACA9B,MAAO,SAAC/S,EAAQgD,GACRhD,EAAO6U,YACP7R,EAAQyB,MAAMoQ,UAAY7U,EAAO6U,UAEzC,E,gGChBJ,cAOa,EAAAC,qBAAqD,CAC9DpK,MAAO,SAAC1K,EAAQgD,GACZ,IAAM/C,EAAU+C,EAAQ/C,SAExB,IAAAmB,eAAcnB,GAASuE,SAAQ,SAAAhD,GAC3BxB,EAAOwB,GAAOvB,EAAQuB,IAAQ,EAClC,GACJ,EAEAuR,MAAO,SAAC/S,EAAQgD,IACZ,IAAA5B,eAAcpB,GAAQwE,SAAQ,SAAAhD,GAC1BwB,EAAQ/C,QAAQuB,GAAOxB,EAAOwB,EAClC,GACJ,E,4FCdS,EAAAuT,mBAAiD,CAC1DrK,MAAO,SAAC1K,EAAQgD,GACZ,IAAMgS,EAAQhS,EAAQyB,MAAMuQ,OAAShS,EAAQiE,aAAa,SAEtD+N,IACAhV,EAAOgV,MAAQA,EAEvB,EACAjC,MAAO,SAAC/S,EAAQgD,GACRhD,EAAOgV,QACPhS,EAAQyB,MAAMuQ,MAAQhV,EAAOgV,MAErC,E,yFCZS,EAAAC,gBAA2C,CACpDvK,MAAO,SAAC1K,EAAQgD,GACRA,EAAQqO,KACRrR,EAAOqR,GAAKrO,EAAQqO,GAE5B,EACA0B,MAAO,SAAC/S,EAAQgD,GACRhD,EAAOqR,KACPrO,EAAQqO,GAAKrR,EAAOqR,GAE5B,E,2FCbJ,IAAM6D,EAAkB,WAuDxB,SAASC,EAAanS,EAAsBoS,GACxC,IAAMC,EAAYrS,EAAQiE,aAAamO,GACjC3T,EAAQyF,SAASmO,GAAa,IAEpC,OAAOA,GAAaH,EAAgBI,KAAKD,GACnCA,EACAlO,OAAOC,MAAM3F,QACbE,EACAF,EAAQ,IAClB,CA3Da,EAAA8T,kBAA+C,CACxD7K,MAAO,SAAC1K,EAAQgD,EAASS,GACrB,IAAMyJ,EAAQlK,EAAQyB,MAAMyI,OAASiI,EAAanS,EAAS,SACrDmK,EAASnK,EAAQyB,MAAM0I,QAAUgI,EAAanS,EAAS,UACvDwS,EAAWxS,EAAQyB,MAAM+Q,SACzBC,EAAYzS,EAAQyB,MAAMgR,UAC1BC,EAAW1S,EAAQyB,MAAMiR,SACzBC,EAAY3S,EAAQyB,MAAMkR,UAE5BzI,IACAlN,EAAOkN,MAAQA,GAEfC,IACAnN,EAAOmN,OAASA,GAEhBqI,IACAxV,EAAOwV,SAAWA,GAElBC,IACAzV,EAAOyV,UAAYA,GAEnBC,IACA1V,EAAO0V,SAAWA,GAElBC,IACA3V,EAAO2V,UAAYA,EAE3B,EACA5C,MAAO,SAAC/S,EAAQgD,GACRhD,EAAOkN,QACPlK,EAAQyB,MAAMyI,MAAQlN,EAAOkN,OAE7BlN,EAAOmN,SACPnK,EAAQyB,MAAM0I,OAASnN,EAAOmN,QAE9BnN,EAAOwV,WACPxS,EAAQyB,MAAM+Q,SAAWxV,EAAOwV,UAEhCxV,EAAOyV,YACPzS,EAAQyB,MAAMgR,UAAYzV,EAAOyV,WAEjCzV,EAAO0V,WACP1S,EAAQyB,MAAMiR,SAAW1V,EAAO0V,UAEhC1V,EAAO2V,YACP3S,EAAQyB,MAAMkR,UAAY3V,EAAO2V,UAEzC,E,oGCjDS,EAAAC,2BAAiE,CAC1ElL,MAAO,SAAC1K,EAAQgD,GAGZ,OAFcA,EAAQyB,MAAM/F,eAAiBsE,EAAQiE,aAAa,WAG9D,IAAK,WACL,IAAK,UACL,IAAK,QACL,IAAK,MACL,IAAK,WACL,IAAK,cACL,IAAK,MACDjH,EAAOtB,cAAgB,MACvB,MAEJ,IAAK,SACDsB,EAAOtB,cAAgB,SACvB,MAEJ,IAAK,SACDsB,EAAOtB,cAAgB,SAGnC,EACAqU,MAAO,SAAC/S,EAAQgD,GACRhD,EAAOtB,gBACPsE,EAAQyB,MAAM/F,cAAgBsB,EAAOtB,cAE7C,E,gGC5BS,EAAAmX,uBAAyD,CAClEnL,MAAO,SAAC1K,EAAQgD,EAAS6P,EAAGxJ,GACxB,IAAMyM,EAAY9S,EAAQyB,MAAMqR,WAAazM,EAAayM,UAEtDA,IACA9V,EAAO8V,UAAYA,EAE3B,EACA/C,MAAO,SAAC/S,EAAQgD,GACRhD,EAAO8V,YACP9S,EAAQyB,MAAMqR,UAAY9V,EAAO8V,UAEzC,E,qKClBJ,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,SACA,UACA,UACA,UACA,SACA,SACA,UACA,UACA,UACA,UACA,UACA,UACA,UAgBMC,EAA0C,CAC5C5B,gBAAiB,EAAAD,6BACjB8B,KAAM,EAAAC,kBACNC,OAAQ,EAAAvB,oBACRwB,UAAW,EAAA3B,uBACXK,UAAW,EAAAD,uBACX3U,QAAS,EAAA6U,qBACTpV,UAAW,EAAAkT,uBACXnW,QAAS,EAAAuW,qBACTgC,MAAO,EAAAD,mBACPnZ,WAAY,EAAAwa,wBACZra,SAAU,EAAAsa,sBACVnT,OAAQ,EAAAoT,oBACRpD,UAAW,EAAAD,uBACX5B,GAAI,EAAA4D,gBACJsB,OAAQ,EAAAC,oBACRC,cAAe,EAAAC,2BACfnD,WAAY,EAAAD,wBACZvT,KAAM,EAAA4W,kBACNC,eAAgB,EAAAC,4BAChBC,gBAAiB,EAAAC,6BACjBC,kBAAmB,EAAAC,+BACnBC,OAAQ,EAAAzD,oBACR0D,QAAS,EAAAtD,qBACT9M,KAAM,EAAAwO,kBACNhX,OAAQ,EAAA6Y,oBACRC,iBAAkB,EAAAC,8BAClBC,YAAa,EAAAC,yBACbC,aAAc,EAAAC,0BACdza,UAAW,EAAA6W,uBACXxM,UAAW,EAAAqQ,uBACXC,qBAAsB,EAAAC,kCACtBxc,UAAW,EAAAyc,uBACXpZ,cAAe,EAAAkX,2BACfrZ,WAAY,EAAA0X,wBACZ6B,UAAW,EAAAD,wBAGTkC,EAA2D,CAC7D,gBACA,aACA,YAGEC,EAA6D,CAC/D,SACA,YACA,mBACA,SACA,QAEEC,EAAqD,CACvD,YACA,YACA,aACA,cAEEC,EAAyD,CAC3D,kBACA,SACA,UACA,UAMS,EAAA7W,6BAET,CACAgD,MAAO4T,EACPnO,SAAU,CAAC,kBACXE,iBAAiB,EAAF,qDAAMiO,IAAkB,IAAE,YAAa,YAAa,aAAc,WAAQ,GACzF3N,UAAW,CACP,kBACA,YACA,YACA,SACA,UACA,oBACA,mBAEJ6N,mBAAmB,EAAF,qDAAMJ,IAAwB,IAAE,YAAa,kBAAmB,eAAY,GAC7FK,oBAAqBJ,EACrBtR,SAAS,EAAF,yEACAqR,IAAwB,gBACxBC,IAA0B,IAC7B,YACA,kBACA,e,GAEJzQ,gBAAgB,EAAF,yEAAMwQ,IAAwB,gBAAKC,IAA0B,IAAE,cAAW,GACxF5K,oBAAoB,EAAF,yEACX2K,IAAwB,gBACxBC,IAA0B,IAC7B,yB,GAEJ1K,UAAW,CACP,SACA,kBACA,UACA,gBACA,YACA,YACA,YACA,QAEJtB,SAAU,CAAC,mBACXpN,MAAO,CACH,KACA,SACA,kBACA,UACA,YACA,SACA,OACA,eAEJ8M,YAAa,CAAC,YAAa,gBAC3B2M,gBAAiB,CAAC,aAClBzP,MAAO,CACH,KACA,OACA,SACA,UACA,YACA,SACA,YACA,UACA,QACA,iBAEJ7I,KAAM,CACF,OACA,YACA,YACA,UACA,SACA,UACA,kBACA,SACA,OACA,aAEJ4J,iBAAkB,CAAC,aACnBhO,KAAM,CAAC,aAAc,WACrBsE,QAAS,CAAC,WACVwI,SAAS,EAAF,yEAAMwP,IAAkB,gBAAKC,IAAsB,IAAE,UAAW,OAAQ,cAAW,GAC1F5T,WAAW,EAAF,qDAAM4T,IAAsB,IAAE,YAAa,OAAQ,YAAS,GACrEhV,OAAQ,CAAC,WAMA,EAAAlC,sBAAsC,IAAAI,eAAc2U,GAAyBzU,QACtF,SAACC,EAAQC,GAEL,OADAD,EAAOC,GAAOuU,EAAwBvU,GAAKkJ,MACpCnJ,CACX,GACe,CAAC,GAMP,EAAA+W,uBAAwC,IAAAlX,eAAc2U,GAAyBzU,QACxF,SAACC,EAAQC,GAEL,OADAD,EAAOC,GAAOuU,EAAwBvU,GAAKuR,MACpCxR,CACX,GACgB,CAAC,E,+FC9NrB,cAOa,EAAA+U,oBAAkE,CAC3E5L,MAAO,SAAC1K,EAAQgD,GACZ,IAAIuV,GAAW,EAEfvV,EAAQiO,UAAUzM,SAAQ,SAAAgU,GACtBD,GAAW,IAAAE,sBAAqBD,EAAMxY,IAAWuY,CACrD,IAEKA,IACDvY,EAAOuR,cAAe,EACtBvR,EAAOsR,YAActO,EAAQ0V,kBAErC,EAEA3F,MAAO,SAAC/S,EAAQgD,GACPhD,EAAOuR,eACRvO,EAAQmO,WAAY,IAAAwH,0BAAyB3Y,IAG7CA,EAAOsR,WACPtO,EAAQoD,gBAAkB,QAE1BpD,EAAQ4V,gBAAgB,kBAEhC,E,iJC/BJ,UACA,UACA,UAIMC,EAA6B,cAC7BC,EAA2B,CAAC,UAAW,cAAe,eACtDC,EAA6B,CAAC,OAAQ,SAAU,UAChDC,EAAc,GACdC,EAAsC,CACxCC,EAAG,IACHC,GAAI,IACJC,EAAG,IACHC,GAAI,IACJC,EAAG,IACHC,GAAI,GACJC,EAAG,GACHC,GAAI,GACJC,EAAG,GACHC,GAAI,EACJC,EAAG,EACHC,GAAI,EACJC,EAAG,GAoCP,SAAgBC,EACZC,EACAC,GAEA,OAAOD,EACDA,EAASE,QAAQrB,GAA4B,SAACsB,EAAOC,GACjD,OAAQA,GACJ,IAAK,SACD,OAAOH,EAAa,GACxB,IAAK,aACD,OAAOI,EAAuBJ,GAAY,GAC9C,IAAK,aACD,OAAOI,EAAuBJ,GAAY,GAC9C,IAAK,aACD,OAAOK,EAAuBL,GAAY,GAC9C,IAAK,aACD,OAAOK,EAAuBL,GAAY,GAGlD,MAAO,EACX,SACAtY,CACV,CAEA,SAAS0Y,EAAuBE,EAAiBC,GAC7C,IAAIC,EAAQ,GAGZ,IAFAF,IAEOA,GAAW,GACdE,EAAQC,OAAOC,aAAcJ,EAAU,GAAMvB,GAAeyB,EAC5DF,EAAUK,KAAKC,MAAMN,EAAU,IAAM,EAEzC,OAAOC,EAAcC,EAAMxU,cAAgBwU,CAC/C,CAEA,SAASH,EAAuBC,EAAiBC,G,QACzCM,EAAa,G,IACjB,IAAc,0BAAA1Z,eAAc6X,IAAY,8BAAE,CAArC,IAAIlb,EAAC,QACFgd,EAAuBH,KAAKC,MAAMN,EAAUtB,EAAYlb,IAC5Dwc,GAAoBQ,EAAuB9B,EAAYlb,GACvD+c,GAA0B/c,EAAEid,OAAOD,E,mGAEvC,OAAOP,EAAcM,EAAWpJ,oBAAsBoJ,CAC1D,CAzEa,EAAAG,8BAAmE,CAC5EvQ,MAAO,WAEP,EACAqI,MAAO,SAAC/S,EAAQgD,EAASS,G,QACfmC,EAAS5C,EAAQkJ,WACjBgP,EAAQzX,EAAQ7D,WAAWub,UAAU9T,OAAS,EAEpD,GAAI6T,GAAS,IAAK,IAAA/V,cAAaS,EAAQ,kBAAoBA,EAAOnB,MAAM2W,cAAe,CACnF,IACM3W,EACW,MAFCmB,EAAOzF,QAMd,QAHD,EAAA4Z,EACI,EAAAsB,WAAWrb,EAAO2K,kBAClBlH,EAAQ7D,WAAWE,iBAAiBob,WACvC,QAAIpC,EAAyBoC,EAAQpC,EAAyBzR,QACvB,QAAxC,IAAAiU,aAAatb,EAAO4K,2BAAoB,QACxCmO,EAA2BmC,EAAQnC,EAA2B1R,QAEpE5C,IAAUyW,EAAQ,GAAe,WAATzW,GAA+B,QAATA,KAC9CzB,EAAQyB,MAAM2W,cAAgB3W,E,CAG1C,GAOJ,4B,uGC3DA,cACA,UAyCA,SAAS8W,EAAYvY,GACjB,OACI,IAAAmJ,iBAAgBnJ,EAAS,QACzB,IAAAmC,cAAanC,EAAQkJ,WAAY,kBACjC,IAAAC,iBAAgBnJ,EAAQkJ,WAAY,KAE5C,CAxCa,EAAA2K,4BAA+D,CACxEnM,MAAO,SAAC1K,EAAQgD,EAASS,EAAS+X,GACtB,IAAA5b,EAAe6D,EAAO,WACxByX,EAAQtb,EAAWC,OAAOwH,OAC1B5K,EAAUuG,EAAQyB,MAAMhI,SAAW+e,EAAc/e,QAEnDA,GAAsB,aAAXA,EACXuD,EAAOyb,oBAAsBhf,EACtB8e,EAAYvY,IAAYkY,EAAQ,IACvCtb,EAAWE,iBAAiBob,EAAQ,KACpCtb,EAAWE,iBAAiB4b,OAAOR,GACnCtb,EAAWC,OAAO2E,SAAQ,SAAA4F,UAGfA,EAAMpK,OAAO2b,mBACxB,IAER,EACA5I,MAAO,SAAC/S,EAAQgD,EAASS,G,MACrB,GAAIzD,EAAOyb,oBACPzY,EAAQyB,MAAMhI,QAAUuD,EAAOyb,yBAC5B,GAAIF,EAAYvY,GAAU,CACrB,IAAApD,EAAe6D,EAAO,WACtB3D,EAAqBF,EAAU,iBACjCyF,EAAQzF,EAAWub,UAAU9T,OAAS,EAExChC,GAAS,IACTvF,EAAiB4b,OAAOrW,EAAQ,GAChCvF,EAAiBuF,IAAiC,QAAvB,EAAAvF,EAAiBuF,UAAM,QAAI,GAAK,E,CAGvE,E,8ICtCJ,cACA,UAOa,EAAAgW,aAAU,MACnB,GAA6B,UAC7B,KAAiC,gBACjC,KAAwC,gBACxC,KAA8C,iBAC9C,KAAgC,cAChC,KAAoC,oBACpC,KAA2C,oBAC3C,KAAiD,qBACjD,KAAgC,cAChC,MAAoC,oBACpC,MAA2C,oBAC3C,MAAiD,qBACjD,MAAgC,cAChC,MAAoC,oBACpC,MAA2C,oBAC3C,MAAiD,qBACjD,MAAgC,cAChC,MAAoC,oBACpC,MAA2C,oBAC3C,MAAiD,qB,GAMxC,EAAAC,eAAY,MACrB,GAAuB,OACvB,KAAyB,OACzB,KAAyB,SACzB,KAAuB,OACvB,KAA4B,OAC5B,KAAkC,OAClC,KAA6B,OAC7B,KAAgC,OAChC,KAAyB,O,GAG7B,IAAMM,EAA2C,CAC7C,EAAK,UACLxgB,EAAG,cACHygB,EAAG,cACH9d,EAAG,cACH+b,EAAG,eAsCP,SAASgC,EACLtb,EACAiB,GAMA,YAHcE,IAAVF,OAAsBE,GAAY,IAAAP,eAAcZ,GAAKqO,QAAO,SAAArN,GAAO,OAAAhB,EAAIgB,IAAQC,CAAZ,IAAmB,EAI9F,CAzCa,EAAAgJ,+BAAoE,CAC7EC,MAAO,SAAC1K,EAAQgD,GACZ,IAAM+Y,EACF/Y,EAAQyB,MAAM2W,gBACb,IAAAjP,iBAAgBnJ,EAAS,OAAS4Y,EAAiB5Y,EAAQyC,MAC1DiK,EAAM1M,EAAQ7C,QAEpB,GAAI4b,EACA,GAAW,MAAPrM,QAA2C/N,IAA5B3B,EAAO2K,iBAAgC,CACtD,IAAMlJ,EAAQqa,EAAgB,EAAAT,WAAYU,GAC1C/b,EAAO2K,sBACc,IAAVlJ,OAAwBE,EAAYuF,SAASzF,E,KAC1C,MAAPiO,QAA6C/N,IAA9B3B,EAAO4K,qBACvBnJ,EAAQqa,EAAgB,EAAAR,aAAcS,GAC5C/b,EAAO4K,wBACc,IAAVnJ,OAAwBE,EAAYuF,SAASzF,GAGpE,EACAsR,MAAO,SAAC/S,EAAQgD,GACZ,IACMgZ,EACK,MAFChZ,EAAQ7C,QAGV,EAAAkb,WAAWrb,EAAO2K,kBAClB,EAAA2Q,aAAatb,EAAO4K,oBAE1BoR,GAAYA,EAAS7X,QAAQ,KAAO,IACpCnB,EAAQyB,MAAM2W,cAAgBY,EAEtC,E,wGCvFJ,cAOa,EAAAjF,6BAAgE,CACzErM,MAAO,SAAC1K,EAAQgD,EAASS,GACrB,IAAI,IAAA0I,iBAAgBnJ,EAAS,MAAO,CACxB,IAAApD,EAAe6D,EAAO,WACtB3D,EAA6BF,EAAU,iBACzCsb,EAD+Btb,EAAU,OAC1ByH,OAGkB,iBAA5BvH,EAAiBob,IACxBlY,EAAQiZ,OAASnc,EAAiBob,GAAS,IAE3Clb,EAAO2b,oBAAsB3Y,EAAQiZ,OAGzCnc,EAAiBob,GAASlY,EAAQiZ,MAAQ,C,CAElD,EACAlJ,MAAO,SAAC/S,EAAQgD,EAASS,GAEjB,MACAA,EAAO,WADO3D,EAAgB,mBAE5Bob,EAFuC,YAErB7T,OAAS,EAEjC,GAAI6T,GAAS,IAAK,IAAA/O,iBAAgBnJ,EAAS,MAAO,CAC9C,IAAMkZ,EAAclc,EAAO2b,oBAEA,iBAAhBO,EACPpc,EAAiBob,GAASgB,EAAc,EACC,iBAA3Bpc,EAAiBob,KAC/Bpb,EAAiBob,GAAS,GAG9Bpb,EAAiB4b,OAAOR,EAAQ,GAChClY,EAAQiZ,MAAQnc,EAAiBob,GAAS,C,CAElD,E,wGCpCS,EAAAjE,+BAAyE,CAClFvM,MAAO,SAAC1K,EAAQgD,GACZ,IAAMgU,EAAoBhU,EAAQyB,MAAMuS,kBAEpCA,IACAhX,EAAOgX,kBAAoBA,EAEnC,EACAjE,MAAO,SAAC/S,EAAQgD,GACRhD,EAAOgX,oBACPhU,EAAQyB,MAAMuS,kBAAoBhX,EAAOgX,kBAEjD,E,6FClBJ,cAOa,EAAAf,kBAA+C,CACxDvL,MAAO,SAAC1K,EAAQgD,EAASS,EAAS4F,GAC9B,IAAMvN,EAAakH,EAAQyB,MAAM3I,YAAcuN,EAAavN,WAExDA,IACAkE,EAAOlE,WAAaA,EAE5B,EACAiX,MAAO,SAAC/S,EAAQgD,EAASS,GACrB,QAAiC,IAAtBzD,EAAOlE,WAAlB,CAIA,IAAMqgB,EAAkB1Y,EAAQkQ,eAAe7X,WAE/C,GACKqgB,GAAmBA,GAAmBnc,EAAOlE,aAC5CqgB,GAAmBnc,EAAOlE,YAAmC,UAArBkE,EAAOlE,WAEjD,GAAyB,QAArBkE,EAAOlE,WAAsB,CAC7B,IAAMgB,EAAIkG,EAAQoZ,cAAcC,cAAc,MAC9C,IAAAC,gBAAexf,EAAGkG,GAClBA,EAAQuZ,YAAYzf,E,MAEpBkG,EAAQyB,MAAM3I,WAAakE,EAAOlE,YAAc,Q,CAG5D,E,iGC5BS,EAAAsa,wBAA2D,CACpE1L,MAAO,SAAC1K,EAAQgD,EAASS,EAAS4F,GAC9B,IAAMzN,EAAaoH,EAAQyB,MAAM7I,YAAcyN,EAAazN,WAExDA,GAA4B,WAAdA,IACdoE,EAAOpE,WAAaA,EAE5B,EACAmX,MAAO,SAAC/S,EAAQgD,EAASS,GACjBzD,EAAOpE,YAAcoE,EAAOpE,YAAc6H,EAAQkQ,eAAe/X,aACjEoH,EAAQyB,MAAM7I,WAAaoE,EAAOpE,WAE1C,E,iGClBJ,cACA,UAOa,EAAAya,sBAAuD,CAChE3L,MAAO,SAAC1K,EAAQgD,EAASS,EAAS4F,GAC9B,IAAMtN,EAAWiH,EAAQyB,MAAM1I,UAAYsN,EAAatN,SAClD2C,EAAgBsE,EAAQyB,MAAM/F,eAAiB2K,EAAa3K,cAI9D3C,KAAa,IAAAygB,oBAAmBzgB,EAAU2C,IAA8B,WAAZ3C,IACxDiH,EAAQyB,MAAM1I,SACdiE,EAAOjE,SAyBvB,SAA2BA,EAAkB0gB,GACzC,IAAMC,EAAgBC,EAAe5gB,GAErC,GAAI2gB,EACA,OAAOA,EACJ,GACS,WAAZ3gB,GACY,UAAZA,IACAA,EAAS6gB,SAAS,QAClB7gB,EAAS6gB,SAAS,KAkBf,MAAgB,WAAZ7gB,GAAqC,UAAZA,GAAoC,SAAZA,OACxD,EAEOA,EAnBP,GAAK0gB,EAAL,CAGI,IAAMI,GAAmB,IAAAnJ,oBAAmB+I,OAAa9a,EAAuB,MAEhF,GAAIkb,EACA,OAAQ9gB,GACJ,IAAK,UACD,OAAO6e,KAAKkC,MAA0B,IAAnBD,EAA0B,GAAK,IAAM,KAC5D,IAAK,SACD,OAAOjC,KAAKkC,MAA0B,IAAnBD,EAA0B,GAAK,IAAM,KAC5D,QACI,OAAO,IAAAnJ,oBAAmB3X,EAAU8gB,EAAkB,MAAQ,K,CAStF,CAzDkCE,CAAkBhhB,EAAU0H,EAAQ9D,cAAc5D,UAC7DsN,EAAatN,WACpBiE,EAAOjE,SAAWA,GAG9B,EACAgX,MAAO,SAAC/S,EAAQgD,EAASS,GACjBzD,EAAOjE,UAAYiE,EAAOjE,UAAY0H,EAAQkQ,eAAe5X,WAC7DiH,EAAQyB,MAAM1I,SAAWiE,EAAOjE,SAExC,GAIJ,IAAM4gB,EAAyC,CAC3C,WAAY,SACZ,UAAW,QACXK,MAAO,SACPC,OAAQ,OACRC,MAAO,SACP,UAAW,OACX,WAAY,OACZ,YAAa,O,+FCvCjB,cAOa,EAAA1G,oBAAmD,CAC5D9L,MAAO,SAAC1K,EAAQgD,EAASS,EAAS4F,GAC9B,IAAM9L,EAAYyF,EAAQyB,MAAMlH,WAAa8L,EAAa9L,UAEzC,UAAbA,GAAsC,WAAbA,EACzByC,EAAOuW,QAAS,EACI,WAAbhZ,GAAuC,UAAbA,IACjCyC,EAAOuW,QAAS,EAExB,EACAxD,MAAO,SAAC/S,EAAQgD,EAASS,GACrB,QAA6B,IAAlBzD,EAAOuW,UAIK9S,EAAQkQ,eAAe4C,UAEpBvW,EAAOuW,OAC7B,GAAIvW,EAAOuW,OAAQ,CACf,IAAMxY,EAAIiF,EAAQoZ,cAAcC,cAAc,MAC9C,IAAAC,gBAAeve,EAAGiF,GAClBA,EAAQuZ,YAAYxe,E,MAEpBiF,EAAQyB,MAAMlH,UAAY,QAGtC,E,oGC3BS,EAAAmZ,2BAAiE,CAC1EhM,MAAO,SAAC1K,EAAQgD,EAASS,EAAS4F,GAC9B,IAAMoN,EAAgBzT,EAAQyB,MAAMgS,eAAiBpN,EAAaoN,cAE9DA,IACAzW,EAAOyW,cAAgBA,EAE/B,EACA1D,MAAO,SAAC/S,EAAQgD,EAASS,GACjBzD,EAAOyW,gBACPzT,EAAQyB,MAAMgS,cAAgBzW,EAAOyW,cAE7C,E,6FClBJ,cAOa,EAAAE,kBAA+C,CACxDjM,MAAO,SAAC1K,EAAQgD,GACZ,IAAI,IAAAmJ,iBAAgBnJ,EAAS,KAAM,CAC/B,IAAM,EAAOA,EAAQwV,KACf9O,EAAO1G,EAAQiE,aAAa,QAC5BkW,EAASna,EAAQma,OACjBC,EAAMpa,EAAQoa,IACd/L,EAAKrO,EAAQqO,GACbF,EAAYnO,EAAQmO,UACpBnI,EAAQhG,EAAQgG,MAElB,IACAhJ,EAAOwY,KAAO,GAGd9O,IACA1J,EAAO0J,KAAOA,GAGdyT,IACAnd,EAAOmd,OAASA,GAGhB9L,IACArR,EAAOqd,SAAWhM,GAGlB+L,IACApd,EAAOsd,aAAeF,GAGtBpU,IACAhJ,EAAOud,YAAcvU,GAGrBmI,IACAnR,EAAOwd,YAAcrM,E,CAGjC,EACA4B,MAAO,SAAC/S,EAAQgD,IACR,IAAAmJ,iBAAgBnJ,EAAS,MAAQhD,EAAO0J,OACxC1G,EAAQ0G,KAAO1J,EAAO0J,KAElB1J,EAAOwY,OACPxV,EAAQwV,KAAOxY,EAAOwY,MAGtBxY,EAAOmd,SACPna,EAAQma,OAASnd,EAAOmd,QAGxBnd,EAAOqd,WACPra,EAAQqO,GAAKrR,EAAOqd,UAGpBrd,EAAOwd,cACPxa,EAAQmO,UAAYnR,EAAOwd,aAG3Bxd,EAAOud,cACPva,EAAQgG,MAAQhJ,EAAOud,aAGvBvd,EAAOsd,eACPta,EAAQoa,IAAMpd,EAAOsd,cAGjC,E,+FC3EJ,cAOa,EAAAlG,oBAAmD,CAC5D1M,MAAO,SAAC1K,EAAQgD,EAASS,EAAS4F,GAC9B,IAAMhL,EAAiB2E,EAAQyB,MAAMpG,gBAAkBgL,EAAahL,gBAEhEA,aAAc,EAAdA,EAAgB8F,QAAQ,kBAAoB,IAC5CnE,EAAOyd,eAAgB,EAE/B,EACA1K,MAAO,SAAC/S,EAAQgD,GACZ,GAAIhD,EAAOyd,cAAe,CACtB,IAAMlf,EAASyE,EAAQoZ,cAAcC,cAAc,MACnD,IAAAC,gBAAe/d,EAAQyE,GACvBA,EAAQuZ,YAAYhe,E,CAE5B,E,8HCrBJ,cAyCA,SAAgBie,EACZzgB,EACA2C,GAEA,MAAmB,WAAZ3C,IAA2C,OAAjB2C,GAA2C,SAAjBA,EAC/D,CAvCa,EAAA4Y,8BAAuE,CAChF5M,MAAO,SAAC1K,EAAQgD,EAASS,EAAS4F,GAC9B,IAAM3K,EAAgBsE,EAAQyB,MAAM/F,eAAiB2K,EAAa3K,cAG9D8d,EAFaxZ,EAAQyB,MAAM1I,UAAYsN,EAAatN,SAEvB2C,KAC7BsB,EAAO0d,0BAA4B1d,EAAO0d,0BAA4B,IACjEC,MAAM,KACN/b,OAAOlD,GACPkf,KAAK,KACLC,OAEb,EACA9K,MAAO,SAAC/S,EAAQgD,GACRhD,EAAO0d,0BACP1d,EAAO0d,yBACFC,MAAM,KACNG,UACAtZ,SAAQ,SAAA/C,GACL,IAAMtB,EAAmB,SAATsB,EAAmB,MAAiB,OAATA,EAAiB,MAAQ,KAEpE,GAAItB,EAAS,CACT,IAAM4d,EAAU/a,EAAQoZ,cAAcC,cAAclc,IACpD,IAAAmc,gBAAeyB,EAAS/a,GACxBA,EAAQuZ,YAAYwB,E,CAE5B,GAEZ,GAMJ,sB,kGCzCA,cAOa,EAAApG,uBAAyD,CAClEjN,MAAO,SAAC1K,EAAQgD,EAASS,EAAS4F,GAC9B,IAAM/B,GACF,IAAA8M,UACIpR,GACA,EACAS,EAAQ4Q,mBACN5Q,EAAQ6Q,aACTjL,EAAa2U,MAElB1W,GAA0B,WAAbA,IACbtH,EAAOsH,UAAYA,EAE3B,EACAyL,MAAO,SAAC/S,EAAQgD,EAASS,GACrB,IAAMwa,EAAgBxa,EAAQkQ,eAAerM,UAEzCtH,EAAOsH,WAAatH,EAAOsH,WAAa2W,IACxC,IAAA1J,UACIvR,EACAhD,EAAOsH,WACP,EACA7D,EAAQ4Q,mBACN5Q,EAAQ6Q,WAGtB,E,kGCjCJ,cAOa,EAAAwD,uBAAyD,CAClEpN,MAAO,SAAC1K,EAAQgD,EAASS,EAAS4F,GAC9B,IAAMhL,EAAiB2E,EAAQyB,MAAMpG,gBAAkBgL,EAAahL,gBAEhEA,aAAc,EAAdA,EAAgB8F,QAAQ,eAAiB,EACzCnE,EAAO3E,WAAY,EACO,KAAnB2H,EAAQ7C,SAAoC,QAAlB9B,IACjC2B,EAAO3E,WAAY,EAE3B,EACA0X,MAAO,SAAC/S,EAAQgD,EAASS,GACrB,QAAgC,IAArBzD,EAAO3E,aAIKoI,EAAQkQ,eAAetY,aAEpB2E,EAAO3E,UAC7B,GAAI2E,EAAO3E,UAAW,CAClB,IAAM2D,EAAIgE,EAAQoZ,cAAcC,cAAc,MAC9C,IAAAC,gBAAetd,EAAGgE,GAClBA,EAAQuZ,YAAYvd,E,MAEpBgE,EAAQyB,MAAMpG,eAAiB,MAG3C,E,iGC3BS,EAAAmZ,yBAA6D,CACtE9M,MAAO,SAAC1K,EAAQgD,GACZ,IAAMuU,EAAcvU,EAAQyB,MAAM8S,YAC9BA,GAA8B,WAAfA,IACfvX,EAAOuX,YAAcA,EAE7B,EACAxE,MAAO,SAAC/S,EAAQgD,GACRhD,EAAOuX,cACPvU,EAAQyB,MAAM8S,YAAcvX,EAAOuX,YAE3C,E,kGCdJ,IAAM2G,EAAkB,WAKX,EAAAxG,0BAA0D,CACnEhN,MAAO,SAAC1K,EAAQgD,GACRA,EAAQyB,MAAM0Z,gBAAkBD,IAChCle,EAAOme,gBAAiB,EAEhC,EACApL,MAAO,SAAC/S,EAAQgD,GACRhD,EAAOme,iBACPnb,EAAQyB,MAAM0Z,eAAiBD,EAC/Blb,EAAQyB,MAAM2Z,cAAgB,IAC9Bpb,EAAQyB,MAAM5F,UAAY,aAElC,E,2GCdS,EAAAgZ,kCAAoE,CAC7EnN,MAAO,SAAC1K,EAAQgD,GACRA,EAAQyB,MAAMuZ,cAIPhe,EAAOsH,SAEtB,EACAyL,MAAO,WAAO,E,gHCVL,EAAAsL,iBAA6B,CACtC,iBACA,eACA,sBACA,kBACA,gBACA,eACA,iBACA,aACA,kBACA,eACA,cACA,WACA,WACA,OACA,YACA,mBACA,aACA,kBACA,oBACA,eACA,aACA,cACA,UAMJ,oBACIrb,EACAsb,EACAjK,EACAC,GAEA,IAAI0J,EAmBJ,OAjBKA,IACDA,EACK3J,GA8Cb,SACIrR,EACAsR,EACAD,EACAiK,GAEA,IAAIC,EAEJ,MAA0B,QAAnBvb,EAAQ7C,UACV6C,EAAQyB,MAAM8E,iBAAiB+U,EAAe,mBAAqB,UACpEhK,IACCiK,EAAYvb,EAAQiE,aAAaqX,EAAe,UAAY,UAC3DjK,EAAiBmK,4BAA4BD,GAC7C,IACV,CA3DgBE,CAAgBzb,EAASsR,EAAYD,EAAkBiK,KAC1DA,EAAetb,EAAQyB,MAAM0P,gBAAkBnR,EAAQyB,MAAMuZ,QAC9Dhb,EAAQiE,aAAaqX,EAAe,UAAY,eAChD3c,GAGJqc,GAAS,EAAAK,iBAAiBla,QAAQ6Z,IAAU,IAC5CA,OAAQrc,GAGR0S,IACA2J,EAAQ3J,EAAiBqK,gBAAgBV,GAAOW,gBAG7CX,CACX,EAKA,oBACIhb,EACA2b,EACAL,EACAjK,EACAC,GAEA,IAAMsK,EAAiBvK,EACjBA,EAAiBwK,cAAcF,EAAgBrK,GAC/CqK,EAEFL,EACAtb,EAAQyB,MAAM0P,gBAAkByK,EAEhC5b,EAAQyB,MAAMuZ,MAAQY,CAE9B,C,+FC9Ea,EAAAvL,UAAY,CACrB4I,MAAO,CACH6C,IAAK,OACLC,IAAK,SAET/hB,OAAQ,CACJ8hB,IAAK,SACLC,IAAK,UAETC,IAAK,CACDF,IAAK,QACLC,IAAK,QAETE,QAAS,CACLH,IAAK,UACLC,IAAK,WAETG,QAAS,CACLJ,IAAK,UACLC,IAAK,YAOb,qBAA0BI,EAAerM,GACrC,OAAQqM,GACJ,IAAK,SACD,MAAO,SAEX,IAAK,OACD,MAAc,OAAPrM,EAAe,MAAQ,QAElC,IAAK,QACD,MAAc,OAAPA,EAAe,QAAU,MAEpC,IAAK,QACL,IAAK,MAGL,IAAK,UACL,IAAK,UACD,OAAOqM,EAEX,QACI,OAEZ,C,4GCnDMC,EAAmB,4BAiDzB,SAASC,EAAYC,G,QACjB,QAAoC,IAAzBA,EACP,OAAO,EACJ,GAAoC,iBAAzBA,EACd,OAAOA,EAEP,IAAMC,EAEW,QADb,EAA8C,QAA9C,EAAAD,EAAqBlD,cAAcoD,mBAAW,eAAEC,iBAAiBH,GAC5DvjB,gBAAQ,QAAI,GAIrB,OAFkB2jB,EADAC,WAAWJ,GAKrC,CAEA,SAASG,EAAOE,GACZ,OAAOhF,KAAKkC,MAAY,IAAL8C,EAAa,GAAK,GACzC,CA3DA,8BACIne,EACAoe,EACAC,QAFA,IAAAre,IAAAA,EAAA,SAEA,IAAAqe,IAAAA,EAAA,MAEA,IAwDYC,EAxDN5F,EAAQiF,EAAiBY,KAAKve,GAChCF,EAAS,EAEb,GAAI4Y,EAAO,CACD,mBAAwBA,EAAK,GAAzB8F,GAAF,KAAQ,MAAMC,GAAF,KAAM,MACpBC,EAAMR,WAAWM,GAEvB,OAAQC,GACJ,IAAK,KACD3e,EAAS4e,EACT,MACJ,IAAK,KACD5e,EAASme,EAAOS,GAChB,MACJ,IAAK,KACD5e,EAAS8d,EAAYQ,GAA0BM,EAC/C,MACJ,IAAK,KACD5e,EAAU8d,EAAYQ,GAA0BM,EAAO,EACvD,MACJ,IAAK,IACD5e,EAAU8d,EAAYQ,GAA0BM,EAAO,I,CAYnE,OAJI5e,EAAS,GAAmB,MAAdue,IA2BNC,EA1BQxe,EAAhBA,EA2BGqZ,KAAKkC,MAAY,IAALiD,EAAa,GAAK,KAxB9Bxe,CACX,C,onCC/CA,cAAS,mFAAA6e,iBAAiB,IAC1B,cAAS,mFAAAC,iBAAiB,IAE1B,cACI,gFAAAhd,cAAc,IACd,wFAAA+B,sBAAsB,IACtB,kFAAAF,gBAAgB,IAEpB,cAAS,iFAAA/B,eAAe,IACxB,aAAS,gFAAAN,cAAc,IACvB,cAAS,oEAAAyd,IAAA,oBAAAza,0BAA0B,IACnC,cAAS,6EAAAzB,WAAW,IACpB,cAAS,gFAAAmc,cAAc,IAEvB,cAAS,gFAAArO,cAAc,IAAE,6EAAAsO,WAAW,IACpC,cAAS,oFAAAjW,kBAAkB,IAC3B,cAAS,8EAAApF,YAAY,IACrB,cAAS,iFAAAgH,eAAe,IACxB,cAAS,uDAAAmU,IAAA,oBAAAlf,aAAa,IACtB,cAAS,yEAAAqf,OAAO,IAEhB,cAAS,0EAAA5b,QAAQ,IACjB,cAAS,gFAAAkF,cAAc,IACvB,cAAS,uFAAArC,qBAAqB,IAC9B,cAAS,iFAAA/C,eAAe,IACxB,cAAS,uFAAAyK,qBAAqB,IAC9B,aAAS,6EAAAjE,WAAW,IACpB,cAAS,iFAAAsC,eAAe,IACxB,aAAS,4EAAAyB,UAAU,IACnB,cAAS,6EAAArG,WAAW,IACpB,cAAS,4FAAAjF,0BAA0B,IACnC,YAAS,0FAAA2E,wBAAwB,IACjC,cAAS,sFAAAF,oBAAoB,IAC7B,cAAS,oFAAAH,kBAAkB,IAC3B,cAAS,8EAAAtB,YAAY,IACrB,cAAS,+EAAA8B,aAAa,IACtB,cAAS,iFAAA2B,eAAe,IAExB,cAAS,0EAAAzF,QAAQ,IACjB,cAAS,yEAAA8b,OAAO,IAChB,cAAS,yEAAAC,OAAO,IAChB,cAAS,iFAAAlS,eAAe,IAExB,cAAS,uFAAA3K,qBAAqB,IAC9B,aAAS,kFAAA8c,gBAAgB,IACzB,cAAS,6EAAAC,WAAW,IACpB,cAAS,4EAAA9b,UAAU,IACnB,cAAS,uFAAA+b,qBAAqB,IAC9B,cAAS,wFAAAC,sBAAsB,IAC/B,cAAS,6FAAAC,2BAA2B,IAEpC,cAAS,yFAAAhZ,uBAAuB,IAEhC,cAAS,oFAAA0L,kBAAkB,IAC3B,cAAS,4EAAAgB,UAAU,IACnB,cAAS,kFAAA2J,gBAAgB,IAEzB,cACI,yFAAA4C,uBAAuB,IACvB,mGAAA/hB,iCAAiC,IACjC,wFAAAkB,sBAAsB,IAE1B,cACI,yFAAA8gB,uBAAuB,IACvB,mGAAAC,iCAAiC,IACjC,wFAAAC,sBAAsB,G,iGC3D1B,mCAAwC/c,GACb,aAAnBA,EAAMwD,WAA4BxD,EAAMyD,aACxCzD,EAAMyD,YAAa,EAE3B,C,kFCHA,oBAAyB9D,EAA+BK,GACpDL,EAAM4D,OAAOqC,KAAK5F,EACtB,C,2HCCA,SAAgBsc,EAAQja,EAA8B3G,GAC9CA,EAAKC,OAAO0J,OACZhD,EAAQ3G,KAAO,CACXC,QAAQ,EAAF,eAAOD,EAAKC,QAClBC,SAAS,EAAF,eAAOF,EAAKE,UAG/B,CAOA,SAAgBygB,EAAQha,EAA8B/K,GAC9CA,EAAKqE,OAAOpE,aACZ8K,EAAQ/K,KAAO,CACXqE,QAAQ,EAAF,eAAOrE,EAAKqE,SAG9B,CApBA,YAcA,YAWA,yBAA8B0G,EAA8BjD,GACxDkd,EAAQja,EAASjD,EAAQ1D,MACzB2gB,EAAQha,EAASjD,EAAQ9H,KAC7B,C,sFCtCA,cAeA,sBACIqI,EACAqd,EACA7hB,GAEA,IAAMkF,GAAY,IAAA+J,iBAAgBzK,EAAOxE,GACnC8hB,EAAc5c,EAAU8J,SAAS9J,EAAU8J,SAASnH,OAAS,GAcnE,MAZ8B,mBAA1Bga,EAAWE,YACND,GAAgBA,EAAYxc,YAC7BJ,EAAU8J,SAASvE,KAAKoX,IAGxBA,EAAWvc,YAA0C,oBAA5Bwc,aAAW,EAAXA,EAAaC,cACtC7c,EAAU8J,SAAS1D,MAGvBpG,EAAU8J,SAASvE,KAAKoX,IAGrB3c,CACX,C,uGCpCA,cACA,UAQA,uCACI1B,EACAhD,GAEA,IAAMyD,GAAU,IAAAyd,4BAChB,IAAAM,aAAYxe,EAASS,EAAQge,eAAe/a,QAAS1G,EAAQyD,EACjE,C,2FCfA,cACA,UAYA,2BACIO,EACAxE,GAEA,IAAMkiB,EAAY1d,EAAM4D,OAAO5D,EAAM4D,OAAOP,OAAS,GAErD,GAA4B,cAAxBqa,aAAS,EAATA,EAAW7Z,WACX,OAAO6Z,EAEP,IAAMhd,GAAY,IAAAC,kBAAgB,EAAMnF,GAGxC,OAFA,IAAAoF,UAASZ,EAAOU,GAETA,CAEf,C,uFCzBA,IAAMid,EAAmB,eAOzB,yBAA8BvT,GAC1B,OAAOuT,EAAiBrM,KAAKlH,EACjC,C,eCFA,SAAgBwT,EAAavd,GACzB,OAAQA,EAAMwD,WACV,IAAK,YACD,OAAgC,GAAzBxD,EAAMmK,SAASnH,OAE1B,IAAK,QACD,OAAOhD,EAAM+G,KAAKqE,OAAM,SAAA3D,GAAO,OAAoB,GAApBA,EAAIU,MAAMnF,MAAV,IAEnC,IAAK,aACD,OAAOwa,EAAkBxd,GAK7B,QACI,OAAO,EAEnB,CAKA,SAAgBwd,EAAkB7d,GAC9B,OAAQA,EAAM8d,gBACV,IAAK,kBAED,MAAwB,OAAjB9d,EAAM7D,SAA2B6D,EAAM4D,OAAO6H,MAAMmS,GAE/D,IAAK,WACD,OAAO5d,EAAM4D,OAAO6H,MAAMmS,GAE9B,IAAK,WACL,IAAK,UACL,IAAK,YACD,OAAO,EAEX,QACI,OAAO,EAEnB,CAKA,SAAgBG,EAAerb,GAC3B,OAAQA,EAAQ6a,aACZ,IAAK,OACD,OAAQ7a,EAAQqI,KAEpB,IAAK,QACD,OAAQrI,EAAQoC,IAEpB,QACI,OAAO,EAEnB,C,sHAvDA,iBAsBA,sBAsBA,mBAgBA,mBACInF,GAEA,OAuBJ,SACIA,GAEA,MAAiE,iBAA1BA,EAAOme,cAClD,CA3BQE,CAAare,GACNke,EAAkBle,GAgBjC,SACIA,GAEA,MAAuD,iBAArBA,EAAOkE,SAC7C,CAnBeuB,CAAQzF,GACRie,EAAaje,KAQ5B,SACIA,GAEA,MAA2D,iBAAvBA,EAAO4d,WAC/C,CAXeU,CAAUte,IACVoe,EAAepe,EAI9B,C,yFCxEA,4BACIK,GAEA,MAC4B,WAAxBA,EAAM8d,gBAC6C,WAAtB9d,EAAOud,WAE5C,C,+FCbA,IAAMW,EAAwB,CAAC,MAAO,WAAY,gBAMlD,iCAAsCxd,GAClC,OACKA,EAAU1E,OAAOzD,YACd2lB,EAAsB/d,QAAQO,EAAU1E,OAAOzD,aAAe,IAClE,CAER,C,iGCfA,cACA,UACA,UAYA,iCAAgBuH,EAAsBE,GAClC,IAAK,IAAIjG,EAAIiG,EAAM4D,OAAOP,OAAS,EAAGtJ,GAAK,EAAGA,IAAK,CAC/C,IAAMsG,EAAQL,EAAM4D,OAAO7J,GAE3B,OAAQsG,EAAMwD,WACV,IAAK,aAC2B,YAAxBxD,EAAMyd,gBAAuD,GAAvBzd,EAAMxE,OAAOwH,QACnDtJ,GAAKsG,EAAMuD,OAAOP,QAClB,IAAAwZ,aAAY7c,EAAOK,IAEnBP,EAAsBO,GAE1B,MACJ,IAAK,aACD,IAAA8d,oBAAmB9d,GACnB,MACJ,IAAK,QACD,IAAK,IAAI+d,EAAI,EAAGA,EAAI/d,EAAM+G,KAAK/D,OAAQ+a,IACnC,IAAK,IAAIC,EAAI,EAAGA,EAAIhe,EAAM+G,KAAKgX,GAAG5V,MAAMnF,OAAQgb,IACxChe,EAAM+G,KAAKgX,GAAG5V,MAAM6V,IACpBve,EAAsBO,EAAM+G,KAAKgX,GAAG5V,MAAM6V,KAO1D,IAAAT,cAAavd,IACbL,EAAM4D,OAAO8T,OAAO3d,EAAG,E,CAGnC,C,8FC7CA,cACA,UACA,UACA,UACA,UAKA,8BAAmC2G,GAC/B,IAAM8J,EAAW9J,EAAU8J,SAE3B,IAAK9J,EAAUoD,YAAc0G,EAASnH,OAAS,EAAG,CAC9C,IAAMib,EAAO9T,EAASA,EAASnH,OAAS,GAClCkb,EAAa/T,EAASA,EAASnH,OAAS,GAE9C,GACwB,mBAApBib,EAAKf,aACHgB,GAAwC,MAA1BA,EAAWhB,aAGxB,GAAI/S,EAASnH,OAAS,GAAkD,MAA7CmH,EAASA,EAASnH,OAAS,GAAGka,YAAqB,CACjF,IAAMiB,EAAmBhU,EAASK,QAAO,SAAApO,GAAK,MAAiB,mBAAjBA,EAAE8gB,WAAF,IAK1CiB,EAAiBnb,OAAS,GACmC,MAA7Dmb,EAAiBA,EAAiBnb,OAAS,GAAGka,aAE9C/S,EAAS1D,K,OAVb0D,EAASvE,MAAK,IAAApF,UAASyd,EAAKtiB,Q,EAe/B,IAAA8gB,uBAAsBpc,KACvB,IAAA+d,sBAAqB/d,GAgB7B,SAA0BA,GACtB,IAAMyK,EAASzK,EAAU8J,SAASkU,MAAK,SAAAjiB,GAAK,MAAiB,mBAAjBA,EAAE8gB,WAAF,IAC5C,GAAIpS,EAAQ,CACR,IAAMwT,EAAcje,EAAU8J,SAASrK,QAAQgL,GACzCyT,EAAOle,EAAU8J,SAASmU,EAAc,GACxCE,EAAOne,EAAU8J,SAASmU,EAAc,IAEzCC,IACIA,EAAK7iB,OACN,IAAAwgB,gBAAeqC,EAAK5iB,OAAQmP,EAAOnP,WACjC6iB,IAAUA,EAAK9iB,OAAQ,IAAAwgB,gBAAesC,EAAK7iB,OAAQmP,EAAOnP,UAC5DmP,EAAOpP,OACT6iB,GACEzT,EAAOpP,MACP8iB,IACCA,EAAK9iB,OACN,IAAAwgB,gBAAesC,EAAK7iB,OAAQmP,EAAOnP,iBAEhCmP,EAAOpP,I,CAG1B,CAlCI+iB,CAAiBpe,GAKrB,SAA6BL,GACzB,IAAK,IAAI0e,EAAI1e,EAAMmK,SAASnH,OAAS,EAAG0b,GAAK,EAAGA,KACxC,IAAAhB,gBAAe1d,EAAMmK,SAASuU,KAC9B1e,EAAMmK,SAASkN,OAAOqH,EAAG,EAGrC,CATIC,CAAoBte,EACxB,C,4KC1CA,cAOMue,EAAQ,IACRC,EAAmB,IACnBC,EAAsB,WACtBC,EAAuB,WAiD7B,SAASC,EACL5f,GAEA,OAAOpE,OAAOC,OAAOmE,QAAAA,EAAW,CAAC,EAAG,CAChC6f,aAAc,GACdC,qBAAqB,EACrBC,sBAAsB,EACtBC,uBAAmB9hB,EACnB+hB,qBAAiB/hB,GAEzB,CAKA,SAAgBgiB,EAAiBjd,EAA8BjD,GAC3D,OAAQiD,EAAQ6a,aACZ,IAAK,KACDqC,EAAsBngB,EAAQ6f,aAAc7f,EAAQggB,mBACpDI,EAAyBpgB,EAAQigB,gBAAiBjgB,EAAQggB,mBAG1DJ,EAA6B5f,GAC7B,MAEJ,IAAK,SACL,IAAK,UACL,IAAK,QAIDA,EAAQggB,kBAAoB/c,EAC5BjD,EAAQ8f,qBAAsB,EAC9B,MAEJ,IAAK,OACD9f,EAAQ6f,aAAarZ,KAAKvD,GAC1BjD,EAAQggB,kBAAoB/c,EAC5BjD,EAAQigB,gBAAkBhd,EAE1B,IAAMod,EAAQpd,EAAQqI,KAAKJ,UAAU,EAAG,GAClC2T,EAAO5b,EAAQqI,KAAKgV,QAAQ,IAE7B,IAAA9U,eAAcvI,EAAQqI,QACnB+U,GAASb,IAETvc,EAAQqI,KAAOrI,EAAQqI,KAAKmL,QACxBiJ,EACA1f,EAAQ8f,oBAAsB,GAAKL,IAIvCZ,GAAQW,IAERvc,EAAQqI,KAAOrI,EAAQqI,KAAKmL,QACxBkJ,EACA3f,EAAQ+f,qBAAuBP,EAAQC,KAKnDzf,EAAQ8f,oBAAsBjB,GAAQW,EAIlD,CAEA,SAASW,EACLpV,EACAiV,GAEAjV,EAAShK,SAAQ,SAAAkC,GAGb,GAAIA,GAAW+c,EAAmB,CAC9B,IAAM1U,EAAOrI,EAAQqI,KAGjBA,EAAKgV,QAAQ,IAAMb,GACnBnU,EAAK1H,OAAS,GACd0H,EAAKgV,QAAQ,EAAG,IAAMd,IAEtBvc,EAAQqI,KAAOA,EAAKJ,UAAU,EAAGI,EAAK1H,OAAS,GAAK4b,E,CAGhE,GACJ,CAEA,SAASY,EACLnd,EACA+c,GAEI/c,GAAWA,GAAW+c,IAAqB/c,aAAO,EAAPA,EAASqI,KAAKgV,QAAQ,KAAMd,IAEvEvc,EAAQqI,KAAOrI,EAAQqI,KAAKmL,QAAQkJ,EAAsB,IAElE,CA5IA,gCAAqC1e,GACjC,IAAMjB,EAAU4f,IAEhB3e,EAAU8J,SAAShK,SAAQ,SAAAkC,GACvBid,EAAiBjd,EAASjD,EAC9B,IAEAmgB,EAAsBngB,EAAQ6f,aAAc7f,EAAQggB,mBACpDI,EAAyBpgB,EAAQigB,gBAAiBjgB,EAAQggB,kBAC9D,EAOA,kCACI/c,EACA8c,QAAA,IAAAA,IAAAA,GAAA,GAEA,IAAM/f,EAAU4f,IAEhB5f,EAAQ+f,qBAAuBA,EAC/BG,EAAiBjd,EAASjD,EAC9B,EAgBA,2CACI,OAAO4f,GACX,EAiBA,oB,qGC1EA,UAQA,uBACIzd,EACAoe,G,QAEM3e,EAA6C,QAArC,EAAAO,aAAM,EAANA,EAAQgC,OAAOzD,QAAQ6f,UAAc,SAAK,EAEpD3e,GAAS,IACT2e,EAAcpc,OAAOpD,QAAQ,EAAAwD,yBAE7BpC,UAAM,EAANA,EAAQgC,QAAO8T,OAAM,6BAACrW,EAAO,IAAC,YAAK2e,EAAcpc,SAAM,IAE/D,C,kGCbA,oBAAyB5H,GACrB,MAAO,CACHuhB,YAAa,KACbvhB,OAAQA,GAAS,EAAD,eAAMA,GAAW,CAAC,EAE1C,C,oGCFA,sCACI6D,GAEA,IAAMtC,EAA+B,CACjCugB,eAAgB,WAChBla,OAAQ,IAOZ,OAJI/D,IACAtC,EAAOvB,OAAS6D,GAGbtC,CACX,C,uGCfA,yBACIpB,EACAH,GAEA,MAAO,CACH6H,UAAW,UACX1H,QAAO,EACPH,OAAQA,GAAS,EAAD,eAAMA,GAAW,CAAC,EAE1C,C,sGCNA,wBACI+d,EACAzM,EACA3R,EACA8F,EACA4L,GAEA,YALA,IAAAC,IAAAA,GAAA,GAKO,CACHiQ,YAAa,SACb1Z,UAAW,SACX7H,QAAQ,EAAF,eAAOL,GACbkH,aAAc,CACVwK,GAAE,EACFD,WAAY3L,EACZ6L,WAAU,GAEdyM,QAAO,EAEf,C,+GClBA,iCACIrO,EACA1P,GAEA,MAAO,CACH6H,UAAW,aACXia,eAAgB,kBAChB3hB,QAASuP,EACT9H,OAAQ,GACR5H,QAAQ,EAAF,eAAQA,GAAU,CAAC,GAEjC,C,4FCfA,8BAAmCgD,GAC/B,MAAO,CACH6E,UAAW,aACXia,eAAgB,UAChB9e,QAASA,EACT4E,OAAQ,GACR5H,OAAQ,CAAC,EAEjB,C,8GCJA,gCACIgD,EACAhD,GAEA,MAAO,CACH6H,UAAW,aACXia,eAAgB,UAChBP,YAAa,UACbvhB,OAAQA,GAAS,EAAD,eAAMA,GAAW,CAAC,EAClC4H,OAAQ,GACR5E,QAASA,EAEjB,C,qGCfA,uBAA4B8F,EAAa9I,GACrC,MAAO,CACHuhB,YAAa,QACbzY,IAAKA,EACL9I,OAAQA,GAAS,EAAD,eAAMA,GAAW,CAAC,EAClCC,QAAS,CAAC,EAElB,C,0FCdA,cACA,UAYA,0BACIJ,EACAG,GAEA,MAAO,CACH6H,UAAW,aACXia,eAAgB,WAChBla,OAAQ,GACR/H,OAAQA,EACFA,EAAOW,KAAI,SAAA4J,GAAS,WAAAC,iBAAgBD,EAAM4R,SAAU5R,EAAMpK,OAAQoK,EAAMnK,QAApD,IACpB,GACNgkB,cAAc,IAAA7U,uBAAsBpP,GACpCA,OAAQ,CAAC,EAEjB,C,yGCfA,2BACIgc,EACAhc,EACAC,GAEA,MAAO,CACH+b,SAAQ,EACRhc,QAAQ,EAAF,eAAOA,GACbC,SAAS,EAAF,eAAOA,GAEtB,C,yGCRA,2BACI6H,EACAtI,EACAG,EACAsE,GAEA,IAAM1C,EAAgC,CAClCsG,UAAW,YACX2G,SAAU,GACVxO,OAAQR,GAAc,EAAD,eAAMA,GAAgB,CAAC,GAkBhD,OAfIG,GAAiBN,OAAOoS,KAAK9R,GAAe0H,OAAS,IACrD9F,EAAO5B,eAAgB,EAAH,eAAQA,IAG5BmI,IACAvG,EAAOuG,YAAa,GAGpB7D,IACA1C,EAAO0C,UAAY,CACf9D,QAAS8D,EAAU9D,QACnBH,QAAQ,EAAF,eAAOiE,EAAUjE,UAIxBuB,CACX,C,gHChCA,oCACIpB,EACAH,GAEA,MAAO,CACHG,QAASA,EAAQuR,oBACjB1R,QAAQ,EAAF,eAAQA,GAAU,CAAC,GAEjC,C,+GCTA,iCACIA,GAEA,MAAO,CACHuhB,YAAa,kBACbzc,YAAY,EACZ9E,OAAQA,GAAS,EAAD,eAAMA,GAAW,CAAC,EAE1C,C,oGCNA,uBAA4BkkB,EAAkBlkB,GAG1C,IAFA,IAAMoL,EAA+B,GAE5BrN,EAAI,EAAGA,EAAImmB,EAAUnmB,IAC1BqN,EAAKnB,KAAK,CACNkD,OAAQ,EACRnN,OAAQ,CAAC,EACTwM,MAAO,KAIf,MAAO,CACH3E,UAAW,QACXuD,KAAI,EACJpL,QAAQ,EAAF,eAAQA,GAAU,CAAC,GACzBiO,OAAQ,GACRhO,QAAS,CAAC,EAElB,C,yGCjBA,2BACIkkB,EACAC,EACAC,EACArkB,GAEA,IAAMskB,EAC2B,iBAAtBH,EAAiCA,EAAoB,IAAMA,EAChEI,EAC4B,iBAAvBH,EAAkCA,EAAqB,IAAMA,EACxE,MAAO,CACHtC,eAAgB,YAChBla,OAAQ,GACR5H,OAAQA,GAAS,EAAD,eAAMA,GAAW,CAAC,EAClCskB,SAAQ,EACRC,UAAS,EACTF,WAAYA,EACZpkB,QAAS,CAAC,EAElB,C,mGC/BA,UAeA,sBACI8O,EACA/O,EACAD,EACApE,GAEA,IAAM4F,EAA2B,CAC7BggB,YAAa,OACbxS,KAAMA,EACN/O,OAAQA,GAAS,EAAD,eAAMA,GAAW,CAAC,GAWtC,OARID,IACA,IAAA4gB,SAAQpf,EAAQxB,GAGhBpE,IACA,IAAA+kB,SAAQnf,EAAQ5F,GAGb4F,CACX,C,6FCpCA,cACA,UACA,UAkEA,SAASijB,EAAaC,G,MACdljB,EAqBJ,OAnBIkjB,EAAIpgB,QAIA9C,EAHCkjB,EAAI/d,SAEE,IAAAvB,cAAasf,EAAI/d,QAAS,aACxB,IAAI,EAAAge,SAASD,EAAI/d,SAA8B,QAArB,EAAA+d,EAAI/d,QAAQ2H,iBAAS,eAAEhH,SAAU,GAE3D,IAAI,EAAAqd,SACTD,EAAI/d,QAAQwF,YACZ,aAAQuY,EAAI/d,QAAQwF,WAAYyY,YAAgCxgB,QAC5DsgB,EAAI/d,SACJ,GARC,IAAI,EAAAge,SAASD,EAAIpgB,MAAO,KAarC,IAAAc,cAAa5D,aAAM,EAANA,EAAQyP,KAAM,4BAC3BzP,EAASA,aAAM,EAANA,EAAQqjB,aAGdrjB,CACX,CApEA,6BACIsjB,EACArhB,EACAG,EACAF,EACAqhB,GAEArhB,EAAQqhB,cAAgBA,EAExBrhB,EAAQshB,cAAcC,mBAAmBH,EAAKrhB,EAAMG,EAAOF,GAE3D,IAAMiC,EAOV,SAA+BjC,GAEvB,IAKAwhB,EACAC,EANA,EAGAzhB,EAAO,iBAHawY,EAAK,QAAE+C,EAAG,MAC9B3T,EAEA5H,EAAO,eAKX,OALIA,EAAO,kBAQNwhB,EAAgBhJ,GAASuI,EAAavI,MACtCiJ,EAAclG,GAAOwF,EAAaxF,IAE5B,CACHvZ,KAAM,QACNC,OAAO,IAAAyf,aAAYF,EAAeC,IAE/B7Z,GAGA,KAEf,CAhCkB+Z,CAAsB3hB,GAIpC,OAFAD,EAAKohB,YAEElf,CACX,C,oMCvCA,UACA,UACA,UAiCA,SAAgByb,EACZhiB,EACAC,GAEA,OAAOC,OAAOC,OACV,CAAC,EACDF,EAQG,CACHimB,iBAAkB,CACdC,QAAS,CACLjhB,MAAO,KACPqC,QAAS,QAOd,CACH9G,WAAY,CACRE,iBAAkB,GAClBqb,UAAW,IAEfxH,eAAgB,CAAC,GArBjBxU,EAER,CA2BA,SAAgBiiB,EACZ/gB,GAEA,MAAO,CACH0kB,cAAe1lB,OAAOC,OAAM,MAAbD,QAAM,oBACjB,CAAC,EACD,EAAAkmB,8BAA2B,YACxBllB,EAAQG,KAAI,SAAAC,GAAK,OAAAA,aAAC,EAADA,EAAG+kB,oBAAH,MAAwB,IAEhD/D,eAAgBgE,EACZplB,EAAQG,KAAI,SAAAC,GAAK,OAAAA,aAAC,EAADA,EAAGilB,qBAAH,IACjBrlB,EAAQG,KAAI,SAAAC,GAAK,OAAAA,aAAC,EAADA,EAAGklB,wBAAH,KAErBC,qBAAsB,EAAAL,4BACtBjN,sBAAqB,wBAE7B,CAMA,SAAgBmN,EACZxkB,EACA4kB,QADA,IAAA5kB,IAAAA,EAAA,SACA,IAAA4kB,IAAAA,EAAA,IAEA,IAAM1kB,EAAoB9B,OAAOC,OAAM,MAAbD,QAAM,oBAAQ,CAAC,IAAC,YAAK4B,IAAS,IAExD,OAAO,IAAAG,eAAc,EAAAC,8BAA8BC,QAAO,SAACC,EAAQC,G,MACzDC,GAAQ,IAAAJ,6BAA6BG,GACtChB,KACG,SAAAkB,GACI,YAAkCC,IAAjCR,EAAkBO,GACb,EAAA4W,sBAAsB5W,GACtBP,EAAkBO,EAFxB,KAIPE,OAAM,4CACAikB,EAAwBrlB,KACvB,SAAAslB,GAAQ,MAAI,OAAgB,QAAf,EAAAA,aAAQ,EAARA,EAAWtkB,UAAI,QAAI,EAA2B,MAC9D,IAKT,OAFAD,EAAOC,GAAOC,EAEPF,CACX,GAAG,CAAC,EACR,CAhGA,mCACInC,G,IACA,wDAEA,OAAO+hB,EAAkCC,EAAuB/gB,GAAUjB,EAC9E,EAOA,sCAsCA,2BAsBA,uB,uGC/FA,cACA,UACA,UACA,UACA,SACA,SACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UAMa,EAAAmmB,4BAAsD,CAC/DlhB,MAAO,EAAA0hB,YACPf,mBAAoB,EAAAgB,yBACpBjpB,GAAI,EAAAkpB,SACJC,YAAa,EAAAC,kBACbC,cAAe,EAAAC,oBACfC,aAAc,EAAAC,mBACdC,eAAgB,EAAAC,qBAChBhe,QAAS,EAAAie,cACT9d,MAAO,EAAA+d,YACP1U,KAAM,EAAA2U,WACN9c,SAAU,EAAA+c,eACVniB,UAAW,EAAAoiB,gBACXrf,gBAAiB,EAAAsf,sBACjBrgB,QAAS,EAAAsgB,cACTC,iBAAkB,EAAAC,uBAClBtoB,MAAO,EAAAuoB,YACPpY,KAAM,EAAAqY,W,qFC5BG,EAAArB,YAA2D,SACpElB,EACAjf,EACAvB,EACAZ,EACA4jB,GAEA,IAAMC,EAAW7jB,EAAQshB,cAEzB,OAAQ1gB,EAAMwD,WACV,IAAK,QACDwf,EAAUC,EAAS1oB,MAAMimB,EAAKjf,EAAQvB,EAAOZ,EAAS4jB,GACtD,MACJ,IAAK,YACDA,EAAUC,EAAS5iB,UAAUmgB,EAAKjf,EAAQvB,EAAOZ,EAAS4jB,GAC1D,MACJ,IAAK,SACDA,EAAUC,EAASpB,YAAYrB,EAAKjf,EAAQvB,EAAOZ,EAAS4jB,GAC5D,MACJ,IAAK,UACDA,EAAUC,EAAS7e,QAAQoc,EAAKjf,EAAQvB,EAAOZ,EAAS4jB,GACxD,MACJ,IAAK,aACD,OAAQhjB,EAAMyd,gBACV,IAAK,UACDuF,EAAUC,EAAShB,aAAazB,EAAKjf,EAAQvB,EAAOZ,EAAS4jB,GAC7D,MAEJ,IAAK,kBACDA,EAAUC,EAAS7f,gBAAgBod,EAAKjf,EAAQvB,EAAOZ,EAAS4jB,GAChE,MAEJ,IAAK,WACDA,EAAUC,EAASxd,SAAS+a,EAAKjf,EAAQvB,EAAOZ,EAAS4jB,IAOzE,OAAOA,CACX,C,kGCzCa,EAAArB,yBAAwE,SACjFnB,EACAjf,EACA5B,EACAP,G,MAEQ7D,EAAe6D,EAAO,WACxB0X,EAAYvb,EAAWub,UACzBkM,EAAuBzhB,EAAOE,WAElC,IAkBI,IAjBA9B,EAAM4D,OAAOpD,SAAQ,SAAC+iB,EAAYliB,GAMjB,GAATA,GACwB,cAAxBkiB,EAAW1f,WACkB,YAA7B0f,EAAWzF,iBAEXliB,EAAWub,UAAY,IAG3BkM,EAAU5jB,EAAQshB,cAAc1gB,MAAMwgB,EAAKjf,EAAQ2hB,EAAY9jB,EAAS4jB,EAC5E,IAGOA,GAAS,CACZ,IAAMxE,EAAOwE,EAAQthB,YAEH,QAAlB,EAAAshB,EAAQnb,kBAAU,SAAEsb,YAAYH,GAChCA,EAAUxE,C,UAGdjjB,EAAWub,UAAYA,C,CAE/B,C,oFC9CA,cAMa,EAAA8K,SAAuD,SAChEpB,EACAjf,EACAc,EACAjD,EACAgkB,GAEA,IAAM1qB,EAAK8nB,EAAIxI,cAAc,MACvBrZ,EAAU6hB,EAAIxI,cAAc,QAClCrZ,EAAQuZ,YAAYxf,GACpB6I,EAAO2W,YAAYvZ,IAEnB,IAAA0kB,qBAAoB7C,EAAK9nB,EAAIiG,EAAS0D,EAASjD,EAASgkB,EAC5D,C,yFCnBA,cACA,UAUa,EAAAf,cAA+D,SACxE7B,EACAjf,EACA6C,EACAhF,EACA4jB,G,MAEIrkB,EAAUS,EAAQ8H,kBAAoB9C,EAAQ+C,mBAAgB7J,EAsBlE,OApBIqB,EACAqkB,GAAU,IAAAM,oBAAmB/hB,EAAQ5C,EAASqkB,IAE9CrkB,EAAU6hB,EAAIxI,cAAc5T,EAAQtI,SAEhCsD,EAAQ8H,oBACR9C,EAAQ+C,cAAgBxI,GAG5B4C,EAAOgiB,aAAa5kB,EAASqkB,IAE7B,IAAA7F,aAAYxe,EAASS,EAAQge,eAAehZ,QAASA,EAAQzI,OAAQyD,GAEjEgF,EAAQ1B,MACR/D,EAAQoQ,aAAa,OAAQ3K,EAAQ1B,OAIxB,QAArB,EAAAtD,EAAQqhB,qBAAa,cAArBrhB,EAAwBgF,EAASzF,GAE1BqkB,CACX,C,gICzCA,UACA,UACA,UACA,UAUa,EAAAlB,kBAAkE,SAC3EtT,EACAjN,EACAe,EACAlD,EACA4jB,G,MAEMxgB,EAA0BF,EAAW,aAAvBoX,EAAYpX,EAAW,QAO3C,OALA,IAAA6a,aAAYzD,EAASta,EAAQge,eAAeve,OAAQ2D,EAAcpD,GAElE4jB,GAAU,IAAAM,oBAAmB/hB,EAAQmY,EAASsJ,GACzB,QAArB,EAAA5jB,EAAQqhB,qBAAa,cAArBrhB,EAAwBkD,EAAaoX,GAE9BsJ,CACX,EAKa,EAAAhB,oBAAsE,SAC/ExT,EACAjN,EACAe,EACAlD,EACAokB,G,MAEMhhB,EAAkCF,EAAW,aAA/BoX,EAAoBpX,EAAW,QAAtB3G,EAAW2G,EAAW,OAKnD,GAHAf,EAAO2W,YAAYwB,GACnB8J,SAAAA,EAAa5d,KAAK8T,IAEd,IAAA3c,eAAcpB,GAAQqH,OAAS,EAAG,CAClC,IAAMzE,GAAO,IAAAklB,MAAK/J,EAAS,SAE3B,IAAAyD,aAAY5e,EAAMa,EAAQge,eAAe/a,QAAS1G,EAAQyD,E,CAK9D,IAFA,IAAA+d,aAAYzD,EAASta,EAAQge,eAAeve,OAAQ2D,EAAcpD,GAE9DA,EAAQskB,uBAAyBlhB,EAAayK,WAAY,CACpD,oBAAkB,IAAA0W,eAAcjK,GAAQ,GAAvCkK,EAAK,KAAEC,EAAM,KAEpBL,SAAAA,EAAa5d,KAAKge,EAAOC,GACzBzkB,EAAQ4hB,iBAAiBC,QAAQ5e,QAAUuhB,C,MAE3CxkB,EAAQ4hB,iBAAiBC,QAAQ5e,QAAUqX,EAG1B,QAArB,EAAAta,EAAQqhB,qBAAa,cAArBrhB,EAAwBkD,EAAaoX,EACzC,C,gGC/DA,cACA,UACA,UACA,UASMoK,EAAsE,CACxEvsB,WAAY,YACZW,WAAY,OAMH,EAAAwqB,sBAA+E,SACxFlC,EACAjf,EACAtB,EACAb,EACA4jB,G,MAEIrkB,EAAUS,EAAQ8H,kBAAoBjH,EAAUkH,mBAAgB7J,EAEpE,GAAIqB,EACAqkB,GAAU,IAAAM,oBAAmB/hB,EAAQ5C,EAASqkB,GAE9C5jB,EAAQshB,cAAcC,mBAAmBH,EAAK7hB,EAASsB,EAAWb,QAC/D,KAAK,IAAAoe,mBAAkBvd,GAAY,CACtC,IAAM,EAAgBugB,EAAIxI,cAAc/X,EAAUnE,SAE9CsD,EAAQ8H,oBACRjH,EAAUkH,cAAgB,GAG9B5F,EAAOgiB,aAAa,EAAeP,IAEnC,IAAArhB,aAAYvC,EAASa,EAAUnE,SAAS,YACpC,IAAAqhB,aAAY,EAAe/d,EAAQge,eAAend,UAAWA,EAAUtE,OAAQyD,IAC/E,IAAA+d,aACI,EACA/d,EAAQge,eAAela,eACvBjD,EAAUtE,OACVyD,IAGJ,IAAA+d,aAAY,EAAe/d,EAAQge,eAAend,UAAWA,EAAUtE,OAAQyD,EACnF,IAEyB,OAArBa,EAAUnE,SACV,IAAA6F,aAAYvC,EAAS0kB,GAAgB,WACjC1kB,EAAQshB,cAAcC,mBAAmBH,EAAK,EAAevgB,EAAWb,EAC5E,IAEAA,EAAQshB,cAAcC,mBAAmBH,EAAK,EAAevgB,EAAWb,GAG5ET,EAAU,C,CAOd,OAJIA,IACqB,QAArB,EAAAS,EAAQqhB,qBAAa,cAArBrhB,EAAwBa,EAAWtB,IAGhCqkB,CACX,C,qHCtEA,cACA,UACA,UACA,UAWa,EAAAd,mBAAyE,SAClF1B,EACAjf,EACA5B,EACAP,EACA4jB,G,MAEIrW,EAAahN,EAAMhB,QAcvB,OAZIqkB,GAAWrW,EAAK9E,YAActG,EAC9ByhB,GAAU,IAAAM,oBAAmB/hB,EAAQoL,EAAMqW,IAE3CrW,EAAOA,EAAKoX,YACZpkB,EAAMhB,QAAUgO,EAEhBpL,EAAOgiB,aAAa5W,EAAMqW,IAGT,QAArB,EAAA5jB,EAAQqhB,qBAAa,cAArBrhB,EAAwBO,EAAOgN,GAC/BvN,EAAQshB,cAAcC,mBAAmBH,EAAK7T,EAAMhN,EAAOP,GAEpD4jB,CACX,EAKa,EAAAZ,qBAA+E,SACxF5B,EACAjf,EACA5B,EACAP,EACAgkB,G,MAEMzW,EAAOhN,EAAMhB,QAAQolB,YAI3B,GAHApkB,EAAMhB,QAAUgO,EAChBpL,EAAO2W,YAAYvL,IAEf,IAAA7L,cAAa6L,EAAM,gBAAiB,CACpC,IAAMhO,GAAU,IAAA8kB,MAAK9W,EAAM,SAE3B,IAAA0W,qBAAoB7C,EAAK7T,EAAMhO,EAASgB,EAAOP,EAASgkB,GACnC,QAArB,EAAAhkB,EAAQqhB,qBAAa,cAArBrhB,EAAwBO,EAAOgN,E,CAGnCvN,EAAQshB,cAAcC,mBAAmBH,EAAK7T,EAAMhN,EAAOP,EAC/D,C,uFC5DA,cACA,UACA,UAMa,EAAAkjB,YAA6D,SACtE9B,EACAjf,EACAyiB,EACA5kB,EACAgkB,GAEA,IAAMrlB,EAAMyiB,EAAIxI,cAAc,OACxBrZ,EAAUslB,SAASjM,cAAc,QAEvCzW,EAAO2W,YAAYvZ,GACnBA,EAAQuZ,YAAYna,GAEpBA,EAAI0G,IAAMuf,EAAWvf,IAEjBuf,EAAWtf,MACX3G,EAAI2G,IAAMsf,EAAWtf,KAGrBsf,EAAWrf,QACX5G,EAAI4G,MAAQqf,EAAWrf,QAG3B,IAAAwY,aAAYpf,EAAKqB,EAAQge,eAAe7Y,MAAOyf,EAAWroB,OAAQyD,IAClE,IAAA+d,aAAYpf,EAAKqB,EAAQge,eAAexhB,QAASooB,EAAWpoB,QAASwD,GAE/D,MAAoB4kB,EAAWroB,OAA7BkN,EAAK,QAAEC,EAAM,SACfob,EAAWrb,GAAQ,IAAAwG,oBAAmBxG,GAAS,EAC/Csb,EAAYrb,GAAS,IAAAuG,oBAAmBvG,GAAU,EAEpDob,EAAW,IACXnmB,EAAI8K,MAAQqb,GAGZC,EAAY,IACZpmB,EAAI+K,OAASqb,GAGbH,EAAWpf,6BACXxF,EAAQglB,eAAiB,CACrBhjB,KAAM,QACNmD,MAAOxG,KAIf,IAAAslB,qBAAoB7C,EAAKziB,EAAKY,EAASqlB,EAAY5kB,EAASgkB,EAChE,C,oGCtDA,UACA,UACA,UAUa,EAAAb,WAA6D,SACtE/B,EACAjf,EACAkE,EACArG,EACA4jB,G,QAEIqB,EAAQ,EACJvN,EAAc1X,EAAQ7D,WAAU,UASxC,IAPwB,GAApBub,EAAU9T,QACV8T,EAAUlR,KAAK,CACX+G,KAAMpL,IAKP8iB,EAAQ5e,EAASjK,OAAOwH,QAAUqhB,EAAQ,EAAIvN,EAAU9T,OAAQqhB,IAAS,CAC5E,IAAMC,EAAaxN,EAAUuN,EAAQ,GAC/BE,EAAY9e,EAASjK,OAAO6oB,GAElC,GACIC,EAAW3M,UAAY4M,EAAU5M,WACf,QAAlB,EAAA2M,EAAW1oB,eAAO,eAAE4oB,cAAeD,EAAU3oB,QAAQ4oB,aAC9B,MAAtBD,EAAU5M,UAAoE,iBAAzC4M,EAAU5oB,OAAO2b,oBAEvD,K,CAKRR,EAAUO,OAAOgN,EAAQ,GAGzB,I,iBACI,IAAMte,EAAQN,EAASjK,OAAO6oB,GACxBI,EAAUjE,EAAIxI,cAAcjS,EAAM4R,UAAY,MACjCb,EAAUA,EAAU9T,OAAS,GAAG2J,KAExC4W,aAAakB,EAAkB,GAATJ,EAAarB,EAAU,OAExD,IAAA7F,aAAYsH,EAASrlB,EAAQge,eAAenX,UAAWF,EAAMpK,OAAQyD,IAGrE,IAAA8G,oBAAmBH,GAAO,SAAAI,GAWtB,OAVA,IAAAgX,aAAYsH,EAAS,CAAC,EAAAre,+BAA+BsI,OAAQvI,GAAY,CAAC,EAAG/G,GAGzE+G,QACoC,IAA7BA,EAASG,uBACsB,IAA/BH,EAASI,qBAEhBJ,EAAW,MAGRA,CACX,KACA,IAAAgX,aAAYsH,EAASrlB,EAAQge,eAAexhB,QAASmK,EAAMnK,QAASwD,GAEpE0X,EAAUlR,MAAK,EAAD,aAAG+G,KAAM8X,GAAY1e,IAEd,QAArB,EAAA3G,EAAQqhB,qBAAa,cAArBrhB,EAAwB2G,EAAO0e,E,EA3B5BJ,EAAQ5e,EAASjK,OAAOwH,OAAQqhB,I,IA8BvC,OAAOrB,CACX,C,0FC7EA,cACA,SACA,UACA,UACA,UAUa,EAAAR,eAAiE,SAC1EhC,EACAjf,EACAkE,EACArG,EACA4jB,G,QAEAA,EAAU5jB,EAAQshB,cAAc9S,KAAK4S,EAAKjf,EAAQkE,EAAUrG,EAAS4jB,GAE7D,IAAAlM,EAAc1X,EAAQ7D,WAAU,UAEpCiK,GAA+C,QAAlC,EAAAsR,aAAS,EAATA,GAAYA,aAAS,EAATA,EAAW9T,QAAS,UAAE,eAAE2J,OAAQpL,EACvD5H,EAAK6mB,EAAIxI,cAAc,MACvBjS,EAAQN,EAASjK,OAAOiK,EAASjK,OAAOwH,OAAS,GA+BvD,OA3BAwC,EAAW+d,aAAa5pB,GAAIqpB,aAAO,EAAPA,EAASnb,aAAcrC,EAAawd,EAAU,MAEtEjd,IACA,IAAAoX,aAAYxjB,EAAIyF,EAAQge,eAAezX,gBAAiBF,EAAS9J,OAAQyD,IACzE,IAAA+d,aAAYxjB,EAAIyF,EAAQge,eAAe/a,QAASoD,EAASma,aAAajkB,OAAQyD,IAC9E,IAAA+d,aAAYxjB,EAAIyF,EAAQge,eAAe3X,SAAUM,EAAMpK,OAAQyD,IAG/D,IAAA8G,oBAAmBH,GAAO,SAAAI,GAGtB,OAFA,IAAAgX,aAAYxjB,EAAI,CAAC,EAAAid,8BAA8BlI,OAAQvI,GAAY,CAAC,EAAG/G,GAEhE+G,CACX,IAEA/G,EAAQshB,cAAcC,mBAAmBH,EAAK7mB,EAAI8L,EAAUrG,KAI5DqG,EAASlC,OAAOpD,QAAQ,EAAAwD,yBAExBvE,EAAQshB,cAAcC,mBAAmBH,EAAK7mB,EAAI8L,EAAUrG,IAE5D,IAAAslB,QAAO/qB,IAGU,QAArB,EAAAyF,EAAQqhB,qBAAa,cAArBrhB,EAAwBqG,EAAU9L,GAE3BqpB,CACX,C,yGC3DA,UACA,UACA,UACA,UACA,UACA,UAYa,EAAAP,gBAAmE,SAC5EjC,EACAjf,EACAlB,EACAjB,EACA4jB,G,MAEI/iB,EAAYb,EAAQ8H,kBAAoB7G,EAAU8G,mBAAgB7J,EAsGtE,OApGI2C,EACA+iB,GAAU,IAAAM,oBAAmB/hB,EAAQtB,EAAW+iB,IAEhD,IAAArhB,aAAYvC,GAA4B,QAAnB,EAAAiB,EAAUT,iBAAS,eAAE9D,UAAW,MAAM,W,YACjD6oB,GACDtkB,EAAUoD,cACTpD,EAAUT,YACX,IAAA7C,eAAcsD,EAAU1E,QAAQqH,OAAS,GACtC3C,EAAU8J,SAAShF,MAAK,SAAA9C,GAAW,MAAuB,mBAAvBA,EAAQ6a,WAAR,IACrC0H,EAAkBD,GAClB,EAAD,+BAC4B,QAAnB,EAAAtkB,EAAUT,iBAAS,eAAEjE,SAAU,CAAC,GACjC0E,EAAU/E,eAEjB,CAAC,EAEP2E,EAAYugB,EAAIxI,eAAiC,QAAnB,EAAA3X,EAAUT,iBAAS,eAAE9D,UA9BnC,OAgChByF,EAAOgiB,aAAatjB,EAAW+iB,GAE/B5jB,EAAQ4hB,iBAAiBC,QAAU,CAC/BjhB,MAAO2kB,EAAuB1kB,EAAYA,EAAU4H,WACpDxF,QAAS,MAGb,IAAMwiB,EAAiB,WACnB,IAAMtjB,EAAStB,EAEf,GAAIsB,EAAQ,CACR,IAAMujB,EAAezkB,EAAU8J,SAAS,GAEP,oBAA7B2a,aAAY,EAAZA,EAAc5H,cAId9d,EAAQshB,cAAchW,KAClB8V,EACAjf,GAAM,gCAECujB,GAAY,CACf5H,YAAa,OACbxS,KAAM,KAEVtL,EACA,IAIRiB,EAAU8J,SAAShK,SAAQ,SAAAkC,GACvB,IAAMmhB,EAAsB,GAC5BpkB,EAAQshB,cAAcre,QAAQme,EAAKjf,EAAQc,EAASjD,EAASokB,GAE7DA,EAAYrjB,SAAQ,SAAAwM,G,MACE,QAAlB,EAAAvN,EAAQuB,kBAAU,SAAEC,UAAU+L,EAAMtM,EAAW,CAACgC,GACpD,GACJ,G,CAER,EAEIsiB,IACA,IAAAhjB,aAAYvC,EAASwlB,EAAiBC,IAEtC,IAAA1H,aAAYld,EAAWb,EAAQge,eAAepd,MAAOK,EAAU1E,OAAQyD,IACvE,IAAA+d,aAAYld,EAAWb,EAAQge,eAAend,UAAWI,EAAU1E,OAAQyD,IAC3E,IAAA+d,aACIld,EACAb,EAAQge,eAAela,eACvB0hB,EACAxlB,IAGJylB,KAGJ,IAAAE,UAAS9kB,GAQT+iB,EAAU/iB,EAAUyB,YAEhBzB,IACqB,QAArB,EAAAb,EAAQqhB,qBAAa,cAArBrhB,EAAwBiB,EAAWJ,GACjB,QAAlB,EAAAb,EAAQuB,kBAAU,SAAEqkB,YAAY/kB,IAGhC0kB,EACIvlB,EAAQ8H,oBACR7G,EAAU8G,cAAgBlH,KAG9B,IAAAykB,QAAOzkB,GACPA,OAAY3C,EAEpB,IAGG0lB,CACX,C,uGCvHa,EAAAL,cAAiE,SAC1EnC,EACAjf,EACAc,EACAjD,EACAgkB,GAEA,IAAMpC,EAAmB5hB,EAAQ4hB,iBASjC,OANI3e,EAAQ5B,aAAeugB,EAAiBpJ,QACxCoJ,EAAiBpJ,OAAQ,EAAH,eACfoJ,EAAiBC,UAIpB5e,EAAQ6a,aACZ,IAAK,OACD9d,EAAQshB,cAAchW,KAAK8V,EAAKjf,EAAQc,EAASjD,EAASgkB,GAC1D,MAEJ,IAAK,KACDhkB,EAAQshB,cAAchoB,GAAG8nB,EAAKjf,EAAQc,EAASjD,EAASgkB,GACxD,MAEJ,IAAK,QACDhkB,EAAQshB,cAAcnc,MAAMic,EAAKjf,EAAQc,EAASjD,EAASgkB,GAC3D,MAEJ,IAAK,UACDhkB,EAAQshB,cAAcyB,eAAe3B,EAAKjf,EAAQc,EAASjD,EAASgkB,GACpE,MAEJ,IAAK,SACDhkB,EAAQshB,cAAcqB,cAAcvB,EAAKjf,EAAQc,EAASjD,EAASgkB,GAMvE/gB,EAAQ5B,YAAcugB,EAAiBpJ,QACvCoJ,EAAiBrG,KAAM,EAAH,eACbqG,EAAiBC,SAGhC,C,kGCrDA,cACA,UACA,UASa,EAAA4B,uBAA0E,SACnFrU,EACAjN,EACAc,EACAjD,EACAgkB,GAEQ,IAAA9rB,EAAe+K,EAAO,KAAhB3G,EAAS2G,EAAO,KAE1B3G,IACA,IAAAiG,aAAYvC,EAAS,KAAK,W,MAChBrI,EAAIktB,SAASjM,cAAc,MAEjC,IAAAC,gBAAelhB,EAAGwK,GAClBA,EAAO2W,YAAYnhB,IAEnB,IAAAomB,aAAYpmB,EAAGqI,EAAQge,eAAe1hB,KAAMA,EAAKC,OAAQyD,IACzD,IAAA+d,aAAYpmB,EAAGqI,EAAQge,eAAexhB,QAASF,EAAKE,QAASwD,GAE7DgkB,SAAAA,EAAcxd,KAAK7O,GACE,QAArB,EAAAqI,EAAQqhB,qBAAa,cAArBrhB,EAAwB1D,EAAM3E,EAClC,IAGAO,IACA,IAAAqK,aAAYvC,EAAS,QAAQ,W,MACnB6lB,EAAWhB,SAASjM,cAAc,SAExC,IAAAC,gBAAegN,EAAU1jB,GACzBA,EAAO2W,YAAY+M,IAEnB,IAAA9H,aAAY8H,EAAU7lB,EAAQge,eAAe9lB,KAAMA,EAAKqE,OAAQyD,GAEhEgkB,SAAAA,EAAcxd,KAAKqf,GACE,QAArB,EAAA7lB,EAAQqhB,qBAAa,cAArBrhB,EAAwB9H,EAAM2tB,EAClC,GAER,C,uFChDA,cACA,UACA,UACA,UACA,UAWa,EAAAnC,YAA2D,SACpEtC,EACAjf,EACAhH,EACA6E,EACA4jB,G,kBAEA,IAAI,IAAAzF,cAAahjB,GAEb,OAAOyoB,EAGX,IAAIkC,EAAY9lB,EAAQ8H,kBAAoB3M,EAAM4M,mBAAgB7J,EAE9D4nB,GACAlC,GAAU,IAAAM,oBAAmB/hB,EAAQ2jB,EAAWlC,IAEhD,IAAA/K,gBAAeiN,KAEfA,EAAY1E,EAAIxI,cAAc,SAE1B5Y,EAAQ8H,oBACR3M,EAAM4M,cAAgB+d,GAG1B3jB,EAAOgiB,aAAa2B,EAAWlC,IAE/B,IAAA7F,aAAY+H,EAAW9lB,EAAQge,eAAepd,MAAOzF,EAAMoB,OAAQyD,IACnE,IAAA+d,aAAY+H,EAAW9lB,EAAQge,eAAe7iB,MAAOA,EAAMoB,OAAQyD,IACnE,IAAA+d,aAAY+H,EAAW9lB,EAAQge,eAAe/V,YAAa9M,EAAMoB,OAAQyD,IACzE,IAAA+d,aAAY+H,EAAW9lB,EAAQge,eAAexhB,QAASrB,EAAMqB,QAASwD,IAGrD,QAArB,EAAAA,EAAQqhB,qBAAa,cAArBrhB,EAAwB7E,EAAO2qB,GAE/B,IAAMtd,EAAQ4Y,EAAIxI,cAAc,SAChCkN,EAAUhN,YAAYtQ,GAEtB,IAAK,IAAIH,EAAM,EAAGA,EAAMlN,EAAMwM,KAAK/D,OAAQyE,IAAO,CAC9C,IAAME,EAAWpN,EAAMwM,KAAKU,GAE5B,GAA6B,GAAzBE,EAASQ,MAAMnF,OAAnB,CAKA,IAAM0E,EAAMtI,EAAQ8H,mBAAqBS,EAASR,eAAkBqZ,EAAIxI,cAAc,MACtFpQ,EAAMsQ,YAAYxQ,IAClB,IAAAuQ,gBAAevQ,GAEVC,EAASR,gBACN/H,EAAQ8H,oBACRS,EAASR,cAAgBO,IAG7B,IAAAyV,aAAYzV,EAAItI,EAAQge,eAAezV,SAAUA,EAAShM,OAAQyD,IAGjD,QAArB,EAAAA,EAAQqhB,qBAAa,cAArBrhB,EAAwBuI,EAAUD,GAElC,IAAK,IAAIiC,EAAM,EAAGA,EAAMhC,EAASQ,MAAMnF,OAAQ2G,IAAO,CAClD,IAAMR,EAAOxB,EAASQ,MAAMwB,GAE5B,GAAIR,EAAK1I,WAAY,CACjB,IAAMuG,EAAiC5H,EAAQ4H,gBAAkB,CAC7D5F,KAAM,QACN7G,MAAO2qB,EACPzb,YAAaE,EACbD,WAAYC,EACZJ,SAAU9B,EACV+B,QAAS/B,GAGTT,EAAezM,OAAS2qB,IACxBle,EAAe0C,WAAa6M,KAAK4O,IAAIne,EAAe0C,WAAYC,GAChE3C,EAAewC,QAAU+M,KAAK4O,IAAIne,EAAewC,QAAS/B,IAG9DrI,EAAQ4H,eAAiBA,C,CAG7B,IAAKmC,EAAK+W,YAAc/W,EAAK8W,SAAU,CACnC,IAAIxlB,EACC2E,EAAQ8H,mBAAqBiC,EAAKhC,eACnCqZ,EAAIxI,cAAc7O,EAAK6W,SAAW,KAAO,MAE7CtY,EAAGwQ,YAAYzd,GAOf,IALA,IAAI+N,EAAU,EACVF,EAAU,EACVO,EAAQtO,EAAMqP,OAAOD,GACrBb,EAASnB,EAASmB,OAEsB,QAArC,EAAyB,QAAzB,EAAAvO,EAAMwM,KAAKU,EAAMe,UAAQ,eAAEL,MAAMwB,UAAI,eAAEuW,UAAW1X,IACrDM,GAAUvO,EAAMwM,KAAKU,EAAMe,GAASM,OAExC,KAAoC,QAA7B,EAAAnB,EAASQ,MAAMwB,EAAMrB,UAAQ,eAAE2X,SAAU3X,IAC5CO,GAAStO,EAAMqP,OAAOD,EAAMrB,GAG5BE,EAAU,IACV/N,EAAG+N,QAAUA,GAGbF,EAAU,IACV7N,EAAG6N,QAAUA,KAGZa,EAAKhC,eAAkBgC,EAAKxN,OAAOyU,eAAgB,IAAA+L,aAAY5hB,MAC5DsO,EAAQ,IAAMpO,EAAG2F,MAAMyI,QACvBpO,EAAG2F,MAAMyI,MAAQA,EAAQ,MAGzBC,EAAS,IAAMrO,EAAG2F,MAAM0I,SACxBrO,EAAG2F,MAAM0I,OAASA,EAAS,OAI9BK,EAAKhC,gBACF/H,EAAQ8H,oBACRiC,EAAKhC,cAAgB1M,IAGzB,IAAA0iB,aAAY1iB,EAAI2E,EAAQge,eAAepd,MAAOmJ,EAAKxN,OAAQyD,IAC3D,IAAA+d,aAAY1iB,EAAI2E,EAAQge,eAAenU,UAAWE,EAAKxN,OAAQyD,IAC/D,IAAA+d,aAAY1iB,EAAI2E,EAAQge,eAAepJ,gBAAiB7K,EAAKxN,OAAQyD,IACrE,IAAA+d,aAAY1iB,EAAI2E,EAAQge,eAAexhB,QAASuN,EAAKvN,QAASwD,IAGlEA,EAAQshB,cAAcC,mBAAmBH,EAAK/lB,EAAI0O,EAAM/J,GAEnC,QAArB,EAAAA,EAAQqhB,qBAAa,cAArBrhB,EAAwB+J,EAAM1O,E,IAO1C,OAFkB,QAAlB,EAAA2E,EAAQuB,kBAAU,SAAEyG,QAAQ8d,EAAW3qB,GAEhCyoB,CACX,C,sFC1JA,cAMa,EAAAD,WAA2D,SACpEvC,EACAjf,EACAc,EACAjD,EACAgkB,GAEA,IAAMrZ,EAAMyW,EAAI4E,eAAe/iB,EAAQqI,MACjC/L,EAAU6hB,EAAIxI,cAAc,QAElCzW,EAAO2W,YAAYvZ,GACnBA,EAAQuZ,YAAYnO,IAEpB,IAAAsZ,qBAAoB7C,EAAKzW,EAAKpL,EAAS0D,EAASjD,EAASgkB,EAC7D,C,qFCpBA,cAEMiC,EAAe,CAAC,OAAQ,IAAK,KAAM,IAAK,IAAK,MAAO,MAAO,SAAU,IAAK,IAAK,QA4BrF,SAASC,EAAkBC,EAAuBC,GAC9C,IAAMC,EAAQF,EAASG,WACjBC,EAAQH,EAASE,WAEvB,GAAID,EAAMziB,QAAU2iB,EAAM3iB,OACtB,OAAO,EAGX,IAAK,IAAItJ,EAAI,EAAGA,EAAI+rB,EAAMziB,OAAQtJ,IAC9B,GAAI+rB,EAAM/rB,GAAGya,MAAQwR,EAAMjsB,GAAGya,MAAQsR,EAAM/rB,GAAG0D,OAASuoB,EAAMjsB,GAAG0D,MAC7D,OAAO,EAIf,OAAO,CACX,CAtCA,qBAA0B+B,GACtB,IAAK,IAAIJ,EAAQI,EAAKsC,WAAY1C,GAAS,CACvC,IAAMyf,EAAOzf,EAAM2C,YAEnB,GACI8c,IACA,IAAA1d,cAAa/B,EAAO,kBACpB,IAAA+B,cAAa0d,EAAM,iBACnBzf,EAAMjD,SAAW0iB,EAAK1iB,SACtBupB,EAAavlB,QAAQf,EAAMjD,UAAY,GACvCwpB,EAAkBvmB,EAAOyf,GAC3B,CACE,KAAOA,EAAK/c,YACR1C,EAAMmZ,YAAYsG,EAAK/c,YAG3B+c,EAAK3W,WAAYsb,YAAY3E,E,MAE7Bzf,EAAQyf,C,CAGpB,C,oFC5BA,cACA,UACA,UAKA,oBAAgBuG,EAAS5lB,GAIrB,KAAI,IAAA2C,iBAAgB3C,GAApB,EAIA,IAAAymB,uBAAsBzmB,IACtB,IAAA0mB,WAAU1mB,GAEV,IAAK,IAAIJ,EAAQI,EAAKsC,WAAY1C,EAAOA,EAAQA,EAAM2C,YACnDqjB,EAAShmB,E,CAEjB,C,iGCrBA,cAKA,iCAAsCI,GAClC,IAAK,IAAIJ,EAAQI,EAAKsC,WAAY1C,GAC9B,IACI,IAAA+B,cAAa/B,EAAO,iBACH,QAAjBA,EAAMjD,SACqB,GAA3BiD,EAAM2mB,WAAW1iB,OACnB,CACE,IAAM2J,EAAO5N,EACTikB,EAAUjkB,EAAM2C,YAGpB,IAFA3C,EAAQA,EAAM2C,YAEPiL,EAAKmZ,WAAW,CACnB,IAAMC,EAAUpZ,EAAKmZ,UACrB3mB,EAAKokB,aAAawC,EAAS/C,GAC3BA,EAAU+C,C,CAGd5mB,EAAKgkB,YAAYxW,E,MAEjB5N,EAAQA,EAAM2C,WAG1B,C,qFCbA,uBACI/C,EACA8iB,EACA9lB,EACAyD,GAEAqiB,EAASthB,SAAQ,SAAA6lB,GACbA,SAAAA,EAAUrqB,EAAQgD,EAASS,EAC/B,GACJ,C,+FCvBA,cAMA,+BACIohB,EACAyF,EACAC,EACA7jB,EACAjD,EACAgkB,G,MAEK6C,EAAYxkB,aACbrC,EAAQ4hB,iBAAiBC,QAAQ5e,QAAU4jB,IAG/C,IAAA9I,aAAY+I,EAAe9mB,EAAQge,eAAetJ,kBAAmBzR,EAAQ1G,OAAQyD,GAErFgkB,SAAAA,EAAcxd,KAAKqgB,GACnB7mB,EAAQshB,cAAckC,iBAAiBpC,EAAK0F,EAAe7jB,EAASjD,EAASgkB,IAE7E,IAAAjG,aAAY+I,EAAe9mB,EAAQge,eAAerJ,oBAAqB1R,EAAQ1G,OAAQyD,GAElE,QAArB,EAAAA,EAAQqhB,qBAAa,cAArBrhB,EAAwBiD,EAAS4jB,EACrC,C,2GC1BA,cAKA,8BAAmC1kB,EAAc5C,EAAeqkB,G,MAC5D,GAAIrkB,EAAQkJ,YAActG,EAAQ,CAI9B,KAAOyhB,GAAWA,GAAWrkB,KAAY,IAAAmD,iBAAgBkhB,IAAU,CAC/D,IAAMxE,EAAOwE,EAAQthB,YAEH,QAAlB,EAAAshB,EAAQnb,kBAAU,SAAEsb,YAAYH,GAChCA,EAAUxE,C,CAGVwE,GAAWA,GAAWrkB,EACtBqkB,EAAUA,EAAQthB,YAElBH,EAAOgiB,aAAa5kB,EAASqkB,E,MAGjCzhB,EAAOgiB,aAAa5kB,EAASqkB,GAGjC,OAAOA,CACX,EAKA,sBAA2BrW,G,MACjB6R,EAAO7R,EAAKjL,YAGlB,OAFe,QAAf,EAAAiL,EAAK9E,kBAAU,SAAEsb,YAAYxW,GAEtB6R,CACX,C,qGCrCA,UAUA,uBACIpf,EACA+mB,EACAla,GAEA,IAAMma,EACyB,iBAApBD,EACD,EAAArvB,6BAA6BqvB,GAC7BA,EAEV,GAAIC,EAAW,CACX,IAAM9W,EAAiBlQ,EAAQkQ,eAE/B,IACIlQ,EAAQkQ,gBAAiB,EAAH,8BACfA,GACA8W,GAGPna,G,SAEA7M,EAAQkQ,eAAiBA,C,OAG7BrD,GAER,C,kHClCA,IAAMoa,EAAe,CACjB,OACA,SACA,SACA,SACA,QACA,SACA,SACA,QACA,QACA,UAEEC,EAAkB,mCAOxB,+BAAoCC,GAChC,IAAMrpB,EAAiB,CAAC,EAaxB,OAZgBqpB,GAAkB,IAAI1Q,QAAQ,MAAO,KAAKyD,MAAM,KAEzDnZ,SAAQ,SAAAqmB,GACPH,EAAavmB,QAAQ0mB,IAAM,IAAMtpB,EAAOkD,MACxClD,EAAOkD,MAAQomB,EACRF,EAAgBrV,KAAKuV,KAAOtpB,EAAO2L,MAC1C3L,EAAO2L,MAAQ2d,EACRA,IAAMtpB,EAAOyc,QACpBzc,EAAOyc,MAAQ6M,EAEvB,IAEOtpB,CACX,EAOA,8BAAmCE,GAC/B,MAAO,CAACA,EAAMyL,OAAS,GAAIzL,EAAMgD,OAAS,GAAIhD,EAAMuc,OAAS,IAAIJ,KAAK,KAAKC,QAAU,MACzF,C,+FC7CA,cAEA,UAMMiN,GAAmB,IAAA9Y,0BAEnB+Y,GAAgC,IAAAhZ,wBAAsD,CACxFiZ,QAASF,EACTG,SAAUH,EACVI,YAAaJ,EACbK,aAAcL,EACdM,WAAYN,EACZO,cAAeP,EACfQ,SAAUR,EACVhiB,KAAK,IAAAyiB,0BACLC,cAAeV,EACfW,aAAcX,IAQlB,+BACIliB,EACA0H,GAEA,OAAO,IAAA4B,gBAAetJ,EAAO0H,EAAUya,EAC3C,C,kGCjCA,cACA,UAIMW,GAAoC,IAAA3Z,wBACtC,CACI4Z,iBAAiB,IAAAC,0BAAwB,GACzCC,gBAAgB,IAAAD,0BAAwB,KAE5C,GACA,GAQJ,mCACIpe,EACA8C,GAEA,OAAO,IAAA4B,gBAAe1E,EAAM8C,EAAUob,EAC1C,C,+FCvBA,cAEA,UAOMI,GAAuB,IAAAP,yBACzB,OACA5pB,GACA,GAGEoqB,GAAoB,IAAAH,0BAAwB,GAE5CI,GAAwB,IAAAja,wBAC1B,CACIka,eAAgBH,EAChBI,kBAAmBJ,EACnBK,oBAAqBL,EACrBM,aAAcL,EACdM,eAAgBP,EAChBQ,eAAgBP,EAChBQ,iBAAkBR,EAClBS,cAAeT,EACfU,YAAaX,EACbY,WAAYZ,EACZa,mBAAmB,IAAA3a,yBACf,OACArQ,EAAqB,KAIzBjD,cAAeotB,IAEnB,GACA,GAQJ,+BACIltB,EACA0R,GAEA,OAAO,IAAA4B,gBAAetT,EAAO0R,EAAU0b,EAC3C,C,iHCpDA,IAAMY,EAAe,4DAQrB,yBAA8BC,GAC1B,MARiB,gBAQG1oB,QAAQ0oB,IAAS,CACzC,EAQA,mBAAwBA,G,MACdlxB,EAA0B,QAAnB,EAAAkxB,aAAI,EAAJA,EAAMC,WAAW,UAAE,QAAI,EACpC,OAAe,KAARnxB,GAAuB,IAARA,GAAcixB,EAAatX,KAAKuX,EAC1D,EASA,yBAA8Bze,EAAa2e,GACvC,OAAO3e,EAAI8L,QAAQ6S,EAAY,WAAa,WAAY,IAC5D,C,gFChCA,UAmBA,cAQI,WAAYC,EAA4B3sB,QAAA,IAAAA,IAAAA,EAAA,IAAxC,MACI,YAAM2sB,EAAY3sB,EAAS,EAAA4sB,+BAA6B,K,OAEpD5sB,EAAQ6sB,YAIR,EAAKC,qB,CAEb,CAkDJ,OAlEY,oBAsBR,YAAAA,mBAAA,SACIC,EACAC,GAEA,IAAMC,EAAOC,KAAKC,UAElB,OAAOF,EAAKG,IAAIN,mBAAmBG,EAAMF,EAAQC,EACrD,EAQA,YAAAK,gBAAA,SACI/pB,EACAypB,EACAtI,GAEA,IAAMwI,EAAOC,KAAKC,UAElB,OAAOF,EAAKG,IAAIC,gBAAgBJ,EAAM3pB,EAAOypB,EAAQtI,EACzD,EAKA,YAAA6I,gBAAA,WACI,IAAML,EAAOC,KAAKC,UAElB,OAAOF,EAAKG,IAAIE,gBAAgBL,EACpC,EAOA,YAAAM,gBAAA,SAAgBlqB,GACZ,IAAM4pB,EAAOC,KAAKC,UAElBF,EAAKG,IAAIG,gBAAgBN,EAAM5pB,EACnC,EACJ,EAnEA,CAlBA,QAmBYmqB,Y,uHCpBZ,UAEA,UAiBa,EAAAV,mBAAyC,SAACG,EAAMF,EAAQC,GACjE,IAAIS,EAAcT,EAAoB,KAAOC,EAAKS,MAAMD,YAOxD,GALIA,GAAeR,EAAKU,UAAUC,qBAE9BH,GAAc,IAAAI,YAAWJ,EAAa,CAAEK,sBAAsB,KAG9DL,EACA,OAAOA,EAEP,IAAMpqB,EAAY2pB,GAAqBC,EAAKG,IAAIE,gBAAgBL,SAAS3rB,EACnEgC,EAWd,SACI2pB,EACA5pB,EACA0pB,GAEA,IAAMhuB,EAAgBkuB,EAAKG,IAAIW,oBAAoBd,GAC7Ce,EAAoBjB,EACpB,EAAAnM,wBAAuB,sDAAC7hB,IAAa,YAAMkuB,EAAKgB,0BAA4B,KAAG,IAAElB,IAAM,KACvF,IAAAluB,mCAAkCouB,EAAKiB,wBAAyBnvB,GAEtE,OAAO,IAAAghB,mBAAkBkN,EAAKN,WAAYqB,EAAmB3qB,EACjE,CAtBsB8qB,CAA2BlB,EAAM5pB,EAAW0pB,GAO1D,OALKA,GAAWC,IACZC,EAAKS,MAAMD,YAAcnqB,EACzB2pB,EAAKS,MAAMU,gBAAkB/qB,GAG1BC,CAEf,C,6FCjCa,EAAAyqB,oBAA2C,SAAAd,GAC5C,IAAAU,EAA2DV,EAAI,UAApDttB,EAAgDstB,EAAI,OAA5CjZ,EAAwCiZ,EAAI,iBAA1BN,EAAsBM,EAAI,WAAdS,EAAUT,EAAI,MAEjE7pB,EAAyB,CAC3B6Q,WAAY0Z,EAAU1Z,WACtBzQ,cAAe7D,EAAO6D,cACtBwQ,iBAAkBA,EAClB0T,uBAAuB,EACvBxc,mBAAmB,EACnBvG,WAAY+oB,EAAM/oB,YAMtB,OAYJ,SAAsBhC,EAAsBS,G,MAClCgB,EAA0C,QAAlC,EAAAzB,aAAO,EAAPA,EAASoZ,cAAcoD,mBAAW,eAAEC,iBAAiBzc,GAE3C,QAApByB,aAAK,EAALA,EAAO/E,aACP+D,EAAQhE,WAAY,EAE5B,CArBIivB,CAAa1B,EAAYvpB,GAM7B,SAAwBT,EAAsBS,G,MACpCkrB,GAAgD,QAAhC,EAAA3rB,aAAO,EAAPA,EAASiK,+BAAuB,eAAEC,QAAS,EAC3D0hB,EAAc5rB,EAAQ6rB,YAExBD,EAAc,GAAKD,EAAgB,IACnClrB,EAAQoI,UAAY+O,KAAKkC,MAAO6R,EAAgBC,EAAe,KAAO,IAE9E,CAZIE,CAAe9B,EAAYvpB,GAEpBA,CACX,C,yFCba,EAAAkqB,gBAAmC,SAAAL,G,MAC5C,OAAiC,QAA1B,EAAAA,EAAKS,MAAMU,uBAAe,QAGrC,SAAyBnB,GAErB,IAAMyB,EAAUzB,EAAKG,IAAIuB,oBAAoB1B,GAE7C,OAAoB,GAAhByB,EAAQtpB,MAAsCspB,EAAQE,OAAO,GACtD,CACHxpB,KAAM,QACNC,MAAOqpB,EAAQE,OAAO,IAEH,GAAhBF,EAAQtpB,MAA8CspB,EAAQG,YAC9D,CACHzpB,KAAM,QACN7G,MAAOmwB,EAAQnwB,MACfkP,YAAaihB,EAAQG,YAAYC,UAAU1uB,EAC3CsN,WAAYghB,EAAQG,YAAYE,SAAS3uB,EACzCmN,SAAUmhB,EAAQG,YAAYC,UAAUE,EACxCxhB,QAASkhB,EAAQG,YAAYE,SAASC,GAEnB,GAAhBN,EAAQtpB,KACR,CACHA,KAAM,QACNmD,MAAOmmB,EAAQnmB,OAGZ,IAEf,CA7ByC0mB,CAAgBhC,EACzD,C,yGCXA,UAaa,EAAAI,gBAAmC,SAACJ,EAAM3pB,EAAOypB,EAAQtI,GAClE,IAAM1lB,EAAgBkuB,EAAKG,IAAIW,oBAAoBd,GAC7CiC,EAAoBnC,EACpB,EAAAlM,wBAAuB,sDAAC9hB,IAAa,YAAMkuB,EAAKkC,0BAA4B,KAAG,IAAEpC,IAAM,KACvF,IAAAjM,mCAAkCmM,EAAKmC,wBAAyBrwB,GAChEsE,GAAY,IAAA2c,mBACdiN,EAAKN,WAAW5Q,cAChBkR,EAAKN,WACLrpB,EACA4rB,EACAzK,GAeJ,OAZAwI,EAAKN,WAAWpI,YAEX0I,EAAKU,UAAUC,qBAChBX,EAAKS,MAAMU,gBAAkB/qB,QAAa/B,EAEtC+B,GACA4pB,EAAKG,IAAIG,gBAAgBN,EAAM5pB,GAGnC4pB,EAAKS,MAAMD,YAAcnqB,GAGtBD,CACX,C,yFCjCa,EAAAkqB,gBAAmC,SAACN,EAAM5pB,GAEnD,IAAMqrB,EACgB,SAAlBrrB,EAAU+B,KACJ,CACIA,KAAM,EACNwpB,OAAQ,CAACvrB,EAAUgC,OACnBgqB,gBAAiBhsB,EAAUgC,MAAMC,WAEnB,SAAlBjC,EAAU+B,KACV,CACIA,KAAM,EACNwpB,OAAQ,GACRS,iBAAiB,EACjB9mB,MAAOlF,EAAUkF,OAErB,CACInD,KAAM,EACNwpB,OAAQ,GACRS,iBAAiB,EACjB9wB,MAAO8E,EAAU9E,MACjBswB,YAAa,CACTC,UAAW,CACP1uB,EAAGiD,EAAUoK,YACbuhB,EAAG3rB,EAAUkK,UAEjBwhB,SAAU,CACN3uB,EAAGiD,EAAUqK,WACbshB,EAAG3rB,EAAUmK,WAKnCyf,EAAKG,IAAIkC,OAAOrC,EAAMyB,EAC1B,C,4FCzCA,cAWa,EAAAa,iBAAqC,SAACC,EAAYC,GAE3D,IAAMxC,EAAOuC,EAEb,GAAIC,KAAUxC,EAAKU,UAAUC,mBACzB,GAAI6B,EAAM,CACN,IAAMnsB,EAAS2pB,EAAKS,MAAMD,YAAkD,KAApCR,EAAKG,IAAIN,mBAAmBG,GAC9D5nB,EAAQ4nB,EAAKG,IAAIsC,kBAAkBzC,GAAM,GAIzC0C,EAAW1C,EAAKN,WAAW5Q,cAAc6T,yBACzCC,EAAgBxqB,IAAS,IAAAyqB,kBAAiB7C,EAAKN,WAAYtnB,GAEjE4nB,EAAKG,IAAI2C,aACL9C,EACA,CACI+C,UAAW,GACXL,SAAQ,EACRE,cAAa,IAEjB,IAKC5C,EAAKS,MAAMD,aAAenqB,IAC3B2pB,EAAKS,MAAMD,YAAcnqB,GAG7B2pB,EAAKU,UAAUsC,wBAA0BJ,EACzC5C,EAAKU,UAAUC,mBAAqB+B,C,MAEpC1C,EAAKU,UAAUC,mBAAqB,KACpCX,EAAKU,UAAUsC,wBAA0B,KAEzChD,EAAKG,IAAI2C,aACL9C,EACA,CACI+C,UAAW,KAEf,GAGA/C,EAAKS,MAAMD,aACXR,EAAKG,IAAIC,gBAAgBJ,EAAMA,EAAKS,MAAMD,YAI1D,C,yGC5DA,cACA,UAeA,aAQI,WAAoByC,GAApB,WAAoB,KAAAA,MAAAA,EANZ,KAAAC,OAAqC,KA8FrC,KAAAC,wBAA0B,W,OACf,QAAX,IAAKD,cAAM,eAAEE,aACb,EAAKC,kBAAkB,EAAKH,OAEpC,CA1FA,CA8JJ,OAzJI,YAAAI,QAAA,WACI,MAAO,mBACX,EAQA,YAAAC,WAAA,SAAWL,GAEPjD,KAAKiD,OAASA,EACdjD,KAAKiD,OAAOM,cAAcC,iBAAiB,kBAAmBxD,KAAKkD,wBACvE,EAOA,YAAAO,QAAA,WACQzD,KAAKiD,SACLjD,KAAKiD,OACAM,cACAG,oBAAoB,kBAAmB1D,KAAKkD,yBACjDlD,KAAKiD,OAAS,KAEtB,EAKA,YAAAU,SAAA,WACI,OAAO3D,KAAKgD,KAChB,EAQA,YAAAY,cAAA,SAAcC,GACV,GAAK7D,KAAKiD,OAIV,OAAQY,EAAMf,WACV,KAAK,EACG9C,KAAK8D,iBAAiBD,IACtB7D,KAAK+D,kBAET,MAEJ,KAAK,EAEG/D,KAAKoD,kBAAkBpD,KAAKiD,QAAQ,GAExC,MAEJ,KAAK,GACDjD,KAAKoD,kBAAkBpD,KAAKiD,QAC5B,MAEJ,KAAK,EAES,MAA8BY,EAA5BG,EAAY,eAAE7tB,EAAS,YAE3B6tB,GAAgBhE,KAAKgD,MAAMvrB,YAC3BuoB,KAAKgD,MAAMzC,YAAcyD,EACzBhE,KAAKgD,MAAM9B,gBAAkB/qB,GAE7B6pB,KAAK+D,kBAMzB,EAQQ,YAAAA,gBAAR,W,OACoB,QAAX,EAAA/D,KAAKiD,cAAM,eAAEgB,oBACdjE,KAAKgD,MAAMzC,iBAAcnsB,EACzB4rB,KAAKgD,MAAM9B,qBAAkB9sB,EAErC,EAEQ,YAAAgvB,kBAAR,SAA0BH,EAA6BiB,G,MAC7ChD,EAAkBlB,KAAKgD,MAAM9B,gBACnClB,KAAKgD,MAAM9B,qBAAkB9sB,EAE7B,IAAM+vB,EAAalB,EAAO7C,wBAAqBhsB,EACzCgC,EAAQ4pB,KAAKgD,MAAMzC,aAErB2D,GACChD,GACAiD,IACA,IAAAC,gBAAeD,EAAYjD,GAa5BlB,KAAKgD,MAAM9B,gBAAkBA,EATxB9qB,GACA+tB,IACqB,QAArB,EAAAnE,KAAKgD,MAAMvrB,kBAAU,eAAE4sB,mBAAmBjuB,EAAO+tB,EAAYjD,IAI9DlB,KAAKgD,MAAM9B,gBAAkBiD,EAF7BnE,KAAK+D,iBAOjB,EAEQ,YAAAD,iBAAR,SAAyBD,G,MACbS,EAAmCT,EAAK,SAIhD,QAJ2CA,EAAK,wBAS5CS,EAASC,kBAOS,IAAlBD,EAASE,SAM4B,UAAV,QAA1B,EAAAxE,KAAKgD,MAAM9B,uBAAe,eAAEhpB,OACxB8nB,KAAKgD,MAAM9B,gBAAgB/oB,MAAMC,aACtC,IAAAqsB,kBAAiBH,GAMzB,EACJ,EAxKA,G,YAgLA,yCAA8CtB,GAC1C,OAAO,IAAI0B,EAAwB1B,EACvC,C,uGClMA,UACA,UAEA,SACA,UACA,UAEA,UASA,UAwBA,aAQI,WAAoBA,GAApB,WAAoB,KAAAA,MAAAA,EAPZ,KAAAC,OAAqC,KACrC,KAAA0B,SAAgC,KAkJhC,KAAAC,QAAU,SAACf,GACf,GAAI,EAAKZ,QAwDjB,SAA0BY,GACtB,QAAUA,EAAyBgB,aACvC,CA1D2BC,CAAiBjB,GAAQ,CACxC,IAAM,EAAS,EAAKZ,OAEd8B,EAAelB,EAAMgB,eAEvBE,aAAY,EAAZA,EAAcC,SACdnB,EAAMoB,kBACN,IAAAC,wBACI,IAAAC,SAAQJ,EAAaC,OACrB,CACII,uBAAwB,EAAKpC,MAAMoC,yBAEvC,GACFC,MAAK,SAACR,GACC,EAAOS,eACR,aAAM,EAAQT,EAEtB,I,CAGZ,CAjKkD,CA4LtD,OAvLI,YAAAxB,QAAA,WACI,MAAO,uBACX,EAMA,YAAAC,WAAA,SAAWL,GAAX,WACIjD,KAAKiD,OAASA,EACdjD,KAAK2E,SAAW3E,KAAKiD,OAAOsC,mBAAmB,CAC3CC,MAAO,SAAAC,GAAK,SAAKb,QAAQa,EAAb,EACZC,KAAM,SAAAD,GAAK,SAAKE,UAAUF,GAAG,EAAlB,EACXG,IAAK,SAAAH,GAAK,SAAKE,UAAUF,GAAG,EAAlB,GAElB,EAKA,YAAAhC,QAAA,WACQzD,KAAK2E,UACL3E,KAAK2E,WAET3E,KAAK2E,SAAW,KAChB3E,KAAKiD,OAAS,IAClB,EAKA,YAAAU,SAAA,WACI,OAAO3D,KAAKgD,KAChB,EAEQ,YAAA2C,UAAR,SAAkB9B,EAAcgC,GAAhC,WACI,GAAK7F,KAAKiD,OAAV,CAGA,IAAM9sB,EAAY6pB,KAAKiD,OAAO7C,kBAC9B,GAAIjqB,IAAgC,SAAlBA,EAAU+B,OAAoB/B,EAAUgC,MAAMC,WAAY,CACxE,IAAMhC,EAAQ4pB,KAAKiD,OAAOrD,qBAEpBkG,GAAa,IAAAnF,YAAWvqB,EAAO,CACjCwqB,uBAAsBZ,KAAKiD,OAAOlc,cAC5B,SAACtD,EAAMvL,G,MACH,GAAY,SAARA,EAAJ,CAGI,IAAMlE,EAASyP,EAAKoX,WAAU,GAW9B,OATW,QAAX,IAAKoI,cAAM,SAAE8C,qBACT/xB,EAAM,GAIVA,EAAOkD,MAAMuZ,MAAQzc,EAAOkD,MAAMuZ,OAAS,UAC3Czc,EAAOkD,MAAM0P,gBACT5S,EAAOkD,MAAM0P,iBAAmB,UAE7B5S,C,CAEf,IAGa,UAAnBmC,EAAU+B,OACV,IAAA8tB,mBAAkB,CAACF,IAAa,SAACG,EAAMC,GACnC,GAAIA,aAAY,EAAZA,EAAc70B,MAAO,CACrB,IAAMA,EAAQ60B,aAAY,EAAZA,EAAc70B,MAS5B,OARAA,EAAMwM,KAAOxM,EAAMwM,KACd5K,KAAI,SAAAsL,GACD,OAAO,EAAP,8BACOA,GAAG,CACNU,MAAOV,EAAIU,MAAMqC,QAAO,SAAArB,GAAQ,OAAAA,EAAK1I,UAAL,KAExC,IACC+J,QAAO,SAAA/C,GAAO,OAAAA,EAAIU,MAAMnF,OAAS,CAAnB,KACZ,C,CAEX,OAAO,CACX,IAEJ,IAAM,EAAUkmB,KAAKmG,WAAWnG,KAAKiD,QASjCmD,EAyGhB,SAA4BjwB,EAAgCkwB,G,MACxD,IAAKlwB,EACD,OAAO,KAEX,IAAIiwB,EAAyB,KAC7B,GAAuB,UAAnBjwB,EAAU+B,KAAkB,CAC5B,IAAM7G,EAAQg1B,EAAQC,cAAc,IAAInwB,EAAU9E,MAAMyS,IAClDyiB,EACwC,IAAvB,QAAnB,EAAAl1B,EAAMwN,qBAAa,eAAE2nB,mBAAyBn1B,EAAMwN,cAAgBxN,EACxE+0B,GAAW,IAAAxO,aAAY2O,E,MACpB,GAAuB,UAAnBpwB,EAAU+B,KAAkB,CACnC,IAAMmD,EAAQgrB,EAAQC,cAAc,IAAMnwB,EAAUkF,MAAMyI,IAEtDzI,IACA+qB,GAAW,IAAAxO,aAAYvc,G,MAG3B+qB,EAAWjwB,EAAUgC,MAGzB,OAAOiuB,CACX,CA9HyCK,EARJ,IAAA3T,mBACrB,EAAQjE,cACR,EACAiX,GACA,IAAAnS,2BACA,EAAA4D,eAG8D,GAC9D6O,IACAA,EAAWpG,KAAKiD,OAAOyD,mBAAmB,EAA+B,CACrEC,WAAY,EACZxuB,MAAOiuB,EACP9B,SAAUT,EACVgC,MAAK,IACN1tB,SAGC,IAAAyuB,qBAAoBR,GAGxBpG,KAAKiD,OAAO4D,UAAS,SAAA5D,GACjB6D,EAA2B,GAC3B7D,EAAO8D,QACN9D,EAA+B5C,gBAAgBlqB,GAE5C0vB,IACA,IAAAmB,wBACI/D,EACA,OACA,SAAC7sB,EAAOF,GAQJ,O,IANI,IAAA+wB,iBAAgB7wB,EAAO,GAAIF,GAASgxB,eAGpC,IAAA3wB,uBAAsBH,IAGnB,CACX,GACA,CACI+wB,aAAc,OAI9B,KAEAL,EAA2B,E,EAGvC,EAyBQ,YAAAX,WAAR,SAAmBlD,GACf,IAAMrzB,EAAMqzB,EAAOmE,cACf,oBACA,WACI,IAAMf,GAAU,IAAAvX,eAAa,EAEzBmU,EAAOM,eAKX,OAFAN,EAAOM,cAAc8D,KAAKrY,YAAYqX,GAE/BA,CACX,IACA,SAAAA,GAAO,MAAI,OAAkB,QAAlB,EAAAA,EAAQ1nB,kBAAU,eAAEsb,YAAYoM,EAAQ,IAUvD,OAPAz2B,EAAIsH,MAAM0P,gBAAkB,QAC5BhX,EAAIsH,MAAMuZ,MAAQ,QAClB7gB,EAAIwnB,WAAWngB,SAAQ,SAAAwM,GAAQ,OAAA7T,EAAIqqB,YAAYxW,EAAhB,IAE/B7T,EAAIsH,MAAMhI,QAAU,GACpBU,EAAIm3B,QAEGn3B,CACX,EACJ,EApMA,GAsMA,SAASk3B,EAA2BT,GAChCA,EAAQnvB,MAAM0P,gBAAkB,GAChCyf,EAAQnvB,MAAMuZ,MAAQ,GACtB4V,EAAQnvB,MAAMhI,QAAU,QACxB,IAAA6f,gBAAesX,EACnB,C,YAiCa,EAAA9O,cAA+B,SAACjS,EAAG7B,IACxC,IAAA7L,cAAa6L,EAAM,kBAAmB,IAAA7E,iBAAgB6E,EAAM,WAC5D,IAAA8W,MAAK9W,EAAM,QAEX,IAAA7L,cAAa6L,EAAM,kBAAoBA,EAAK0H,mBAC5C1H,EAAK4H,gBAAgB,kBAE7B,C,wGC3RA,cAgBA,0BACY,KAAA4X,OAAqC,IA6DjD,QAxDI,YAAAI,QAAA,WACI,MAAO,kBACX,EAQA,YAAAC,WAAA,SAAWL,GAEPjD,KAAKiD,OAASA,CAClB,EAOA,YAAAQ,QAAA,WACIzD,KAAKiD,OAAS,IAClB,EAQA,YAAAW,cAAA,SAAcC,GACN7D,KAAKiD,QAEI,IADDY,EAAMf,WAEN9C,KAAKsH,mBAAmBtH,KAAKiD,OAAQY,EAIrD,EAEQ,YAAAyD,mBAAR,SAA2BrE,EAA6BY,GACpD,IAAMS,EAAWT,EAAMS,SACjBE,EAAQF,EAASE,MAEvB,IAAKF,EAASC,mBAAqBV,EAAM0D,qBAErC,OAAQ/C,GACJ,KAAK,EACL,KAAK,IAGD,aAAevB,EAAQqB,GAIvC,EACJ,EA9DA,G,YAqEA,0CACI,OAAO,IAAIkD,CACf,C,0GCvFA,cACA,UACA,UACA,UACA,UAcA,aASI,WAAoBxE,GAAA,KAAAA,MAAAA,EAPZ,KAAAC,OAAqC,KACrC,KAAAwE,kBAAmB,CAQ3B,CA2FJ,OAtFI,YAAApE,QAAA,WACI,MAAO,oBACX,EAQA,YAAAC,WAAA,SAAWL,GAAX,WAEIjD,KAAKiD,OAASA,EACdjD,KAAKyH,kBACD,IAAA5zB,eAAcmsB,KAAKgD,MAAM1sB,eAAegL,QACpC,SAAApO,GAAK,YAAuC,IAAhC,EAAK8vB,MAAM1sB,cAAcpD,EAAhC,IACP4G,OAAS,CACnB,EAOA,YAAA2pB,QAAA,WACIzD,KAAKiD,OAAS,IAClB,EAKA,YAAAU,SAAA,WACI,OAAO3D,KAAKgD,KAChB,EAQA,YAAAY,cAAA,SAAcC,GACV,GAAK7D,KAAKiD,OAIV,OAAQY,EAAMf,WACV,KAAK,EAEIe,EAAMS,SAASoD,aAAgB1H,KAAKiD,OAAO0E,WAC5C3H,KAAK4H,2BAA2B/D,EAAMS,SAASuD,MAGnD,MAEJ,KAAK,EACD7H,KAAK4H,2BAA2B/D,EAAMS,SAASuD,MAC/C,MAEJ,KAAK,EACGhE,EAAMS,SAASE,OAAS,IAAeX,EAAMS,SAASE,OAAS,IAC/D,IAAAsD,oBAAmB9H,KAAKiD,QAExBjD,KAAKyH,oBACJ,IAAAhD,kBAAiBZ,EAAMS,WAvFzB,WAuFsCT,EAAMS,SAASrwB,OAEpD,aAAmB+rB,KAAKiD,OAAQjD,KAAKgD,MAAM1sB,eAG/C,MAEJ,KAAK,EACL,KAAK,GACI,IAAAyxB,uBAAsB/H,KAAKiD,UAC5B,IAAA6E,oBAAmB9H,KAAKiD,QAIxC,EAEQ,YAAA2E,2BAAR,SAAmCC,GAC3B7H,KAAKiD,QAAU4E,KACf,aAAmB7H,KAAKiD,OAAQ4E,IAChC,IAAAC,oBAAmB9H,KAAKiD,QAEhC,EACJ,EAtGA,G,YA6GA,0CAA+CD,GAC3C,OAAO,IAAIgF,EAAyBhF,EACxC,C,gEC5HA,8BAsBA,QAlBI,YAAAK,QAAA,WACI,MAAO,6BACX,EAQA,YAAAC,WAAA,WAAc,EAOd,YAAAG,QAAA,WAAW,EACf,EAtBA,G,mKCLA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UAyCA,SAAgBwE,EACZlI,EACAjtB,EACAo1B,GAEA,IAAMC,EAASpI,GAOnB,SACIoI,EACAD,GAEAp2B,OAAOC,OAAOo2B,EAAQD,EAC1B,CAVIE,CAAuBD,EAAQD,GAYnC,SACIC,EACAr1B,GAEAq1B,EAAOpH,yBAA2B,CAC9B,CACI5tB,kBAAmB,CACf9B,MAAO,EAAAg3B,oBAGfv1B,EAAQiuB,0BAEZoH,EAAOlG,yBAA2B,CAACnvB,EAAQmvB,0BAC3CkG,EAAOnH,yBAA0B,IAAAnuB,wBAAuBs1B,EAAOpH,0BAC/DoH,EAAOjG,yBAA0B,IAAArO,wBAAuBsU,EAAOlG,yBACnE,CA1BIqG,CAAwBH,EAAQr1B,GA4BpC,SAAwBq1B,GACpBA,EAAOjI,IAAIW,oBAAsB,EAAAA,oBACjCsH,EAAOjI,IAAIN,mBAAqB,EAAAA,mBAChCuI,EAAOjI,IAAIC,gBAAkB,EAAAA,gBAC7BgI,EAAOjI,IAAImC,iBAAmB,EAAAA,iBAC9B8F,EAAOjI,IAAIE,gBAAkB,EAAAA,gBAC7B+H,EAAOjI,IAAIG,gBAAkB,EAAAA,gBAC7B8H,EAAOI,YAAY1H,oBAAsB,EAAAA,oBACzCsH,EAAOI,YAAY3I,mBAAqB,EAAAA,mBACxCuI,EAAOI,YAAYpI,gBAAkB,EAAAA,gBACrCgI,EAAOI,YAAYnI,gBAAkB,EAAAA,gBACrC+H,EAAOI,YAAYlI,gBAAkB,EAAAA,eACzC,CAvCImI,CAAeL,EACnB,CA1Ca,EAAAzI,6BAGT,SAACD,EAAY3sB,GACb,IAAMo1B,EA8EV,SAAwBp1B,G,QACdL,EAASK,EAAQwD,eAAiB,CAAC,EACzC,MAAO,CACHkqB,MAAO,CACH/oB,WAAY3E,EAAQ6sB,WAAa,EAAA8I,4BAAyBr0B,GAE9Ds0B,UAAW,CACPtD,uBAAwBtyB,EAAQsyB,wBAA0B,IAE9D3yB,OAAQ,CACJ6D,cAAe,CACX/H,WAAYkE,EAAOgW,KAAO,YAASrU,EACnC4U,OAAQvW,EAAOuW,aAAU5U,EACzBtG,UAAW2E,EAAO3E,gBAAasG,EAC/B/F,WAAYoE,EAAOpE,iBAAc+F,EACjC5F,SAAUiE,EAAOjE,eAAY4F,EAC7B2F,WAA4B,QAAjB,EAAAtH,EAAOk2B,kBAAU,eAAEvX,iBAAkB3e,EAAOsH,gBAAa3F,EACpEwS,iBAC2B,QAAvB,EAAAnU,EAAOm2B,wBAAgB,eAAExX,iBAAkB3e,EAAOmU,sBAAmBxS,IAIzF,CApGwBy0B,CAAe/1B,GAC7Bg2B,GAAe,gCACdh2B,GAAO,CACVi2B,SAAS,EAAF,uCACH,IAAAC,+BAA8Bd,EAAY1H,S,YACtC1tB,EAAQi2B,SAAW,KAAG,KAC1B,IAAAE,gCAA+Bf,EAAYz1B,SAC3C,IAAAy2B,kC,GAEJC,oBAAoB,EAAF,aACdC,gBAAiB,IAAI,UACrBV,UAAW,IAAI,UAA4BR,EAAYQ,YACpD51B,EAAQq2B,sBAIbpJ,GAAO,IAAAsJ,kBAAiB5J,EAAYqJ,GAI1C,OAFAb,EAAgClI,EAAM+I,EAAiBZ,GAEhDnI,CACX,EAOA,mC,gEC/CA,mBAA6CkD,GAGzC,QAF2BA,EAECrD,kBAChC,C,6FCZA,cACA,UACA,UAMa,EAAAyI,kBAAwD,SAAC5xB,EAAOhB,EAASS,GAClF,IAAMyC,EAKV,SAAiClD,EAA2BS,GAMxD,OACI,IAAA+c,aAAYxd,IACZS,EAAQlE,gBACR,IAAA2R,UAASlO,GAAS,IAAA6zB,sBAAqBpzB,EAAQC,YAAY,EAEnE,CAhBsBozB,CAAwB9zB,EAASS,GAAW,EAAAZ,eAAiB,EAAAM,gBAE/E+C,EAAUlC,EAAOhB,EAASS,EAC9B,C,kECZA,cACA,UACA,SAEA,UACA,UACA,UACA,QACA,UAqBA,aAOI,WAAoBszB,QAAA,IAAAA,IAAAA,EAAA,aAAAA,sBAAAA,EANZ,KAAAvG,OAAqC,IAMgB,CA+EjE,OA1EI,YAAAI,QAAA,WACI,MAAO,mBACX,EAQA,YAAAC,WAAA,SAAWL,GAEPjD,KAAKiD,OAASA,CAClB,EAOA,YAAAQ,QAAA,WACIzD,KAAKiD,OAAS,IAClB,EAQA,YAAAW,cAAA,SAAcC,GACV,GAAK7D,KAAKiD,QAA6B,IAAnBY,EAAMf,UAA1B,CAIA,IAAM2G,EAAK5F,EACX,GAAK4F,EAAGC,iBAAR,CAGA,IAkDqBC,EAjDrB,QADoB,IAAAC,gBAAeH,GAAI,IAEnC,KAAK,GACD,IAAAI,qCAAoCJ,GACpC,MACJ,KAAK,GACD,IAAAK,mCAAkCL,GAClC,MACJ,KAAK,EACL,KAAK,EACoB,IAAjBA,EAAGM,WAAmD,IAAjBN,EAAGM,YAExC,IAAAC,+BAA8BP,EAAIzJ,KAAKiD,OAAOgH,yBAElD,MACJ,KAAK,EACDR,EAAGE,iBAAiBO,0BA7EL,6BA6EyD,IACxE,MACJ,KAAK,GACD,IAAAC,oCAAmCV,EAAIzJ,KAAKiD,OAAOgH,0BAI3D,aAAUR,EAAGC,iBAAkB,OAAQ,EAAAU,YACvC,aAAUX,EAAGC,iBAAkB,YAAa,EAAAW,8BAC5C,aAAUZ,EAAGC,iBAAkB,QAAS,EAAAW,6BAyBnBV,EAxBDF,EAAGE,kBAyB3B,IAAAW,wBAAuBX,EAAiBY,kBAAmB,WAAW,SAACr2B,GACnE,MAAgB,QAATA,CACX,IAzByB,IAAjBu1B,EAAGM,aACH,aAAUN,EAAGC,iBAAkB,QAASc,IACxC,aAAUf,EAAGC,iBAAkB,YAAac,IAGhDf,EAAGE,iBAAiBH,sBAAwBxJ,KAAKwJ,qB,EACrD,EACJ,EAtFA,G,YA4FA,IAAMgB,EAA4D,SAC9D/3B,EACAgD,GAEIA,EAAQyB,MAAM0P,wBACPnU,EAAOmU,eAEtB,C,sIChIA,UACA,UACA,UACA,UAIM6jB,EAAoB,0CACpBC,EAAoB,6CACpBC,EAAgB,kBAChBC,EAAmB,qBACnBC,EAAuB,oBAyE7B,SAAgBC,EAAaC,EAAcC,GACvC,GAAID,EAAKne,MAAM6d,GAAoB,CAC/B,IAAMQ,EAAUD,EAAWpe,MAAM+d,GAEjCI,GADWE,EAAUA,EAAQ,GAAK,QACtBF,EAAO,O,CAEvB,GAAIA,EAAKne,MAAM8d,GAAoB,CAC/B,IAAIQ,EAAaF,EAAWpe,MAAMge,GAElCG,GADYG,EAAaA,EAAW,GAAK,WAC1BH,EAAO,U,CAG1B,OAAOA,CACX,CA9EA,yCACIlH,EACAsH,GAEQ,IAAA1I,EAAwCoB,EAAK,SAAnCmH,EAA8BnH,EAAK,WAAvBgB,EAAkBhB,EAAK,cAC/CkH,EAAOlG,EAAckG,KAAOD,EAAajG,EAAckG,KAAMC,QAAc52B,EAEjF,GAAI22B,GAAQlG,EAAckG,MAAQA,EAAM,CACpC,IAAMzT,GAAM,IAAI8T,WAAYC,gBAAgBF,EAAmBJ,GAAO,cACtE,IAAAhc,gBAAe0T,EAAUnL,aAAG,EAAHA,EAAK+P,K,CAIlC,IAAM9uB,EAAakqB,EAASlqB,YAExB,IAAAX,cAAaW,EAAY,iBACH,OAAtBA,EAAW3F,SACX2F,EAAWA,YAEQ+yB,MAAMC,KAAKhzB,EAAW6e,YAAYlV,OAAM,SAACrM,GAExD,IAAMjD,GAAU,IAAAgF,cAAa/B,EAAO,iBAAmBA,EAAMjD,QAE7D,MAAkB,QAAXA,GAEU,SAAXA,GACAiD,GAAS0C,EAAWqkB,SAE9B,KAGkBrkB,EAAWqkB,WACzBiH,EAAMpB,SAAS+I,gBAAgBjzB,EAAWqkB,YAIlD,aAAUiH,EAAM6F,iBAAkB,aAAa,SAACj3B,EAAQgD,GAClB,SAA9BA,EAAQyB,MAAMu0B,cACdh5B,EAAOi5B,aAAeb,EACtBp4B,EAAOk5B,WAAad,EACpBp4B,EAAOm5B,YAAcf,EACrBp4B,EAAOo5B,UAAYhB,EAE3B,KAEA,IAAAiB,cAAajI,EAAM6F,iBAAkB,SAAS,SAACjzB,EAAOhB,EAASS,GAC3D,IAAM9D,GAAgB,EAAH,eAAQ8D,EAAQ9D,eACN,cAAzBqE,EAAM8d,gBAAkC9d,EAAMhE,OAAOsH,YACrD7D,EAAQ9D,cAAc2H,UAAYtD,EAAMhE,OAAOsH,WAGnD7D,EAAQ1C,yBAAyBqC,MAAMY,EAAOhB,EAASS,GAE1B,cAAzBO,EAAM8d,gBAAkC9d,EAAMhE,OAAOsH,YACrD7D,EAAQ9D,cAAgBA,SACjBqE,EAAMhE,OAAOsH,UAE5B,GACJ,EAOA,gB,8GCpFA,cASA,8CACI8pB,EACAsH,GAEQ,IAAA1I,EAA4BoB,EAAK,SAAvBgB,EAAkBhB,EAAK,cAEzC,GAAIgB,EAAckG,OAASlG,EAAcrjB,MAAQqjB,EAAcxpB,MAAO,CAGlE,IAAMic,GAAM,IAAI8T,WAAYC,gBACxBF,EAAmBtG,EAAckG,MACjC,cAGJ,IAAAhc,gBAAe0T,EAAUnL,aAAG,EAAHA,EAAK+P,K,CAEtC,C,2HCzBA,UACA,UACA,UAcM0E,EAAoC,uBAGpCC,EAAkB,iBAElBC,EAAwB,CAC1B,yBACA,0BACA,2BACA,4BACA,yBACA,sBACA,0BAGEC,GAAkB,EAAH,sCACjB,iBACA,kBACA,oBACA,uBACA,oB,YACGD,IAAqB,IACxB,mBApBc,YAsBd,oBACA,iBACAD,EACA,kB,GAGEG,EAAoB,CAAC,KAAM,KAAM,MACjCC,EAAwBD,EAAkB9b,KAAK,KAM/Cgc,EAA6D,SAC/D55B,EACAgD,GAEA,IAAMtE,EAAgBsE,EAAQyB,MAAM/F,cACd,UAAlBA,IACAsB,EAAO0d,yBAA2B,SAEhB,QAAlBhf,IACAsB,EAAO0d,yBAA2B,MAE1C,EAUMmc,EAAqD,SACvD71B,EACAhB,EACAS,GAEA,IAAMq2B,EAAa92B,EAAQ7C,QAM3B,IALI,IAAA45B,iBAAgB/2B,EAjEpB,0IAkEIA,EAAQyB,MAAMu1B,eAAe,WAC7Bh3B,EAAQyB,MAAMu1B,eAAe,WAG7Bh3B,EAAQiO,UAAUC,SAASooB,GAC3B71B,EAAQnD,kBAAkB8C,MAAMY,EAAOhB,EAASS,QAIpD,IAAI+1B,EAAsBhwB,MAAK,SAAA2H,GAAa,OAAAnO,EAAQiO,UAAUC,SAASC,EAA3B,IAA5C,CAEO,GAyFX,SACI2oB,EACA92B,EACAS,GAEA,OACIA,EAAQ7D,WAAWC,OAAOwH,OAAS,GACnCqyB,EAAkBjqB,OAAM,SAAAC,GAAO,OAAAA,GAAOoqB,CAAP,OAC9B,IAAAG,4BAA2Bj3B,OAASrB,EAAWg4B,EAExD,CAnGeO,CAAuBJ,EAAY92B,EAASS,GAAU,CACrD,IAAA7D,EAAe6D,EAAO,WAC9B7D,EAAWC,OAAS,GACpBD,EAAWiK,gBAAalI,C,CAG5B8B,EAAQ1C,yBAAyBiC,QAAQgB,EAAOhB,EAASS,E,CAC7D,EAKM02B,EAAyD,SAC3Dn2B,EACAhB,EACAS,G,UAEmC,QAAnC,KAAAA,EAAQ1C,0BAAyB/C,UAAE,gBAAGgG,EAAOhB,EAASS,GAC9C,IACFoG,EADiBpG,EAAO,WACAoG,WAC9B,GAAIA,EAAY,CACZ,IAAMuwB,EAAYvwB,EAAWjC,OAAOiC,EAAWjC,OAAOP,OAAS,GAC/D,GAC2B,cAAvB+yB,EAAUvyB,WACkB,YAA5BuyB,EAAUtY,gBACVre,EAAQ7D,WAAWiK,aAAeuwB,EACpC,CACE,IAAMC,EAAeD,EAAUv6B,OAAOu6B,EAAUv6B,OAAOwH,OAAS,GAG5D+C,EAAQlD,SAAgD,QAAvC,EAAAlE,EAAQiE,aAAa,0BAAkB,QAAI,IAChE,GAAImD,EAAQ,EACR,GAAIA,EAAQgwB,EAAUv6B,OAAOwH,OACzB,KAAO+C,GAASgwB,EAAUv6B,OAAOwH,QAC7B+yB,EAAUv6B,OAAOoK,KAAKowB,QAG1BD,EAAUv6B,OAAO6b,OAAOtR,EAAOgwB,EAAUv6B,OAAOwH,OAAS,GACzD+yB,EAAUv6B,OAAOuK,EAAQ,GAAKiwB,C,EAKlD,EAOMC,EAAmE,SACrEt6B,EACAgD,GAE8B,UAA1BA,EAAQyB,MAAMhI,UACduD,EAAOyb,yBAAsB9Z,GAGjC3B,EAAOvE,gBAAakG,CACxB,EAKM44B,EAAoE,SACtEv6B,GAEAA,EAAOvE,gBAAakG,EACpB3B,EAAOw6B,iBAAc74B,CACzB,EAuCA,6CAAkDq1B,G,OAC9C,aAAUA,EAAGC,iBAAkB,UAAW2C,IAC1C,aAAU5C,EAAGC,iBAAkB,WAAYqD,IAC3C,aAAUtD,EAAGC,iBAAkB,YAAasD,IAC5C,aAAUvD,EAAGC,iBAAkB,YAAawD,IAE5C,IAAApB,cAAarC,EAAGC,iBAAkB,UAAW4C,IAC7C,IAAAR,cAAarC,EAAGC,iBAAkB,KAAMkD,IACxC,IAAAd,cAAarC,EAAGC,iBAAkB,KAAMyD,IACxC,IAAArB,cAAarC,EAAGC,iBAAkB,KAAMyD,IACxC,EAAA1D,EAAGE,iBAAiByD,6BAA4B1wB,KAAI,4CAAIwvB,IAAe,GAC3E,EAiBA,IAAMiB,EAA0E,SAC5E12B,EACAhB,EACAS,G,cAEMie,EAAY1d,EAAM4D,OAAO5D,EAAM4D,OAAOP,OAAS,GAC/CuzB,GAAuB,IAAAX,4BACzBj3B,OACArB,EACA,IAAI23B,IAGwC,QAA5C,EAAAsB,aAAoB,EAApBA,EAAsBC,8BAAsB,eAAE5pB,UAAUC,SACpDooB,KAGyB,gBAAzB5X,aAAS,EAATA,EAAW7Z,YAA0D,YAA5B6Z,EAAUI,iBACnDre,EAAQ7D,WAAa,CACjBE,iBAAkB,GAClBD,OAAQ6hB,EAAU7hB,OAClBgK,WAAY7F,IAIc,OAAlChB,EAAQ7C,QAAQ26B,cACmB,QAAnC,KAAAr3B,EAAQ1C,0BAAyB5C,UAAE,gBAAG6F,EAAOhB,EAA6BS,GAEvC,QAAnC,KAAAA,EAAQ1C,0BAAyB9B,UAAE,gBAAG+E,EAAOhB,EAA6BS,EAElF,EAEMg3B,EAAwD,SAC1Dz6B,EACAgD,GAEIA,EAAQiO,UAAUC,SAASqoB,IAAoBv2B,EAAQyB,MAAMhJ,WAAWs/B,WAAW,aAC5E/6B,EAAOvE,UAEtB,C,2IC1QA,cACA,UACA,UACA,UACA,UAWMu/B,EAAmB,IAiDzB,SAASC,EACLj7B,EACAgD,EACAS,EACA4F,GAGA,IAAI6xB,EAEAF,EAAiB1lB,KAAKtS,EAAQyB,MAAM8O,cACnCnM,MAAO8zB,EAAmBh0B,SAASlE,EAAQyB,MAAM8O,cAClD2nB,EA3DuC,MA6DvCl7B,EAAOuT,WAAalK,EAAakK,WAEzC,CAEA,SAAS4nB,EACLn7B,EACAgD,EACAS,EACA4F,GAEgC,IAA5BrG,EAAQyB,MAAMhJ,aACduE,EAAOvE,WAAa4N,EAAa5N,YAGrCuE,EAAOxE,kBAAemG,CAC1B,CArEA,+CAAoDq1B,IAChD,IAAAqC,cAAarC,EAAGC,iBAAkB,UAAW,EAAAmE,8BAC7C,aAAUpE,EAAGC,iBAAkB,QAASgE,IACxC,aAAUjE,EAAGC,iBAAkB,YAAakE,IAC5C,aAAUnE,EAAGC,iBAAkB,kBAAmBoE,IAKlD,IAAAxD,wBACIb,EAAGE,iBAAiBY,kBACpB,UACA,SAACr2B,EAAOuB,GAAY,MAAmB,OAAnBA,EAAQ7C,SAA6B,QAATsB,CAA5B,KAIxB,IAAAo2B,wBAAuBb,EAAGE,iBAAiBoE,iBAAkB,OAAO,SAAAt4B,GAGhE,OAFA,IAAAsZ,gBAAetZ,GACfA,EAAQuZ,YAAYvZ,EAAQoZ,cAAcqN,eAAe,OAClD,CACX,GACJ,EAMa,EAAA2R,4BAA6D,SACtEp3B,EACAhB,EACAS,GAEA,IAAM83B,GAAS,IAAAC,WAAUx4B,IAGnB,IAAAy4B,iBAAgBF,EAAQv3B,EAAOhB,EAASS,KAAY,IAAAi4B,qBAAoBH,EAAQv4B,IAElFS,EAAQ1C,yBAAyBiC,QAAQgB,EAAOhB,EAASS,EAEjE,EAgCA,IAAM43B,EAAkE,SACpEr7B,EACAgD,GAEIA,EAAQyB,MAAMhJ,aACduE,EAAOvE,gBAAakG,GAEpBqB,EAAQyB,MAAM/I,cACdsE,EAAOtE,iBAAciG,EAE7B,C,+FCxGA,cAEMg6B,EAAgC,YAYtC,+BAAoCJ,EAAgCv4B,GAChE,MAXkC,WAY9Bu4B,EAbsB,2BAcrB,IAAApvB,iBAAgBnJ,EAAS,MAAQ24B,EAA8BrmB,KAAKtS,EAAQ0G,OAXpD,gBAYzB6xB,EAbY,cAepB,C,yGCpBA,UACA,UAiBMK,EAAW,WACXC,EAAkB,SA6GxB,SAASC,EACLC,GAEA,OAAO,SAAC/7B,EAAQ6S,EAAGpP,GACT,MAIFA,EAAQ7D,WAHRo8B,EAAe,kBACfC,EAAS,YACTC,EAAQ,WAEZ,GAAyB,iBAAdD,GAA0BC,EAAU,CAC3C,IAAMjgB,EAAQ/U,SAAS60B,GACVp6B,MAATsa,GAAuB7U,MAAM6U,KAAW+f,aAAe,EAAfA,EAAiBG,IAAID,MAC7Dl8B,EAAO2b,oBAAsBM,E,CAGzC,CACJ,CAkBA,SAASmgB,EAAkBprB,EAAYnR,G,QAW/B0B,EAAiB,GACrB1B,EAASA,GA1JQ,EA4JjB,IADA,IAAIuD,EAAqB4N,EAAKlL,YACtBvE,GAAU6B,GAEVi5B,EAAaj5B,GAKQ,IAHrB7B,EAAkC,QAAzB,EAAiB,QAAjB,EAAA6B,EAAMk5B,mBAAW,eAAEze,cAAM,QAAI,IAG3BxW,SACP9F,EAAS,MAEN,IAAA4D,cAAa/B,EAAO,iBAAmBvD,EAAS,IAGvD0B,EAAS66B,EAAkBh5B,EAAOvD,EAAS,IAG/CuD,EAAQA,EAAM2C,YAGlB,OAAOxE,CACX,CAMA,SAAS86B,EAAarrB,GAClB,IAAI,IAAA7L,cAAa6L,EAAM,gBAAiB,CACpC,IAAIurB,GAAgB,IAAAf,WAAUxqB,GAAqB4qB,GACnD,GACIW,GACAA,EAAcl1B,OAAS,GACvBk1B,EAAc1e,OAAO5X,eAAiB41B,EAEtC,OAAO,C,CAIf,OAAO,CACX,CAlLA,2BACIN,EACAv3B,EACAhB,EACAS,GAEA,IAAM7D,EAAa6D,EAAQ7D,WACtBA,EAAWo8B,kBACZp8B,EAAWo8B,gBAAkB,IAAIQ,KAErC,IAAMC,EAAgBlB,EAAOK,IAAa,GAI1C,GAAIa,EAAcx2B,gBAAkB41B,EAChC,OAAO,EAGX,IAAMa,EAAYD,EAAc9e,MAAM,KAUtC,GAPA/d,EAAWq8B,UAAYS,EAAU,IAAMx1B,SAASw1B,EAAU,GAAG3Y,OAAO,IAEpEnkB,EAAWs8B,SAAWQ,EAAU,IAvCZ,KAwCY,GAA5B98B,EAAWC,OAAOwH,SAClBzH,EAAWC,OAASD,EAAWo8B,gBAAgB1b,IAAI1gB,EAAWs8B,WAAa,IAG3EO,GAAiBz4B,GAAyC,iBAAzBpE,EAAWq8B,UAAwB,CAC5D,IAAAA,EAAcr8B,EAAU,UAE1Bm8B,EAAaK,EAAkBp5B,GAC/BgZ,EAqFd,SAA8B+f,GAC1B,OANJ,SAAsBA,GAClB,MAAO,CAAC,IAAK,IAAK,IAAK,KAAK53B,QAAQ43B,IAAe,CACvD,CAIWY,CAAaZ,GAAc,KAAO,IAC7C,CAvFyBa,CAAqBb,GAGhCc,GAAkC,IAAAxyB,iBAAgB2R,GAKxD,IAJA,IAAA5X,aAAYpB,EAASS,EAAQ9C,cAAc2J,UAAWuyB,EAAS78B,OAAQyD,GAInEw4B,EAAYr8B,EAAWC,OAAOwH,OAC9B,KAAO40B,GAAar8B,EAAWC,OAAOwH,QAClCzH,EAAWC,OAAOoK,KAAK4yB,QAG3Bj9B,EAAWC,OAAO6b,OAAOugB,EAAWr8B,EAAWC,OAAOwH,OAAS,GAC/DzH,EAAWC,OAAOo8B,EAAY,GAAKY,EAavC,OAVAj9B,EAAWiK,WAAa7F,EAgBhC,SACIpE,EACA6D,EACAT,EACAgB,EACA+3B,GAEA,IAAMjyB,GAAW,IAAAC,gBAAenK,EAAWC,OAAQ4D,EAAQ9D,eACrDm9B,EAAYhzB,EAASjK,OAAOiK,EAASjK,OAAOwH,OAAS,IAE3D,IAAAjD,aAAYpB,EAASS,EAAQ9C,cAAc4G,eAAgB9D,EAAQ9D,cAAe8D,IAClF,IAAAW,aAAYpB,EAASS,EAAQ9C,cAAcqJ,gBAAiBF,EAAS9J,OAAQyD,GAElD,OAAvBq5B,aAAS,EAATA,EAAW9gB,YACX,IAAA5X,aACIpB,EACA,CAAC84B,EAA0BC,IAC3BjyB,EAASjK,OAAOiK,EAASjK,OAAOwH,OAAS,GAAGrH,OAC5CyD,GAIRA,EAAQnD,kBAAkB8C,MAAM0G,EAAU9G,EAASS,IACnD,IAAAmB,UAASZ,EAAO8F,EACpB,CAtCQizB,CAAkBn9B,EAAY6D,EAAST,EAASgB,EAAO+3B,GAGnDn8B,EAAWC,OAAOwH,OAAS,GAC3BzH,EAAWo8B,gBAAgB1b,IAAI1gB,EAAWs8B,WAAat8B,EAAWC,QAElED,EAAWo8B,gBAAgBgB,IAAIp9B,EAAWs8B,UAAU,EAAF,iCAAMt8B,EAAWC,SAAM,KAEtE,C,CAGX,OAAO,CACX,C,gEC1FA,mBACIo3B,EACAgG,EACAn8B,G,MAEKm2B,EAAiBn2B,0BAClBm2B,EAAiBn2B,wBAA0B,CAAC,GAE3Cm2B,EAAiBn2B,wBAAwBm8B,KAC1ChG,EAAiBn2B,wBAAwBm8B,GAAS,IAGP,QAA/C,EAAAhG,EAAiBn2B,wBAAwBm8B,UAAM,SAAEhzB,KAAKnJ,EAC1D,C,sGCvBA,cAMa,EAAA82B,4BAA0D,SACnE53B,GAEA,EAAA0U,WAAWlQ,SAAQ,SAAAhD,GACf,IAAMC,EAAQzB,EAAOwB,GACjBwc,EAAgB,GACpB,GACIvc,GACA,EAAA4c,iBAAiB7U,MAAK,SAAA0zB,GAAU,OAAAz7B,EAAM0C,QAAQ+4B,IAAW,IAAMlf,EAAQkf,EAAvC,IAClC,CACE,IAAMC,EAAW17B,EAAMyY,QAAQ8D,EAAO,IAAIof,YAC1Cp9B,EAAOwB,GAAO27B,C,CAEtB,GACJ,C,qFCpBA,cAGME,EAAsB,CAAC,QAAS,SAAU,SAAU,UAAW,YAC/DC,EAAsB,0BAKf,EAAA3F,UAAuD,SAAC33B,EAAQgD,GACzE,IAAK,IAAAmJ,iBAAgBnJ,EAAS,KAA9B,CAIA,IAAIu6B,EACJ,IACIA,EAAM,IAAIC,IAAIx6B,EAAQ0G,K,CACxB,SACE6zB,OAAM57B,C,EAIL47B,IAAsD,IAA/CF,EAAoBl5B,QAAQo5B,EAAIE,WACxCH,EAAoBhoB,KAAKtS,EAAQ0G,SAEjC1G,EAAQ4V,gBAAgB,QACxB5Y,EAAO0J,KAAO,G,CAEtB,C,sFCvBA,wBACIutB,EACAgG,EACAv8B,GAEKu2B,EAAiBv2B,oBAClBu2B,EAAiBv2B,kBAAoB,CAAC,GAG1Cu2B,EAAiBv2B,kBAAkBu8B,GAASv8B,CAChD,C,gHCfA,UACA,UA+BA,SAASg9B,EAAiB1sB,G,MAChB,EAA8E,QAAnD,EAAAA,EAA4B2sB,+BAAuB,QAAI,CAAC,EAAjFj5B,EAAS,YAAE8J,EAAQ,WAE3B,OACI9J,GACuB,aAAvBA,EAAUmD,WACVgxB,MAAM+E,QAAQl5B,EAAU8J,WACxBqqB,MAAM+E,QAAQpvB,EAEtB,CAEA,SAASvJ,EACLqlB,EACA5lB,EACAgC,GAEoB4jB,EACRqT,wBAA0B,CAClCj5B,UAAS,EACT8J,SAAU9H,EAElB,CAmGA,SAASm3B,EAAuB7sB,EAAY8sB,GACxC,OAAI,IAAA34B,cAAa6L,EAAM,aACZ0sB,EAAiB1sB,GAAQ+sB,EAAuB/sB,EAAM8sB,QAAUn8B,EAChEm8B,GAAU9sB,EAAK2T,WAAWtd,OAC1B22B,EAAahtB,EAAKmZ,WAAW,GAE7B6T,EAAahtB,EAAK2T,WAAWmZ,IAAS,EAErD,CAEA,SAASE,EAAahtB,EAAmBitB,GACrC,IAAI9uB,EAEJ,GAAI6B,GAAQ0sB,EAAiB1sB,GAAO,CAC1B,MAA0BA,EAAK2sB,wBAA7Bj5B,EAAS,YAAE8J,EAAQ,WACrBnJ,EAAQX,EAAU8J,SAASrK,QAAQqK,EAAS,IAElD,GAAInJ,GAAS,EAAG,CACZ,IAAM64B,GACAD,GAAWv5B,EAAU8J,SAASnJ,EAAQ,IAAOX,EAAU8J,SAASnJ,GACtE8J,GAAS,IAAAC,uBAAsB8uB,EAAcl+B,QAE7C0E,EAAU8J,SAASkN,OAAOuiB,EAAU54B,EAAQ,EAAIA,EAAO,EAAG8J,E,EAIlE,OAAOA,CACX,CAEA,SAAS4uB,EACL5vB,EACA0B,EACAE,G,MAKIouB,EAHE,EAA0BhwB,EAASwvB,wBAAjCj5B,EAAS,YAAE8J,EAAQ,WACrBsV,EAAQtV,EAAS,GACjB8T,EAAO9T,EAASA,EAASnH,OAAS,GAGxC,GAA0B,SAAtByc,aAAK,EAALA,EAAOvC,cAA8C,SAArBe,aAAI,EAAJA,EAAMf,aAAuB,CAC7D,IAAMsG,EAAqC,GACrCzZ,EAAMD,EAASE,WAAa,GAC5BiV,EAAmC,GAEzC,QAAoB3hB,IAAhBkO,EACAiU,EAAM/U,KAAOX,EACbyZ,EAAY5d,KAAK6Z,GACjBR,EAAarZ,KAAK6Z,OACf,CAOH,GANIjU,EAAc,IACdiU,EAAM/U,KAAOX,EAAIO,UAAU,EAAGkB,GAC9BgY,EAAY5d,KAAK6Z,GACjBR,EAAarZ,KAAK6Z,SAGJniB,IAAdoO,EAAyB,CACzB,IAAMZ,GAAS,IAAAC,uBAAsB0U,EAAM9jB,QAC3C6nB,EAAY5d,KAAKkF,GAEjBgvB,EAAahvB,EACbY,EAAYF,C,MACT,GAAIE,EAAYF,EAAa,CAChC,IAAMuuB,GAAS,IAAAlvB,YACXd,EAAIO,UAAUkB,EAAaE,GAC3B+T,EAAM9jB,OACN8jB,EAAM/jB,KACN+jB,EAAMnoB,MAGVyiC,EAAOt5B,YAAa,EACpB+iB,EAAY5d,KAAKm0B,GACjB9a,EAAarZ,KAAKm0B,GAClBD,EAAaC,C,CAGjB,GAAIruB,EAAY3B,EAAI/G,OAAQ,CACxB,IAAMg3B,GAAU,IAAAnvB,YACZd,EAAIO,UAAUoB,GACd+T,EAAM9jB,OACN8jB,EAAM/jB,KACN+jB,EAAMnoB,MAEVksB,EAAY5d,KAAKo0B,GACjB/a,EAAarZ,KAAKo0B,E,EAI1B,IAAIC,EAAa55B,EAAU8J,SAASrK,QAAQ2f,GACxCya,EAAY75B,EAAU8J,SAASrK,QAAQme,GAE3C,GAAIgc,GAAc,GAAKC,GAAa,EAAG,CACnC,KACID,EAAa,GACqC,mBAAlD55B,EAAU8J,SAAS8vB,EAAa,GAAG/c,aAEnC+c,IAGJ,KACIC,EAAY75B,EAAU8J,SAASnH,OAAS,GACS,mBAAjD3C,EAAU8J,SAAS+vB,EAAY,GAAGhd,aAElCgd,KAGJ,EAAA75B,EAAU8J,UAASkN,OAAM,6BAAC4iB,EAAYC,EAAYD,EAAa,IAAC,YAAKzW,IAAW,G,CAGpF5iB,EAAUkJ,EAAUzJ,EAAW4e,UAExB5e,EAAU8G,a,CAGrB,OAAO2yB,CACX,CAMa,EAAAnI,uBAAiD,CAC1D/wB,UAAS,EACTokB,YA3NJ,SAASA,EAAYmV,GAGjB,IAFA,IAAIC,EAA4B,KAEvBr7B,EAAQo7B,EAAiB14B,WAAY1C,EAAOA,EAAQA,EAAM2C,YAC/D,IAAI,IAAAZ,cAAa/B,EAAO,aACpB,GAAKq7B,EAEE,CACH,IAAMC,EAAOhB,EAAiBe,GACxBA,EAAad,6BACbh8B,EAEF+8B,GAAQhB,EAAiBt6B,KACzBs7B,EAAKlwB,SAAWkwB,EAAKlwB,SAAS5M,OAAOwB,EAAMu6B,wBAAwBnvB,UACnEpL,EAAMu6B,wBAAwBnvB,SAAW,G,MAR7CiwB,EAAer7B,OAWZ,IAAA+B,cAAa/B,EAAO,iBAC3Bq7B,EAAe,KAEfpV,EAAYjmB,IAEZq7B,EAAe,IAG3B,EAmMIhzB,QAjMJ,SAAiBP,EAAgCtM,GACxBsM,EACRyyB,wBAA0B,CAAEgB,UAAW//B,EAAMwM,KAC9D,EA+LIwmB,mBA7LJ,SACIjuB,EACAi7B,EACAC,GAgBA,OAdIA,IAEyB,SAArBA,EAAap5B,MACbo5B,EAAan5B,MAAMC,YACnB,IAAAR,cAAa05B,EAAan5B,MAAMkK,eAAgB,aAE5C8tB,EAAiBmB,EAAan5B,MAAMkK,iBACpCmuB,EAAuBc,EAAan5B,MAAMkK,iBAG9C,IAAAkvB,cAAan7B,IAIbi7B,EAAan5B,MACjB,IAAK,QACL,IAAK,QAED,OAAO,EAEX,IAAK,QACD,IAAMkuB,EAAWiL,EAAal5B,MAC9B,GAAIiuB,EAAU,CAEN,IAAA/jB,EAKA+jB,EAAQ,eAJR9jB,EAIA8jB,EAAQ,YAHR7jB,EAGA6jB,EAAQ,aAFR5jB,EAEA4jB,EAAQ,UAEZ,GAFIA,EAAQ,UAGR,QAASkK,EAAuBjuB,EAAgBC,GAC7C,GACHD,GAAkBE,IAClB,IAAA3K,cAAayK,EAAgB,aAE7B,OACI8tB,EAAiB9tB,MACfmuB,EAAuBnuB,EAAgBC,EAAaE,GAG1D,IAAMgvB,EAAUlB,EAAuBjuB,EAAgBC,GACjDmvB,EAAUnB,EAAuB/tB,EAAcC,GAErD,SAAIgvB,IAAWC,KACX,IAAAF,cAAan7B,EAAOo7B,EAASC,GACtB,G,EAU3B,OAAO,CACX,E,wJCrJA,cAUA,qCACIxO,EACA7sB,EACAkuB,EACAtwB,EACAkC,GAIA,OAFAA,EAAQw7B,kBAAmB,EAEnB19B,GACJ,KAAK,EAED,OAAO,EAEX,KAAK,EAGD,OADAswB,EAASW,kBACF,EAEX,KAAK,EACL,KAAK,EAgBD,OAdAX,EAASW,kBACT,IAAA1uB,uBAAsBH,GAER,GAAVpC,IAEAkC,EAAQw7B,kBAAmB,GAK/BzO,EAAOyD,mBAAmB,GAAuC,CAC7DpC,SAAQ,KAGL,EAEnB,EAKA,4BAAiCA,EAAyBqN,GACtD,OACKA,GAASrN,EAASsN,SAAWtN,EAASuN,UACrCF,GAASrN,EAASwN,UAAYxN,EAASsN,MAEjD,EAKA,yCAA8CtN,GAC1C,OAAOA,EAASuN,UAAYvN,EAASsN,MACzC,C,izCC7BA,cAAS,6EAAA1e,OAAO,IAChB,cAAS,6EAAAA,OAAO,IAChB,cAAS,mFAAAA,OAAO,IAChB,aAAS,2EAAAA,OAAO,IAChB,YAAS,8EAAAA,OAAO,IAChB,cAAS,iFAAAA,OAAO,IAChB,cAAS,4EAAAA,OAAO,IAChB,cAAS,8EAAAA,OAAO,IAChB,cAAS,iFAAAA,OAAO,IAChB,cAAS,qFAAAA,OAAO,IAChB,cAAS,iFAAAA,OAAO,IAChB,cAAS,mFAAAA,OAAO,IAChB,cAAS,oFAAAA,OAAO,IAChB,cAAS,6EAAAA,OAAO,IAChB,cAAS,6EAAAA,OAAO,IAChB,cAAS,8EAAAA,OAAO,IAChB,cAAS,gFAAAA,OAAO,IAChB,cAAS,oFAAAA,OAAO,IAChB,cAAS,sFAAAA,OAAO,IAChB,cAAS,6EAAAA,OAAO,IAChB,aAAS,8EAAAA,OAAO,IAChB,cAAS,oFAAAA,OAAO,IAChB,cAAS,qFAAAA,OAAO,IAChB,cAAS,uFAAAA,OAAO,IAChB,cAAS,0FAAAA,OAAO,IAChB,cAAS,qFAAAA,OAAO,IAChB,cAAS,gFAAAA,OAAO,IAChB,cAAS,8EAAAA,OAAO,IAChB,cAAS,8EAAAA,OAAO,IAChB,cAAS,iFAAAA,OAAO,IAChB,cAAS,kFAAAA,OAAO,IAChB,cAAS,4EAAAA,OAAO,IAChB,cAAS,gFAAAA,OAAO,IAChB,cAAS,mFAAAA,OAAO,IAChB,cAAS,6EAAAA,OAAO,IAChB,cAAS,gFAAAA,OAAO,IAChB,cAAS,oFAAAA,OAAO,IAChB,cAAS,6EAAAA,OAAO,IAChB,cAAS,4EAAAA,OAAO,IAChB,cAAS,4EAAAA,OAAO,IAChB,cAAS,qFAAAA,OAAO,IAChB,cAAS,iFAAAA,OAAO,IAChB,cAAS,sFAAAA,OAAO,IAChB,cAAS,oFAAAA,OAAO,IAChB,cAAS,4EAAAA,OAAO,IAChB,cAAS,uEAAAA,OAAO,IAChB,cAAS,8EAAAA,OAAO,IAChB,cAAS,wFAAA8T,sBAAsB,IAC/B,cAAS,gFAAA9T,OAAO,IAEhB,cAAS,oFAAAA,OAAO,IAChB,cAAS,sFAAAA,OAAO,IAChB,eAAS,0FAAAA,OAAO,IAEhB,eAAS,2FAAAA,OAAO,IAChB,eAAS,yFAAAA,OAAO,IAChB,eAAS,oGAAAA,OAAO,IAChB,eAAS,8FAAAA,OAAO,IAChB,eAAS,0FAAAA,OAAO,IAEhB,eACI,+FAAAwM,4BAA4B,IAC5B,kGAAAuI,+BAA+B,IAEnC,eAAS,qFAAA8J,kBAAkB,IAAE,sFAAAC,mBAAmB,IAChD,eAAS,sFAAAC,mBAAmB,IAC5B,cAAS,0FAAAC,uBAAuB,IAChC,eAAS,sFAAAC,mBAAmB,G,6GCxG5B,UAgCA,+BACIlM,EACAnvB,EACAs7B,GAIA,I,MAFMC,GAAU,EAAH,iCAAOpM,IAAI,G,aAGpB,IAAIxvB,EAAQ47B,EAAQ,GACdv6B,EAAQrB,EAAM4D,OAAOzD,QAAQE,GAEnC,GAAIgB,EAAQ,E,cAIZ,IAAIw6B,EAAY77B,EAAM4D,OAAOvC,GAASs6B,EAAS,GAAK,IAEpD,GAAIE,EAAW,CACX,KAA8B,cAAvBA,EAAUh4B,WAA2B,CACxC,IAAMzE,EAAQy8B,EAAUj4B,OAAO+3B,EAAS,EAAIE,EAAUj4B,OAAOP,OAAS,GAEtE,IAAKjE,E,aACM,CAAEiB,MAAOw7B,EAAWrM,KAAMoM,IAC9B,GAAuB,cAAnBx8B,EAAMyE,U,OACb+3B,EAAQE,QAAQD,G,OACT,CAAEx7B,MAAOjB,EAAOowB,KAAMoM,IAE7BA,EAAQE,QAAQD,GAChBA,EAAYz8B,C,cAIb,CAAEiB,MAAOw7B,EAAWrM,KAAMoM,G,CAC9B,IAAI,IAAAhf,kBAAiB5c,GAAQ,CAGhC47B,EAAQG,QAER,IAAI,GAAgB,EACd,EAAU/7B,EACVg8B,EAAiB,QAAV,EAAAJ,EAAQ,UAAE,eAAEh4B,OAAO8a,MAC5B,SAAAjiB,GAAK,MAAe,aAAfA,EAAEoH,YAA6B,EAAepH,EAAE+N,SAASrK,QAAQ,KAAa,CAA9E,IAGT,IAAI67B,E,cAEA,IAAMC,EAAiBD,EAAKxxB,SAAS,GAAgBmxB,EAAS,GAAK,IAEnE,GAAIM,E,aAEO,CAAE57B,MAAO27B,EAAMxM,KAAMoM,EAASK,eAAc,IAGnD57B,EAAQ27B,C,KAMb,IAA4B,YAAxBh8B,EAAM8d,gBAAwD,aAAxB9d,EAAM8d,e,cACnD8d,EAAQG,QACR17B,EAAQL,C,GAtDT47B,EAAQv4B,OAAS,GAAG,C,oEA4D3B,OAAO,IACX,C,6FCpGA,cACA,UAIMgM,EAGF,CACA6sB,KAAM,CACFphB,IAAK,QACLC,IAAK,OAET/hB,OAAQ,CACJ8hB,IAAK,SACLC,IAAK,UAETohB,MAAO,CACHrhB,IAAK,MACLC,IAAK,UAIPqhB,EAMF,CACAF,KAAM,CACFphB,IAAK,GACLC,IAAK,IAET/hB,OAAQ,CACJ8hB,IAAK,GACLC,IAAK,IAETohB,MAAO,CACHrhB,IAAK,GACLC,IAAK,KAOb,6BACIpb,EACA08B,GAEA,IAAMC,GAA6B,IAAAC,sBAC/B58B,EACA,CAAC,YACD,CAAC,cAgBL,OAbA28B,EAA2B97B,SAAQ,SAAC,G,IAAEH,EAAK,QACjCm8B,EAAcntB,EAAUgtB,GAAqC,OAA1Bh8B,EAAMrE,OAAON,UAAqB,MAAQ,OAC3D,UAApB2E,EAAMwD,WACN,IAAA44B,YACIp8B,EACA+7B,EAAcC,GAAqC,OAA1Bh8B,EAAMrE,OAAON,UAAqB,MAAQ,QAEhE2E,IACYA,EAAK,OACjBpH,UAAYujC,EAE3B,IAEOF,EAA2Bj5B,OAAS,CAC/C,C,6FCvEA,cACA,UACA,UAsCA,SAASq5B,EAAqB1gC,EAAiCN,GAI3D,GAHmC,OAApBM,EAAON,YACK,OAAbA,GAEO,CACjBM,EAAON,UAAYA,EAKnB,IAAMjE,EAAauE,EAAOvE,WACpB++B,EAAcx6B,EAAOw6B,YAE3BmG,EAAY3gC,EAAQ,aAAcA,EAAOtE,aACzCilC,EAAY3gC,EAAQ,cAAevE,GACnCklC,EAAY3gC,EAAQ,cAAeA,EAAO4gC,cAC1CD,EAAY3gC,EAAQ,eAAgBw6B,E,CAE5C,CAEA,SAASmG,EACL3gC,EACAwB,EACAC,GAEIA,EACAzB,EAAOwB,GAAOC,SAEPzB,EAAOwB,EAEtB,CAxDA,6BAAkCmC,EAA6BjE,GAC3D,IAAM4gC,GAA6B,IAAAC,sBAC/B58B,EACA,CAAC,YACD,CAAC,cAmBL,OAhBA28B,EAA2B97B,SAAQ,SAAC,G,IAAEH,EAAK,SACnC,IAAAw8B,oBAAyCx8B,EAAO,aAClC,IAAAy8B,2BAA0Bn9B,EAAOU,GAEzCG,SAAQ,SAAAk6B,GACVA,EAAK7+B,OAAO2E,SAAQ,SAAA4F,GAChBA,EAAMpK,OAAON,UAAYA,CAC7B,IAEAg/B,EAAK92B,OAAOpD,SAAQ,SAAAH,GAAS,OAAAq8B,EAAqBr8B,EAAMrE,OAAQN,EAAnC,GACjC,IACO2E,GACPq8B,EAAqBr8B,EAAMrE,OAAQN,EAE3C,IAEO4gC,EAA2Bj5B,OAAS,CAC/C,C,8FCtCA,cACA,UACA,UAYA,+BACI1D,EACAo9B,EACA15B,QAAA,IAAAA,IAAAA,EARsB,IAUtB,IAAM25B,GAAsB,IAAAT,sBACxB58B,EACA,CAAC,YACD,CAAC,cAECs9B,EAA0B,UAAfF,EAqCjB,OAnCAC,EAAoBx8B,SAAQ,SAAC,G,IAAEH,EAAK,QAChC,IAAI,IAAAw8B,oBAAyCx8B,EAAO,YAChD,GAAI48B,EAAU,CACV,IAAMnE,EAAYz4B,EAAMxE,OAAOwE,EAAMxE,OAAOwH,OAAS,GAC/Cw1B,GAAkC,IAAAxyB,kBACpCyyB,aAAS,EAATA,EAAW9gB,WAAY,KACvB8gB,aAAS,EAATA,EAAW98B,eAIR68B,EAAS78B,OAAO2b,oBAEvBtX,EAAMxE,OAAOoK,KAAK4yB,E,MAElBx4B,EAAMxE,OAAOiL,WAEd,GAAIzG,EAAO,CACN,IAAArE,EAAWqE,EAAK,OAChB5I,EAAuCuE,EAAM,WAAjCtE,EAA2BsE,EAAM,YAC/CkhC,EAAqB,OADoBlhC,EAAM,UAE/CmhC,GAAgB,IAAAztB,oBAAmBwtB,EAAQxlC,EAAcD,GAC3D0hC,GAAY8D,EAAWrmB,KAAKwmB,KAAOxmB,KAAKC,OAAOsmB,EAAgB95B,GAAUA,EAEzE81B,GAAYgE,IACZhE,EAAWviB,KAAK4O,IAAI2T,EAAW91B,GAAU45B,EAAW,GAAK,GAAI,IAG7DC,EACAlhC,EAAOtE,YAAcyhC,EAAW,KAEhCn9B,EAAOvE,WAAa0hC,EAAW,I,CAG3C,IAEO6D,EAAoB35B,OAAS,CACxC,C,iGC9DA,cACA,UACA,UACA,UA0DA,SAASg6B,EAAQh9B,GACb,OACI,IAAAw8B,oBAAgDx8B,EAAO,oBACtC,cAAjBA,EAAMlE,OAEd,CAhDA,iCACIwD,EACA3D,GAEA,IAAMshC,GAAmB,IAAAf,sBAEvB58B,EAAO,CAAC,kBAAmB,YAAa,CAAC,cAAc,GAEzD,GAAsB29B,EA6CC7xB,OAAM,SAAA8xB,GAAkB,OAAAF,EAAQE,EAAel9B,MAAvB,IA3C3Ci9B,EAAiB98B,SAAQ,SAAC,G,IAAEH,EAAK,QAAEuB,EAAM,UACrC,IAAAib,aAAYjb,EAAQvB,EACxB,QACG,CACH,IAAM,EAAoE,GACpE,EAAU,WAAM,WAAAqD,uBAAsB,aAAc1H,EAApC,EAChB,EAAW,SACbmd,EACAmI,GAEA,OAgBZ,SACInI,EACAnd,GAEA,OAAOqhC,EAAQlkB,KAAW,IAAAoD,gBAAevgB,EAAQmd,EAAOnd,OAC5D,CArBYwhC,CAAcrkB,GAAQmI,aAAO,EAAPA,EAAStlB,SAAUA,EAAzC,EAEJshC,EAAiB98B,SAAQ,SAAC,G,IAAEH,EAAK,QAAEuB,EAAM,SACjCy7B,EAAQh9B,KAGR,IAAAo9B,gBAAe,EAAc77B,EAAQvB,EAAO,EAAS,EAE7D,KAEA,IAAAq9B,gBAAe,EAAc,E,CAGjC,OAAOJ,EAAiBj6B,OAAS,CACrC,C,yGCpDA,UACA,UACA,UACA,UACA,UACA,UACA,SACA,UA6HA,SAASs6B,EAAqBnO,EAAgCnvB,GAC1D,IAAMu9B,GAAqB,IAAAC,mCACvBrO,EACA,CAAC,mBACD,CAAC,cAGL,GAAIoO,GAAsB,GAAKA,EAAqBpO,EAAKnsB,OAAS,EAAG,CACjE,IAAM/C,EAAYkvB,EAAKoO,GACjBE,EAAiBtO,EAAKoO,EAAqB,GAAGh6B,OAAOzD,QAAQG,GAC7Dy9B,EAAaz9B,EAAUsD,OAAOzD,QAAQE,GAE5C,GAAI09B,GAAc,GAAKD,GAAkB,EAAG,CACxC,IAAME,GAAe,IAAAt6B,uBAAsBpD,EAAUnE,QAASmE,EAAUtE,QAExEsE,EAAUsD,OAAO8T,OAAOqmB,EAAY,GACpCC,EAAap6B,OAAStD,EAAUsD,OAAO8T,OAAOqmB,GAE9CvO,EAAKoO,EAAqB,GAAGh6B,OAAO8T,OAAOomB,EAAiB,EAAG,EAAGz9B,EAAO29B,E,EAGrF,CAEA,SAASC,EAAgBzO,GACrB,IAAM1pB,EAAW0pB,GAAK,IAAAqO,mCAAkCrO,EAAM,CAAC,YAAa,CAAC,eAIzE1pB,IACAA,EAASjK,OAAS,GAE1B,CAEA,SAASqiC,EAAiB1O,EAAgCnvB,GACtD,GAAuB,WAAnBA,EAAMwD,UAAwB,CAC9B,IAAMxC,EAAQmuB,EAAK,GAAG5rB,OAAOzD,QAAQE,GAEjCgB,GAAS,GACTmuB,EAAK,GAAG5rB,OAAO8T,OAAOrW,EAAO,E,KAEP,aAAnBhB,EAAMwD,YACbxD,EAAMrE,OAAS,CAAC,SACTqE,EAAMJ,UAErB,CAxJA,4BACIN,EACAw+B,EACAC,EACAC,IAEA,IAAA9O,mBACI,CAAC5vB,IACD,SAAC6vB,EAAMC,EAAcpvB,EAAOmK,GACpBA,IACA,IAAA8zB,WAAUF,EAAiB5zB,GAG3BnK,EACA89B,EAAcl4B,KAAK,CAACupB,EAAMnvB,IACnBovB,GAuEvB,SACIA,EACA4O,GAEA,GAAI5O,EAAc,CACN,MAAoDA,EAAY,MAAzD8O,EAA6C9O,EAAY,SAA/C+O,EAAmC/O,EAAY,SAArCgP,EAAyBhP,EAAY,qBAClEjmB,EAAO,EAAMpC,KAAKo3B,GAAUh2B,MAAM+1B,GAEpC/0B,EAAK1I,cACL,IAAA26B,yBAAwBjyB,GAAM,WAAM,eACpCA,EAAK6W,UAAW,EAChB7W,EAAKxN,OAAS,CACVyU,aAAcjH,EAAKxN,OAAOyU,eAI7B4tB,EAAc3f,MAAK,SAAAjiB,GAAK,OAAAA,EAAE,IAAM,CAAR,KACzB4hC,EAAcp4B,KAAK,CAAC,EAAOw4B,G,CAGvC,CA1FgBC,CAAqBjP,EAAc4O,EAE3C,GACA,CAKIM,wBAAyBh/B,EAAM3D,OAAS,QAAU,eAI1D,IAAMmP,EAASizB,EAAgB,GAG/B,GAC4B,GAAxBD,EAAc96B,QA0HtB,SAAuChD,GACnC,IAAMmK,EAA8B,aAAnBnK,EAAMwD,UAA2BxD,EAAMmK,SAASK,QAAO,SAAApO,GAAK,OAAAA,EAAEqE,UAAF,IAAgB,GAE7F,OAA0B,GAAnB0J,EAASnH,QAA0C,mBAA3BmH,EAAS,GAAG+S,WAC/C,CA7HQqhB,CAA8BT,EAAc,GAAG,KACvB,GAAxBA,EAAc96B,OAEd+6B,EAAgB1mB,OAAM,MAAtB0mB,GAAe,oBAAQ,EAAGA,EAAgB/6B,SAAM,aAAK,IAAAw7B,qBAAoBl/B,EAAOwL,KAAO,IACvF8yB,EAAgBE,EAAc,GAAG,SAC9B,GAAIA,EAAc96B,OAAS,GAAK86B,EAAc34B,MAAK,SAAA/I,GAAK,OA0HnE,SAA8B4D,GAC1B,OACKA,EAAqBS,YACF,aAAnBT,EAAMwD,WAA4BxD,EAAMmK,SAASiB,OAAM,SAAAhP,GAAK,OAAAA,EAAEqE,UAAF,GAErE,CA/HmEg+B,CAAqBriC,EAAE,GAAvB,IAE3D,IAAK,IAAI1C,EAAIokC,EAAc96B,OAAS,EAAGtJ,GAAK,EAAGA,IAAK,CAC1C,mBAAgBokC,EAAcpkC,GAAE,GAA/By1B,EAAI,KAAEnvB,EAAK,KAElB69B,EAAiB1O,EAAMnvB,GACvB49B,EAAgBzO,GAChBmO,EAAqBnO,EAAMnvB,E,EA0BvC,SACI+9B,EACAW,GAEAX,EAAgB59B,SAAQ,SAAA/D,GACpBA,EAAET,QAAS,EAAH,eAAS+iC,GAAwB,CAAC,GAEtCtiC,EAAEV,aACKU,EAAEV,KAAKC,OAAOsH,iBAGlB7G,EAAE9E,IACb,GACJ,CAlCIqnC,CAAoBZ,EAAiBz+B,EAAM3D,QAM/C,SAA4BqiC,GACxBA,EAAc79B,SAAQ,SAAA/D,GACZ,mBAAgCA,EAAC,GAAhC7B,EAAK,KAAsB,OAE9BA,EAAMoB,OAAS,CACXyU,aAAc7V,EAAMoB,OAAOyU,aAC3B0J,eAAgBvf,EAAMoB,OAAOme,iBAEjC,IAAAuhB,qBAAoB9gC,GAAO,WAAM,iBAGrC,IAAAqkC,kBAAiBrkC,OAAO+C,GAAyB,EACrD,GACJ,CAhBIuhC,CAAmBb,EACvB,C,oGCiCA,SAASc,EACLx/B,GAEA,MAAO,CACH3D,OAAQX,OAAOC,OAAO,CAAC,EAAGqE,EAAM3D,QAExC,CAEA,SAASojC,EAAyBz/B,GAC9B,MAAO,CACH1D,QAASZ,OAAOC,OAAO,CAAC,EAAGqE,EAAM1D,SAEzC,CAEA,SAASojC,EACLh/B,GAEQ,IAAAwD,EAAcxD,EAAK,UAE3B,OAAOhF,OAAOC,OACV,CACIuI,UAAS,GAEbs7B,EAAqB9+B,GAE7B,CAEA,SAASi/B,EACLt/B,EACA3D,GAIA,MAAO,CACHyhB,eAH+B9d,EAAK,eAIpC4D,OAJ+B5D,EAAK,OAIrBxD,KAAI,SAAA6D,GAAS,OA9EpC,SAAoBA,EAA0BhE,GAC1C,OAAQgE,EAAMwD,WACV,IAAK,aACD,OAAQxD,EAAMyd,gBACV,IAAK,kBACD,OAgMpB,SACIxd,EACAjE,GAEQ,IAAAF,EAA2BmE,EAAS,QAA3BkH,EAAkBlH,EAAS,cACtC09B,EAA4C3iC,OAAOC,OACrD,CAAEa,QAAO,EAAEqL,cAAe+3B,EAAoB/3B,EAAe,QAASnL,IACtEgjC,EAAe/+B,GACfg/B,EAAoBh/B,EAAWjE,IAOnC,OAJIiE,EAAUqD,eACVq6B,EAAar6B,cAAe,GAGzBq6B,CACX,CAhN2BwB,CAAqBn/B,EAAOhE,GACvC,IAAK,UACD,OAAOojC,EAAkBp/B,EAAOhE,GACpC,IAAK,WACD,OA8MpB,SACIq+B,EACAr+B,GAEQ,IAAA4jB,EAAyBya,EAAI,aAAf7+B,EAAW6+B,EAAI,OAErC,OAAOr/B,OAAOC,OACV,CACI2kB,aAAcyf,EAAqBzf,GACnCpkB,OAAQA,EAAOW,IAAImjC,IAEvBN,EAAe3E,GACf4E,EAAoB5E,EAAMr+B,GAElC,CA5N2BujC,CAAcv/B,EAAOhE,GAEpC,MACJ,IAAK,UACD,OA+NZ,SACIoI,EACApI,GAEQ,IAAAF,EAAuCsI,EAAO,QAArC3D,EAA8B2D,EAAO,WAAzB+C,EAAkB/C,EAAO,cAEtD,OAAOpJ,OAAOC,OACV,CACIwF,WAAU,EACV3E,QAAO,EACPqL,cAAe+3B,EAAoB/3B,EAAe,QAASnL,IAE/DgjC,EAAe56B,GAEvB,CA7OmBo7B,CAAax/B,EAAOhE,GAC/B,IAAK,SACD,OAAOyjC,EAAYz/B,EAAOhE,GAC9B,IAAK,YACD,OAqGZ,SACIqE,EACArE,GAEQ,IAAAmL,EAAkE9G,EAAS,cAA5D8J,EAAmD9J,EAAS,SAAlDoD,EAAyCpD,EAAS,WAAtCT,EAA6BS,EAAS,UAA3B/E,EAAkB+E,EAAS,cAE7Eq/B,EAAsC1kC,OAAOC,OAC/C,CACIkM,cAAe+3B,EAAoB/3B,EAAe,QAASnL,GAC3DyH,WAAU,EACV0G,SAAUA,EAAShO,KAAI,SAAAkG,GAAW,OAzG9C,SACIA,EACArG,GAEA,OAAQqG,EAAQ6a,aACZ,IAAK,KACD,OAAOyiB,EAAiBt9B,GAC5B,IAAK,SACD,OAAOo9B,EAAYp9B,EAASrG,GAChC,IAAK,UACD,OAwPZ,SACI4jC,EACA5jC,GAEA,OAAOhB,OAAOC,OAAOmkC,EAAkBQ,EAAS5jC,GAAU2jC,EAAiBC,GAC/E,CA7PmBC,CAAoBx9B,EAASrG,GACxC,IAAK,QACD,OA6OAyI,GADQF,EA5OUlC,GA6OmC,IAAhDqC,EAA2CH,EAAK,IAA3CI,EAAsCJ,EAAK,MAApCK,EAA+BL,EAAK,2BAEtDvJ,OAAOC,OACV,CAAEwJ,IAAG,EAAEC,IAAG,EAAEC,MAAK,EAAEC,2BAA0B,GAC7C+6B,EAAiBp7B,GACjBw6B,EAAsBx6B,IAjPtB,IAAK,kBACD,OAAO86B,EAAqBh9B,GAChC,IAAK,OACD,OA0PAqI,GADOo1B,EAzPUz9B,GA0PG,KACrBrH,OAAOC,OAAO,CAAEyP,KAAI,GAAIi1B,EAAiBG,IAFpD,IAAmBA,EACPp1B,EAlBQnG,EACRE,EAAKC,EAAKC,EAAOC,CAvO7B,CAuF8Cm7B,CAAa19B,EAASrG,EAAtB,IAClCV,cAAeA,GAAgB,EAAD,eAAMA,QAAkBgC,GAE1D0hC,EAAe3+B,GACfy+B,EAAqBz+B,IAYzB,OATIT,IACA8/B,EAAa9/B,UAAY5E,OAAOC,OAC5B,CACIa,QAAS8D,EAAU9D,SAEvBgjC,EAAqBl/B,KAItB8/B,CACX,CAhImBM,CAAehgC,EAAOhE,GACjC,IAAK,QACD,OAgIZ,SAAoBzB,EAA0ByB,GAClC,IAAAmL,EAAgC5M,EAAK,cAAtBqP,EAAiBrP,EAAK,OAAdwM,EAASxM,EAAK,KAE7C,OAAOS,OAAOC,OACV,CACIkM,cAAe+3B,EAAoB/3B,EAAe,QAASnL,GAC3D4N,OAAQ4qB,MAAMC,KAAK7qB,GACnB7C,KAAMA,EAAK5K,KAAI,SAAAsL,GAAO,OAOlC,SACIA,EACAzL,GAEQ,IAAA8M,EAAiCrB,EAAG,OAA5BU,EAAyBV,EAAG,MAArBN,EAAkBM,EAAG,cAE5C,OAAOzM,OAAOC,OACV,CACI6N,OAAM,EACN3B,cAAe+3B,EAAoB/3B,EAAe,QAASnL,GAC3DmM,MAAOA,EAAMhM,KAAI,SAAAgN,GAAQ,OAMrC,SACIA,EACAnN,GAEQ,IAAAmL,EAA6DgC,EAAI,cAAlD1I,EAA8C0I,EAAI,WAAtC+W,EAAkC/W,EAAI,UAA3B8W,EAAuB9W,EAAI,SAAjB6W,EAAa7W,EAAI,SAEzE,OAAOnO,OAAOC,OACV,CACIkM,cAAe+3B,EAAoB/3B,EAAe,QAASnL,GAC3DyE,WAAU,EACVyf,UAAS,EACTD,SAAQ,EACRD,SAAQ,GAEZif,EAAoB91B,EAAMnN,GAC1B8iC,EAAqB31B,GACrB41B,EAAsB51B,GAE9B,CAxBqC82B,CAAe92B,EAAMnN,EAArB,KAE7B8iC,EAAqBr3B,GAE7B,CArBkCy4B,CAAcz4B,EAAKzL,EAAnB,KAE1BgjC,EAAezkC,GACfwkC,EAAsBxkC,GAE9B,CA5ImB4lC,CAAWngC,EAAOhE,GAErC,CAyDoCokC,CAAWpgC,EAAOhE,EAAlB,IAEpC,CAEA,SAAS2jC,EACLt9B,GAEQ,IAAA6a,EAAwC7a,EAAO,YAAlC5B,EAA2B4B,EAAO,WAAtB/K,EAAe+K,EAAO,KAAhB3G,EAAS2G,EAAO,KAEjD2a,EAAyChiB,OAAOC,OAClD,CACIiiB,YAAW,EACXzc,WAAU,GAEdq+B,EAAqBz8B,IAUzB,OAPI/K,IACA0lB,EAAW1lB,KAAOwnC,EAAqBxnC,IAEvCoE,IACAshB,EAAWthB,KAAOV,OAAOC,OAAO6jC,EAAqBpjC,GAAOqjC,EAAsBrjC,KAG/EshB,CACX,CAEA,SAASyiB,EAAY5gC,EAA4B7C,GACrC,IAAA0d,EAA0B7a,EAAM,QAAvB2D,EAAiB3D,EAAM,aAExC,OAAO7D,OAAOC,OACV,CACIye,QAASwlB,EAAoBxlB,EAAS,SAAU1d,GAChDwG,cAAc,EAAF,eAAOA,IAEvBw8B,EAAengC,GACf8gC,EAAiB9gC,GAEzB,CAmHA,SAASygC,EAAev5B,GACZ,IAAA4R,EAAa5R,EAAK,SAE1B,OAAO/K,OAAOC,OAAO,CAAE0c,SAAQ,GAAImnB,EAAqB/4B,GAAQg5B,EAAsBh5B,GAC1F,CAiBA,SAASq5B,EACLQ,EACA5jC,GAEQ,IAAA2C,EAAYihC,EAAO,QAE3B,OAAO5kC,OAAOC,OACV,CACI0D,QAASugC,EAAoBvgC,EAAS,UAAW3C,IAErDgjC,EAAeY,GACfX,EAAoBW,EAAS5jC,GAErC,CAEA,SAASqjC,EAAqBv0B,GAC1B,OAAO9P,OAAOC,OAAO,CAAEwF,WAAYqK,EAAOrK,YAAck/B,EAAiB70B,GAC7E,CAoCA,SAASo0B,EACLvyB,EACAvL,EACApF,GAEQ,IAAA8tB,EAAyB9tB,EAAO,qBAExC,GAAK2Q,EAEE,IAAKmd,EAEL,KAA6B,IAAzBA,EACP,OAAOnd,EAEP,IAAMzP,EAAS4sB,EAAqBnd,EAAMvL,GAE1C,IAAa,WAARA,GAA6B,UAARA,KAAsBlE,EAC5C,MAAM,IAAImjC,MAAM,qDAGpB,OAAOnjC,C,CAVP,MAAe,SAARkE,OAAkB9D,EAAaqP,EAAKoX,WAAU,E,CAY7D,CApVA,sBACIzkB,EACAtD,GAEA,IAAMskC,EAAiCrB,EAAoB3/B,EAAOtD,GAAW,CAAC,GAM9E,OAJIsD,EAAM3D,SACN2kC,EAAS3kC,OAASX,OAAOC,OAAO,CAAC,EAAGqE,EAAM3D,SAGvC2kC,CACX,C,2GClDA,6CACInR,EACAoR,EACAC,QAAA,IAAAA,IAAAA,EAAA,IAEA,IAAK,IAAI9mC,EAAI,EAAGA,EAAIy1B,EAAKnsB,OAAQtJ,IAAK,CAClC,IAAMiG,EAAQwvB,EAAKz1B,GAEnB,GAAK6mC,EAA6BzgC,QAAQH,EAAM8d,iBAAmB,EAC/D,OAAO/jB,EACJ,GAAI8mC,EAAU1gC,QAAQH,EAAM8d,iBAAmB,EAKlD,OAAQ,C,CAIhB,OAAQ,CACZ,C,4FC9BA,8BACIgjB,EACAr/B,GAIA,OAAOi5B,MAF4BoG,OAExB,EAFwBA,EAEtBhjB,iBAAkBrc,CACnC,C,mGCbA,UACA,SACA,UACA,UACA,UAsBMs/B,EAAc,CAAC,KAAM,KAAM,KAAM,KAAM,KAAM,MAiGnD,SAASC,EACLC,EACAC,EACAC,EACA1hC,EACA2pB,GAEQ,IAAA1oB,EAAsBugC,EAAc,UAAzB91B,EAAW81B,EAAc,OACtClB,EAAeoB,EACfzgC,EACA0gC,EAAeH,EAAgBC,EAAQllC,QACvCqlC,EAAetB,EAAav1B,SAASrK,QAAQgL,GAQnD,GAN2B,SAAvBie,aAAM,EAANA,EAAQkY,cAAyBH,IACjCpB,EAAav1B,SAAShK,SAAQ,SAAAkC,GAC1BA,EAAQ1G,QAAS,EAAH,8BAAS+jC,EAAapkC,eAAiB,CAAC,GAAO+G,EAAQ1G,OACzE,WACO+jC,EAAapkC,eAEpB0lC,GAAgB,EAChB,IAAK,IAAItnC,EAAI,EAAGA,EAAImnC,EAAQ12B,SAASnH,OAAQtJ,IAAK,CAC9C,IAAM2I,EAAUw+B,EAAQ12B,SAASzQ,GAEjCgmC,EAAav1B,SAASkN,OAAO2pB,EAAetnC,EAAG,EAAG2I,GAE9CjD,GAAkC,UAAvBiD,EAAQ6a,aACnB9d,EAAQ8hC,YAAYt7B,KAAKvD,E,CAKrC,GAAIw+B,EAAQjhC,YACR8/B,EAAa9/B,WAAY,EAAH,eAAQihC,EAAQjhC,WAClC8gC,EAAY5gC,QAAQ4/B,EAAa9/B,UAAU9D,UAAY,GAAG,CAC1D,IAAMqlC,GAAkD,IAAApkC,eACpD2iC,EAAa9/B,UAAUjE,QAErB,GAA4D,IAAAoB,eAC9D2iC,EAAapkC,eAAiB,CAAC,GAGnC6lC,EAAWhhC,SAAQ,SAAAhD,G,MACX,EAAqB2C,QAAQ3C,IAAQ,IACJ,QAA1B,EAAAuiC,EAAapkC,qBAAa,gBAAG6B,GAE5C,G,CAIH2jC,IACDpB,EAAa/jC,OAASklC,EAAQllC,OAEtC,CAEA,SAASylC,EACLR,EACAS,EACAC,G,QAEQlS,EAAiBwR,EAAc,aAEvC,GAAIxR,GAAwC,GAAxBkS,EAAO/9B,OAAOP,QAAes+B,EAAO/9B,OAAO,IAAM89B,EAAU,CAE3E,IADQ,IAAA9mC,EAA8B60B,EAAY,MAAnC8O,EAAuB9O,EAAY,SAAzB+O,EAAa/O,EAAY,SACzC11B,EAAI,EAAGA,EAAI2nC,EAASt6B,KAAK/D,OAAQtJ,IACtC,IAAK,IAAIglB,EAAI,EAAGA,EAAI2iB,EAASt6B,KAAKrN,GAAGyO,MAAMnF,OAAQ0b,IAAK,CACpD,IAAM6iB,EAAUF,EAASt6B,KAAKrN,GAAGyO,MAAMuW,GAEvC,GAAS,GAALhlB,GAAUwkC,EAAWxf,GAAKnkB,EAAMwM,KAAK,GAAGoB,MAAMnF,OAC9C,IAAK,IAAIw+B,EAAI,EAAGA,EAAIjnC,EAAMwM,KAAK/D,OAAQw+B,IAAK,CACxC,IAAMC,EAAwB,QAAb,EAAAlnC,EAAMwM,KAAKy6B,UAAE,eAAEr5B,MAAM+1B,EAAWxf,EAAI,GACrDnkB,EAAMwM,KAAKy6B,GAAGr5B,MAAM+1B,EAAWxf,IAAK,IAAAtV,kBAChC,GACA,EACAq4B,aAAQ,EAARA,EAAUzhB,SACVyhB,aAAQ,EAARA,EAAU9lC,O,CAKtB,GAAS,GAAL+iB,GAAUyf,EAAWzkC,GAAKa,EAAMwM,KAAK/D,OASrC,IARKzI,EAAMwM,KAAKo3B,EAAWzkC,KACvBa,EAAMwM,KAAKo3B,EAAWzkC,GAAK,CACvByO,MAAO,GACPxM,OAAQ,CAAC,EACTmN,OAAQ,IAIP04B,EAAI,EAAGA,EAAIjnC,EAAMwM,KAAKo3B,GAAUh2B,MAAMnF,OAAQw+B,IAAK,CACxD,IAAME,EAAwC,QAA5B,EAAAnnC,EAAMwM,KAAKo3B,EAAWzkC,EAAI,UAAE,eAAEyO,MAAMq5B,GACtDjnC,EAAMwM,KAAKo3B,EAAWzkC,GAAGyO,MAAMq5B,IAAK,IAAAp4B,kBAChC,GACA,GACA,EACAs4B,aAAS,EAATA,EAAW/lC,O,CAKvBpB,EAAMwM,KAAKo3B,EAAWzkC,GAAGyO,MAAM+1B,EAAWxf,GAAK6iB,EAEtC,GAAL7nC,GAAe,GAALglB,IACV,IAAAhe,YAAW6gC,GAAS,IAAAx2B,yB,EAKhC,IAAA42B,gBAAepnC,EAAOqmC,EAAe91B,OAAOnP,SAC5C,IAAAijC,kBAAiBrkC,OAAO+C,GAAyB,E,MAEjDskC,EAAYhB,EAAgBS,EAEpC,CAEA,SAASQ,EAAUjB,EAA6Bnc,GAC5Csc,EAAeH,EAAgBnc,EAAQ9oB,QAE/B,IAAAwzB,EAAoByR,EAAc,KAA5BvgC,EAAcugC,EAAc,UAEpCkB,GAAgB,IAAAtE,mCAAkCrO,EAAM,CAAC,aACzD1pB,EAAW0pB,EAAK2S,GAChBt8B,EAAa2pB,EAAK2S,EAAgB,GAClCpE,EAAal4B,EAAWjC,OAAOzD,QAAQ2F,GAAYpF,GAErDq9B,GAAc,GACdl4B,EAAWjC,OAAO8T,OAAOqmB,EAAY,EAAGjZ,GAGxChf,IACAA,SAAAA,EAAUjK,OAAO2E,SAAQ,SAAC4F,EAAOrM,GAC7B+qB,EAAQjpB,OAAO9B,IAAK,EAAH,eAAQqM,EAC7B,IAER,CAEA,SAASg7B,EAAeH,EAA6BmB,GACzC,IAAA1hC,EAA4BugC,EAAc,UAA/B91B,EAAiB81B,EAAc,OAAvBzR,EAASyR,EAAc,KAC5CI,EAAe3gC,EAAU8J,SAASrK,QAAQgL,GAC1Ck3B,EAAY7S,EAAK,GAAG5rB,OAAOzD,QAAQO,GACnCq/B,GAAe,IAAAp/B,kBACjB,GAAoB,gCACfD,EAAU1E,QAAWomC,GAC1B1hC,EAAU/E,eAGV0lC,GAAgB,IAChBtB,EAAav1B,SAAW9J,EAAU8J,SAASkN,OAAO2pB,IAGlDgB,GAAa,GACb7S,EAAK,GAAG5rB,OAAO8T,OAAO2qB,EAAY,EAAG,EAAGtC,GAG5C,IAAMoC,GAAgB,IAAAtE,mCAClBrO,EACA,CAAC,YACD,CAAC,kBAAmB,cAElB1pB,EAAW0pB,EAAK2S,GAEtB,GAAIr8B,EAAU,CACV,IAAMD,EAAas8B,GAAiB,EAAI3S,EAAK2S,EAAgB,GAAK,KAC5DpE,EAAal4B,EAAaA,EAAWjC,OAAOzD,QAAQ2F,IAAa,EAEvE,GAAIi4B,GAAc,GAAKl4B,EAAY,CAC/B,IAAMy8B,GAAc,IAAAv8B,gBAAeD,EAASjK,OAAQiK,EAASma,aAAajkB,QAEtEqmC,GAAa,IACbC,EAAY1+B,OAASkC,EAASlC,OAAO8T,OAAO2qB,EAAY,IAGxDtE,GAAc,GACdl4B,EAAWjC,OAAO8T,OAAOqmB,EAAa,EAAG,EAAGuE,GAGhD9S,EAAK2S,GAAiBG,C,EAM9B,OAFArB,EAAevgC,UAAYq/B,EAEpBA,CACX,CAEA,SAASkC,EAAYhB,EAA6B5gC,GACtC,IAAAmvB,EAASyR,EAAc,KAEzBC,EAAUE,EAAeH,EADW,cAApB5gC,EAAMwD,UAA4B,CAAC,EAAIxD,EAAMrE,QAE7D+hC,EAAavO,EAAK,GAAG5rB,OAAOzD,QAAQ+gC,GAEtCnD,GAAc,GACdvO,EAAK,GAAG5rB,OAAO8T,OAAOqmB,EAAY,EAAG19B,EAE7C,CAEA,SAASkiC,EACLviC,EACAhE,EACAwmC,GAEAxiC,EAAM4D,OAAOpD,SAAQ,SAAAH,G,MACjB,OAAQA,EAAMwD,WACV,IAAK,aAC2B,YAAxBxD,EAAMyd,iBACNzd,EAAM4f,aAAajkB,OAASymC,EACxBD,EACAxmC,EACAqE,EAAM4f,aAAajkB,SAG3BumC,EAAmBliC,EAAOrE,EAAQwmC,GAClC,MAEJ,IAAK,QACDniC,EAAM+G,KAAK5G,SAAQ,SAAAsH,GACf,OAAAA,EAAIU,MAAMhI,SAAQ,SAAAgJ,GACd+4B,EAAmB/4B,EAAMxN,EAAQwmC,EACrC,GAFA,IAIJ,MAEJ,IAAK,YACD,IAAM,GAAiC,QAAf,EAAAniC,EAAMJ,iBAAS,eAAEjE,SAAU,CAAC,EACpDqE,EAAMmK,SAAShK,SAAQ,SAAAkC,GACQ,WAAvBA,EAAQ6a,aACRglB,EAAmB7/B,EAAS1G,EAAQwmC,GAGxC9/B,EAAQ1G,OAASymC,EAAmBD,EAA0BxmC,GAAQ,EAAF,8BAC7D,GACA0G,EAAQ1G,QAEnB,IAEiC,6BAA7BwmC,UACOniC,EAAMJ,UAI7B,GACJ,CAEA,SAASwiC,EACLD,EACAE,EACAC,GAEA,MAAmC,YAA5BH,GACD,EAAD,8BAAME,GAAiBC,IACtB,EAAD,8BACQD,IAMPnlC,EAAoC,CAAC,EAEnCzF,GAHe6D,EAJQgnC,GAOwB,WAAnCpwB,EAAsB5W,EAAa,OAA3BtE,EAAcsE,EAAa,UAEnD7D,GAA4B,UAAdA,IACdyF,EAAOzF,WAAaA,GAEpBya,IACAhV,EAAOgV,OAASA,GAEhBlb,IACAkG,EAAOlG,UAAYA,GAGhBkG,IAfX,IAA2B5B,EACjB4B,EAEEzF,EAAYya,EAAQlb,CALhC,CA3TA,sBACI8hB,EACAwoB,EACAliC,EACApD,G,MAEMumC,EACqB,QAAvB,EAAAvmC,aAAO,EAAPA,EAASumC,sBAAc,SAAI,IAAApS,iBAAgBrX,EAAQ,GAAI1Z,GAASojC,YAEpE,GAAID,EAAgB,EACZvmC,aAAO,EAAPA,EAASilC,cAAsC,QAAvBjlC,EAAQilC,aAMhCiB,EAAmBZ,GALJ,gCACPxoB,EAAOnd,QAAU,CAAC,GACnB4mC,EAAez3B,OAAOnP,QAGSK,aAAO,EAAPA,EAASilC,aAGnD,IAAK,IAAIvnC,EAAI,EAAGA,EAAI4nC,EAAO/9B,OAAOP,OAAQtJ,IAAK,CAC3C,IAAMsG,EAAQshC,EAAO/9B,OAAO7J,GAE5B,OAAQsG,EAAMwD,WACV,IAAK,YACDm9B,EAAe4B,EAAgBviC,EAAY,GAALtG,EAAQ0F,EAASpD,GACvD,MAEJ,IAAK,UACD4lC,EAAYW,EAAgBviC,GAC5B,MAEJ,IAAK,SACD4hC,EAAYW,EAAgBviC,GAC5BZ,SAAAA,EAAS8hC,YAAYt7B,KAAK5F,GAC1B,MAEJ,IAAK,QAC2B,GAAxBshC,EAAO/9B,OAAOP,SAAehH,aAAO,EAAPA,EAASolC,YACtCA,EAAWmB,EAAgBviC,EAAOshC,GAElCM,EAAYW,EAAgBviC,GAEhC,MAEJ,IAAK,aACD,OAAQA,EAAMyd,gBACV,IAAK,UACL,IAAK,kBACDmkB,EAAYW,EAAgBviC,GAC5B,MACJ,IAAK,WACD6hC,EAAUU,EAAgBviC,I,GAQlD,IAAAP,uBAAsBqZ,EAC1B,C,oGCzHA,cACA,UACA,UACA,UACA,UAgOA,SAAS2pB,EACL9mC,EACAwB,EACA27B,EACA4J,GAEIA,OACiBplC,IAAbw7B,IACAn9B,EAAOwB,GAAO27B,GAEXA,IAAan9B,EAAOwB,WACpBxB,EAAOwB,EAEtB,CA5NA,oCACImC,EACAqjC,EACAC,GAEA,IAAIC,EACAC,EAwNOpnB,EAvNPgnB,GAAU,EACVK,GAAe,EACfC,GAAiB,GAErB,IAAA9T,mBACI,CAAC5vB,IACD,SAAC6vB,EAAMC,EAAcpvB,EAAOmK,GAqExB,GAuEZ,SACIjN,EACAiyB,EACAuT,G,QAEMZ,GAAgB,IAAAtE,mCAAkCrO,EAAM,CAAC,YAAa,IACtEsO,GAAiB,IAAAD,mCAAkCrO,EAAM,CAAC,mBAAoB,IAEpF,GAAI2S,GAAiB,EAAG,CACpB,IAAMr8B,EAAW0pB,EAAK2S,GAChBnqB,EAAuD,QAA5C,EAAAlS,aAAQ,EAARA,EAAUjK,OAAOiK,EAASjK,OAAOwH,OAAS,UAAE,eAAE2U,SAE/D8qB,EAAWvlC,EAAQ,WAAwB,MAAZya,EAAkB+qB,GACjDD,EAAWvlC,EAAQ,cAA2B,MAAZya,EAAkB+qB,E,CAGxDD,EACIvlC,EACA,eACAugC,GAAkB,GACoD,eAAb,QAArD,EAACtO,EAAKsO,UAA+C,eAAE3hC,SAC3D4mC,EAER,CAjKYO,CAAwBL,EAAazT,EAAMuT,GAGvC1iC,IACI8iC,EACAF,EAAYM,sBAAuB,EAEnCJ,EAAa9iC,GAIG,cAApBA,aAAK,EAALA,EAAOwD,aA+GvB,SACItG,EACAmD,EACAqiC,G,MAEMS,EAAetgC,WAA6B,QAAnB,EAAAxC,EAAUT,iBAAS,eAAE9D,UAAW,IAAIwO,UAAU,IACvE84B,EAAoBD,GAAgB,GAAKA,GAAgB,EAAIA,OAAe7lC,EAElFmlC,EAAWvlC,EAAQ,eAAgBmD,EAAU1E,OAAOxE,aAAcurC,GAClED,EAAWvlC,EAAQ,YAAamD,EAAU1E,OAAOzE,UAAWwrC,GAC5DD,EAAWvlC,EAAQ,eAAgBkmC,EAAmBV,GACtDD,EAAWvlC,EAAQ,cAAekmC,EAAmBV,GACrDD,EAAWvlC,EAAQ,YAAamD,EAAU1E,OAAO/C,UAAW8pC,GAC5DD,EAAWvlC,EAAQ,YAAamD,EAAU1E,OAAON,UAAWqnC,EAChE,CA3HgBW,CAAwBT,EAAa5iC,EAAO0iC,GAG5Cv4B,SAAAA,EAAUhK,SAAQ,SAAAkC,G,UAgKqBnF,EAC3CvB,EAEF2nC,EACAC,EACAC,EACA7O,EArKU,GAAIqO,GAAyC,mBAAvB3gC,EAAQ6a,YAAkC,CAC5D,IAAMumB,EAAczoC,OAAOC,OAAO,CAAC,EAAGqE,EAAM3D,QACrC8nC,gBAAAA,EAAavxB,OACbuxB,gBAAAA,EAAazsC,UACbysC,gBAAAA,EAAahsC,WA6E5C,SACIyF,EACAwlC,EACAgB,G,QAEMC,EAAoE,QAAjD,EAAqC,QAArC,EAAAD,EAAarqB,gCAAwB,eAAEC,MAAM,YAAI,eAAE7S,MAE5Eg8B,EAAWvlC,EAAQ,UAAU,IAAA0mC,QAAOF,EAAajsC,YAAairC,GAC9DD,EAAWvlC,EAAQ,WAAYwmC,EAAaxxB,OAAQwwB,GACpDD,EAAWvlC,EAAQ,cAAewmC,EAAa1sC,UAAW0rC,GAC1DD,EAAWvlC,EAAQ,kBAAmBwmC,EAAatqB,cAAespB,GAClED,EAAWvlC,EAAQ,gBAAqC,SAApBymC,EAA6BjB,GACjED,EAAWvlC,EAAQ,cAAmC,OAApBymC,EAA2BjB,GAC7DD,EAAWvlC,EAAQ,gBAAiBwmC,EAAatxB,cAAeswB,GAEhED,EAAWvlC,EAAQ,WAAYwmC,EAAansC,WAAYmrC,GACxDD,EAAWvlC,EAAQ,WAAYwmC,EAAahsC,SAAUgrC,GACtDD,EAAWvlC,EAAQ,kBAAmBwmC,EAAa5zB,gBAAiB4yB,GACpED,EAAWvlC,EAAQ,YAAawmC,EAAazgC,UAAWy/B,GAGxDD,EAAWvlC,EAAQ,aAAcwmC,EAAax0B,WAAYwzB,EAC9D,CAjGwBmB,CACIjB,EACAF,EACA1nC,OAAOC,OACH,CAAC,EACDwoC,EACAzjC,EAAMrE,OACS,QAAf,EAAAqE,EAAMJ,iBAAS,eAAEjE,OACjB0G,EAAQ1G,OACI,QAAZ,EAAA0G,EAAQ/K,YAAI,eAAEqE,OACF,QAAZ,EAAA0G,EAAQ3G,YAAI,eAAEC,OACdgnC,IAIRF,EAAWG,EAAa,kBAAkBvgC,aAAO,EAAPA,EAAS/K,MAAMorC,E,CAO7DM,GAAiB,EAEjBJ,EAAYkB,UAAYlB,EAAYkB,aAAezhC,EAAQ3G,KAC3DknC,EAAYmB,mBACRnB,EAAYmB,oBACZ55B,EAAShF,MAAK,SAAA9C,GAAW,MAAuB,SAAvBA,EAAQ6a,WAAR,IAE7BwlB,GAAU,EAEkB,UAAxBrgC,EAAQ6a,cACJ6lB,GAyH2B7lC,EAxHE0lC,EAyH7CjnC,EAzHoC0G,EAyHpB,OACN,YAEZkhC,GADAD,GAAkB,IAAApI,qBAAoBv/B,EAAgB,YACxBge,MAC9B6pB,EAAcF,EAAgBz6B,MAC9B8rB,EAAc2O,EAAgBljC,MACpClD,EAAOoH,YAAc,CACjBi/B,YAAW,EACXC,YAAW,EACX7O,YAAW,EACXnkB,UAAW7U,EAAO6U,UAClBwzB,aAAcroC,EAAOqoC,cAnIDjB,GAAe,GAEfH,EAAYt+B,iBAAchH,EAGtC,IAEAolC,GAAU,GAGVtT,EACA,GAAIyT,EAAmB,CACX,IAAAtoC,EAA8BsoC,EAAiB,MAAxC3E,EAAuB2E,EAAiB,SAA9B1E,EAAa0E,EAAiB,SAInDzT,EAAa70B,OAASA,GACrB60B,EAAa8O,UAAYA,GAAY9O,EAAa+O,UAAYA,IAE/DyE,EAAYqB,mBAAoB,EAChCrB,EAAYM,sBAAuB,E,MAsF3D,SAA6B9T,EAAqClyB,GAC9D,IAAMgnC,GAAc,IAAA7I,qBAAoBjM,EAAa70B,OAErD2C,EAAOinC,WAAY,EACnBjnC,EAAOknC,eAAiBhV,EAAa70B,MAAMwM,KAAK5B,MAAK,SAAAsC,GACjD,OAAAA,EAAIU,MAAMhD,MAAK,SAAAgE,GAAQ,OAAAA,EAAK6W,QAAL,GAAvB,IAGAkkB,IACAhnC,EAAOgnC,YAAcA,EAE7B,CA7FoBG,CAAoBjV,EAAcwT,GAClCC,EAAoBzT,CAKhC,GACA,CACIkP,wBAAyB,UAI7BsE,EAAYlrC,WACZkrC,EAAYlrC,UAiHLgkB,EAjHsBknB,EAAYlrC,WAkHnCgkB,EAAG5b,QAAQ,OAAS4b,EAAG1Y,OAAS,EAG/BuT,KAAKkC,MAAuB,GAAjB6C,WAAWI,GAAW,KAAQ,IAAM,KAEnDA,EArHX,C,2GCpIA,cACA,UAcA,0BACI4oB,EACA/iC,EACAgjC,EACAC,EACAC,G,MAEMzjC,EAA2C,QAAnC,EAAAO,aAAM,EAANA,EAAQgC,OAAOzD,QAAQykC,UAAY,SAAK,EAEtD,GAAIhjC,GAAUP,GAAS,EAAG,CACtBO,EAAOgC,OAAO8T,OAAOrW,EAAO,GAE5B,IAAM0jC,EAAYnjC,EAAOgC,OAAOvC,EAAQ,GAClC0Y,EAAU+qB,EAASC,GAAaA,EA6B9C,SACInjC,EACAP,EACAwjC,GAEA,IAAMxkC,EAAQwkC,IAGd,OADAjjC,EAAOgC,OAAO8T,OAAOrW,EAAO,EAAGhB,GACxBA,CACX,CAtC0D2kC,CAAapjC,EAAQP,EAAOwjC,IAE9E,IAAA7gC,yBAAwB4gC,IACxB,IAAAhkC,UAASmZ,EAAS6qB,GAGlBD,EAAY7I,QAAQ,CAAEl6B,OAAM,EAAEmY,QAAO,G,CAE7C,EAKA,0BACI4qB,EACAG,GAEAH,EAAYnkC,SAAQ,SAAC,G,IAAEoB,EAAM,SAAEmY,EAAO,UAC5B1Y,EAAQO,EAAOgC,OAAOzD,QAAQ4Z,GAC9B8hB,EAAYj6B,EAAOgC,OAAOvC,EAAQ,GAEpCA,GAAS,GAAKyjC,EAASjJ,EAAW9hB,KAClCA,EAAQnW,OAAOpD,QAAQ,EAAAwD,0BACvB,IAAAs6B,WAAUvkB,EAAQnW,OAAQi4B,EAAUj4B,QACpChC,EAAOgC,OAAO8T,OAAOrW,EAAQ,EAAG,GAExC,GACJ,C,wGCvDA,UAcA,2BACI1B,EACAslC,EACAC,QADA,IAAAD,IAAAA,EAAA,IAGA,IAAMxlC,GAAU,IAAA0lC,yBAAwBxlC,EAAOulC,GAc/C,OAZAD,EAAgBzkC,SAAQ,SAAA4kC,GAEhBA,GAaZ,SACI3lC,GAEA,QAASA,EAAQojC,WACrB,CAhBYwC,CAA8B5lC,IACN,GAAxBA,EAAQgxB,cAER2U,EAAK3lC,EAEb,IAcJ,SAAmCA,G,MACvBojC,EAA+DpjC,EAAO,YAAzDgxB,EAAkDhxB,EAAO,aAA3C6lC,EAAoC7lC,EAAO,cAA5B8lC,EAAqB9lC,EAAO,iBAG1EojC,GACgB,GAAhBpS,GACgB,GAAhBA,GACA6U,GACAA,GAAiBzC,EAAYniC,WAC7B6kC,GAAoB1C,EAAYpT,gBAEhC,EAAAoT,EAAYniC,UAAU8J,UAASvE,KAAI,4CAAIq/B,EAAc96B,WAAQ,IAC7D86B,EAAc96B,SAAW,GAEjC,CA1BIg7B,CAA0B/lC,GAEnBA,CACX,C,kGCjCA,cAMa,EAAAgmC,uBAA8C,SAAAhmC,GAIvD,IAHM,MAAwBA,EAAQojC,YAA9BniC,EAAS,YAAEyK,EAAM,SAGhBpR,EAFK2G,EAAU8J,SAASrK,QAAQgL,GAEpB,EAAGpR,GAAK,EAAGA,IAAK,CACjC,IAAM2I,EAAUhC,EAAU8J,SAASzQ,GAEnC2I,EAAQ5B,YAAa,GAEjB,IAAA4kC,eAAchlC,EAAWgC,EAASjD,EAAQylC,iBAC1CzlC,EAAQgxB,aAAe,E,CAGnC,C,8ICpBA,cACA,UAEA,UACA,UACA,UAKA,SAASkV,EAA4BjqC,GACjC,OAAO,SAAA+D,G,MACGspB,EAAyB,WAAbrtB,EACZ,EAA4C+D,EAAQojC,YAAlDniC,EAAS,YAAEyK,EAAM,SAAEqkB,EAAI,OAAEC,EAAY,eACvCjlB,EAAW9J,EAAU8J,UAqEnC,SAAiBA,G,QACb,GAAkD,OAAjB,QAA7B,EAAAA,EAASA,EAASnH,OAAS,UAAE,eAAEka,aAAqB,CACpD,IAAMqoB,EAAoBp7B,EAASK,QAAO,SAAApO,GAAK,MAAiB,mBAAjBA,EAAE8gB,WAAF,IAEqB,OAAjB,QAA/C,EAAAqoB,EAAkBA,EAAkBviC,OAAS,UAAE,eAAEka,cACjD/S,EAAS1D,K,CAGrB,CA3EQ++B,CAAQr7B,GAER,IAEIs7B,EAFEzkC,EAAQmJ,EAASrK,QAAQgL,IAAW4d,EAAY,GAAK,GACrDgd,EAAkBv7B,EAASnJ,GAGjC,GAAI0kC,GACI,IAAAL,eAAchlC,EAAWqlC,EAAiBtmC,EAAQylC,cAAexpC,KACjE+D,EAAQgxB,aAAe,GAIvB,IAAAzsB,yBAAwBtD,SAEzB,GAAKolC,GAAgB,IAAAE,qBAAoBxW,EAAM9uB,EAAWqoB,GAAa,CAClE,IAAA1oB,EAAgCylC,EAAa,MAAtC,EAAyBA,EAAa,KAAhC7J,EAAmB6J,EAAa,eAE9B,aAAnBzlC,EAAMwD,WACFo4B,GAEI,IAAAyJ,eAAcrlC,EAAO47B,EAAgBx8B,EAAQylC,cAAexpC,KAC5D+D,EAAQgxB,aAAe,IAGvB1H,EACAtpB,EAAQ6lC,cAAgBjlC,GAEsC,OAAjB,QAAzC,EAAAA,EAAMmK,SAASnK,EAAMmK,SAASnH,OAAS,UAAE,eAAEka,cAC3Cld,EAAMmK,SAAS1D,MAGnBrH,EAAQojC,aAAc,IAAAoD,mBAAkB96B,EAAQ9K,EAAO,EAAMovB,GAC7DhwB,EAAQ6lC,cAAgB5kC,SACjBL,EAAMmH,eAGjB/H,EAAQgxB,aAAe,GAI3BhxB,EAAQ8lC,iBAAmB9V,IAGvB,IAAAyW,aACI,EAAK,GAAGtiC,OACRvD,OACA1C,EACA8B,EAAQylC,cACRxpC,KAGJ+D,EAAQgxB,aAAe,E,MAO/BhxB,EAAQgxB,aAAe,CAE/B,CACJ,CAmBa,EAAA0V,gCAAkCR,EAA4B,WAK9D,EAAAS,iCAAmCT,EAA4B,W,wIC/FjEU,E,UALX,UACA,UAmBA,SAASC,EAAuB5qC,GAC5B,OAAO,SAAA+D,GAQH,IAPM,MAAwBA,EAAQojC,YAA9B13B,EAAM,SAAEzK,EAAS,YACnB6lC,EAAa7lC,EAAU8J,SAASrK,QAAQgL,GACxCq7B,EAA0B,WAAb9qC,EAEf+qC,EAiEZ,SACI/lC,EACAie,EACA+nB,EACAjnC,G,yFAEM2lC,EAAOsB,EAAU,GAAK,EACtBl8B,EAAW9J,EAAU8J,SACrBm8B,GAAqB,IAAA7pB,uBAAsBpc,GAExC3G,EAAI4kB,EAAcymB,E,sBAAMrrC,GAAK,GAAKA,EAAIyQ,EAASnH,QAAM,a,QACpDX,EAAU8H,EAASzQ,IAETwjB,a,IACP,mB,IAyCA,oB,IAcA,8B,oBArDOwB,EAAI2nB,EAAU,EAAIhkC,EAAQqI,KAAK1H,OAAS,E,wBAC5C0b,GAAK,GAAKA,EAAIrc,EAAQqI,KAAK1H,QAGrBgb,EAAI3b,EAAQqI,KAAKgU,GACjB6nB,GAAc,IAAAC,eAAcxoB,GAC5ByoB,GAAQ,IAAAC,SAAQ1oB,GAGlB,GAAM,CAAEuoB,YAAW,EAAEE,MAAK,EAAE/7B,MAFlB67B,IAAgBE,KANG,M,OAQjC,GAAI,SAAoC,CAWpC,GARAE,GAFIA,EAAUtkC,EAAQqI,MAEJJ,UAAU,EAAGoU,GAAKioB,EAAQr8B,UAAUoU,EAAI,GAErD4nB,IACDK,GAAU,IAAAC,eAAcD,EAASN,IAGrCjnC,EAAQgxB,aAAe,GAEnBuW,EAaA,OANAx8B,EAASkN,OAAO3d,EAAG,GAEfqrC,EAAO,IACPrrC,GAAKqrC,GAGT,MAZA1iC,EAAQqI,KAAOi8B,EAEX5B,EAAO,IACPrmB,GAAKqmB,E,yBAtBjBrmB,GAAKqmB,E,aAmCT,a,OAII,SAAM,CAAEwB,aAAa,EAAME,OAAO,EAAO/7B,MAAM,I,OAUnD,OAVI,WAEAP,EAASkN,OAAO3d,EAAG,GAEfqrC,EAAO,IACPrrC,GAAKqrC,GAGT3lC,EAAQgxB,aAAe,GAE3B,O,OAGA,a,QAGA,MAAO,CAAP,EAAO,M,eA/D6C12B,GAAKqrC,E,cAmErE,MAAO,CAAP,EAAO,M,IA9IY8B,CAAgBxmC,EAAW6lC,EAAYC,EAAY/mC,GAC9D0nC,EAAOV,EAAS5nB,OAEX0N,EAAQ,EAAgC,GAATA,IAAiC4a,EAAKC,MAAQ,CAC5E,MAA+BD,EAAK1pC,MAAlCmpC,EAAW,cAAEE,EAAK,QAAE/7B,EAAI,OAMhC,OAAQwhB,GACJ,KAAK,EACDA,EAAQua,EACF,EACAF,EACA,EACA,EACNO,EAAOV,EAAS5nB,MAAK,GACrB,MAEJ,KAAK,EACG2nB,GAAcM,GACdva,EAAQ,EACR4a,EAAOV,EAAS5nB,MAAK,IACd+nB,EACPO,EAAOV,EAAS5nB,MAAK,GAErB0N,EAAQ,EAEZ,MAEJ,KAAK,EACGia,GAAcM,GACdva,EAAQ,EACR4a,EAAOV,EAAS5nB,MAAK,IACd9T,EACPo8B,EAAOV,EAAS5nB,MAAK,GAErB0N,EAAQ,EAEZ,MAEJ,KAAK,EACGqa,IAAgBE,EAChBva,EAAQ,EAER4a,EAAOV,EAAS5nB,MAAK,GAEzB,MAEJ,KAAK,EACGioB,EACAK,EAAOV,EAAS5nB,MAAK,GACd+nB,GACPra,EAAQia,EAAa,EAA0B,EAC/CW,EAAOV,EAAS5nB,MAAK,IAErB0N,EAAQia,EAAa,EAAsB,E,CAK/D,CACJ,EApFA,SAAWH,GACP,qBACA,iCACA,mBACA,yBACA,qBACA,gBACH,CAPD,CAAWA,IAAAA,EAAe,KAyKb,EAAAgB,2BAA6Bf,EAAuB,WAKpD,EAAAgB,4BAA8BhB,EAAuB,W,2FCzKlE,6BACIn7B,EACAzK,EACA8uB,EACAC,GAEA,MAAO,CACHtkB,OAAM,EACNzK,UAAS,EACT8uB,KAAI,EACJC,aAAY,EAEpB,C,qFChBA,uBACI7rB,EACAkiC,EACAyB,EACA9nC,EACA/D,GAEA,IAAM2F,EAAQuC,EAAOzD,QAAQ2lC,GAE7B,OAAQA,EAAcjiC,WAClB,IAAK,QACL,IAAK,UAED,OADA0jC,EAAc3jC,EAAO8T,OAAOrW,EAAO,EAAGkmC,GAAe3jC,EAAO8T,OAAOrW,EAAO,IACnE,EAEX,IAAK,SACD,IAAMmmC,EAAY1B,EAAchlC,WAC1B,EACa,WAAbpF,EACA,EACa,YAAbA,EACA,OACAiC,EAUN,YARkBA,IAAd6pC,IACAD,EAAc3jC,EAAO8T,OAAOrW,EAAO,EAAGkmC,GAAe3jC,EAAO8T,OAAOrW,EAAO,GAC1E5B,SAAAA,EAASgoC,gBAAgBxhC,KAAK,CAC1B/G,OAAQ4mC,EACR0B,UAAS,MAIV,EAEX,IAAK,aACD,OAAQ1B,EAAchoB,gBAClB,IAAK,UACD,QAAIypB,IACA3jC,EAAO8T,OAAOrW,EAAO,EAAGkmC,IACjB,GAMf,IAAK,WACL,IAAK,kBAED,OADA3jC,EAAO8T,OAAOrW,EAAO,IACd,GAIvB,OAAO,CACX,C,iHC5DA,UACA,UAEA,UACA,UAKA,UAOMqmC,EAA2D,CAC7DC,8BAA+B,uBAC/BC,mCAAoC,qBACpCjJ,wBAAyB,SAQ7B,mCACIh/B,EACAulC,GAEA,IAAMzlC,EAAkC,CACpCgxB,aAAc,EACdoS,YAAa,KACbqC,cAAa,GAwFjB,OArFA,IAAA3V,mBACI,CAAC5vB,IACD,SAAC6vB,EAAMC,EAAcpvB,EAAOmK,GAGxB,IAAI9J,GAAY,IAAAC,kBACZ,OACAhD,EACAgC,EAAM3D,QAEN6rC,EAAeloC,EAAM3D,OACrB8rC,EAAoB,EAExB,GAAIt9B,EAEIA,EAAS,IAA0B,cAApBnK,aAAK,EAALA,EAAOwD,aAItBikC,GADApnC,EAAYL,GACkBmK,SAASrK,QAAQqK,EAAS,IACxDq9B,EAAer9B,EAAS,GAAGxO,OAE3ByD,EAAQ6lC,cAAgB5kC,EACxBjB,EAAQ8lC,iBAAmB9V,EAE3BjlB,EAAShK,SAAQ,SAACkC,EAAS3I,GAEd,GAALA,GACC0F,EAAQojC,aACc,mBAAvBngC,EAAQ6a,aAUD,IAAAmoB,eAAcrlC,EAAOqC,EAASjD,EAAQylC,iBAC7CzlC,EAAQgxB,aAAe,GAPvBhxB,EAAQojC,aAAc,IAAAoD,mBAClBvjC,EACArC,EACAmvB,EACAC,EAKZ,IAK4B,GAAxBhwB,EAAQgxB,eACR,IAAAzsB,yBAAwB3D,SAG7B,GAAIA,EAAO,CAEd,IAAMuD,EAAS4rB,EAAK,GAAG5rB,QAEnB,IAAAsiC,aAAYtiC,EAAQvD,EAAOK,EAAWjB,EAAQylC,iBAC9CzlC,EAAQgxB,aAAe,E,MAExB,GAAIhB,EAAc,CAEb,IAAA70B,EAA8B60B,EAAY,MAAnC8O,EAAuB9O,EAAY,SAAzB+O,EAAa/O,EAAY,SAC5C3nB,EAAMlN,EAAMwM,KAAKo3B,GACjBh1B,EAAO1B,EAAIU,MAAM+1B,GAEvB/O,GAAO,EAAH,kBAAIhmB,IAAI,YAAKgmB,IAAI,GACrB9uB,EAAU8J,SAASvE,MAAK,IAAApF,UAASlB,EAAM3D,SACvCwN,EAAK5F,OAAS,CAAClD,UAER8I,EAAKhC,qBACLM,EAAIN,cACX/H,EAAQgxB,aAAe,C,CAG3B,IAAKhxB,EAAQojC,YAAa,CAEtB,IAAM13B,GAAS,IAAAC,uBAAsBy8B,IAErC,IAAA7jC,yBAAwBtD,GACxBA,EAAU8J,SAASkN,OAAOowB,EAAmB,EAAG38B,GAChD1L,EAAQojC,aAAc,IAAAoD,mBAAkB96B,EAAQzK,EAAW8uB,EAAMC,E,CAEzE,GACAiY,GAGGjoC,CACX,C,yFC3HA,cAEA,UACA,UAOA,yBACIiB,EACAqlC,EACAtmC,EACA/D,GAEA,IAAM8O,EAAW9J,EAAU8J,SACrBnJ,EAAQmJ,EAASrK,QAAQ4lC,GACzBY,GAAqB,IAAA7pB,uBAAsBpc,GAC3CqoB,EAAyB,WAAbrtB,EACZqsC,EAA0B,YAAbrsC,EAMnB,OAJKirC,GA8DT,SAAkCn8B,EAAiCw9B,GAG/D,I,MAFI3mC,EAAQ2mC,EAAe,EAEY,oBAAjB,QAAf,EAAAx9B,EAASnJ,UAAM,eAAEkc,cACpBlc,IAGJ,IAAMqB,EAAU8H,EAASnJ,GAErBqB,IACA,IAAAqa,wBAAuBra,EAE/B,CAzEQulC,CAAyBz9B,EAAUnJ,GAG/B0kC,EAAgBxoB,aACpB,IAAK,KACL,IAAK,QACL,IAAK,kBAED,OADA/S,EAASkN,OAAOrW,EAAO,IAChB,EAEX,IAAK,SACD,IAAMmmC,EAAYzB,EAAgBjlC,WAC5B,EACAioB,EACA,EACAgf,EACA,OACApqC,EASN,YARkBA,IAAd6pC,IACAh9B,EAASkN,OAAOrW,EAAO,GACvB5B,SAAAA,EAASgoC,gBAAgBxhC,KAAK,CAC1B/G,OAAQ6mC,EACRyB,UAAS,MAIV,EAEX,IAAK,OACD,IAAIz8B,EAAOg7B,EAAgBh7B,KAkB3B,OAhBmB,GAAfA,EAAK1H,QAAe0iC,EAAgBjlC,WACpC0J,EAASkN,OAAOrW,EAAO,GAChB3F,IACPqP,GAAO,IAAAm9B,kBAAiBn9B,EAAMge,GAEzB4d,IACD57B,GAAO,IAAAk8B,eAAcl8B,EAAMge,IAGnB,IAARhe,EACAP,EAASkN,OAAOrW,EAAO,GAEvB0kC,EAAgBh7B,KAAOA,IAIxB,EAEX,IAAK,UACD,QAAIg7B,EAAgBjlC,aAChB0J,EAASkN,OAAOrW,EAAO,IAChB,GAOvB,C,0GC/EA,4BAAiC0J,EAAcge,GAK3C,IAHA,IAAMof,GAAQ,EAAH,iCAAOp9B,IAAI,GAClBq9B,EAAe,EAGXruC,EAAIgvB,EAAY,EAAIof,EAAM9kC,OAAS,EACnCglC,EAAiD,aACrDtuC,GAAK,GAAKA,EAAIouC,EAAM9kC,QAAyB,QAAfglC,EAC9BtuC,GAAKgvB,EAAY,GAAK,EAEtB,OAAQof,EAAMpuC,IACV,IAAK,IACL,IAAK,IACL,IAAK,IACL,IAAK,IACDsuC,EAAc,aACdD,IACA,MAEJ,QACuB,cAAfC,GACAA,EAAc,UACdD,KACsB,WAAfC,IACPA,EAAc,QAQ9B,OAFAF,EAAMzwB,OAAOqR,EAAY,EAAIof,EAAM9kC,OAAS+kC,EAAcA,GAEnDD,EAAMvuB,KAAK,GACtB,C,2GCpCA,SACA,UACA,UACA,UAoBA,6BACIja,EACAgD,EACA2lC,EACAljC,EACAmjC,EACA9oC,G,QAEI+oC,EAEA/X,EADAsN,GAAc,EAGlB,GAAgB,SAAZuK,GAAmC,OAAZA,EACvBE,EAAc7oC,EACdo+B,EAAyB,SAAZuK,EAAsB,EAAI3oC,EAAMiE,OAAOP,YACjD,IAAKotB,GAAe,IAAAD,iBAAgB7wB,EAAO,GAAIF,IAAUojC,YAAa,CACnE,MAA8BpS,EAAaoS,YAAzC13B,EAAM,SAAEzK,EAAS,YAAE8uB,EAAI,OAM/B,GAJiC,GAA7BiB,EAAaA,eACb,IAAA3wB,uBAAsBH,GAGrByF,EAME,CACH,IAAMqjC,EACU,QAAZH,GACM,IAAAzK,mCAAkCrO,EAAM,CAAC,YAAa,aACtD,EACVgZ,EAAchZ,EAAKiZ,GACnB,IAAMrpC,EAAQowB,EAAKiZ,EAAY,GACzBC,EACuB,oBAAzBtpC,aAAK,EAALA,EAAO0e,iBACkB,YAAzB1e,aAAK,EAALA,EAAO0e,iBACkB,aAAzB1e,aAAK,EAALA,EAAO0e,gBACD1e,EACAsB,EACJioC,EAAaH,EAAY5kC,OAAOzD,QAAQuoC,GAC9C3K,EAAa4K,GAAc,EAAIA,EAAa,GAAK,C,KApBvC,CACV,IAAMtnC,EAAQX,EAAU8J,SAASrK,QAAQgL,GAErC9J,GAAS,GACTX,EAAU8J,SAASkN,OAAO6wB,EAAmBlnC,EAAQA,EAAQ,EAAG,EAAGsB,E,EAoB/E,GAAIo7B,GAAc,GAAKyK,EAAa,CAChC,IAAMI,EAAsC,GACxCC,OAAa,EAEjB,GAAIzjC,EAAS,CACT,IAAMy2B,EAAY2M,EAAY5kC,OAAOm6B,GAErC6K,EAAe3iC,KAAKtD,GAEQ,cAAxBk5B,aAAS,EAATA,EAAWh4B,WACXglC,EAAgBhN,EACRA,GAAoC,UAAvBA,EAAUh4B,YAAyB0kC,KACxDM,GAAgB,IAAAloC,kBAAgB,EAAsB,CAAC,EAAGhB,EAAM3D,SAClDwO,SAASvE,MAAK,IAAApF,UAASlB,EAAM3D,SAC3C4sC,EAAe3iC,KAAK4iC,G,MAGxBA,GAAgB,IAAAloC,kBACZ,OACAhD,EACAgC,EAAM3D,SAGIwO,SAASvE,KAAKtD,GAC5BimC,EAAe3iC,KAAK4iC,GAKxB,IAFA,EAAAL,EAAY5kC,QAAO8T,OAAM,6BAACqmB,EAAY,IAAC,YAAK6K,IAAc,IAEtDL,GAAoBM,EAAe,CAC7B19B,GAAS,IAAAC,wBAA+C,QAAzB,EAAAy9B,EAAcr+B,SAAS,UAAE,eAAExO,SAAU2D,EAAM3D,QAAhF,IACMwO,EAAWq+B,EAAcr+B,SAE/BpF,EAAUoF,EAASsxB,QAAQ3wB,GAAUX,EAASvE,KAAKkF,IACnD,IAAA2vB,cAAan7B,EAAOwL,EAAQA,E,EAGxC,C,0JClGA,4BAAiCqhB,GAC7B,OAAOsc,EAAuBtc,GAAQxwB,MAC1C,EASA,4BACIwwB,EACAxwB,EACAssC,GAEA,IAAMS,EAASD,EAAuBtc,GAEtCuc,EAAO/sC,OAASA,EAChB+sC,EAAOT,SAAWA,CACtB,EAMA,8BAAmC9b,GAC/B,IAAMuc,EAASD,EAAuBtc,GAEtCuc,EAAO/sC,OAAS,KAChB+sC,EAAOT,SAAW,IACtB,EAOA,iCAAsC9b,GAClC,IAAMuc,EAASD,EAAuBtc,GAClCjvB,GAAS,EAEb,GAAIwrC,EAAO/sC,QAAU+sC,EAAOT,SAAU,CAClC,IAAMA,EAAW9b,EAAOwc,sBAEpBV,aAAQ,EAARA,EAAUW,QAAQF,EAAOT,aACzB/qC,GAAS,E,CAIjB,OAAOA,CACX,EAMA,IAAM2rC,EAAyB,8BAE/B,SAASJ,EAAuBtc,GAC5B,OAAOA,EAAOmE,cAAmCuY,GAAwB,WAAM,OAC3EltC,OAAQ,KACRssC,SAAU,KAFiE,GAInF,C,kECzEA,cACA,UAOA,mBACI1jC,EACAsN,EACAmyB,GAEA,GAAInyB,EAAQ,CACR,IAAMlW,EAAS4I,EAAM5I,OACbkN,EAAwBgJ,EAAM,MAAvBzR,EAAiByR,EAAM,MAAhB8H,EAAU9H,EAAM,MAEhCyxB,GAAkB,IAAApI,qBAAoBv/B,EAAgB,WACtD4nC,EAAcD,EAAgB3pB,MAC9B6pB,EAAcF,EAAgBz6B,MAC9B8rB,EAAc2O,EAAgBljC,MAChC0oC,EAAe,GAGfA,EADAjgC,GACe,IAAAwG,oBAAmBxG,GAAS,KACpC26B,GAGQ,MAGfpjC,EACA0oC,EAAkBA,EAAY,IAAI1oC,EAC3Bu0B,EACPmU,EAAkBA,EAAY,IAAInU,EAElCmU,GAA8B,SAG9BnvB,EACAmvB,EAAkBA,EAAY,IAAInvB,EAC3B4pB,IACPuF,EAAkBA,EAAY,IAAIvF,GAEtCh/B,EAAM5I,OAAOk5B,WAAaiU,EAC1BvkC,EAAM5I,OAAOo5B,UAAY+T,EACzBvkC,EAAM5I,OAAOi5B,aAAekU,EAC5BvkC,EAAM5I,OAAOm5B,YAAcgU,C,aAEpBvkC,EAAM5I,OAAOk5B,kBACbtwB,EAAM5I,OAAOo5B,iBACbxwB,EAAM5I,OAAOi5B,oBACbrwB,EAAM5I,OAAOm5B,YAGpBkP,IACAz/B,EAAM5I,OAAOqoC,aAAeA,EAEpC,C,eCtCA,SAAS+E,EAAcppC,EAA+BzC,GAClDyC,EAAM4D,OAAOpD,SAAQ,SAAAH,GACjB,OAAQA,EAAMwD,WACV,IAAK,aAC2B,YAAxBxD,EAAMyd,eACNvgB,EAAO0I,KAAK5F,IAEZgpC,EAAoB9rC,GACpB6rC,EAAc/oC,EAAO9C,GACrB8rC,EAAoB9rC,IAExB,MAEJ,IAAK,YACD8rC,EAAoB9rC,GAEpB8C,EAAMmK,SAAShK,SAAQ,SAAAkC,GACQ,WAAvBA,EAAQ6a,aACR6rB,EAAc1mC,EAASnF,EAE/B,IAEA8rC,EAAoB9rC,GACpB,MAEJ,IAAK,QACD8rC,EAAoB9rC,GAEpB8C,EAAM+G,KAAK5G,SAAQ,SAAAsH,GACf,OAAAA,EAAIU,MAAMhI,SAAQ,SAAAgJ,GACd4/B,EAAc5/B,EAAMjM,EACxB,GAFA,IAIJ8rC,EAAoB9rC,GAIhC,GACJ,CAEA,SAAS8rC,EAAoB9rC,GACzB,IAAM+gB,EAAO/gB,EAAOA,EAAO8F,OAAS,GAE/Bib,GAAiB,OAATA,GACT/gB,EAAO0I,KAAK,KAEpB,CA4DA,SAASqjC,EACLC,EACAvB,EACAwB,GAEA,IAAMC,EAAgBF,EAAUvB,GAAensC,OACzC6tC,EAAkBH,EAAUC,GAAiB3tC,OAEnD,OACI4tC,EAAcpmC,QAAUqmC,EAAgBrmC,QACxComC,EAAch+B,OACV,SAAC4qB,EAAct8B,GAAM,OAAAs8B,EAAare,UAAY0xB,EAAgB3vC,GAAGie,QAA5C,GAGjC,CAEA,SAAS2xB,EAAuBjP,EAA4BkP,GACxD,OAAOlP,EAAK7+B,OACP6S,MAAM,EAAGk7B,GACTpkC,MAAK,SAAAY,GAAS,YAAqCzI,IAArCyI,EAAMpK,OAAO2b,mBAAb,GACvB,C,oFAzIA,qCACIhY,EACAkqC,GAEA,IAAMtb,EAAyC,GAI/C,OAFA6a,EAAczpC,EAAO4uB,GAqDzB,SACIA,EACAsb,G,MAEMtsC,EAAiC,GACjCyqC,EAAezZ,EAAMpuB,QAAQ0pC,GAC7BD,EAAcC,EAAYhuC,OAAOwH,OACjCymC,EAAiE,OAAd,QAAnC,EAAAD,EAAYhuC,OAAO+tC,EAAc,UAAE,eAAE5xB,UAE3D,GAAIgwB,GAAgB,EAAG,CACnB,IAAK,IAAIjuC,EAAIiuC,EAAcjuC,GAAK,EAAGA,IAAK,CAGpC,KAFM2gC,EAAOnM,EAAMx0B,IAER,CACP,GAAI+vC,EACA,SAEA,K,CAIR,IAAMnyB,EAAsBgyB,EAAuBjP,EAAMkP,GAEzD,GAAIN,EAAuB/a,EAAOyZ,EAAcjuC,IAG5C,GAFAwD,EAAOu+B,QAAQpB,GAEXoP,GAAiBnyB,EACjB,WAED,IAAKmyB,GAAiBnyB,EACzB,K,CAIR,IAAS5d,EAAIiuC,EAAe,EAAGjuC,EAAIw0B,EAAMlrB,OAAQtJ,IAAK,CAClD,IAAM2gC,EAEN,KAFMA,EAAOnM,EAAMx0B,IAER,CACP,GAAI+vC,EACA,SAEA,K,CAMR,GAFMnyB,EAAsBgyB,EAAuBjP,EAAMkP,GAErDN,EAAuB/a,EAAOyZ,EAAcjuC,KAAO4d,EACnDpa,EAAO0I,KAAKy0B,QACT,IAAKoP,GAAiBnyB,EACzB,K,EAKZ,OAAOpa,CACX,CA3GWwsC,CAAgBxb,EAAOsb,EAClC,C,uFClBA,cACA,UACA,UA+FA,SAASG,EAAkB3pC,GACvB,OAAQA,EAAMwD,WACV,IAAK,QACD,OAAO,EACX,IAAK,YACD,OAAOxD,EAAMmK,SAASiB,OAClB,SAAAhP,GAAK,MAAiB,MAAjBA,EAAE8gB,aAAwC,mBAAjB9gB,EAAE8gB,WAA3B,IAEb,QACI,OAAO,EAEnB,CA3FA,uBAA4B5d,EAA6BqY,GACrD,IAAMiyB,GAAuB,IAAA1N,sBACzB58B,EACA,CAAC,YACD,IAEEuqC,EAAwBD,EAAqBx+B,OAAM,SAAC,G,MAAEpL,EAAK,QAC7D,WAAAw8B,oBAAyCx8B,EAAO,aACL,QAArC,EAAAA,EAAMxE,OAAOwE,EAAMxE,OAAOwH,OAAS,UAAE,eAAE2U,WAAYA,EACnDgyB,EAAkB3pC,E,IAExB8pC,EAA4C,GAC5CC,GAA4B,EAiEhC,OA/DAH,EAAqBzpC,SAAQ,SAAC,EAAmB6pC,G,QAAjBhqC,EAAK,QAAEuB,EAAM,SACzC,IAAI,IAAAi7B,oBAAyCx8B,EAAO,YAAa,CAC7D,IAAM+F,EAAQ/F,EAAMxE,OAAOiL,OAEtBojC,GAAyB9jC,GAC1BA,EAAM4R,SAAWA,EACjB3X,EAAMxE,OAAOoK,KAAKG,IACY,GAAvB/F,EAAMuD,OAAOP,SACpB,IAAAW,yBAAwB3D,EAAMuD,OAAO,G,KAEtC,CACH,IAAMvC,EAAQO,EAAOgC,OAAOzD,QAAQE,GAEpC,GAAIgB,GAAS,EACT,GAAmC,GAA/B4oC,EAAqB5mC,QAAgB2mC,EAAkB3pC,GAsCvD+pC,GAA4B,EAE5BD,EAAkB3pC,SAAQ,SAAA/D,GAAK,OAACA,EAAEZ,OAAO,GAAGG,OAAOxE,aAAe,GAAnC,IAC/B2yC,EAAoB,OAzC2C,CAC/D,IAAMpF,EAAYnjC,EAAOgC,OAAOvC,EAAQ,GAClC1F,EACkB,aAAnB0E,EAAMwD,YAA6C,QAAjB,EAAAxD,EAAMmK,SAAS,UAAE,eAAExO,SAAW,CAAC,EAChEsmC,GAAc,IAAAv8B,gBAChB,EACI,IAAAM,iBAAgB2R,EAAU,CACtBL,oBACI0yB,EAAY,GACa,eAAxBtF,aAAS,EAATA,EAAWlhC,YACoB,YAA5BkhC,EAAUjnB,gBACuB,OAAd,QAAnB,EAAAinB,EAAUlpC,OAAO,UAAE,eAAEmc,eACnBra,EACA,EACVjC,UAAW2E,EAAMrE,OAAON,UACxBzC,UAAWoH,EAAMrE,OAAO/C,UACxB1B,UAAW6yC,EAA4B,SAAMzsC,KAIrD,CACI/F,WAAY+D,EAAc/D,WAC1BG,SAAU4D,EAAc5D,SACxBuL,UAAW3H,EAAc2H,YAMV,aAAnBjD,EAAMwD,YACNxD,EAAMyD,YAAa,GAGvBw+B,EAAY1+B,OAAOqC,KAAK5F,GAExBuB,EAAOgC,OAAO8T,OAAOrW,EAAO,EAAGihC,GAC/B6H,EAAkBlkC,KAAKq8B,E,EASvC,KAEA,IAAAxiC,uBAAsBH,GAEfsqC,EAAqB5mC,OAAS,CACzC,C,kGC/FA,cACA,UAMA,kCACI1D,EACA2qC,EACAC,GAEA,IACIzqB,EACAxB,EAFEksB,GAAa,IAAAC,uBAAsB9qC,GAGrC+qC,GAAU,EAqCd,OAnCAF,EAAWhqC,SAAQ,SAAAnI,GACf,IAAMgJ,EAAQye,EAAQ,EAAIznB,EAAEmS,SAASmgC,WAAU,SAAAluC,GAAK,OAAA6tC,EAAa7tC,EAAb,IAC9C+N,EAAWnS,EAAEmS,SAEnB,IAAKsV,EAAO,CACRA,EAAQtV,EAASnJ,GAEjB,IAAK,IAAItH,EAAIsH,EAAOtH,EAAI,EAAGA,IAAK,CAC5B,IAAIwwC,EAAe//B,EAASzQ,EAAI,GAAI+lB,GAG7B,CACH4qB,EAAUA,KAAalgC,EAASzQ,EAAI,GAAG+G,WACvC,K,CAJAgf,EAAQtV,EAASzQ,EAAI,GACrB2wC,EAAUA,IAAYlgC,EAASzQ,EAAI,GAAG+G,U,EAQlD,GAAIgf,EACA,IAAS/lB,EAAIsH,EAAOtH,EAAI1B,EAAEmS,SAASnH,OAAQtJ,IAAK,CAC5C,GAAIA,GAAKsH,IAASkpC,EAAe//B,EAASzQ,GAAIukB,GAAQ9T,EAASnJ,IAGxD,CACHqpC,EAAUA,KAAalgC,EAASzQ,GAAG+G,WACnC,K,CAJAwd,EAAO9T,EAASzQ,GAChB2wC,EAAUA,IAAYlgC,EAASzQ,GAAG+G,U,CAOlD,IAEIgf,GAASxB,IACT,IAAAwc,cAAan7B,EAAOmgB,EAAOxB,GAGxBosB,CACX,C,6GCrDA,UACA,UACA,UAuGA,SAASE,EAAcloC,EAA2BmoC,GAC9C,IAAMC,EAAOpoC,EAAQqI,KACjB+uB,GAAU,EACd,GAAI+Q,EACA,IAAK,IAAI9wC,EAAI,EAAGA,EAAI+wC,EAAKznC,OAAQtJ,IAAK,CAClC,IAAM8uB,EAAOiiB,EAAK/wC,GAElB,IAAI,IAAA8sC,eAAche,KAAS,IAAAke,SAAQle,GAAO,CACtCiR,EAAS//B,EACT,K,OAIR,IAASA,EAAI+wC,EAAKznC,OAAS,EAAGtJ,GAAK,EAAGA,IAGlC,GAFM8uB,EAAOiiB,EAAK/wC,IAEd,IAAA8sC,eAAche,KAAS,IAAAke,SAAQle,GAAO,CACtCiR,EAAS//B,EAAI,EACb,K,CAIZ,OAAO+/B,CACX,CAEA,SAASiR,EACLvgC,EACA21B,EACA9+B,EACA2pC,GAEA,IAAMjgC,EAAOo1B,EAAYp1B,KACnBkgC,GAAiB,IAAA//B,YACnBH,EAAKJ,UAAU,EAAGqgC,GAClB7K,EAAYnkC,OACZmkC,EAAYpkC,KACZokC,EAAYxoC,MAEVuzC,GAAkB,IAAAhgC,YACpBH,EAAKJ,UAAUqgC,EAAOjgC,EAAK1H,QAC3B88B,EAAYnkC,OACZmkC,EAAYpkC,KACZokC,EAAYxoC,MAEhB6S,EAASkN,OAAOrW,EAAO,EAAG4pC,EAAgBC,EAC9C,CAzIA,+BACIvrC,EACAwL,GAEA,IAAIggC,GAEJ,IAAA5b,mBAAkB,CAAC5vB,IAAQ,SAAC6vB,EAAMC,EAAcpvB,EAAOmK,GAKnD,MAHwB,cAApBnK,aAAK,EAALA,EAAOwD,YAAgD,IAApB2G,aAAQ,EAARA,EAAUnH,SAAemH,EAAS,IAAMW,IAC3EggC,EAAc9qC,IAEX,CACX,IAEA,IAAM+qC,EAAeD,GAAc,EAAD,iCAAKA,EAAY3gC,WAAQ,QAAI7M,EAE/D,GAAIytC,GAAgBD,EAAa,CAG7B,IAFA,IAAM3gC,EAAkC,GACpC6gC,EAAuBD,EAAajrC,QAAQgL,GACvCpR,EAAIsxC,EAAuB,EAAGtxC,GAAK,GAEN,SAD5BuxC,EAAiBF,EAAarxC,IACjBwjB,YAFwBxjB,IAAK,CAI5C,IADMixC,EAAQJ,EAAcU,GAAgB,KAC/B,EAAG,CACZ,GAAIN,GAASM,EAAevgC,KAAK1H,OAC7B,MAGJ0nC,EAAiBK,EAAcE,EAAgBvxC,EAAGixC,GAElDxgC,EAASvE,KAAKmlC,EAAarxC,EAAI,IAE/B,K,CAEAyQ,EAASvE,KAAKmlC,EAAarxC,G,CAWvC,GAJAsxC,EAAuBD,EAAajrC,QAAQgL,GAC5CX,EAASvE,KAAKkF,GAGVX,EAASnH,QAAU,EACnB,OAAOmH,EAGX,IAASzQ,EAAIsxC,EAAuB,EAAGtxC,EAAIqxC,EAAa/nC,OAAQtJ,IAAK,CACjE,IAAMuxC,EAEIN,EADV,GAAkC,SAD5BM,EAAiBF,EAAarxC,IACjBwjB,YAaf,MAXA,IADMytB,EAAQJ,EAAcU,GAAgB,KAC/B,EAAG,CACZ,GAAa,GAATN,EACA,MAEJD,EAAiBK,EAAcE,EAAgBvxC,EAAGixC,GAClDxgC,EAASvE,KAAKmlC,EAAarxC,IAC3B,K,CAEAyQ,EAASvE,KAAKmlC,EAAarxC,G,CAQvC,OAAIyQ,EAASA,EAASnH,OAAS,IAAM8H,EAC1B,CAACA,IAGZggC,EAAY3gC,SAAW4gC,EAChB5gC,E,CAEP,MAAO,CAACW,EAEhB,C,wFCrFA,0BAA+BogC,EAAoBC,GAC/C,GAAID,GAAQC,EACR,OAAO,EAGX,OAAQD,EAAK9pC,MACT,IAAK,QACD,MAAoB,SAAb+pC,EAAK/pC,MAAmB+pC,EAAK5mC,OAAS2mC,EAAK3mC,MAEtD,IAAK,QACD,MACiB,SAAb4mC,EAAK/pC,MACL+pC,EAAK5wC,OAAS2wC,EAAK3wC,OACnB4wC,EAAK1hC,aAAeyhC,EAAKzhC,aACzB0hC,EAAKzhC,YAAcwhC,EAAKxhC,YACxByhC,EAAK5hC,UAAY2hC,EAAK3hC,UACtB4hC,EAAK3hC,SAAW0hC,EAAK1hC,QAI7B,QACI,MAAoB,SAAb2hC,EAAK/pC,OAIDgqC,EAJkCD,EAAK9pC,MAI3BgqC,EAJkCH,EAAK7pC,SAMlE+pC,IACAC,GACAD,EAAG7/B,gBAAkB8/B,EAAG9/B,gBACxB6/B,EAAG5/B,aAAe6/B,EAAG7/B,aACrB4/B,EAAG3/B,cAAgB4/B,EAAG5/B,cACtB2/B,EAAG1/B,WAAa2/B,EAAG3/B,YAP3B,IAAuB0/B,EAAYC,CAFnC,C,iGC7BA,cAOA,kCACItkC,EACA1H,G,MAEQisC,EAAuBjsC,EAAS,SAClC8J,EAAqB,QAAd,EAAApC,EADkB1H,EAAS,iBACb,eAAE8I,MAAMmjC,GAC/BniC,IACA,IAAAzI,YAAWyI,GAAM,IAAA4B,yBAEzB,C,4NChBA,UACA,UACA,UAqEA,SAAgBmxB,EACZ58B,EACAihC,EACAC,EACA+K,GAEA,IAAMruC,EAAiC,GACjCsuC,EAAeD,EAAYhL,EAAgBpkC,KAAI,SAAAiF,GAAQ,OAACA,EAAD,IAAU,CAACm/B,GAClEkL,EAAaC,EAAkBpsC,EAAO,CACxCg/B,wBAAyB,QACzBgJ,8BAA+B,mBA2BnC,OAxBAqE,EAA6BF,GAE7BA,EAAWtrC,SAAQ,SAAC,GAChB,I,IADkBgvB,EAAI,OAAEnvB,EAAK,Q,WACpBtG,GACL,IAAMkyC,GAAa,IAAApO,mCAAkCrO,EAAMqc,EAAa9xC,GAAI8mC,GAE5E,OAAIoL,GAAc,GACV1uC,EAAOsN,QAAO,SAAApO,GAAK,OAAAA,EAAE4D,OAASmvB,EAAKyc,EAAhB,IAA6B5oC,QAAU,GAC1D9F,EAAO0I,KAAK,CACRrE,OAAQ4tB,EAAKyc,EAAa,GAC1B5rC,MAAOmvB,EAAKyc,K,SAIblyC,GAAK8xC,EAAaxoC,OAAS,GAAKhD,GACvC9C,EAAO0I,KAAK,CACRrE,OAAQ4tB,EAAK,GACbnvB,MAAOA,I,cAHR,C,EAXFtG,EAAI,EAAGA,EAAI8xC,EAAaxoC,Q,YAAxBtJ,GAAgCA,KAmB7C,IAEOwD,CACX,CA0DA,SAASwuC,EACLpsC,EACAypB,GAEA,IAAM0iB,EAA8B,GAepC,OAbA,IAAAvc,mBACI,CAAC5vB,IACD,SAAC6vB,EAAMC,EAAcpvB,EAAOmK,GACxBshC,EAAW7lC,KAAK,CACZupB,KAAI,EACJC,aAAY,EACZpvB,MAAK,EACLmK,SAAQ,GAEhB,GACA4e,GAGG0iB,CACX,CAEA,SAASE,EAA6BF,GAE9BA,EAAWzoC,OAAS,GACpBu7B,EAA8BkN,GAAY,IAE1CA,EAAWhlC,MAKXglC,EAAWzoC,OAAS,GACpBu7B,EAA8BkN,GAAY,IAE1CA,EAAW/P,OAEnB,CAEA,SAAS6C,EACLkN,EACAI,G,MAEMxsC,EAAYosC,EAAWI,EAAsB,EAAIJ,EAAWzoC,OAAS,GAE3E,GACkC,cAAf,QAAf,EAAA3D,EAAUW,aAAK,eAAEwD,YACjBnE,EAAU8K,UACV9K,EAAU8K,SAASnH,OAAS,EAC9B,CACE,IAAM8oC,EAAczsC,EAAUW,MAAMmK,SAC9B9H,EAAUhD,EAAU8K,SAAS,GAEnC,OACiC,GAA7B9K,EAAU8K,SAASnH,QACI,mBAAvBX,EAAQ6a,aACR7a,GAAWypC,EAAYD,EAAsBC,EAAY9oC,OAAS,EAAI,E,CAG1E,OAAO,CAEf,CAxMA,4CACI1D,EACAysC,GAEA,IAAMN,EAAaC,EAAkBpsC,EAAO,CACxCg/B,wBAAyByN,EAAwB,cAAgB,UAE/D7uC,EAAgE,GAYtE,OAVAuuC,EAAWtrC,SAAQ,SAAC,G,IAAEgK,EAAQ,WAAEnK,EAAK,QAC7BmK,IAAc4hC,IAA0B/rC,GAA8B,cAApBA,aAAK,EAALA,EAAOwD,aACzD2G,EAAShK,SAAQ,SAAAkC,GACc,UAAvBA,EAAQ6a,aAA4B7a,EAAQG,aAAayK,YACzD/P,EAAO0I,KAAK,CAACvD,EAA6B,cAApBrC,aAAK,EAALA,EAAOwD,WAA2BxD,EAAQ,MAExE,GAER,IAEO9C,CACX,EAKA,iCAAsCoC,GAClC,IAAMmsC,EAAaC,EAAkBpsC,EAAO,CAAEg/B,wBAAyB,UACjEphC,EAAkC,GAUxC,OARAyuC,EAA6BF,GAE7BA,EAAWtrC,SAAQ,SAAC,G,IAAEH,EAAK,QACC,cAApBA,aAAK,EAALA,EAAOwD,YACPtG,EAAO0I,KAAK5F,EAEpB,IAEO9C,CACX,EAKA,yBA2CA,iCACIoC,GAEA,IACI/E,EADEkxC,EAAaC,EAAkBpsC,EAAO,CAAEg/B,wBAAyB,UAEnE0N,EAAuC,GAqB3C,OAnBAL,EAA6BF,GAE7BA,EAAWtrC,SAAQ,SAAC,G,IAAEH,EAAK,QAAEovB,EAAY,eAAED,EAAI,OAC3C,IAAK50B,EACD,GAAwB,UAApByF,aAAK,EAALA,EAAOwD,WACPjJ,EAAQyF,EACRgsC,GAAa,EAAH,iCAAO7c,IAAI,QAClB,GAAIC,aAAY,EAAZA,EAAc70B,MAAO,CAC5BA,EAAQ60B,EAAa70B,MAErB,IAAM,EAAS40B,EAAK3kB,QAChB,SAAA7K,GAAS,OAAAA,EAAM4D,OAAOzD,QAAQsvB,EAAa70B,QAAU,CAA5C,IACX,GACIyG,EAAQmuB,EAAKrvB,QAAQ,GAC3BksC,EAAahrC,GAAS,EAAImuB,EAAK9gB,MAAMrN,GAAS,E,CAG1D,IAEO,CAACzG,EAAOyxC,EACnB,EAKA,oCACI1sC,GAEA,IAAImG,EAQJ,OANAy2B,EAAqB58B,EAAO,CAAC,YAAa,CAAC,cAAca,SAAQ,SAAA4d,IACxDtY,IAAY,IAAA+2B,oBAAyCze,EAAE/d,MAAO,cAC/DyF,EAAWsY,EAAE/d,MAErB,IAEOyF,CACX,C,8FCzJA,gCAAqCpG,GACjC,OAAQA,EAEgB,SAAlBA,EAAU+B,KACV/B,EAAUgC,MAAM4qC,wBACE,SAAlB5sC,EAAU+B,KACV/B,EAAU9E,MACQ,SAAlB8E,EAAU+B,KACV/B,EAAUkF,WACVjH,OAPAA,CAQV,C,2GC8DA,SAAS4uC,EACL/c,EACAljB,EACA8c,EACAxuB,EACA4xC,GAWA,IATA,IAAM5qC,EAAS4tB,EAAK,GACdmP,GAA0BvV,aAAM,EAANA,EAAQuV,0BAA2B,cAC7DgJ,GAAgCve,aAAM,EAANA,EAAQue,gCAAiC,UACzEC,GACFxe,aAAM,EAANA,EAAQwe,qCAAsC,cAE9C6E,GAAqB,EACrBC,GAAuB,EAElB3yC,EAAI,EAAGA,EAAI6H,EAAOgC,OAAOP,OAAQtJ,IAAK,CAC3C,IAAMsG,EAAQuB,EAAOgC,OAAO7J,GAE5B,OAAQsG,EAAMwD,WACV,IAAK,aACD,IAAM+3B,GAAU,EAAH,kBAAIv7B,IAAK,YAAKmvB,IAAI,GAE/B,GAA4B,WAAxBnvB,EAAMyd,eAA6B,CACnC,IACM6uB,IADA7rC,EAAa0rC,GAAoBnsC,EAAMS,aAGH,QAAtC8mC,GACsC,eAAtCA,EACEgF,EACF9rC,IACuC,QAAtC8mC,GACyC,sBAAtCA,GACuB,GAAvBvnC,EAAMuD,OAAOP,QAErB,GACKspC,GACGJ,EACI3Q,EACAtvB,EACA8c,EACAxuB,EACAkG,IAEP8rC,GAAwBtgC,EAASkjB,EAAM50B,EAAOyF,GAE/C,OAAO,C,MAER,GACHksC,EAA0B3Q,EAAStvB,EAAU8c,EAAQxuB,EAAO4xC,GAE5D,OAAO,EAEX,MAEJ,IAAK,QACD,IAAMplC,EAAO/G,EAAM+G,KACbq3B,EAAuBr3B,EAAKqE,OAAM,SAAA3D,GACpC,OAAAA,EAAIU,MAAMiD,OAAM,SAAAjC,GAAQ,OAAAA,EAAK1I,UAAL,GAAxB,IAGJ,GAAqC,WAAjC6mC,GAA8ClJ,GAC9C,GAAInyB,EAASkjB,EAAM50B,EAAOyF,GACtB,OAAO,OAGX,IAAK,IAAIm+B,EAAW,EAAGA,EAAWp3B,EAAK/D,OAAQm7B,IAG3C,IAFA,IAAM12B,EAAMV,EAAKo3B,GAERD,EAAW,EAAGA,EAAWz2B,EAAIU,MAAMnF,OAAQk7B,IAAY,CAC5D,IAAM/0B,EAAO1B,EAAIU,MAAM+1B,GACvB,GAAK/0B,EAAL,CAIA,IAAMk4B,EAAkC,CACpC9mC,MAAOyF,EACPm+B,SAAQ,EACRD,SAAQ,EACRE,qBAAoB,GAGxB,GAAIj1B,EAAK1I,YAAcwL,EAASkjB,EAAMkS,GAClC,OAAO,EAGX,KACKl4B,EAAK1I,YAC2B,wBAAjC6mC,IAMI4E,GAJY,EAAH,kBAAI/iC,IAAI,YAAKgmB,IAAI,GAMtBljB,EACA8c,EACAsY,EAPF5gC,EAAa0rC,GAAoBhjC,EAAK1I,YAWxC,OAAO,C,EAO3B,MAEJ,IAAK,YAGD,IAFA,IAAM0J,EAAkC,GAE/B,EAAI,EAAG,EAAInK,EAAMmK,SAASnH,OAAQ,IAAK,CAC5C,IAAMX,EAAUrC,EAAMmK,SAAS,GACzB1J,EAAa0rC,GAAoB9pC,EAAQ5B,WAE/C,GAA2B,WAAvB4B,EAAQ6a,YAA0B,CAWlC,GAVMovB,GACD7rC,GACqC,QAAtC8mC,GACsC,eAAtCA,EACEgF,EACF9rC,IACuC,QAAtC8mC,GACyC,sBAAtCA,GACyB,GAAzBllC,EAAQkB,OAAOP,QAGnBspC,GACAJ,GAA0B,EAAD,kBACpB7pC,IAAO,YAAK8sB,IAAI,GACjBljB,EACA8c,EACAxuB,EACAkG,GAGJ,OAAO,EAGP8rC,GACApiC,EAASvE,KAAKvD,E,MAEX5B,GACP0J,EAASvE,KAAKvD,GAGd5B,EACA2rC,GAAqB,EAErBC,GAAuB,C,CAI/B,GAAIliC,EAASnH,OAAS,GAAKiJ,EAASkjB,EAAM50B,EAAOyF,EAAOmK,GACpD,OAAO,EAEX,MAEJ,IAAK,UACL,IAAK,SACD,IAAKgiC,GAAoBnsC,EAAMS,aAAewL,EAASkjB,EAAM50B,EAAOyF,GAChE,OAAO,E,CAOvB,QAC+B,SAA3Bs+B,GACyB,YAAzB/8B,EAAOkc,iBACP2uB,GACEC,GAAmD,cAA3B/N,IAE1BryB,EAASkjB,EAAM50B,OAAO+C,EAAqB,CAACiE,EAAOqe,eAM3D,CA3MA,6BACIuP,EACAljB,EACA8c,EACAxuB,EACA4xC,GAYAD,EAA0B/c,GAV0B,SAACA,EAAMC,EAAcpvB,EAAOmK,G,MAO5E,OAN2C,QAArC,EAACnK,SAAoC,eAAEmH,uBAGjCnH,EAAqCmH,cAG1C8E,EAASkjB,EAAMC,EAAcpvB,EAAOmK,EAC/C,GAEkD4e,EAAQxuB,EAAO4xC,EACrE,C,wFC3EA,cAgBA,SAASK,EACL7sC,EACAzE,EACA0c,EACA+C,GAEA,OAAO8xB,EAAgBvxC,EAAeyE,EAAOiY,EAAO+C,GAAK,SAAAzf,GASrD,OARI,IAAAqhB,kBAAiB5c,IACjB+sC,EAAc/sC,EAAOzE,GAGzByE,EAAM4D,OAAOpD,SAAQ,SAAAH,GACjB9E,EAOZ,SACI8E,EACA9E,EACA0c,EACA+C,GAEA,OAAQ3a,EAAMwD,WACV,IAAK,aACD,OAAOgpC,EAAyBxsC,EAAO9E,EAAe0c,EAAO+C,GAEjE,IAAK,QACD,OAmDZ,SACIpgB,EACAW,EACA0c,EACA+C,GAEA,IAAM8E,EAAQktB,EAASpyC,EAAOqd,GACxBqG,EAAOtD,EAAMgyB,EAASpyC,EAAOogB,GAAO8E,EAE1C,GAAKvkB,EAqBDX,EAAMwM,KAAK5G,SAAQ,SAAAsH,GACf,OAAAA,EAAIU,MAAMhI,SAAQ,SAAAgJ,GACdjO,EAAgBsxC,EAAyBrjC,EAAMjO,EAAe0c,EAAO+C,EACzE,GAFA,SArBJ,IAAK,IAAIlT,EAAM,EAAGA,EAAMlN,EAAMwM,KAAK/D,OAAQyE,IAEvC,IADA,IAAMmlC,EAAaryC,EAAMwM,KAAKU,GACrBkC,EAAM,EAAGA,EAAMijC,EAAWzkC,MAAMnF,OAAQ2G,IAAO,CACpD,IAAMkjC,EAActyC,EAAMwM,KAAKU,GAAKU,MAAMwB,GACpClJ,EACFgH,GAAOgY,EAAMhY,KAAOA,GAAOwW,EAAKxW,KAAOkC,GAAO8V,EAAM9V,KAAOA,GAAOsU,EAAKtU,IAE3E+iC,EAAcG,EAAapsC,GAEtBA,GACD+rC,EACIK,GACA,EACA,KACA,K,CAapB,OAAO3xC,CACX,CAzFmB4xC,CAAoB9sC,EAAO9E,EAAe0c,EAAO+C,GAE5D,IAAK,UACL,IAAK,SACD,OAAO8xB,EAAgBvxC,EAAe8E,EAAO4X,EAAO+C,GAAK,SAAAzf,GAOrD,OANIA,EACA8E,EAAMS,YAAa,SAEZT,EAAMS,WAGVvF,CACX,IAEJ,IAAK,YACD,IAAM,EAA6B,GAqBnC,IAnBA8E,EAAMmK,SAAShK,SAAQ,SAACkC,EAAS3I,GAC7BwB,EAAgBuxC,EACZvxC,EACAmH,EACAuV,EACA+C,GACA,SAAAzf,GACI,OA4ExB,SACImH,EACAnH,EACA6xC,EACAn1B,EACA+C,EACAjhB,GAEA,OAAQ2I,EAAQ6a,aACZ,IAAK,kBAOD,QANKhiB,GAAkBmH,GAAWuV,GAASvV,GAAWsY,IAIlDoyB,EAAiBnnC,KAAKlM,GAEnBwB,EAEX,IAAK,UAGD,OAFAwxC,EAAcrqC,EAASnH,GAEhBmH,GAAWuV,GAASvV,GAAWsY,EAChC6xB,EAAyBnqC,EAASnH,EAAe0c,EAAO+C,GACxDzf,EAEV,IAAK,QAGD,OAFAwxC,EAAcrqC,EAASnH,GACvBmH,EAAQuC,2BAA6BgT,GAASvV,KAAasY,GAAOA,GAAOtY,GAClEnH,EACX,QAEI,OADAwxC,EAAcrqC,EAASnH,GAChBA,EAEnB,CA7G+B8xC,CACH3qC,EACAnH,EACA,EACA0c,EACA+C,EACAjhB,EAER,GAER,IAEO,EAAiBsJ,OAAS,GAAG,CAChC,IAAMhC,EAAQ,EAAiByF,MAE3BzF,GAAS,GACThB,EAAMmK,SAASkN,OAAOrW,EAAO,E,CAIrC,OAAO9F,EAEX,QACI,OAAOA,EAEnB,CAnE4B+xC,CAAoBjtC,EAAO9E,EAAe0c,EAAO+C,EACrE,IAEOzf,CACX,GACJ,CAwGA,SAASyxC,EAASpyC,EAA0B4O,GACxC,IAAIQ,GAAO,EAKX,MAAO,CAAElC,IAJG0B,EACN5O,EAAMwM,KAAKujC,WAAU,SAAA7iC,GAAO,OAACkC,EAAOlC,EAAIU,MAAuBrI,QAAQqJ,KAAU,CAArD,KAC3B,EAEOQ,IAAG,EACrB,CAqCA,SAAS+iC,EAAc5S,EAAwB18B,GAO3C,OANIA,EACA08B,EAAWr5B,YAAa,SAEjBq5B,EAAWr5B,WAGfrD,CACX,CAEA,SAASqvC,EACLvxC,EACAoE,EACAsY,EACA+C,EACA1O,GAIA,OADA/Q,EAAgB+Q,EADhB/Q,EAAgBA,GAAiBoE,GAASsY,OAEhB+C,GAAOrb,GAASqb,CAC9C,CA7LA,wBAA6Bhb,EAA+BiY,EAAoB+C,GAC5E6xB,EAAyB7sC,GAAO,EAAyBiY,GAAS,KAAM+C,GAAO,KACnF,C,oFCPA,sBACIpgB,EACA4sC,GAQA5sC,EAAMoB,OAAOvE,WAA0B,IAAb+vC,EAAwC,GAAK,OACvE5sC,EAAMoB,OAAOtE,YAA2B,IAAb8vC,EAAyC,GAAK,cAElE5sC,EAAM4M,aACjB,C,kGCrBA,cAEA,SAIM+lC,IAAiB,MACnB,IAAgC,QAChC,MAAkC,SAClC,MAAiC,M,GAG/BC,IAAqB,MACvB,IAA+B,MAC/B,MAAkC,SAClC,MAAkC,S,GAMtC,0BACI5yC,EACA4sC,G,MAcMiG,GAAM,IAAAC,kBAAiB9yC,GAE7B,GAAI6yC,EAIA,IAHA,IAAMx0C,EAAYs0C,EAAkB/F,GAC9B9sC,EAAgB8yC,EAAsBhG,GAEnChJ,EAAWiP,EAAI7jC,SAAU40B,GAAYiP,EAAI5jC,QAAS20B,IACvD,IAAK,IAAID,EAAWkP,EAAI9B,SAAUpN,GAAYkP,EAAIE,QAASpP,IAAY,CACnE,IAAM/0B,EAA2B,QAApB,EAAA5O,EAAMwM,KAAKo3B,UAAS,eAAEh2B,MAAM+1B,GACnCviC,EAASwN,aAAI,EAAJA,EAAMxN,OAEjBA,WACOwN,EAAKhC,cAEZxL,EAAO/C,UAAYA,GAAa+C,EAAO/C,UACvC+C,EAAOtB,cAAgBA,GAAiBsB,EAAOtB,cAE3CA,IACA,IAAA+gC,yBAAwBjyB,GAAM,SAAAhD,GAG1B,OAFAA,EAAWA,GAAY,CAAC,GACfqhB,gBAAiB,EACnBrhB,CACX,IAGJgD,EAAK5F,OAAOpD,SAAQ,SAAAH,GACQ,cAApBA,EAAMwD,kBACCxD,EAAMrE,OAAO/C,SAE5B,I,CAKpB,C,gHCvEA,UACA,UACA,UAEA,SACA,UAQM20C,EAAgD,CAClD3lB,eAAgB,UAChBC,kBAAmB,UACnBC,oBAAqB,UACrBC,cAAc,EACdE,gBAAgB,EAChBE,eAAe,EACfD,kBAAkB,EAClBE,YAAa,KACbC,WAAY,YACZL,eAAgB,UAChBM,kBAAmB,EACnBjuB,cAAe,MAWnB,4BACIE,EACA6rB,EACAonB,GAEQ,IAAAzmC,EAASxM,EAAK,MAEtB,IAAA8gC,qBAAoB9gC,GAAO,SAAAoB,GACvB,IAAM8xC,GAAoB,EAAH,6CAChBF,GACA5xC,GACCyqB,GAAa,CAAC,GAGhBsnB,EAsBd,SAAyB3mC,EAA8B4mC,GACnD,IAAM/wC,EAA2B,CAAEgxC,iBAAkB,GAAIC,gBAAiB,IAwB1E,OAtBA9mC,EAAK5G,SAAQ,SAAAsH,GACT,IAAMmmC,EAA8B,GAC9BC,EAA6B,GAEnCjxC,EAAUgxC,iBAAiBhoC,KAAKgoC,GAChChxC,EAAUixC,gBAAgBjoC,KAAKioC,GAE/BpmC,EAAIU,MAAMhI,SAAQ,SAAAgJ,IACd,IAAAiyB,yBAAwBjyB,GAAM,SAAAhD,GAS1B,OARIA,GAAYwnC,GACZC,EAAiBhoC,MAAK,UACfO,EAASmhB,iBAEhBsmB,EAAiBhoC,QAAOO,aAAQ,EAARA,EAAUmhB,kBAEtCumB,EAAgBjoC,QAAOO,aAAQ,EAARA,EAAUqhB,iBAE1BrhB,CACX,GACJ,GACJ,IAEOvJ,CACX,CAhD6CkxC,CAAgB/mC,GAAOymC,GAQ5D,cANOjzC,EAAM4M,cAUrB,SAAoBJ,GAChBA,EAAK5G,SAAQ,SAAAsH,GACTA,EAAIU,MAAMhI,SAAQ,SAAAgJ,UACPA,EAAKhC,aAChB,WAEOM,EAAIN,aACf,GACJ,CAhBQ4mC,CAAWhnC,GA4GnB,SACIA,EACApL,EACA+xC,GAEQ,IAAAvlB,EAA6DxsB,EAAM,cAApDusB,EAA8CvsB,EAAM,iBAAlC0sB,EAA4B1sB,EAAM,WAAtBysB,EAAgBzsB,EAAM,YAE3EoL,EAAK5G,SAAQ,SAACsH,EAAK02B,GACf12B,EAAIU,MAAMhI,SAAQ,SAACgJ,EAAM+0B,GAErB,IAAM8P,EAA0BC,EAC5BtyC,EAAO2sB,mBACT,CACE/e,SAAuB,IAAb40B,EACV30B,QAAS20B,IAAap3B,EAAK/D,OAAS,EACpCyG,YAA0B,IAAby0B,EACbx0B,WAAYw0B,IAAaz2B,EAAIU,MAAMnF,OAAS,IAG1CkrC,EAAc,CAChBvyC,EAAOisB,eACPjsB,EAAOmsB,oBACPnsB,EAAOksB,kBACPlsB,EAAOmsB,qBAcX,GAXAkmB,EAAwB7tC,SAAQ,SAACguC,EAAsBz0C,GACnD,IAAM6pC,GAAgB4K,GAAwBD,EAAYx0C,IAAO,GAEjEyP,EAAKxN,OAAO,EAAA0U,WAAW3W,KAAM,IAAAuhC,oBAAmB,CAC5C76B,MAAOguC,EAAwB7K,GAC/B16B,MAAO,MACP8Q,MAAO4pB,GAEf,KAGKmK,EAAcE,iBAAiBzP,GAAUD,GAAW,CACrD,IAAMvkB,GACFwO,GAAiBD,KACVA,GAAoBgW,EAAW,GAAK,GACpC/V,GAAiBgW,EAAW,GAAK,GAC9B9V,EAEJD,GAEV,IAAAimB,6BACIllC,EACAwQ,GACA,GACA,E,CAKJhe,EAAOtB,gBAAkBqzC,EAAcG,gBAAgB1P,GAAUD,KACjE/0B,EAAKxN,OAAOtB,cAAgBsB,EAAOtB,cAE3C,GACJ,GACJ,CAvKQi0C,CAAYvnC,EAAM0mC,EAAmBC,GAyK7C,SACI3mC,EACApL,EACA+xC,GAEA3mC,EAAK5G,SAAQ,SAACsH,EAAK02B,GACf12B,EAAIU,MAAMhI,SAAQ,SAACgJ,EAAMolC,GACjB5yC,EAAOssB,gBAAgC,IAAdsmB,GACzBplC,EAAK6W,UAAW,EAEC,IAAbme,GAAmBuP,EAAcE,iBAAiBzP,GAAUoQ,KAC5DC,EAAerlC,EAAKxN,OAAQ,cAC5B,IAAA0yC,6BACIllC,EACA,MACA,GACA,IAIJg1B,IAAap3B,EAAK/D,OAAS,GAAkB,IAAbm7B,GAChCqQ,EAAerlC,EAAKxN,OAAQ,iBAGhCwN,EAAK6W,UAAW,CAExB,GACJ,GACJ,CApMQyuB,CAAqB1nC,EAAM0mC,EAAmBC,GAsMtD,SACI3mC,EACApL,EACA+xC,G,MAIc,QAAd,EAAA3mC,EAFiB,UAEH,SAAEoB,MAAMhI,SAAQ,SAACgJ,EAAMolC,GACjCplC,EAAK6W,SAAWrkB,EAAOosB,aAEnBpsB,EAAOosB,cAAgBpsB,EAAOqsB,iBACzB0lB,EAAcE,iBANV,GAMqCW,KAC1C,IAAAF,6BACIllC,EACAxN,EAAOqsB,gBACP,GACA,GAIRwmB,EAAerlC,EAAKxN,OAAQ,YAAaA,EAAOqsB,gBAChDwmB,EAAerlC,EAAKxN,OAAQ,cAAeA,EAAOqsB,gBAClDwmB,EAAerlC,EAAKxN,OAAQ,aAAcA,EAAOqsB,gBAEzD,GACJ,CA9NQ0mB,CAAmB3nC,EAAM0mC,EAAmBC,GACrCD,CACX,GACJ,EA+CA,IAAMQ,IAAgB,MAClB,GAA6B,SAAAz/B,GAAK,QAAC,GAAO,GAAO,GAAO,EAAtB,EAClC,KAA4C,SAAC,GAAgC,QACzE,GADqD,cAGrD,GAHkE,cAAO,EAM7E,KAAkD,SAAC,G,IAC/C/E,EAAW,cACXF,EAAQ,WAGN,QACDA,GAHS,eAIOE,GAAiBA,GAAeF,GAH1C,YAIMA,GACZE,EAJC,EAMN,KAAuC,SAAC,G,IAAEF,EAAQ,WAAEE,EAAW,cAAEC,EAAU,aAAO,OAC9EH,EACAA,GAAYG,GACZ,EACAH,GAAYE,EAJkE,EAMlF,KAAqC,SAAC,G,IAAEA,EAAW,cAAmB,QAClE,EAD2D,cAG3D,EACAA,EAJkE,EAMtE,KAAqC,SAAC,G,IAAEF,EAAQ,WAAEE,EAAW,cAAO,OAChEA,IAAgBF,EAChBA,EACAE,IAAgBF,EAChBA,IAAaE,EAJmD,EAMpE,KAAqC,SAAC,G,IAAEF,EAAQ,WAAEE,EAAW,cAAO,QAC/DF,EACDA,IAAaE,GACZF,GACAE,EAJ+D,EAMpE,KAAqC,SAAC,G,IAAEA,EAAW,cAAEF,EAAQ,WAAO,QAChE,EACAA,IAAaE,GACZF,GACD,EAJgE,EAMpE,KAA2B,WAAM,QAAC,GAAM,GAAM,GAAM,EAAnB,E,GA6HrC,SAASilC,EAAe7yC,EAAsBwB,EAAyBC,GACnE,IAAMyU,GAAS,IAAAqpB,qBAAoBv/B,EAAOwB,IAC1C0U,EAAO8H,MAAQvc,GAAS,GACxByU,EAAOzR,MAAQguC,EAAwBv8B,EAAO8H,OAC9Che,EAAOwB,IAAO,IAAA89B,oBAAmBppB,EACrC,CAEA,SAASu8B,EAAwBz0B,GAC7B,OAAQA,GAAkB,eAATA,EAAkC,QAAT,MAC9C,C,uFC7RA,yBACI5S,EACAwC,EACA+hC,EACA9hC,EACA8jC,GAEA,IAAMqB,EACFrD,GAAYgC,GACZvmC,EAAKwC,GAAUpB,MAAMiD,OACjB,SAACjC,EAAM+0B,GAAa,OAAAA,EAAWoN,GAAYpN,EAAWoP,IAAYnkC,EAAK+W,SAAnD,IAEtB0uB,EACFrlC,GAAYC,GACZzC,EAAKqE,OACD,SAAC3D,EAAK02B,GACF,OAAAA,EAAW50B,GAAY40B,EAAW30B,IAAY/B,EAAIU,MAAMmjC,GAAUrrB,QAAlE,IAGN4uB,EAAuB9nC,EAAKyC,GAASrB,MACtChM,KAAI,SAACqS,EAAG0vB,GACL,OAAAA,GAAYoN,GAAYpN,GAAYoP,EAgBhD,SAA2BvmC,EAA8Bo3B,EAAkBD,GAGvE,I,QAFI4Q,EAAY,EAEPrnC,EAAM02B,EAAW,EAAG12B,EAAMV,EAAK/D,SACN,QAA1B,EAAS,QAAT,EAAA+D,EAAKU,UAAI,eAAEU,MAAM+1B,UAAS,eAAEhe,WADYzY,IAExCqnC,IAMR,OAAOA,CACX,CA3BkBC,CAAkBhoC,EAAMyC,EAAS00B,IAChC,CAFP,IAIH9yB,OAAM,SAAChP,EAAGoS,EAAGzX,GAAM,OAAAqF,EAAI,GAAKA,GAAKrF,EAAEu0C,EAAhB,IAClB0D,EAAuBjoC,EACxB5K,KAAI,SAACqS,EAAG2vB,GACL,OAAAA,GAAY50B,GAAY40B,GAAY30B,EAuBhD,SAA2BzC,EAA8Bo3B,EAAkBD,GAGvE,I,UAFI4Q,EAAY,EAEPnlC,EAAMu0B,EAAW,EAAGv0B,GAAoB,QAAd,EAAA5C,EAAKo3B,UAAS,eAAEh2B,MAAMnF,UACvB,QAA1B,EAAc,QAAd,EAAA+D,EAAKo3B,UAAS,eAAEh2B,MAAMwB,UAAI,eAAEsW,UAD6BtW,IAEzDmlC,IAMR,OAAOA,CACX,CAlCkBG,CAAkBloC,EAAMo3B,EAAUmP,IACjC,CAFP,IAIHliC,OAAM,SAAChP,EAAGoS,EAAGzX,GAAM,OAAAqF,EAAI,GAAKA,GAAKrF,EAAEwS,EAAhB,IAExB,OAAOolC,GAAeC,GAAcC,GAAwBG,CAChE,C,gGCxCA,cAMA,gCACIztC,EACA2tC,EACAnoC,GAEA,IAAMxM,GAAQ,IAAAuM,aAAYC,GAY1B,OAVA,IAAAxG,UAASgB,EAAQhH,GAEjBA,EAAMwM,KAAK5G,SAAQ,SAAAsH,GACf,IAAK,IAAI/N,EAAI,EAAGA,EAAIw1C,EAASx1C,IAAK,CAC9B,IAAMyP,GAAO,IAAAC,mBAEb3B,EAAIU,MAAMvC,KAAKuD,E,CAEvB,IAEO5O,CACX,C,qFCnBA,uBAA4BA,GACxBA,EAAMwM,KAAO,UACNxM,EAAM4M,aACjB,C,4FCRA,aACA,UAMA,6BAAkC5M,GAC9B,IAAM6yC,GAAM,IAAAC,kBAAiB9yC,GAE7B,GAAI6yC,EAAK,CACL,IAAK,IAAIjP,EAAW,EAAGA,EAAW5jC,EAAMwM,KAAK/D,OAAQm7B,IAAY,CAC7D,IAAMgR,EAAgB50C,EAAMwM,KAAKo3B,GAAUh2B,MAAMilC,EAAIE,QAAU,GAE3D6B,IACAA,EAAclvB,SACVkvB,EAAclvB,UAAY1lB,EAAMwM,KAAKo3B,GAAUh2B,MAAMilC,EAAI9B,UAAUrrB,UAG3E1lB,EAAMwM,KAAKo3B,GAAUh2B,MAAMkP,OAAO+1B,EAAI9B,SAAU8B,EAAIE,QAAUF,EAAI9B,SAAW,E,CAGjF/wC,EAAMqP,OAAOyN,OAAO+1B,EAAI9B,SAAU8B,EAAIE,QAAUF,EAAI9B,SAAW,IAC/D,IAAA8D,wBAAuB70C,EAAMwM,KAAMqmC,E,CAE3C,C,0FCzBA,aACA,UAMA,0BAA+B7yC,GAC3B,IAAM6yC,GAAM,IAAAC,kBAAiB9yC,GAEzB6yC,IACA7yC,EAAMwM,KAAKqmC,EAAI7jC,UAAUpB,MAAMhI,SAAQ,SAACgJ,EAAM+0B,G,MACpCmR,EAA2C,QAA3B,EAAA90C,EAAMwM,KAAKqmC,EAAI5jC,QAAU,UAAE,eAAErB,MAAM+1B,GAErDmR,IACAA,EAAcnvB,UAAYmvB,EAAcnvB,WAAa/W,EAAK+W,UAElE,IAEA3lB,EAAMwM,KAAKsQ,OAAO+1B,EAAI7jC,SAAU6jC,EAAI5jC,QAAU4jC,EAAI7jC,SAAW,IAE7D,IAAA6lC,wBAAuB70C,EAAMwM,KAAMqmC,GAE3C,C,4GCvBA,cAkEA,SAASkC,EAAqBhwC,GAC1B,IAAMuhC,GAAU,IAAAvgC,kBAAgB,OAAsBhD,EAA2BgC,EAAM3D,QACjFjD,GAAK,IAAA8H,UAASlB,EAAM3D,QAI1B,OAFAklC,EAAQ12B,SAASvE,KAAKlN,GAEfmoC,CACX,CA1DA,4CACIvhC,EACA6vB,EACA50B,G,QAEI8F,EACEyqB,EAA6D,QAAjD,EAAAvwB,EAAMwM,KAAKyD,QAAO,SAAA/C,GAAO,OAAAA,EAAIU,MAAMnF,OAAS,CAAnB,IAAsB,UAAE,eAAEmF,MAAM,GAE3E,GAAI2iB,GAEAzqB,EAAYyqB,EAAUvnB,OAAOiH,QACzB,SAACxK,GAA0C,MAAmB,aAAnBA,EAAMwD,SAAN,IAC7C,MAIEnD,EAAYivC,EAAqBhwC,GACjCwrB,EAAUvnB,OAAOqC,KAAKvF,QAEvB,CAEH,IACI,EADAL,EAA2BzF,EAM/B,IAJA8F,EAAYivC,EAAqBhwC,GAIzB,EAAS6vB,EAAKuM,SAAU,CAC5B,IAAM16B,EAAoC,QAA5B,IAAOuC,OAAOzD,QAAQE,UAAM,SAAK,EAM/C,GAJI,GAAUgB,GAAS,GACnB,EAAOuC,OAAO8T,OAAOrW,EAAO,EAAGX,GAIN,mBAAzB,EAAOod,gBACiB,GAAxB,EAAOla,OAAOP,QACd,EAAOO,OAAO,IAAMlD,EAMpB,MAHAL,EAAQ,C,EAQpB,OAAOK,CACX,C,4FChEA,cAgBA,4BAAiC9F,GAC7B,IAAIgP,GAAY,EACZ+hC,GAAY,EACZ9hC,GAAW,EACX8jC,GAAW,EACXiC,GAAe,EAqBnB,OAnBAh1C,EAAMwM,KAAK5G,SAAQ,SAACsH,EAAK02B,GACrB,OAAA12B,EAAIU,MAAMhI,SAAQ,SAACgJ,EAAM+0B,IACjB,aAAyB/0B,KACzBomC,GAAe,EAEXhmC,EAAW,IACXA,EAAW40B,GAGXmN,EAAW,IACXA,EAAWpN,GAGf10B,EAAU+M,KAAK4O,IAAI3b,EAAS20B,GAC5BmP,EAAU/2B,KAAK4O,IAAImoB,EAASpP,GAEpC,GAfA,IAkBGqR,EAAe,CAAEhmC,SAAQ,EAAE+hC,SAAQ,EAAE9hC,QAAO,EAAE8jC,QAAO,GAAK,IACrE,C,6FC3CA,cACA,UAQA,6BACI/yC,EACA4sC,GAMA,IAAMiG,GAAM,IAAAC,kBAAiB9yC,GACvBi1C,EAA0B,GAAbrI,EAEnB,GAAIiG,EACA,IAAK,IAAI1zC,EAAI0zC,aAAG,EAAHA,EAAK9B,SAAU5xC,GAAK0zC,EAAIE,QAAS5zC,IAC1Ca,EAAMwM,KAAK5G,SAAQ,SAAAsH,GACf,IAAM0B,EAAO1B,EAAIU,MAAMqnC,EAAapC,EAAI9B,SAAW8B,EAAIE,SAEvD7lC,EAAIU,MAAMkP,OACNm4B,EAAapC,EAAI9B,SAAW8B,EAAIE,QAAU,EAC1C,GACA,IAAAlkC,iBAAgBD,EAAK8W,SAAU9W,EAAK+W,UAAW/W,EAAK6W,SAAU7W,EAAKxN,QAE3E,IACApB,EAAMqP,OAAOyN,OACTm4B,EAAapC,EAAI9B,SAAW8B,EAAIE,QAAU,EAC1C,EACA/yC,EAAMqP,OAAO4lC,EAAapC,EAAI9B,SAAW8B,EAAIE,SAI7D,C,wGCtCA,UACA,UAQA,0BACI/yC,EACA4sC,GAMA,IAAMiG,GAAM,IAAAC,kBAAiB9yC,GACvBk1C,EAA2B,GAAbtI,EAEpB,GAAIiG,EACA,IAAK,IAAI1zC,EAAI0zC,EAAI7jC,SAAU7P,GAAK0zC,EAAI5jC,QAAS9P,IAAK,CAC9C,IAAMg2C,EAAYn1C,EAAMwM,KAAK0oC,EAAcrC,EAAI7jC,SAAW6jC,EAAI5jC,SAE9DjP,EAAMwM,KAAKsQ,OAAOo4B,EAAcrC,EAAI7jC,SAAW6jC,EAAI5jC,QAAU,EAAG,EAAG,CAC/D7N,QAAQ,EAAF,eAAO+zC,EAAU/zC,QACvBwM,MAAOunC,EAAUvnC,MAAMhM,KAAI,SAAAgN,GACvB,WAAAC,iBAAgBD,EAAK8W,SAAU9W,EAAK+W,UAAW/W,EAAK6W,SAAU7W,EAAKxN,OAAnE,IAEJmN,OAAQ4mC,EAAU5mC,Q,CAIlC,C,2FCjCA,cACA,UAMA,2BAAgCvO,GAC5B,IAAM6yC,GAAM,IAAAC,kBAAiB9yC,GAE7B,GAAI6yC,IAAO,IAAAuC,eAAcp1C,EAAMwM,KAAMqmC,EAAI7jC,SAAU6jC,EAAI9B,SAAU8B,EAAI5jC,QAAS4jC,EAAIE,SAC9E,IAAK,IAAInP,EAAWiP,EAAI7jC,SAAU40B,GAAYiP,EAAI5jC,QAAS20B,IAAY,CACnE,IAAK,IAAID,EAAWkP,EAAI9B,SAAUpN,GAAYkP,EAAIE,QAASpP,IAAY,CACnE,IAAM/0B,EAAO5O,EAAMwM,KAAKo3B,GAAUh2B,MAAM+1B,GAEpC/0B,IACAA,EAAK8W,SAAWie,EAAWkP,EAAI9B,SAC/BniC,EAAK+W,UAAYie,EAAWiP,EAAI7jC,gBAEzBJ,EAAKhC,c,QAIb5M,EAAMwM,KAAKo3B,GAAUh3B,a,CAGxC,C,4FC1BA,cACA,UAQA,4BACI5M,EACA4sC,G,YAMMiG,GAAM,IAAAC,kBAAiB9yC,GAG7B,GAAI6yC,EAAK,CACL,IAAMwC,EAHqB,GAAbzI,EAGsBiG,EAAI9B,SAAW8B,EAAIE,QAAU,EAEjE,GAAIsC,EAAkB,GAAKA,EAAkBr1C,EAAMwM,KAAK,GAAGoB,MAAMnF,OAC7D,IAAK,IAAIm7B,EAAWiP,EAAI7jC,SAAU40B,GAAYiP,EAAI5jC,QAAS20B,IAAY,CACnE,IAAMh1B,EAA2B,QAApB,EAAA5O,EAAMwM,KAAKo3B,UAAS,eAAEh2B,MAAMynC,GAEzC,GACIzmC,IACA,IAAAwmC,eACIp1C,EAAMwM,KACNo3B,EACAyR,EAAkB,EAClBzR,EACAyR,GAEN,CACEzmC,EAAK8W,UAAW,EAIhB,IAFA,IAAI4vB,EAAiBD,EAE6B,QAA3C,EAAoB,QAApB,EAAAr1C,EAAMwM,KAAKo3B,UAAS,eAAEh2B,MAAM0nC,UAAe,eAAE5vB,iBACzC1lB,EAAMwM,KAAKo3B,GAAUh2B,MAAM0nC,GAAgB1oC,cAClD0oC,KAGoB,QAApB,EAAAt1C,EAAMwM,KAAKo3B,UAAS,eAAEh2B,MAAM0nC,MAC5Bt1C,EAAMwM,KAAKo3B,GAAUh2B,MAAM0nC,GAAgBpvC,YAAa,SAEjDlG,EAAMwM,KAAKo3B,GAAUh2B,MAAM0nC,GAAgB1oC,sBAG/CgC,EAAKhC,a,QAGT5M,EAAMwM,KAAKo3B,GAAUh3B,a,EAI5C,C,yFC3DA,cACA,UAQA,yBACI5M,EACA4sC,G,UAMMiG,GAAM,IAAAC,kBAAiB9yC,GAG7B,GAAI6yC,EAAK,CACL,IAAM0C,EAHsB,GAAb3I,EAGsBiG,EAAI7jC,SAAW6jC,EAAI5jC,QAAU,EAElE,GAAIsmC,EAAkB,GAAKA,EAAkBv1C,EAAMwM,KAAK/D,OACpD,IAAK,IAAIk7B,EAAWkP,EAAI9B,SAAUpN,GAAYkP,EAAIE,QAASpP,IAAY,CACnE,IAAM/0B,EAAO5O,EAAMwM,KAAK+oC,GAAiB3nC,MAAM+1B,GAE/C,GACI/0B,IACA,IAAAwmC,eACIp1C,EAAMwM,KACN+oC,EAAkB,EAClB5R,EACA4R,EACA5R,GAEN,CACE/0B,EAAK+W,WAAY,EAIjB,IAFA,IAAI6vB,EAAiBD,EAE6B,QAA3C,EAA0B,QAA1B,EAAAv1C,EAAMwM,KAAKgpC,UAAe,eAAE5nC,MAAM+1B,UAAS,eAAEhe,kBACzC3lB,EAAMwM,KAAKgpC,GAAgB5nC,MAAM+1B,GAAU/2B,qBAC3C5M,EAAMwM,KAAKgpC,GAAgB5oC,cAClC4oC,KAG0B,QAA1B,EAAAx1C,EAAMwM,KAAKgpC,UAAe,eAAE5nC,MAAM+1B,MAClC3jC,EAAMwM,KAAKgpC,GAAgB5nC,MAAM+1B,GAAUz9B,YAAa,SAEjDlG,EAAMwM,KAAKgpC,GAAgB5nC,MAAM+1B,GAAU/2B,qBAC3C5M,EAAMwM,KAAKgpC,GAAgB5oC,sBAG/BgC,EAAKhC,a,GAKhC,C,wGC3DA,UACA,UAgHA,SAAS6oC,EAAkBd,GACvB,OAAIA,GAAW,EACJ,IACAA,GAAW,EACX,IAEA,EAEf,CAEA,SAASe,EAAcC,EAAmCC,GAC7BA,EAAW5sC,OAAO6H,OACvC,SAAApL,GAAS,MAAmB,aAAnBA,EAAMwD,YAYO,IAF1B2G,GADsBA,EAT0CnK,EAAMmK,UAUlDK,QAAO,SAAAzQ,GAAK,MAAiB,mBAAjBA,EAAEmjB,WAAF,KAEhBla,QAAmC,GAAnBmH,EAASnH,QAA0C,MAA3BmH,EAAS,GAAG+S,aAHxE,IAA0B/S,CATT,OAIT,IAAA8zB,WAAUiS,EAAW3sC,OAAQ4sC,EAAW5sC,QACxC4sC,EAAW5sC,OAAS,GAE5B,CAtHA,0BACIhJ,EACAmkC,G,MAGM/iC,EAASpB,EAAMoB,OAEhBA,EAAOme,gBAAmBne,EAAOyU,eAClCzU,EAAOme,gBAAiB,EACxBne,EAAOyU,cAAe,GAM1B7V,EAAMwM,KAAK5G,SAAQ,SAACsH,EAAK02B,GACrB12B,EAAIU,MAAMhI,SAAQ,SAACgJ,EAAM+0B,GACrB,GAA0B,GAAtB/0B,EAAK5F,OAAOP,OAAa,CACzB,IAAM,EAASmG,EAAKxN,OAAOsH,WACrB,EAAD,8BACQy7B,GAAoB,CACvBz7B,UAAWkG,EAAKxN,OAAOsH,YAE3By7B,GACN,IAAAn+B,UACI4I,GACA,IAAA7I,sBAAgBhD,OAA0BA,EAA2B,KAEzE,IAAAoD,YAAWyI,GAAM,IAAA3I,UAAS,G,CAGd,GAAZ29B,EACAh1B,EAAK+W,WAAY,EACVie,EAAW,GAAKh1B,EAAK6W,WAC5B7W,EAAK6W,UAAW,SACT7W,EAAKhC,eAGA,GAAZ+2B,IACA/0B,EAAK8W,UAAW,GAGpB9W,EAAKxN,OAAOyU,cAAe,CAC/B,IAGI3I,EAAIqB,OAnDG,KAoDPrB,EAAIqB,OApDG,GAsDf,IAIA,IAFA,IAAMomC,EAAU34B,KAAK4O,IAAG,MAAR5O,MAAI,mCAAQhc,EAAMwM,KAAK5K,KAAI,SAAAsL,GAAO,OAAAA,EAAIU,MAAMnF,MAAV,MAAiB,IAE1DtJ,EAAI,EAAGA,EAAIw1C,EAASx1C,SACD4D,IAApB/C,EAAMqP,OAAOlQ,KACba,EAAMqP,OAAOlQ,GAAKs2C,EAAkBd,IAQ5C,IAFA,I,WAEShR,GACL3jC,EAAMwM,KAAK5G,SAAQ,SAAAsH,GACf,IAAM0B,EAAO1B,EAAIU,MAAM+1B,GACjBuD,EAAWh6B,EAAIU,MAAM+1B,EAAW,GAClC/0B,GAAQs4B,GAAYt4B,EAAK8W,UACzBgwB,EAAcxO,EAAUt4B,EAEhC,IAEI5O,EAAMwM,KAAKqE,OAAM,SAAA3D,GAAG,MAAI,OAAmB,QAAnB,EAAAA,EAAIU,MAAM+1B,UAAS,eAAEje,QAAQ,MACrD1lB,EAAMwM,KAAK5G,SAAQ,SAAAsH,GAAO,OAAAA,EAAIU,MAAMkP,OAAO6mB,EAAU,EAA3B,IAC1B3jC,EAAMqP,OAAOyN,OACT6mB,EAAW,EACX,EACA3jC,EAAMqP,OAAOs0B,EAAW,GAAK3jC,EAAMqP,OAAOs0B,I,EAd7CA,IAFqB,QAAb,EAAA3jC,EAAMwM,KAAK,UAAE,eAAEoB,MAAMnF,SAAU,GAEjB,EAAGk7B,EAAW,EAAGA,I,EAAvCA,GAmBT,I,eAASC,GACL,IAAM12B,EAAMlN,EAAMwM,KAAKo3B,GAEvB12B,EAAIU,MAAMhI,SAAQ,SAACgJ,EAAM+0B,G,MACfwD,EAAoC,QAAxB,EAAAnnC,EAAMwM,KAAKo3B,EAAW,UAAE,eAAEh2B,MAAM+1B,GAC9CwD,GAAav4B,EAAK+W,WAClB+vB,EAAcvO,EAAWv4B,EAEjC,IAEI1B,EAAIU,MAAMiD,OAAM,SAAAjC,GAAQ,OAAAA,EAAK+W,SAAL,MACxB3lB,EAAMwM,KAAKo3B,EAAW,GAAGr1B,QAAUrB,EAAIqB,OACvCvO,EAAMwM,KAAKsQ,OAAO8mB,EAAU,G,EAZ3BA,EAAW5jC,EAAMwM,KAAK/D,OAAS,EAAGm7B,EAAW,EAAGA,I,EAAhDA,EAeb,C,qHC/GA,UACA,SAcA,uCACIh1B,EACAwQ,EACAy2B,EACAC,GAEA,GAAI12B,EAAO,CACPxQ,EAAKxN,OAAOmU,gBAAkB6J,EAE1By2B,IACA,IAAAhV,yBAAwBjyB,GAAM,SAAAhD,GAG1B,OAFAA,EAAWA,GAAY,CAAC,GACfmhB,iBAAkB,EACpBnhB,CACX,IAGJ,IAAMmqC,EAkCd,SAA4B32B,GACxB,IAAM42B,GAAc,IAAAC,YAAW72B,GAI/B,GAAI42B,EAAa,CACb,IAAME,EAAMF,EAAY,GAAK,IACvBG,EAAQH,EAAY,GAAK,IACzBI,EAAOJ,EAAY,GAAK,IAG9B,OAAmE,IAA3Dh6B,KAAK4O,IAAIsrB,EAAKC,EAAOC,GAAQp6B,KAAKq6B,IAAIH,EAAKC,EAAOC,G,CAE1D,OAAO,GAEf,CAjD0BE,CAAmBl3B,GAEjC22B,EA3BkB,GA4BlBnnC,EAAKxN,OAAOsH,UA1BV,UA2BKqtC,EA5Ba,GA6BpBnnC,EAAKxN,OAAOsH,UA3BV,iBA6BKkG,EAAKxN,OAAOsH,UAGnBotC,GAAmBlnC,EAAKxN,OAAOsH,WAC/BkG,EAAK5F,OAAOpD,SAAQ,SAAAH,GACO,aAAnBA,EAAMwD,YACNxD,EAAM1E,eAAgB,EAAH,8BACZ0E,EAAM1E,eAAa,CACtB2H,UAAWkG,EAAKxN,OAAOsH,YAE3BjD,EAAMmK,SAAShK,SAAQ,SAAAkC,GACnBA,EAAQ1G,QAAS,EAAH,8BACP0G,EAAQ1G,QAAM,CACjBsH,UAAWkG,EAAKxN,OAAOsH,WAE/B,IAER,G,aAGGkG,EAAKxN,OAAOmU,uBACZ3G,EAAKxN,OAAOsH,iBAGhBkG,EAAKhC,aAChB,C,oHChEA,UACA,UAQA,sCAA2C5M,GACvC,IAAM6yC,GAAM,IAAAC,kBAAiB9yC,GAE7B,GAAI6yC,EACA,I,eAASlP,GACL,GACI3jC,EAAMwM,KAAKqE,OACP,SAAC3D,EAAK02B,G,MACF,OAAAA,EAAWiP,EAAI7jC,UACf40B,EAAWiP,EAAI5jC,UACQ,QAAvB,EAAA/B,EAAIU,MAAM+1B,EAAW,UAAE,eAAEje,S,IAGjC1lB,EAAMwM,KAAK5G,SAAQ,SAACsH,EAAK02B,UACd12B,EAAIU,MAAM+1B,GAAU/2B,cAEvBg3B,GAAYiP,EAAI7jC,UAAY40B,GAAYiP,EAAI5jC,UAC5C/B,EAAIU,MAAM+1B,EAAW,GAAGje,UAAW,SAC5BxY,EAAIU,MAAM+1B,EAAW,GAAG/2B,cAEvC,QACG,CACH5M,EAAMwM,KAAK5G,SAAQ,SAACsH,EAAK02B,GACrB,IAAMh1B,EAAO1B,EAAIU,MAAM+1B,GACvB,GAAI/0B,EAAM,CACN,IAAMo4B,GAAU,IAAAn4B,iBACZD,EAAK8W,SACL9W,EAAK+W,UACL/W,EAAK6W,SACL7W,EAAKxN,QAGT4lC,EAAQ3lC,SAAU,EAAH,eAAQuN,EAAKvN,SAExBuiC,EAAWiP,EAAI7jC,UAAY40B,EAAWiP,EAAI5jC,QAC1C+3B,EAAQthB,UAAW,EAEnBshB,EAAQ9gC,WAAa0I,EAAK1I,WAE9BgH,EAAIU,MAAMkP,OAAO6mB,EAAW,EAAG,EAAGqD,UAE3B95B,EAAIU,MAAM+1B,GAAU/2B,a,CAEnC,IAEA,IAAM2pC,EAAWv6B,KAAK4O,IAAI5qB,EAAMqP,OAAOs0B,GAAY,EAlDjD,IAoDF3jC,EAAMqP,OAAOyN,OAAO6mB,EAAU,EAAG4S,EAAUA,E,GA3C1C5S,EAAWkP,EAAIE,QAASpP,GAAYkP,EAAI9B,SAAUpN,I,EAAlDA,EA+CjB,C,kHC5DA,UACA,UAQA,oCAAyC3jC,GACrC,IAAM6yC,GAAM,IAAAC,kBAAiB9yC,GAE7B,GAAI6yC,EACA,IAAK,IAAIjP,EAAWiP,EAAI5jC,QAAS20B,GAAYiP,EAAI7jC,SAAU40B,IAAY,CACnE,IAAM12B,EAAMlN,EAAMwM,KAAKo3B,GACjB4S,EAAWx2C,EAAMwM,KAAKo3B,EAAW,GAQvC,GANA12B,EAAIU,MAAMhI,SAAQ,SAAAgJ,UACPA,EAAKhC,aAChB,WAEOM,EAAIN,cAGP4pC,aAAQ,EAARA,EAAU5oC,MAAMiD,OACZ,SAAC4lC,EAAW9S,GACR,OAAAA,EAAWkP,EAAI9B,UAAYpN,EAAWkP,EAAIE,SAAW0D,EAAU9wB,SAA/D,IAGR6wB,EAAS5oC,MAAMhI,SAAQ,SAAC6wC,EAAW9S,GAC3BA,GAAYkP,EAAI9B,UAAYpN,GAAYkP,EAAIE,UAC5C0D,EAAU9wB,WAAY,SACf8wB,EAAU7pC,cAEzB,WAEO4pC,EAAS5pC,kBACb,CACH,IAAM8pC,EAAY16B,KAAK4O,IAAK1d,EAAIqB,QAAU,EAlCvC,IAmCGooC,EAA+B,CACjCv1C,QAAQ,EAAF,eAAO8L,EAAI9L,QACjBmN,OAAQmoC,EACR9oC,MAAOV,EAAIU,MAAMhM,KAAI,SAACgN,EAAM+0B,GACxB,IAAMqD,GAAU,IAAAn4B,iBACZD,EAAK8W,SACL9W,EAAK+W,UACL/W,EAAK6W,SACL7W,EAAKxN,QAWT,OARA4lC,EAAQ3lC,SAAU,EAAH,eAAQuN,EAAKvN,SAExBsiC,EAAWkP,EAAI9B,UAAYpN,EAAWkP,EAAIE,QAC1C/L,EAAQrhB,WAAY,EAEpBqhB,EAAQ9gC,WAAa0I,EAAK1I,WAGvB8gC,CACX,KAGJ95B,EAAIqB,OAASmoC,EACb12C,EAAMwM,KAAKsQ,OAAO8mB,EAAW,EAAG,EAAG+S,E,EAInD,C,kECnEA,cACA,UAQA,mBACI/kB,EACA6P,IAEA,IAAA9L,wBAAuB/D,EAAQ,gBAAgB,SAAA7sB,GAAS,WAAA6xC,mBAAkB7xC,EAAO08B,EAAzB,GAC5D,C,kECdA,cACA,UAQA,mBAAqC7P,EAA6B9wB,IAC9D,IAAA60B,wBAAuB/D,EAAQ,gBAAgB,SAAA7sB,GAAS,WAAA8xC,mBAAkB9xC,EAAOjE,EAAzB,GAC5D,C,kECXA,cAMMg2C,EAAoD,CACtD75C,GAAI,MACJG,GAAI,QACJC,GAAI,SACJC,GAAI,MACJC,GAAI,SACJC,GAAI,UAQR,mBACIo0B,EACAgX,IAEA,IAAAmO,iCAAgCnlB,EAAQ,mBAAmB,SAAAwP,GACvD,IA4BJ/7B,EAEMyL,EACAtF,EA/BIjK,EACFqnC,EAAe,EACP,IAAMA,GA4BhB93B,GAAMzL,OAFZA,EAzBoC+7B,EAAK/7B,gBA2BpB,EAATA,EAAW9D,UAAW,IAC5BiK,EAAQlD,SAASwI,EAAIf,UAAU,MAErB,GAAKvE,GAAS,EAAKsF,EAA2B,MA5BtD83B,EAAe,GACfxH,EAAK/7B,UAAY,CACb9D,QAASA,EACTH,OAAQG,EACF,CACIrE,WAAY,OACZC,SAAU25C,EAAgBv1C,IAE9B,CAAC,GAIX6/B,EAAKxxB,SAAShK,SAAQ,SAAAkC,UACXA,EAAQ1G,OAAOjE,gBACf2K,EAAQ1G,OAAOlE,UAC1B,KACOqE,UACA6/B,EAAK/7B,SAEpB,GACJ,C,kEClDA,cACA,UACA,SASA,mBACIusB,EACAuQ,EACA15B,IAEA,IAAAktB,wBACI/D,EACA,kBACA,SAAA7sB,GACI,IAAMpC,GAAS,IAAAq0C,qBAAoBjyC,EAAOo9B,EAAa15B,GAMvD,OAJI9F,IACA,IAAAuC,uBAAsBH,GAGnBpC,CACX,GACA,CACIs0C,uBAAuB,GAGnC,C,kEChCA,cACA,UAUA,mBACIrlB,EACAj1B,EACAC,IAEA,IAAAm6C,iCAAgCnlB,EAAQ,sBAAsB,SAAAwP,GACrDA,EAAK/7B,YACN+7B,EAAK/7B,WAAY,IAAAsE,0BAAyB,MAG1ChN,EACAykC,EAAKhgC,OAAOzE,UAAYA,EACH,OAAdA,UACAykC,EAAKhgC,OAAOzE,UAGnBC,EACAwkC,EAAKhgC,OAAOxE,aAAeA,EACH,OAAjBA,UACAwkC,EAAKhgC,OAAOxE,YAE3B,GACJ,C,kECjCA,cAQA,mBAAmCg1B,EAA6BslB,IAC5D,IAAAH,iCAAgCnlB,EAAQ,cAAc,SAAA9rB,GAClDA,EAAU1E,OAAOuT,WAAauiC,EAAQC,WACtCrxC,EAAU8J,SAAShK,SAAQ,SAAAkC,GACnBA,EAAQ1G,OAAOuT,mBACR7M,EAAQ1G,OAAOuT,UAE9B,GACJ,GACJ,C,gFCjBA,UACA,UAIMyiC,EAAwD,CAC1D9c,WAAY,+BACZ5xB,UAAW,sBAET2uC,EAAwD,CAC1D16C,UAAW,MACXC,aAAc,MACdC,WAAY,OACZC,YAAa,OACb8+B,YAAa,QAUjB,mBACIhK,EACA0lB,QAAA,IAAAA,IAAAA,EAAA,GAEA,IAAMC,GAAkB,EAAH,8BACdF,GACAC,IAGP,IAAA3hB,wBACI/D,EACA,oBACA,SAAA7sB,GAAS,WAAAyyC,uBAAsBzyC,EAAOwyC,EAA7B,GACT,CACIN,uBAAuB,GAGnC,C,kECzCA,cAEA,UAEA,SACA,UACA,UAGA,UAKA,UAIA,UAWA,mBACIrlB,EACAqB,GAEA,IAAME,EAAQF,EAASE,MACjBruB,EAAY8sB,EAAO7C,kBACnBjoB,EAA2B,UAAnBhC,aAAS,EAATA,EAAW+B,MAAkB/B,EAAUgC,MAAQ,KACzD2wC,GAAY,EAEhB,OAwCJ,SAAsC3wC,EAAqBmsB,GACvD,SACInsB,aAAK,EAALA,EAAOC,aACP,IAAAR,cAAaO,EAAMkK,eAAgB,gBAClC,IAAA0mC,eAAczkB,KAKvB,SAAyBA,EAAyBnsB,GAC9C,OACsB,GAAlBmsB,EAASE,QACRrsB,EAAMmK,YAAc,GAAKnK,EAAMkK,eAAe2mC,gBAEvD,CATSC,CAAgB3kB,EAAUnsB,IAWnC,SAAwBmsB,EAAyBnsB,G,QAC7C,OACsB,IAAlBmsB,EAASE,QACRrsB,EAAMmK,aAAqD,QAAtC,EAA8B,QAA9B,EAAAnK,EAAMkK,eAAevB,iBAAS,eAAEhH,cAAM,QAAI,GAAK,GACjE3B,EAAMkK,eAAe7J,YAEjC,CAjB6C0wC,CAAe5kB,EAAUnsB,IAEtE,CA/CQgxC,CAA6BhxC,EAAOmsB,KACpC,IAAA0C,wBACI/D,EACS,IAATuB,EAAuB,kBAAoB,sBAC3C,SAACpuB,EAAOF,GACJ,IAAMlC,GAAS,IAAAizB,iBAAgB7wB,EAoB/C,SAAwBkuB,GACpB,IAAM9E,EAA8B,IAAlB8E,EAASE,MAW3B,MAAO,EATH,IAAA4kB,+BAA8B9kB,KAAc9E,EAAY,EAAA0c,uBAAyB,MACzD,IAAAmN,kBAAiB/kB,IAAY,EAAAglB,QAAQ3X,OAC3DnS,EACI,EAAAse,2BACA,EAAAC,4BACJ,KAC2Bve,EAC3B,EAAAod,gCACA,EAAAC,iCAEV,CAjCsD0M,CAAejlB,GAAWpuB,GAC3DgxB,aAIL,OAFA4hB,EAAsB,GAAV90C,GAEL,IAAAw1C,2BAA0BvmB,EAAQ7sB,EAAOkuB,EAAUtwB,EAAQkC,EACtE,GACA,CACIouB,SAAQ,EACR6C,aAAc,WACdsiB,cAAe,WAAM,OAAAjlB,CAAA,KAItB,GAGJskB,CACX,C,kEC5DA,cACA,UACA,UAkDA,mBACI7lB,EACA/qB,EACA2D,EACAkjC,EACAjsC,GAEM,MAAsEA,GAAW,CAAC,EAAhF42C,EAAW,cAAE1K,EAAgB,mBAAE2K,EAAc,iBAAEjY,EAAgB,mBACjElhB,EAAUyS,EAAOM,cAAczU,cAAcjT,EAjDhC,MACC,QAiDd3M,EAAUy6C,QAAAA,EAAmB9tC,OAAUzH,EAAY,eAEzDoc,EAAQtZ,MAAMk8B,YAAY,UAAWlkC,GAAW,MAE5Cw6C,GACAl5B,EAAQxB,YAAY06B,GAGxB,IAAMtwC,GAAc,IAAAC,cAAamX,GAAS,OAAqBpc,EAAsB8D,GAuCrF,OArCA,IAAA8uB,wBACI/D,EACA,gBACA,SAAC7sB,EAAOF,GAeJ,OAdA,IAAA0zC,mBACIxzC,EACAgD,EACmB,iBAAZ2lC,EAAuBA,EAAW,QACzCljC,EACAmjC,EACA9oC,IAGJ,IAAAK,uBAAsBH,GAEtBF,EAAQw7B,iBAAmBA,EAC3Bx7B,EAAQ8hC,YAAYt7B,KAAKtD,IAElB,CACX,GACA,CACI0mB,kBAAuC,iBAAbif,EAAwBA,OAAW3qC,EAC7D+yB,aAAc,eACdsiB,cAAe,WASX,MAPuB,CACnBj5B,QAAO,EACPtY,KAAI,EACJ4L,GAAI,GACJC,YAAY,EAIpB,IAID3K,CACX,C,gFC7GA,SACA,UACA,UACA,UACA,UA8EA,SAASywC,EACL5mB,EACA3sB,EACAwzC,EACAC,GAEA,IAAMtQ,GAAgB,IAAAuQ,kBAAiB/mB,IAAW,CAAC,EAC7C/F,GAAS,+CACR5mB,GACAmjC,GACAqQ,IAGP,IAAAG,kBAAiBhnB,EAAQ/F,EAAW6sB,EACxC,CAjFA,mBACI9mB,EACA3sB,GAOA,I,QALMH,EAAY8sB,EAAO7C,kBACnBjoB,EAA2B,UAAnBhC,aAAS,EAATA,EAAW+B,MAAkB/B,EAAUgC,MAAQ,KACvD4xC,EAAW5xC,EAAQ,EAAAgf,SAAS+yB,SAAS/xC,GAAS,KAChDsL,EAAkC,QAAd,EAAAsmC,aAAQ,EAARA,EAAUtmC,YAAI,QAAI,KAEnCA,GAAQwf,EAAOtf,SAASF,IAAO,CAClC,IAAI,IAAA7L,cAAa6L,EAAM,kBAAoC,QAAjB,EAAAA,EAAK/J,oBAAY,oBAAjB+J,EAAoB,UAC1D,OACG,IAAI,IAAAvK,gBAAeuK,GACtB,MAEAA,EAAOA,EAAK9E,U,EAIpB,IAAAqoB,wBAAuB/D,EAAQ,SAAS,SAAC7sB,EAAOF,GAC5C,IAAMlC,GAAS,IAAAizB,iBAAgB7wB,EAAO,GAAIF,GAE1C,GAA2B,GAAvBlC,EAAOkzB,aAIP,OAHA,IAAA3wB,uBAAsBH,GACtB6sB,EAAOknB,mBAEA,EACJ,GACoB,GAAvBn2C,EAAOkzB,cACPlzB,EAAOslC,aACPyQ,EACF,CACQ,MAA8B/1C,EAAOslC,YAAnCniC,EAAS,YAAE8uB,EAAI,OAAErkB,EAAM,SACzBvH,EAAS4rB,EAAK,GAAG5rB,OACjB+vC,EAAa/vC,EAAOP,OACpB06B,EAAan6B,EAAOzD,QAAQO,GAElC,GACIA,EAAUoD,YACmB,GAA7BpD,EAAU8J,SAASnH,QACnB3C,EAAU8J,SAAS,IAAMW,GACzBwoC,EAAa,GACb5V,GAAc4V,EAAa,EAC7B,CAOE,IAAMC,EAAgBhwC,EAAOm6B,EAAa,GAEV,cAA5B6V,aAAa,EAAbA,EAAe/vC,YACfuvC,EAA2B5mB,EAAQ3sB,EAAesL,EAAOnP,OAAQs3C,E,MAE9D5yC,EAAU8J,SAASiB,OAAM,SAAAhP,GAAK,MAAiB,QAAjBA,EAAE8gB,WAAF,KACrC61B,EAA2B5mB,EAAQ3sB,EAAesL,EAAOnP,OAAQs3C,GAIrE,OAAO,C,CAEP,OAAO,CAEf,GACJ,C,gFCjFA,UACA,UACA,UAEA,UAcA,mBAA2C9mB,EAA6B4E,GACpE,IAAMp1B,GAAS,IAAAu3C,kBAAiB/mB,GAEhC,GAAIxwB,EAAQ,CACR,IAAI,GAAY,GAEhB,IAAAu0B,wBAAuB/D,EAAQ,sBAAsB,SAAC7sB,EAAOF,GA0CzD,OAzCA,IAAA8vB,mBAAkB,CAAC5vB,IAAQ,SAACkP,EAAGglC,EAAIxzC,EAAOmK,GACtC,GACwB,cAApBnK,aAAK,EAALA,EAAOwD,YACa,IAApB2G,aAAQ,EAARA,EAAUnH,SACiB,mBAA3BmH,EAAS,GAAG+S,YACd,CACE,IAAMpS,EAASX,EAAS,GAClBnJ,EAAQhB,EAAMmK,SAASrK,QAAQgL,GAC/B2oC,EAAkBzzC,EAAMmK,SAASnJ,EAAQ,GAE/C,GAAoC,SAAhCyyC,aAAe,EAAfA,EAAiBv2B,aAAuB,CACxC,IAAMxS,EAAO+oC,EAAgB/oC,KACvBqL,EAASrL,EAAKgV,QAAQqR,EAAK/tB,OAAQ+tB,EAAK/tB,QAG9C,GAAI+S,GAAUgb,GA9BnB,KA8B4BA,GA7BvB,KA6B6Chb,EAA4B,CACrEjL,EAAOnP,QAAS,EAAH,eAAQA,GACrB83C,EAAgB/oC,KAAOA,EAAKJ,UAAU,EAAGI,EAAK1H,OAAS+tB,EAAK/tB,QAE5D,IAAM2jC,GAAU,IAAA97B,YAlCzB,KAmCakmB,EAlCR,IAkC+CA,GAAI,gCAEpC0iB,EAAgB93C,QAChBA,IAIXqE,EAAMmK,SAASkN,OAAOrW,EAAO,EAAG2lC,IAChC,IAAAhjC,yBAAwB3D,GACxB,GAAY,C,GAIxB,OAAO,CACX,IAEI,KACA,IAAAP,uBAAsBH,GACtBF,EAAQw7B,kBAAmB,GAGxB,CACX,G,CAER,C,kECrEA,aACA,UACA,UAaA,mBAAoCzO,IAChC,IAAA+D,wBAAuB/D,EAAQ,eAAe,SAAA7sB,GAC1C,IAAMw+B,EAAiE,GACjEC,EAAyC,GACzCC,EAAgD,GAMtD,OAJA,IAAA0V,kBAAiBp0C,EAAOw+B,EAAeC,EAAiBC,IAExD,IAAAv+B,uBAAsBH,GAEfw+B,EAAc96B,OAAS,GAAK+6B,EAAgB/6B,OAAS,GAAKg7B,EAAch7B,OAAS,CAC5F,GACJ,C,oHC3BA,UACA,UACA,UACA,UAIA,UAgDA,SAAgB2wC,EACZh0C,EACA4B,EACAnC,GAEA,IAAMw0C,GAAoB,IAAAphB,sBAAqBpzB,EAAQC,WAEvD,GAAIu0C,EAAmB,CACdx0C,EAAQ0X,YACT1X,EAAQ0X,UA8BpB,SAAyB3X,EAAY00C,GAIjC,IAHA,IAAM32C,EAAiB,GACnByP,EAAoBknC,EAEjBlnC,IAAQ,IAAAE,UAAS1N,EAAMwN,KACtB,IAAA7L,cAAa6L,EAAM,iBAAmC,SAAhBA,EAAK7Q,QAG3CoB,EAAOma,OAAO,EAAGna,EAAO8F,OAAQ2J,GAEhCzP,EAAO0I,KAAK+G,GAGhBA,EAAOA,EAAK9E,WAGhB,OAAO3K,CACX,CA/CgC42C,CAAgBvyC,EAAQqyC,IAGhD,IAAMG,EAAa30C,EAAQ0X,UAAUrQ,MAErC,GAAIstC,EAAY,CACN,oBAAmC,IAAAvyC,4BAA2BpC,EAASmC,GAAO,GAA7EN,EAAe,KAAEC,EAAa,KAG/BF,EACFC,GAAmB,GAAKC,GAAiB,EAuCzD,SAAuBK,EAAoBwyC,GAIvC,IAHA,IAAI/yC,EAAQ,EACRjC,EAAQwC,EAAOE,WAEZ1C,GAASA,GAASg1C,GACrB/yC,IACAjC,EAAQA,EAAM2C,YAElB,OAAOV,CACX,CAhD6DgzC,CAAczyC,EAAQwyC,IAAe,EAElF/yC,GAAS,IACT,IAAAD,wBAAuBC,EAAO5B,EAASO,EAAOsB,EAAiBC,IAGnE,IAAAL,kBAAiBlB,EAAOo0C,EAAY30C,GAEhC4B,GAAS,IACT,IAAAD,wBAAuBC,EAAQ,EAAG5B,EAASO,EAAOsB,EAAiBC,E,MAMvE9B,EAAQ1C,yBAAyBqC,MAAMY,EAAO4B,EAAQnC,E,CAGlE,CA1EA,mBAAuC+sB,GACnC,IAAMwW,GAAgB,IAAAuQ,kBAAiB/mB,GACjC7sB,EAAQ6sB,EAAOrD,mBAAmB,CACpCzsB,kBAAmB,CACf0C,MAAO40C,KAGTz2C,GAAM,gCACLivB,EAAO8nB,gBAAc,CACxBhkC,WAAYkc,EAAOlc,aACnBzI,UAAW2kB,EAAO+nB,iBAKtB,OAFA,IAAAC,0BAAyB70C,EAAOqjC,EAAezlC,GAExCA,CACX,EAqBA,8B,kECvDA,cACA,UAQA,mBACIivB,GAEA,IAAI5nB,EAAkC,KAiBtC,OAfA,IAAA2rB,wBAAuB/D,EAAQ,wBAAwB,SAAA7sB,GACnD,WAAA80C,wBACI90C,GACA,SAAAwZ,GACI,SAAIA,EAAOrY,YAAoC,SAAtBqY,EAAOoE,cAC5B3Y,EAAQuU,EACD,GAIf,IACA,SAACA,EAAQu7B,GAAQ,OAAAv7B,GAAUu7B,CAAV,GAVrB,IAcG9vC,CACX,C,kEC9BA,cACA,UASA,mBAAoC4nB,EAA6BmoB,GAC7D,IAAMj1C,EAAY8sB,EAAO7C,mBACzB,IAAAirB,UAASD,GAAM,SAAAE,GACPA,IAAYroB,EAAOqC,cAAoC,WAApBnvB,aAAS,EAATA,EAAW+B,QAC9C,aACI+qB,EACA,eACA,SAAC5nB,GACGA,EAAME,IAAM+vC,EACZjwC,EAAM3I,QAAU,CAAC,EACjB2I,EAAM5I,OAAOkN,MAAQ,GACrBtE,EAAM5I,OAAOmN,OAAS,GACtBvE,EAAMG,IAAM,EAChB,GACA,CACIH,MAAOlF,EAAUkF,MACjBkwC,YAAap1C,EAAUkF,MAAME,IAC7BiwC,OAAQF,EACRG,YAAaC,EAAYv1C,EAAUkF,QAInD,GACJ,EAEA,IAAMqwC,EAAc,SAACrwC,GACjB,IAAM4I,GAAM,IAAA0nC,aAA6BtwC,GACzC,OAAQ4I,GAAOA,EAAI1I,KAAQ,EAC/B,C,kECtCA,cACA,UACA,SACA,UAoBA,SAASqwC,EAAmB3oB,EAA6B1nB,IACrD,IAAAyrB,wBAAuB/D,EAAQ,eAAe,SAAC7sB,EAAOF,GAClD,IAAMmF,GAAQ,IAAAC,aAAYC,EAAK,CAAEqL,gBAAiB,KAC5C0Q,GAAM,IAAAjhB,8BAOZ,OALA,IAAAmB,YAAW8f,EAAKjc,IAChB,IAAAwwC,YAAWz1C,EAAOkhB,EAAKphB,EAAS,CAC5B6hC,YAAa,cAGV,CACX,GACJ,CAxBA,mBAAoC9U,EAA6B6oB,GAChC,iBAAlBA,EACPF,EAAmB3oB,EAAQ6oB,IAE3B,IAAAT,UAASS,GAAgB,SAAAR,GACjBA,IAAYroB,EAAOqC,cACnBsmB,EAAmB3oB,EAAQqoB,EAEnC,GAER,C,kECrBA,cAUA,mBAAwCroB,EAA6B8oB,IACjE,aAA4B9oB,EAAQ,mBAAmB,SAAC5nB,GACpDA,EAAMG,IAAMuwC,CAChB,GACJ,C,kECdA,cACA,UAYA,mBACI9oB,EACAta,EACAmyB,IAEA,aAA4B7X,EAAQ,kBAAkB,SAAC5nB,IACnD,aAAuBA,EAAOsN,EAAQmyB,EAC1C,GACJ,C,kECrBA,cAUA,mBACI7X,EACA3b,EACAqC,IAEA,aAA4BsZ,EAAQ,qBAAqB,SAAC5nB,GACtDA,EAAM5I,OAAO6U,UAAYA,EACrBqC,GACAtO,EAAM5I,OAAOxE,aAAe0b,EAC5BtO,EAAM5I,OAAOvE,WAAayb,EAC1BtO,EAAM5I,OAAOtE,YAAcwb,EAC3BtO,EAAM5I,OAAOzE,UAAY2b,GACP,OAAXA,WACAtO,EAAM5I,OAAOxE,oBACboN,EAAM5I,OAAOvE,kBACbmN,EAAM5I,OAAOtE,mBACbkN,EAAM5I,OAAOzE,UAE5B,GACJ,C,kEC7BA,cACA,UACA,UACA,UACA,UAOA,mBAA4Ci1B,GACxC,IAAIzhB,EAAO,GACPwuB,EAAqB,KA0BzB,OAxBA,IAAAhJ,wBAAuB/D,EAAQ,uBAAuB,SAAA7sB,G,QAC9C+qC,GAAU,IAAA+J,wBACV90C,GACA,SAAAwZ,GAAU,QAAEA,EAAOrY,cAAgBqY,EAAOpd,IAAhC,IACV,SAACod,EAAQu7B,GAAQ,QAAEv7B,EAAOpd,MAAQod,EAAOpd,KAAKC,OAAO0J,MAAQgvC,EAAI34C,KAAMC,OAAO0J,IAA7D,IAEjB8E,GAAW,aAAoB7K,GAAO,GACpCwlB,EAAe3a,EAAS,GAc9B,OAZuB,GAAnBA,EAASnH,QAA2C,mBAA5B8hB,EAAa5H,cACrC/S,GAAW,IAAAq0B,qBAAoBl/B,EAAOwlB,IAEzB9hB,OAAS,IAClBqnC,GAAU,GACV,IAAA5P,cAAan7B,EAAO6K,EAAS,GAAIA,EAASA,EAASnH,OAAS,KAIpE0H,EAAOP,EAAShO,KAAI,SAAAC,GAAK,MAAkB,QAAjBA,EAAE8gB,YAAwB9gB,EAAEsO,KAAO,EAApC,IAAyC6O,KAAK,IACvE2f,GAAuB,QAAjB,EAAW,QAAX,EAAA/uB,EAAS,UAAE,eAAEzO,YAAI,eAAEC,OAAO0J,OAAQ,KAEjCglC,CACX,IAEO,CAAC3/B,EAAMwuB,EAClB,C,gFCxCA,UAEA,UACA,UACA,UACA,SAGA,UAQMgc,EAAY,eAEZC,EAAe,eAEfC,EAAY,UAelB,mBACIjpB,EACAzwB,EACAwd,EACAm8B,EACAv8B,GAEA,IAAIogB,GAoHR,SAAkBx9B,GACd,IAAM45C,EAAY,IAAI,EAAAC,cAChBx+C,EAAIktB,SAASjM,cAAc,KAOjC,OALAjhB,EAAEsO,KAAO3J,GAAQ,GAEjB45C,EAAUE,SAASz+C,GAGZA,EAAE6L,aAAa,SAAW,EACrC,CA9He6yC,CAAS/5C,IAAS,IAAI8d,OACjC,GAAI0f,EAAK,CACL,IAGI,EAHE,GAAW,IAAAwc,WAAUxc,GACrB,EAAU,EAAW,EAASyc,cAsF5C,SAAyBzc,GACrB,IAAKA,EACD,OAAOA,EAQX,IAAI0c,EAAS,GAYb,OAXI1c,EAAI2c,OAAOX,GAAa,IAEpBU,EAD4B,GAA5B1c,EAAI2c,OAAOV,GACF,UACuB,GAAzBjc,EAAI2c,OAAOT,GACT,SAGA,WAIVQ,EAAS1c,CACpB,CA7G4D4c,CAAgB5c,GAC9D,EAA4B,IAGlC,IAAAhJ,wBACI/D,EACA,cACA,SAAC7sB,EAAOF,G,MACE+K,GAAW,aAAoB7K,GAAO,GACtCy2C,EAAe5rC,EAChBhO,KAAI,SAAAC,GAAK,MAAkB,QAAjBA,EAAE8gB,YAAwB9gB,EAAEsO,KAAO,EAApC,IACT6O,KAAK,IACJ7O,EAAO2qC,GAAeU,GAAgB,GAE5C,GACI5rC,EAAShF,MAAK,SAAA/I,GAAK,MAAiB,mBAAjBA,EAAE8gB,WAAF,KACnB64B,GAAgBrrC,EAEhBP,EAAShK,SAAQ,SAAA/D,GACb,IAAMV,EAAOs6C,EACT,EACA98B,EACAJ,EACiB,QAAjB1c,EAAE8gB,cAEN,IAAAZ,SAAQlgB,EAAGV,GACPU,EAAEV,MACF,EAAMkK,KAAKxJ,EAAEV,KAErB,SACG,GACHyO,EAASiB,OAAM,SAAAhP,GAAK,MAAiB,mBAAjBA,EAAE8gB,WAAF,KACjBxS,GAAQA,GAAQqrC,EACrB,CACE,IAAM1zC,GAAU,IAAAwI,YAAWH,IAAS,EAAW,EAASurC,YAAc/c,IAAM,EAAF,+BACvD,QAAX,EAAA/uB,EAAS,UAAE,eAAExO,SAAU,CAAC,IACxB,IAAAu3C,kBAAiB/mB,IAAW,CAAC,IAE/B3L,GAAM,IAAAjhB,8BACN,EAAOy2C,EAAW,EAAS98B,EAAaJ,IAE9C,IAAAwD,SAAQja,EAAS,IACjB,IAAA3B,YAAW8f,EAAKne,GAEZA,EAAQ3G,MACR,EAAMkK,KAAKvD,EAAQ3G,OAGvB,IAAAq5C,YAAWz1C,EAAOkhB,EAAKphB,EAAS,CAC5B6hC,YAAa,Y,CAIrB,OAAO92B,EAASnH,OAAS,CAC7B,GACA,CACIqtB,aAAc,aACd5P,cAAe,SAACy1B,EAAcvpC,IACrB,GAAc,EAAM7M,QAAQo2C,IAAqC,IAClE,EAAavpC,EAErB,EACAgmC,cAAe,WAAM,W,CAIrC,EAEA,IAAMqD,EAAa,SACf9c,EACAhgB,EACAJ,EACA9hB,GAEA,YAFA,IAAAA,IAAAA,GAAA,GAEO,CACH4E,QAAS,CAAC,EACVD,OAAQ,CACJ0J,KAAM6zB,EACNhgB,YAAW,EACXJ,OAAM,EACN9hB,UAAWA,GAGvB,C,kEChIA,cACA,UACA,UASA,mBAAmCm1B,IAC/B,IAAA+D,wBAAuB/D,EAAQ,cAAc,SAAA7sB,IACzC,IAAA80C,wBACI90C,GACA,SAAAwZ,GAAU,QAAEA,EAAOrY,cAAgBqY,EAAOpd,IAAhC,IACV,SAACod,EAAQu7B,GACL,OAAAv7B,EAAOrY,cACJqY,EAAOpd,MAAQod,EAAOpd,KAAKC,OAAO0J,MAAQgvC,EAAI34C,KAAMC,OAAO0J,IAD9D,IAIR,IAAM8E,GAAW,aAAoB7K,GAAO,GACxC62C,GAAY,EAUhB,OARAhsC,EAAShK,SAAQ,SAAAkC,GACTA,EAAQ3G,OACRy6C,GAAY,SAEL9zC,EAAQ3G,KAEvB,IAEOy6C,CACX,GACJ,C,kEClCA,cACA,UAQA,mBAA2ChqB,EAA6B/uB,IACpE,IAAA8yB,wBAAuB/D,EAAQ,sBAAsB,SAAA7sB,GACjD,IAAMmG,GAAW,IAAA2wC,0BAAyB92C,GACpCyG,EAAQN,aAAQ,EAARA,EAAUjK,QAAOiK,aAAQ,EAARA,EAAUjK,OAAOwH,QAAS,GAEzD,QAAI+C,IACAA,EAAMpK,OAAO2b,oBAAsBla,GAE5B,EAIf,GACJ,C,iECtBA,cACA,UACA,UACA,UASA,mBAAqC+uB,EAA6B/rB,IAC9D,IAAA8vB,wBAAuB/D,EAAQ,gBAAgB,SAAA7sB,GAC3C,IAAMmG,GAAW,IAAA2wC,0BAAyB92C,GAE1C,GAAImG,EAAU,CACV,IAAMyjC,GAAY,IAAAzM,2BAA0Bn9B,EAAOmG,GAC7C,EAAaA,EAASjK,OAAOwH,OAAS,EAU5C,OARAkmC,EAAU/oC,SAAQ,SAAAsF,GACd,IAAMM,EAAQN,EAASjK,OAAO,GAE1BuK,IACA,IAAAG,oBAAmBH,GAAO,SAAAI,GAAY,OAAAnL,OAAOC,OAAO,CAAC,EAAGkL,EAAU/F,EAA5B,GAE9C,KAEO,C,CAEP,OAAO,CAEf,GACJ,C,gECjCA,cACA,UASA,mBAAqC+rB,IACjC,IAAA+D,wBAAuB/D,EAAQ,gBAAgB,SAAA7sB,GAAS,WAAA+2C,aAAY/2C,EAAO,KAAnB,GAA0B,CAC9EkyC,uBAAuB,GAE/B,C,kECdA,cACA,UASA,mBAAwCrlB,IACpC,IAAA+D,wBAAuB/D,EAAQ,mBAAmB,SAAA7sB,GAAS,WAAA+2C,aAAY/2C,EAAO,KAAnB,GAA0B,CACjFkyC,uBAAuB,GAE/B,C,kECdA,cASA,mBACIrlB,EACA/F,IAEA,IAAAkwB,+BACInqB,EACA,sBACA,SAAAxwB,GACIA,EAAOmU,gBAAkBsW,EAAUtW,gBACnCnU,EAAOpE,WAAa6uB,EAAU7uB,WAC9BoE,EAAOjE,SAAW0uB,EAAU1uB,SAC5BiE,EAAOlE,WAAa2uB,EAAU3uB,WAC9BkE,EAAOuW,OAASkU,EAAUlU,OAC1BvW,EAAOyd,cAAgBgN,EAAUhN,cACjCzd,EAAO0d,yBAA2B+M,EAAU/M,yBAC5C1d,EAAOsH,UAAYmjB,EAAUnjB,UAC7BtH,EAAO3E,UAAYovB,EAAUpvB,SACjC,QACAsG,GACA,EAER,C,kEC9BA,cAWA,mBACI6uB,EACAoqB,EACAC,IAEA,IAAAF,+BAA8BnqB,EAAQ,wBAAwB,SAAC3d,EAAGglC,EAAInxC,GAClE,GAA4B,SAAxBA,aAAO,EAAPA,EAAS6a,aACT,OAAQq5B,GACJ,IAAK,YACDl0C,EAAQqI,KAAOrI,EAAQqI,KAAK2C,kBAAkBmpC,GAC9C,MAEJ,IAAK,YACDn0C,EAAQqI,KAAOrI,EAAQqI,KAAK+rC,kBAAkBD,GAC9C,MAEJ,IAAK,aAGD,IAFA,IAAME,EAAYr0C,EAAQqI,KAAK2C,kBAAkBmpC,GAAUl9B,MAAM,KAExD5f,EAAI,EAAGA,EAAIg9C,EAAU1zC,OAAQtJ,IAClCg9C,EAAUh9C,GACNg9C,EAAUh9C,GAAGi9C,OAAO,GAAGF,kBAAkBD,GACzCE,EAAUh9C,GAAG2U,MAAM,GAG3BhM,EAAQqI,KAAOgsC,EAAUn9B,KAAK,KAC9B,MAEJ,IAAK,WAED,IAMMq9B,EAAQ,IAAIC,OAAO,8BAA4C,KAErEx0C,EAAQqI,KAAOrI,EAAQqI,KAClB2C,kBAAkBmpC,GAClB3gC,QAAQ+gC,GAAO,SAAA9gC,GAAS,OAAAA,EAAM2gC,kBAAkBD,EAAxB,IAI7C,GACJ,C,kECxDA,cACA,UACA,UAWMM,EAAa,CAAC,EAAG,EAAG,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,IAU9E,mBACI3qB,EACA4qB,IAEA,IAAAT,+BACInqB,EACA,kBACA,SAACxwB,EAAQ6S,EAAGglC,EAAInzC,GAAc,OAMtC,SACI02C,EACAp7C,EACA0E,GAEA,GAAI1E,EAAOjE,SAAU,CACjB,IAAIs/C,GAAW,IAAA3nC,oBAAmB1T,EAAOjE,cAAU4F,EAAuB,MAE1E,GAAI05C,EAAW,EAAG,CACd,IAAMC,EAOlB,SAAwB17B,EAAY27B,EAAoBC,GACpD57B,EAAmB,GAAd27B,EAAkB3gC,KAAKC,MAAM+E,GAAMhF,KAAKwmB,KAAKxhB,GAClD,IAAI0C,EAAOk5B,EAAUA,EAAUn0C,OAAS,GACxC,GAAIuY,GAAM47B,EAAU,GAChB57B,EAAKhF,KAAK4O,IAAI5J,EAAK27B,EA1CL,QA2CX,GAAI37B,EAAK0C,GAAS1C,GAAM0C,GAAsB,GAAdi5B,EACnC37B,GAAU,GACVA,EAAmB,GAAd27B,EAAkB3gC,KAAKC,MAAM+E,GAAMhF,KAAKwmB,KAAKxhB,GAClDA,EAAKhF,KAAKq6B,IAAIr6B,KAAK4O,IAAwB,IAAnB5J,EAAK27B,GAAkBj5B,GA7CjC,UA8CX,GAAkB,GAAdi5B,GACP,IAAK,IAAIx9C,EAAI,EAAGA,EAAIy9C,EAAUn0C,OAAQtJ,IAClC,GAAI6hB,EAAK47B,EAAUz9C,GAAI,CACnB6hB,EAAK47B,EAAUz9C,GACf,K,OAIR,IAASA,EAAIy9C,EAAUn0C,OAAS,EAAGtJ,GAAK,EAAGA,IACvC,GAAI6hB,EAAK47B,EAAUz9C,GAAI,CACnB6hB,EAAK47B,EAAUz9C,GACf,K,CAIZ,OAAO6hB,CACX,CAhC4B67B,CAAeJ,EAAoB,YAAVD,EAAuB,GAAK,EAAGD,IAExE,IAAAO,qBAAoBJ,EAAU,KAAMt7C,EAAQ0E,E,EAGxD,CApBsCi3C,CAAuBP,EAAQp7C,EAAQ0E,EAAvC,QAC9B/C,GACA,EAER,C,kEClCA,cACA,UACA,UASA,mBACI6uB,EACArc,GAEA,IAAIm1B,EAA8C,KAC9CsS,GAA4B,GAEhC,IAAAjB,+BACInqB,EACA,sBACA,SAACxwB,EAAQ6S,EAAGnM,EAAShC,GACO,OAApByP,SACOnU,EAAOmU,gBAEdnU,EAAOmU,gBAAkBA,EAGzBzN,GAAWhC,GAAoC,mBAAvBgC,EAAQ6a,cAEhCq6B,GADAtS,EAAgB5kC,GACiB8J,SAASrK,QAAQuC,GAE1D,QACA/E,OACAA,GACA,SAAAgC,G,MACI,GAAI2lC,GAAiBsS,GAAoB,EAAG,CACxC,IAAMzsC,GAAS,IAAAC,uBAC6B,QAAxC,EAAAk6B,EAAc96B,SAASotC,UAAiB,eAAE57C,QAG9CspC,EAAc96B,SAASkN,OAAOkgC,EAAmB,EAAG,EAAGzsC,IACvD,IAAA2vB,cAAan7B,EAAOwL,EAAQA,E,CAEpC,GAER,C,kEC9CA,cAQA,mBAAoCqhB,EAA6BqrB,IAC7D,IAAAlB,+BACInqB,EACA,eACA,SAACxwB,EAAQ6S,EAAGnM,GACR1G,EAAOpE,WAAaigD,GAEhBn1C,aAAO,EAAPA,EAAS/K,QACT+K,EAAQ/K,KAAKqE,OAAOpE,WAAaigD,EAEzC,QACAl6C,GACA,EAER,C,+FCtBA,cA0BA,SAAgB+5C,EACZ3/C,EACAiE,EACA0E,G,MAKA,GAHA1E,EAAOjE,SAAWA,EAGU,QAAxB,EAAA2I,aAAS,EAATA,EAAW/E,qBAAa,eAAE5D,SAAU,CACpC,IAAM,EAAO2I,EAAU/E,cAAc5D,SAErC2I,EAAU8J,SAAShK,SAAQ,SAAAkC,GAClBA,EAAQ1G,OAAOjE,WAChB2K,EAAQ1G,OAAOjE,SAAW,EAElC,WAEO2I,EAAU/E,cAAc5D,Q,CAEvC,CAjCA,mBAAoCy0B,EAA6Bz0B,IAC7D,IAAA4+C,+BACInqB,EACA,eACA,SAACxwB,EAAQ6S,EAAGglC,EAAInzC,GAAc,OAAAg3C,EAAoB3/C,EAAUiE,EAAQ0E,EAAtC,QAC9B/C,GACA,EAER,EAMA,uB,kEC1BA,cAQA,mBAAqC6uB,EAA6BlpB,IAC9D,IAAAqzC,+BACInqB,EACA,eACc,OAAdlpB,EACM,SAACtH,EAAQ6S,EAAGnM,UACD1G,EAAOsH,WAEVZ,aAAO,EAAPA,EAAS3G,cACF2G,EAAQ3G,KAAKC,OAAOsH,SAEnC,EACA,SAACtH,EAAQ6S,EAAGnM,GACR1G,EAAOsH,UAAYA,GAEfZ,aAAO,EAAPA,EAAS3G,QACT2G,EAAQ3G,KAAKC,OAAOsH,UAAYA,EAExC,OACN3F,GACA,EAER,C,kFC9BA,cA0BA,SAAgBsmC,EAAO6T,GACnB,QACMA,IAA2B,QAAbA,GAAoC,UAAbA,GAAyB50C,SAAS40C,IAAc,IAE/F,CAvBA,mBAAmCtrB,IAC/B,IAAAmqB,+BACInqB,EACA,cACA,SAACxwB,EAAQ+7C,GACL/7C,EAAOlE,WAAaigD,EAAc,OAAS,QAC/C,IACA,SAAC/7C,EAAQ6S,EAAGnO,G,MACR,OAAAujC,OACgC,IAArBjoC,EAAOlE,WACY,QAApB,EAAA4I,aAAS,EAATA,EAAWT,iBAAS,eAAEjE,OAAOlE,WAC7BkE,EAAOlE,W,GAG7B,EAKA,U,kEC1BA,cACA,UAIMkgD,EAAgC,CAClCh8C,OAAQ,CACJpE,WAAY,cAQpB,mBAAmC40B,IAC/B,IAAAmqB,+BACInqB,EACA,cACA,SAAC3d,EAAGkpC,EAAar1C,GACTA,IACIq1C,GACA,IAAAr7B,SAAQha,EAASs1C,UAEVt1C,EAAQ/K,KAG3B,IACA,SAACkX,EAAGnM,GAAY,SAAEA,aAAO,EAAPA,EAAS/K,KAAX,GAExB,C,kEC9BA,cAOA,mBAAqC60B,IACjC,IAAAmqB,+BACInqB,EACA,gBACA,SAACxwB,EAAQ+7C,GACL/7C,EAAOuW,SAAWwlC,CACtB,IACA,SAAA/7C,GAAU,QAAEA,EAAOuW,MAAT,GAElB,C,kEChBA,cAOA,mBAA4Cia,IACxC,IAAAmqB,+BACInqB,EACA,uBACA,SAACxwB,EAAQ+7C,GACL/7C,EAAOyd,gBAAkBs+B,CAC7B,IACA,SAAA/7C,GAAU,QAAEA,EAAOyd,aAAT,GAElB,C,kEChBA,cAOA,mBAAwC+S,IACpC,IAAAmqB,+BACInqB,EACA,mBACA,SAACxwB,EAAQ+7C,GACL/7C,EAAO0d,yBAA2Bq+B,EAAc,MAAQ,EAC5D,IACA,SAAA/7C,GAAM,MAAI,MAAqD,QAAtB,QAA/B,EAAAA,EAAO0d,gCAAwB,eAAEC,MAAM,KAAK7S,MAAc,GAE5E,C,kEChBA,cAOA,mBAA0C0lB,IACtC,IAAAmqB,+BACInqB,EACA,qBACA,SAACxwB,EAAQ+7C,GACL/7C,EAAO0d,yBAA2Bq+B,EAAc,QAAU,EAC9D,IACA,SAAA/7C,GAAM,MAAI,MAAqD,UAAtB,QAA/B,EAAAA,EAAO0d,gCAAwB,eAAEC,MAAM,KAAK7S,MAAgB,GAE9E,C,kEChBA,cAOA,mBAAwC0lB,IACpC,IAAAmqB,+BACInqB,EACA,mBACA,SAACxwB,EAAQ+7C,EAAar1C,GAClB1G,EAAO3E,YAAc0gD,GAEjBr1C,aAAO,EAAPA,EAAS3G,QACT2G,EAAQ3G,KAAKC,OAAO3E,YAAc0gD,EAE1C,IACA,SAAC/7C,EAAQ0G,GAAO,QAAK,QAAE1G,EAAO3E,cAAoC,QAArB,EAAa,QAAb,EAAAqL,aAAO,EAAPA,EAAS3G,YAAI,eAAEC,cAAM,eAAE3E,UAAS,GAErF,C,kECpBA,cAMA,mBACIsI,EACAysC,GAEA,OAAO,IAAA6L,kCAAiCt4C,EAAOysC,GAAuB5vC,KAAI,SAAAC,GAAK,OAAAA,EAAE,EAAF,GACnF,C,kECXA,cACA,UAOA,mBAA4C4D,GACxC,OAAQA,EAAMwD,WACV,IAAK,YACD,OAAOxD,EAAMmK,SAAShF,KAAK,WAE/B,IAAK,QACD,OAAOnF,EAAM+G,KAAK5B,MAAK,SAAAsC,GAAO,OAAAA,EAAIU,MAAMhD,KAAK,UAAf,IAElC,IAAK,aACD,OAAO,aAAyBnF,GAEpC,IAAK,UACL,IAAK,SACD,QAASA,EAAMS,WAEnB,QACI,OAAO,EAEnB,C,kEC1BA,cAOA,mBAAiDd,GAC7C,QAA4B,aAAxBA,EAAM8d,iBAAiC9d,EAAMc,eAI7Cd,EAAM4D,OAAO4B,KAAK,UAK1B,C,kECjBA,cAOA,mBAA8C9C,GAC1C,OACIA,EAAQ5B,YACgB,WAAvB4B,EAAQ6a,aAA4B7a,EAAQkB,OAAO4B,KAAK,UAEjE,C,+ECZA,UACA,UACA,UACA,UACA,UACA,SACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UAGA,UAWA,mBAAkCgnB,EAA6Bgb,IAC3D,IAAAjX,wBAAuB/D,EAAQ,aAAa,SAAA7sB,GAClC,oBAAqB,IAAAu4C,uBAAsBv4C,GAAM,GAAhDw4C,EAAU,KAAE3oB,EAAI,KAEvB,GAAI2oB,EAAY,CACZ,OAAQ3Q,GACJ,KAAK,GACL,KAAK,GACL,KAAK,GAGL,KAAK,GACL,KAAK,GACL,KAAK,IACD,IAAA4Q,gBAAeD,EAAY3Q,GAC3B,MACJ,KAAK,GACL,KAAK,GACL,KAAK,IACD,IAAA/K,YAAW0b,EAAY3Q,GACvB,MAEJ,KAAK,GACD,IAAA6Q,mBAAkBF,GAClB,MAEJ,KAAK,GACD,IAAAG,gBAAeH,GACf,MAEJ,KAAK,GACD,IAAAI,aAAYJ,GACZ,MAEJ,KAAK,EACL,KAAK,GACD,IAAAK,gBAAeL,EAAY3Q,GAC3B,MAEJ,KAAK,EACL,KAAK,GACD,IAAAiR,mBAAkBN,EAAY3Q,GAC9B,MAEJ,KAAK,EACL,KAAK,GACD,IAAAkR,eAAcP,EAAY3Q,GAC1B,MAEJ,KAAK,IACD,IAAAmR,iBAAgBR,GAChB,MAEJ,KAAK,EACL,KAAK,IACD,IAAAS,kBAAiBT,EAAY3Q,GAC7B,MAEJ,KAAK,IACD,IAAAqR,4BAA2BV,GAC3B,MAEJ,KAAK,IACD,IAAAW,0BAAyBX,GAIjC,KAAK,aAAoBA,GAAa,CAClC,IAAMz3C,GAAY,IAAAq4C,kCAAiCp5C,EAAO6vB,EAAM2oB,GAEhE,GAAIz3C,EAAW,CACX,IAAMyK,GAAS,IAAAC,uBAAsBzL,EAAM3D,QAE3C0E,EAAU8J,SAASsxB,QAAQ3wB,IAC3B,IAAAnH,yBAAwBtD,IACxB,IAAAo6B,cAAan7B,EAAOwL,E,EAU5B,OANA,IAAA62B,gBAAemW,IAEX,IAAA37B,aAAY27B,KACZ,IAAAlZ,kBAAiBkZ,OAAYx6C,GAAyB,IAGnD,C,CAEP,OAAO,CAEf,GACJ,C,gFC1HA,UACA,UACA,UAUA,mBACI6uB,EACAxwB,EACA6xC,IAEA,IAAAtd,wBAAuB/D,EAAQ,eAAe,SAAA7sB,GACpC,IAACw4C,GAAD,aAAe,IAAAD,uBAAsBv4C,GAAM,GAAhC,GAEjB,QAAIw4C,KACA,IAAAlZ,kBAAiBkZ,EAAYn8C,EAAQ6xC,IAE9B,EAIf,GACJ,C,kEC5BA,cACA,UACA,UACA,SACA,UACA,UACA,SACA,UACA,UAaA,mBACIrhB,EACA+iB,EACAnoC,EACApL,IAEA,IAAAu0B,wBAAuB/D,EAAQ,eAAe,SAAC7sB,EAAOF,G,UAC5CmjC,GAAiB,IAAApS,iBAAgB7wB,EAAO,GAAIF,GAASojC,YAE3D,GAAID,EAAgB,CAChB,IAAM/hB,GAAM,IAAAjhB,8BACNhF,GAAQ,IAAAo+C,sBAAqBn4B,EAAK0uB,EAASnoC,IAEjD,IAAA46B,gBAAepnC,GAAO,IAAA24C,kBAAiB/mB,IAAWoW,EAAez3B,OAAOnP,QAExEA,EAASA,GAAU,CAAEtB,cAAe,QACpC,IAAAukC,kBAAiBrkC,EAAOoB,IACxB,IAAAo5C,YAAWz1C,EAAOkhB,EAAKphB,EAAS,CAC5BmjC,eAAc,EACdtB,YAAa,aAGjB,IAAM6B,EAAoC,QAAvB,EAAa,QAAb,EAAAvoC,EAAMwM,KAAK,UAAE,eAAEoB,MAAM,UAAE,eAAE5E,OAAO,GAEnD,GAA6B,cAAzBu/B,aAAU,EAAVA,EAAYt/B,WAA0B,CACtC,IAAMsH,GAAS,IAAAC,uBAA4C,QAAtB,EAAA+3B,EAAW34B,SAAS,UAAE,eAAExO,QAC7DmnC,EAAW34B,SAASsxB,QAAQ3wB,IAC5B,IAAA2vB,cAAan7B,EAAOwL,E,CAGxB,OAAO,C,CAEP,OAAO,CAEf,GACJ,C,gFCxDA,UACA,UACA,UACA,UACA,UAQA,mBAA0CqhB,EAA6BxS,IACnE,IAAAuW,wBAAuB/D,EAAQ,qBAAqB,SAAA7sB,GAC1C,IAAC/E,GAAD,aAAU,IAAAs9C,uBAAsBv4C,GAAM,GAAhC,GAEZ,QAAI/E,KACA,IAAAonC,gBAAepnC,GAEfA,EAAMwM,KAAK5G,SAAQ,SAAAsH,GACf,OAAAA,EAAIU,MAAMhI,SAAQ,SAAAgJ,IACV,aAAyBA,KACzB,IAAAklC,6BAA4BllC,EAAMwQ,GAAO,EAEjD,GAJA,KAOG,EAIf,GACJ,C,kEChCA,cASA,mBACIwS,EACAysB,EACA3sC,EACA4sC,IAEA,IAAAvC,+BACInqB,EACAysB,GACA,SAACpqC,EAAGglC,EAAInxC,GACwB,UAAxBA,aAAO,EAAPA,EAAS6a,eACTjR,EAAS5J,GACLw2C,GACA1sB,EAAOyD,mBAAmB,GAA2BipB,GAGjE,QACAv7C,OACAA,EAER,C,2GC7BA,cACA,UAOA,2CACI6uB,EACAysB,EACAE,IAEA,IAAA5oB,wBACI/D,EACAysB,GACA,SAAAt5C,GACI,IAAM6qC,GAAa,IAAAC,uBAAsB9qC,GAIzC,OAFA6qC,EAAWhqC,QAAQ24C,GAEZ3O,EAAWnnC,OAAS,CAC/B,GACA,CACIwuC,uBAAuB,GAGnC,C,uHC3BA,UACA,UACA,UACA,UAWA,yCACIrlB,EACAysB,EACAG,EAMAC,EAKAjN,EACAkN,IAEA,IAAA/oB,wBAAuB/D,EAAQysB,GAAS,SAAAt5C,GACpC,IAAI45C,GAAuB,IAAAtB,kCAAiCt4C,IAASysC,GAC/DpJ,GAAgB,IAAAuQ,kBAAiB/mB,GACnCgtB,EAC+B,GAA/BD,EAAqBl2C,QACqB,mBAA1Ck2C,EAAqB,GAAG,GAAGh8B,YAE/B,GAAIi8B,EAAsB,CACtB,IAAM,EAAOD,EAAqB,GAAG,IAErCA,GAAuB,IAAA1a,qBAAoBl/B,EAAO45C,EAAqB,GAAG,IAAI/8C,KAAI,SAAAC,GAAK,OACnFA,EACA,EAFmF,KAK9D4G,OAAS,IAC9Bm2C,GAAuB,E,CAI/B,IAAMC,EAIAzW,EACA,CAAC,CAACA,EAAe,KAAM,OACvBuW,EAAqB/8C,KAAI,SAAAk+B,GAAQ,OAACA,EAAK,GAAG1+B,OAAQ0+B,EAAK,GAAIA,EAAK,GAA/B,IAEjCgf,IAAeL,GACfI,EAAmBhuC,OAAM,SAAC,G,IAAA,oBAACzP,EAAM,KAAE0G,EAAO,KAAEhC,EAAS,KACjD,OAAA24C,EAAwBr9C,EAAQ0G,EAAShC,EAAzC,IAUV,GANA+4C,EAAmBj5C,SAAQ,SAAC,G,IAAA,oBAACxE,EAAM,KAAE0G,EAAO,KAAEhC,EAAS,KACnD,OAAA04C,EAAoBp9C,GAAS09C,EAAch3C,EAAShC,EAApD,IAGJ44C,SAAAA,EAAsB35C,IAEjBqjC,GAAiBwW,EAAsB,CACxC,IAAM/4B,EAAM+L,EAAOwc,qBAEfvoB,IACA,IAAA+yB,kBAAiBhnB,EAAQ+sB,EAAqB,GAAG,GAAGv9C,OAAQykB,E,CAIpE,OAAI+4B,GACAhtB,EAAO8D,SACA,GAEAmpB,EAAmBp2C,OAAS,CAE3C,GACJ,C,kGCrFA,cAqBA,kCACImpB,EACAysB,EACAU,EACAt9C,GAEM,MAOFA,GAAW,CAAC,EANZykB,EAAa,gBACb+wB,EAAqB,wBACrBmB,EAAa,gBACbtiB,EAAY,eACZ7C,EAAQ,WACRxE,EAAiB,oBAGrBmD,EAAO8D,QAEP,IAMI5wB,EANEC,EAAQ6sB,EAAOrD,wBAAmBxrB,EAAsB0rB,GACxD5pB,EAAyC,CAC3C8hC,YAAa,GACbkG,gBAAiB,GACjB5Z,SAAQ,GAIZ,GAAI8rB,EAAUh6C,EAAOF,GAAU,CAC3B,IAAMm6C,EAAY,WAOd,GAoCZ,SAA2BptB,EAA6B/sB,GAKhD+sB,EAAOlc,cACP7Q,EAAQ8hC,YAAY/gC,SAAQ,SAAAtB,GACxBstB,EAAO8C,qBAAqBpwB,EAAO6a,QACvC,GAER,CApDY8/B,CAAkBrtB,EAAQ/sB,GAsDtC,SACI+sB,EACA/sB,GAEAA,EAAQgoC,gBAAgBjnC,SACpB,SAAC,G,IACG,IAAAtB,OACI6a,EAAO,UACP,IAAAlX,aAAgBwK,EAAE,KAAED,EAAU,aAAEE,EAAU,aAE9Ck6B,EAAS,YAET,GAAIn6B,GAAMD,EAAY,CAElB,IAAMlO,EAAiB,CACnBmO,GAAE,EACF5L,KAAM2L,EACNE,aAAcA,EACdyM,QAAO,GAEXyS,EAAOyD,mBAAmB,GAAiC,CACvD/wB,OAAM,EACNsoC,UAAS,EACT3Z,SAAUpuB,EAAQouB,U,CAG9B,GAER,CAjFYisB,CAAsBttB,EAAQ/sB,GAE9BC,EACI8sB,EAAO9C,gBAAgB/pB,OAAOhC,EAAuBmjB,SAAkBnjB,EAEvEk0C,EAAuB,CACvB,IAAM7O,GAAgB,IAAAuQ,kBAAiB/mB,GACjC/L,EAAM+L,EAAOwc,qBAEfhG,GAAiBviB,IACjB,IAAA+yB,kBAAiBhnB,EAAQwW,EAAeviB,E,CAGpD,EAEIhhB,EAAQw7B,iBACR2e,IAEAptB,EAAOknB,gBACHkG,OACAj8C,GACA,EACA,CACIo8C,cAAed,IAK3B,IAAMe,EAAiD,CACnDzsB,aAAc5tB,EACdD,UAAWA,EACXiiC,OAAQjR,GAAgB,SACxBU,KAAM4hB,aAAa,EAAbA,IACNiH,eAAgB,CACZF,cAAed,IAGvBzsB,EAAOyD,mBAAmB,EAAgC+pB,E,CAElE,C,2GCzFA,UAEA,UACA,SAQA,UAOA,UA+EA,SAAgBE,EACZv6C,EACAF,EACA4vB,EACA8qB,EACAC,GAIIA,EACAA,EAAgBz6C,EAAO0vB,IAEvB,IAAA+lB,YAAWz1C,EAAO0vB,EAAY5vB,EAAS,CACnC6hC,YAAa6Y,EAAqB,2BAA6B,OAC/D1Y,WAAY4Y,EAAiBhrB,IAGzC,CAEA,SAASgrB,EAAiBhrB,GAYtB,OATgC,GAA5BA,EAAWzrB,OAAOP,QACiB,UAAnCgsB,EAAWzrB,OAAO,GAAGC,WACc,cAAnCwrB,EAAWzrB,OAAO,GAAGC,WACoB,IAAzCwrB,EAAWzrB,OAAO,GAAG4G,SAASnH,QACmB,OAAjDgsB,EAAWzrB,OAAO,GAAG4G,SAAS,GAAG+S,aAEjC8R,EAAWzrB,OAAO8T,OAAO,GAGO,IAA7B2X,EAAWzrB,OAAOP,QAAmD,UAAnCgsB,EAAWzrB,OAAO,GAAGC,SAClE,CA7FA,mBACI2oB,EACA4B,EACAksB,EACAH,EACAI,QAFA,IAAAD,IAAAA,GAAA,QACA,IAAAH,IAAAA,GAAA,QACA,IAAAI,IAAAA,GAAA,GAEInsB,EAAcosB,oBAEdhuB,EAAOiuB,WAAWrsB,EAAcosB,qBAEhCpsB,EAAcosB,oBAAsBhuB,EAAOkuB,WAAW,IAG1D,IAAAnqB,wBACI/D,EACA,SACA,SAAC7sB,EAAOF,G,MACEu6C,EA6ElB,SACIxtB,EACA4B,EACAkF,GAEA,IAAMj3B,GAAU,IAAAs+C,qCAKhB,OAFAt+C,EAAQy3B,kBAAkB,eAAiB,WAAM,UAE1C,CACH1F,cAAa,EACbpC,SAAUQ,EAAOM,cAAcb,yBAC/BiH,iBAAkB72B,EAClBk4B,WAAY,GACZqmB,UAAW,GACXC,eAAgB,CAAC,EACjB5nB,iBAAkB,CAAC,EACnBK,UAAS,EAEjB,CAjG8BwnB,CACdtuB,EACA4B,GACA,IAAA2sB,cAAaT,EAAaH,EAAoBI,IAE5CjP,GAAiB,aAAoB3rC,GAAO,GAAgC,GAC5E,EACoB,QAAtB,EAAA2rC,aAAc,EAAdA,EAAgBtvC,cAAM,QAAI,CAAC,EADvBpE,EAAU,aAAEG,EAAQ,WAAEuL,EAAS,YAAE6M,EAAe,kBAAEsC,EAAa,gBAAElD,EAAU,aAE7E,EA+FlB,SACIid,EACA4B,EACAka,EACAgS,EACAC,EACAP,EACA3G,GAEA,IAAMjmB,GAAQ,eACVf,UAAW,IACR2tB,GAGChuB,EAAaoB,EAAK,SAClB4tB,EAAgC5sB,EAAa,QAApCrjB,EAAuBqjB,EAAa,KAA9B6sB,EAAiB7sB,EAAa,aAC/CsG,EAAqBlI,EAAOgH,wBAE9B3S,EAA4Bm6B,GAC1B,IAAIrmB,WAAYC,gBAAgBF,EAAmBsmB,GAAU,kBAC7Dr9C,GAGN,IAAAu9C,+BAA8Br6B,EAAKuM,EAAOsH,GAGrC6lB,GAAgBU,IAAmBX,IAAgBvvC,GAAQkwC,GAE5D,IAAAE,kBAAiBF,EAAcjvB,IACvBsuB,GAAeU,GAAWn6B,GAAMA,EAAI+P,MAC5C,IAAAtY,gBAAe0T,EAAUnL,aAAG,EAAHA,EAAK+P,MACvB7lB,IAEP,IAAAqwC,iBAAgBrwC,EAzHR,KAyHwBihB,GAGpC,IAAMvoB,EAAkBuoB,EAAS5T,cAAcC,cAAc,SAE7D,IAAAC,gBAAe7U,EAAiBuoB,GAChCA,EAASzT,YAAY9U,IAErB,IAAAuZ,6BAA4BvZ,EAAiB4vC,GAE7C,IAAIgI,EAA4CjuB,EAahD,OAXwB,IAApBA,EAAMkG,YACN+nB,EAAc7uB,EAAOyD,mBAAmB,GAEpC7C,GACA,KAKR,IAAAkuB,sBAAqBluB,EA9IT,MAgJLiuB,CACX,CApJgBE,CACA/uB,EACA4B,EACA,EACAksB,EACAC,EACAP,EACA,CAAEpiD,WAAU,EAAEG,SAAQ,EAAEuL,UAAS,EAAE6M,gBAAe,EAAEsC,cAAa,EAAElD,WAAU,IAV7E0jB,EAAgB,mBAChBjH,EAAQ,WACRouB,EAAe,kBAkBnB,OAFAF,EAAkBv6C,EAAOF,GALN,IAAA2c,mBACf4P,GACA,IAAA/O,8BAAwBtf,EAA6Bs1B,IAGXknB,EAAoBC,IAE3D,CACX,GAEA,CACI1pB,aAAc,QACdsiB,cAAe,WAAM,OAAA5kB,CAAA,GAGjC,EAMA,qB,kKCjGA,cACA,UAeA,oCACIpF,EACAwyB,EACAC,GAEA,IAAInpB,EAA0B,CAAC,IAAI,EAAAopB,yBAE/BF,IACAlpB,EAAUA,EAAQ10B,OAAO49C,IAG7B,IAAIn/C,EAAqC,CACrCi2B,QAASA,EACTmpB,eAAgBA,EAChBE,aAAc,EAAAA,aACd97C,cAAe,CACXjI,WAAY,qCACZG,SAAU,OACVuL,UAAW,YAGnB,OAAO,IAAI,EAAAs4C,mBAAmB5yB,EAAY3sB,EAC9C,C,kHCtCA,UAAS,0FAAAw/C,wBAAwB,KACjC,6BACA,8BACA,4B,WCHAC,EAAOC,QAAUC,S,umBCgBjB,IAAIC,EAAgB,SAASC,EAAGpjD,GAI9B,OAHAmjD,EAAgB5gD,OAAO8gD,gBAClB,CAAEC,UAAW,cAAgBvnB,OAAS,SAAUqnB,EAAGpjD,GAAKojD,EAAEE,UAAYtjD,CAAG,GAC1E,SAAUojD,EAAGpjD,GAAK,IAAK,IAAIT,KAAKS,EAAOuC,OAAOghD,UAAUC,eAAe3tC,KAAK7V,EAAGT,KAAI6jD,EAAE7jD,GAAKS,EAAET,GAAI,EAC7F4jD,EAAcC,EAAGpjD,EAC1B,EAEO,SAASyjD,EAAUL,EAAGpjD,GAC3B,GAAiB,mBAANA,GAA0B,OAANA,EAC3B,MAAM,IAAI0jD,UAAU,uBAAyB9lC,OAAO5d,GAAK,iCAE7D,SAAS+6C,IAAOtqB,KAAKkzB,YAAcP,CAAG,CADtCD,EAAcC,EAAGpjD,GAEjBojD,EAAEG,UAAkB,OAANvjD,EAAauC,OAAOqhD,OAAO5jD,IAAM+6C,EAAGwI,UAAYvjD,EAAEujD,UAAW,IAAIxI,EACjF,CAEO,IAAI8I,EAAW,WAQpB,OAPAA,EAAWthD,OAAOC,QAAU,SAAkBshD,GAC1C,IAAK,IAAIxiD,EAAGL,EAAI,EAAG8iD,EAAIC,UAAUz5C,OAAQtJ,EAAI8iD,EAAG9iD,IAE5C,IAAK,IAAI1B,KADT+B,EAAI0iD,UAAU/iD,GACOsB,OAAOghD,UAAUC,eAAe3tC,KAAKvU,EAAG/B,KAAIukD,EAAEvkD,GAAK+B,EAAE/B,IAE9E,OAAOukD,CACX,EACOD,EAAS5tC,MAAMwa,KAAMuzB,UAC9B,EAEO,SAASC,EAAO3iD,EAAG40B,GACxB,IAAI4tB,EAAI,CAAC,EACT,IAAK,IAAIvkD,KAAK+B,EAAOiB,OAAOghD,UAAUC,eAAe3tC,KAAKvU,EAAG/B,IAAM22B,EAAE7uB,QAAQ9H,GAAK,IAC9EukD,EAAEvkD,GAAK+B,EAAE/B,IACb,GAAS,MAAL+B,GAAqD,mBAAjCiB,OAAO2hD,sBACtB,KAAIjjD,EAAI,EAAb,IAAgB1B,EAAIgD,OAAO2hD,sBAAsB5iD,GAAIL,EAAI1B,EAAEgL,OAAQtJ,IAC3Di1B,EAAE7uB,QAAQ9H,EAAE0B,IAAM,GAAKsB,OAAOghD,UAAUY,qBAAqBtuC,KAAKvU,EAAG/B,EAAE0B,MACvE6iD,EAAEvkD,EAAE0B,IAAMK,EAAE/B,EAAE0B,IAF4B,CAItD,OAAO6iD,CACT,CAEO,SAASM,EAAWC,EAAYhkC,EAAQ3b,EAAK4/C,GAClD,IAA2HlB,EAAvH79B,EAAIy+B,UAAUz5C,OAAQ+a,EAAIC,EAAI,EAAIlF,EAAkB,OAATikC,EAAgBA,EAAO/hD,OAAOgiD,yBAAyBlkC,EAAQ3b,GAAO4/C,EACrH,GAAuB,iBAAZE,SAAoD,mBAArBA,QAAQC,SAAyBn/B,EAAIk/B,QAAQC,SAASJ,EAAYhkC,EAAQ3b,EAAK4/C,QACpH,IAAK,IAAIrjD,EAAIojD,EAAW95C,OAAS,EAAGtJ,GAAK,EAAGA,KAASmiD,EAAIiB,EAAWpjD,MAAIqkB,GAAKC,EAAI,EAAI69B,EAAE99B,GAAKC,EAAI,EAAI69B,EAAE/iC,EAAQ3b,EAAK4gB,GAAK89B,EAAE/iC,EAAQ3b,KAAS4gB,GAChJ,OAAOC,EAAI,GAAKD,GAAK/iB,OAAOmiD,eAAerkC,EAAQ3b,EAAK4gB,GAAIA,CAC9D,CAEO,SAASq/B,EAAQC,EAAYz9C,GAClC,OAAO,SAAUkZ,EAAQ3b,GAAOyC,EAAUkZ,EAAQ3b,EAAKkgD,EAAa,CACtE,CAEO,SAASC,EAAaC,EAAMC,EAAcV,EAAYW,EAAWC,EAAcC,GACpF,SAASC,EAAOC,GAAK,QAAU,IAANA,GAA6B,mBAANA,EAAkB,MAAM,IAAI1B,UAAU,qBAAsB,OAAO0B,CAAG,CAKtH,IAJA,IAGIrvC,EAHAsvC,EAAOL,EAAUK,KAAM3gD,EAAe,WAAT2gD,EAAoB,MAAiB,WAATA,EAAoB,MAAQ,QACrFhlC,GAAU0kC,GAAgBD,EAAOE,EAAkB,OAAIF,EAAOA,EAAKvB,UAAY,KAC/E+B,EAAaP,IAAiB1kC,EAAS9d,OAAOgiD,yBAAyBlkC,EAAQ2kC,EAAUtpC,MAAQ,CAAC,GAC/F4yB,GAAO,EACLrtC,EAAIojD,EAAW95C,OAAS,EAAGtJ,GAAK,EAAGA,IAAK,CAC7C,IAAI0F,EAAU,CAAC,EACf,IAAK,IAAIpH,KAAKylD,EAAWr+C,EAAQpH,GAAW,WAANA,EAAiB,CAAC,EAAIylD,EAAUzlD,GACtE,IAAK,IAAIA,KAAKylD,EAAUO,OAAQ5+C,EAAQ4+C,OAAOhmD,GAAKylD,EAAUO,OAAOhmD,GACrEoH,EAAQ6+C,eAAiB,SAAUJ,GAAK,GAAI9W,EAAM,MAAM,IAAIoV,UAAU,0DAA2DwB,EAAkB/3C,KAAKg4C,EAAOC,GAAK,MAAQ,EAC5K,IAAI3gD,GAAS,EAAI4/C,EAAWpjD,IAAa,aAATokD,EAAsB,CAAE7hC,IAAK8hC,EAAW9hC,IAAK0c,IAAKolB,EAAWplB,KAAQolB,EAAW5gD,GAAMiC,GACtH,GAAa,aAAT0+C,EAAqB,CACrB,QAAe,IAAX5gD,EAAmB,SACvB,GAAe,OAAXA,GAAqC,iBAAXA,EAAqB,MAAM,IAAIi/C,UAAU,oBACnE3tC,EAAIovC,EAAO1gD,EAAO+e,QAAM8hC,EAAW9hC,IAAMzN,IACzCA,EAAIovC,EAAO1gD,EAAOy7B,QAAMolB,EAAWplB,IAAMnqB,IACzCA,EAAIovC,EAAO1gD,EAAOghD,QAAOR,EAAajiB,QAAQjtB,EACtD,MACSA,EAAIovC,EAAO1gD,MACH,UAAT4gD,EAAkBJ,EAAajiB,QAAQjtB,GACtCuvC,EAAW5gD,GAAOqR,EAE/B,CACIsK,GAAQ9d,OAAOmiD,eAAerkC,EAAQ2kC,EAAUtpC,KAAM4pC,GAC1DhX,GAAO,CACT,CAEO,SAASoX,EAAkBC,EAASV,EAActgD,GAEvD,IADA,IAAIihD,EAAW5B,UAAUz5C,OAAS,EACzBtJ,EAAI,EAAGA,EAAIgkD,EAAa16C,OAAQtJ,IACrC0D,EAAQihD,EAAWX,EAAahkD,GAAG4U,KAAK8vC,EAAShhD,GAASsgD,EAAahkD,GAAG4U,KAAK8vC,GAEnF,OAAOC,EAAWjhD,OAAQ,CAC5B,CAEO,SAASkhD,EAAUliD,GACxB,MAAoB,iBAANA,EAAiBA,EAAI,GAAGmB,OAAOnB,EAC/C,CAEO,SAASmiD,EAAkBV,EAAG1pC,EAAMyhC,GAEzC,MADoB,iBAATzhC,IAAmBA,EAAOA,EAAKqqC,YAAc,IAAIjhD,OAAO4W,EAAKqqC,YAAa,KAAO,IACrFxjD,OAAOmiD,eAAeU,EAAG,OAAQ,CAAEY,cAAc,EAAMrhD,MAAOw4C,EAAS,GAAGr4C,OAAOq4C,EAAQ,IAAKzhC,GAAQA,GAC/G,CAEO,SAASuqC,EAAWC,EAAaC,GACtC,GAAuB,iBAAZ3B,SAAoD,mBAArBA,QAAQ92C,SAAyB,OAAO82C,QAAQ92C,SAASw4C,EAAaC,EAClH,CAEO,SAASC,EAAUT,EAASU,EAAYC,EAAGC,GAEhD,OAAO,IAAKD,IAAMA,EAAIE,WAAU,SAAUC,EAASC,GAC/C,SAASC,EAAUhiD,GAAS,IAAM2nC,EAAKia,EAAUxgC,KAAKphB,GAAS,CAAE,MAAOuxB,GAAKwwB,EAAOxwB,EAAI,CAAE,CAC1F,SAAS0wB,EAASjiD,GAAS,IAAM2nC,EAAKia,EAAiB,MAAE5hD,GAAS,CAAE,MAAOuxB,GAAKwwB,EAAOxwB,EAAI,CAAE,CAC7F,SAASoW,EAAK7nC,GAJlB,IAAeE,EAIaF,EAAO6pC,KAAOmY,EAAQhiD,EAAOE,QAJ1CA,EAIyDF,EAAOE,MAJhDA,aAAiB2hD,EAAI3hD,EAAQ,IAAI2hD,GAAE,SAAUG,GAAWA,EAAQ9hD,EAAQ,KAIjBmxB,KAAK6wB,EAAWC,EAAW,CAC7Gta,GAAMia,EAAYA,EAAUtwC,MAAM0vC,EAASU,GAAc,KAAKtgC,OAClE,GACF,CAEO,SAAS8gC,EAAYlB,EAAS7tB,GACnC,IAAsGstB,EAAG7yB,EAAGuxB,EAAGgD,EAA3G/wC,EAAI,CAAEgxC,MAAO,EAAGC,KAAM,WAAa,GAAW,EAAPlD,EAAE,GAAQ,MAAMA,EAAE,GAAI,OAAOA,EAAE,EAAI,EAAGmD,KAAM,GAAIC,IAAK,IAChG,OAAOJ,EAAI,CAAE/gC,KAAMohC,EAAK,GAAI,MAASA,EAAK,GAAI,OAAUA,EAAK,IAAwB,mBAAXC,SAA0BN,EAAEM,OAAOzZ,UAAY,WAAa,OAAOld,IAAM,GAAIq2B,EACvJ,SAASK,EAAKpD,GAAK,OAAO,SAAUh2B,GAAK,OACzC,SAAcs5B,GACV,GAAIjC,EAAG,MAAM,IAAI1B,UAAU,mCAC3B,KAAOoD,IAAMA,EAAI,EAAGO,EAAG,KAAOtxC,EAAI,IAAKA,OACnC,GAAIqvC,EAAI,EAAG7yB,IAAMuxB,EAAY,EAARuD,EAAG,GAAS90B,EAAU,OAAI80B,EAAG,GAAK90B,EAAS,SAAOuxB,EAAIvxB,EAAU,SAAMuxB,EAAEjuC,KAAK0c,GAAI,GAAKA,EAAExM,SAAW+9B,EAAIA,EAAEjuC,KAAK0c,EAAG80B,EAAG,KAAK/Y,KAAM,OAAOwV,EAE3J,OADIvxB,EAAI,EAAGuxB,IAAGuD,EAAK,CAAS,EAARA,EAAG,GAAQvD,EAAEn/C,QACzB0iD,EAAG,IACP,KAAK,EAAG,KAAK,EAAGvD,EAAIuD,EAAI,MACxB,KAAK,EAAc,OAAXtxC,EAAEgxC,QAAgB,CAAEpiD,MAAO0iD,EAAG,GAAI/Y,MAAM,GAChD,KAAK,EAAGv4B,EAAEgxC,QAASx0B,EAAI80B,EAAG,GAAIA,EAAK,CAAC,GAAI,SACxC,KAAK,EAAGA,EAAKtxC,EAAEmxC,IAAIl5C,MAAO+H,EAAEkxC,KAAKj5C,MAAO,SACxC,QACI,MAAkB81C,GAAZA,EAAI/tC,EAAEkxC,MAAY18C,OAAS,GAAKu5C,EAAEA,EAAEv5C,OAAS,KAAkB,IAAV88C,EAAG,IAAsB,IAAVA,EAAG,IAAW,CAAEtxC,EAAI,EAAG,QAAU,CAC3G,GAAc,IAAVsxC,EAAG,MAAcvD,GAAMuD,EAAG,GAAKvD,EAAE,IAAMuD,EAAG,GAAKvD,EAAE,IAAM,CAAE/tC,EAAEgxC,MAAQM,EAAG,GAAI,KAAO,CACrF,GAAc,IAAVA,EAAG,IAAYtxC,EAAEgxC,MAAQjD,EAAE,GAAI,CAAE/tC,EAAEgxC,MAAQjD,EAAE,GAAIA,EAAIuD,EAAI,KAAO,CACpE,GAAIvD,GAAK/tC,EAAEgxC,MAAQjD,EAAE,GAAI,CAAE/tC,EAAEgxC,MAAQjD,EAAE,GAAI/tC,EAAEmxC,IAAI/5C,KAAKk6C,GAAK,KAAO,CAC9DvD,EAAE,IAAI/tC,EAAEmxC,IAAIl5C,MAChB+H,EAAEkxC,KAAKj5C,MAAO,SAEtBq5C,EAAKvvB,EAAKjiB,KAAK8vC,EAAS5vC,EAC5B,CAAE,MAAOmgB,GAAKmxB,EAAK,CAAC,EAAGnxB,GAAI3D,EAAI,CAAG,CAAE,QAAU6yB,EAAItB,EAAI,CAAG,CACzD,GAAY,EAARuD,EAAG,GAAQ,MAAMA,EAAG,GAAI,MAAO,CAAE1iD,MAAO0iD,EAAG,GAAKA,EAAG,QAAK,EAAQ/Y,MAAM,EAC9E,CAtBgDhC,CAAK,CAACyX,EAAGh2B,GAAK,CAAG,CAuBnE,CAEO,IAAIu5B,EAAkB/kD,OAAOqhD,OAAS,SAAU2D,EAAGC,EAAGze,EAAG0e,QACnD5iD,IAAP4iD,IAAkBA,EAAK1e,GAC3B,IAAIub,EAAO/hD,OAAOgiD,yBAAyBiD,EAAGze,GACzCub,KAAS,QAASA,GAAQkD,EAAEE,WAAapD,EAAKqD,UAAYrD,EAAK0B,gBAChE1B,EAAO,CAAEsD,YAAY,EAAMpkC,IAAK,WAAa,OAAOgkC,EAAEze,EAAI,IAE9DxmC,OAAOmiD,eAAe6C,EAAGE,EAAInD,EAC9B,EAAI,SAAUiD,EAAGC,EAAGze,EAAG0e,QACX5iD,IAAP4iD,IAAkBA,EAAK1e,GAC3Bwe,EAAEE,GAAMD,EAAEze,EACX,EAEM,SAAS8e,EAAaL,EAAGD,GAC9B,IAAK,IAAIhoD,KAAKioD,EAAa,YAANjoD,GAAoBgD,OAAOghD,UAAUC,eAAe3tC,KAAK0xC,EAAGhoD,IAAI+nD,EAAgBC,EAAGC,EAAGjoD,EAC7G,CAEO,SAASuoD,EAASP,GACvB,IAAIjmD,EAAsB,mBAAX8lD,QAAyBA,OAAOzZ,SAAU6Z,EAAIlmD,GAAKimD,EAAEjmD,GAAIL,EAAI,EAC5E,GAAIumD,EAAG,OAAOA,EAAE3xC,KAAK0xC,GACrB,GAAIA,GAAyB,iBAAbA,EAAEh9C,OAAqB,MAAO,CAC1Cwb,KAAM,WAEF,OADIwhC,GAAKtmD,GAAKsmD,EAAEh9C,SAAQg9C,OAAI,GACrB,CAAE5iD,MAAO4iD,GAAKA,EAAEtmD,KAAMqtC,MAAOiZ,EACxC,GAEJ,MAAM,IAAI7D,UAAUpiD,EAAI,0BAA4B,kCACtD,CAEO,SAASymD,EAAOR,EAAGxD,GACxB,IAAIyD,EAAsB,mBAAXJ,QAAyBG,EAAEH,OAAOzZ,UACjD,IAAK6Z,EAAG,OAAOD,EACf,IAAmBjiC,EAAY4Q,EAA3Bj1B,EAAIumD,EAAE3xC,KAAK0xC,GAAOS,EAAK,GAC3B,IACI,WAAc,IAANjE,GAAgBA,KAAM,MAAQz+B,EAAIrkB,EAAE8kB,QAAQuoB,MAAM0Z,EAAG76C,KAAKmY,EAAE3gB,MACxE,CACA,MAAOsjD,GAAS/xB,EAAI,CAAE+xB,MAAOA,EAAS,CACtC,QACI,IACQ3iC,IAAMA,EAAEgpB,OAASkZ,EAAIvmD,EAAU,SAAIumD,EAAE3xC,KAAK5U,EAClD,CACA,QAAU,GAAIi1B,EAAG,MAAMA,EAAE+xB,KAAO,CACpC,CACA,OAAOD,CACT,CAGO,SAASE,IACd,IAAK,IAAIF,EAAK,GAAI/mD,EAAI,EAAGA,EAAI+iD,UAAUz5C,OAAQtJ,IAC3C+mD,EAAKA,EAAGljD,OAAOijD,EAAO/D,UAAU/iD,KACpC,OAAO+mD,CACT,CAGO,SAASG,IACd,IAAK,IAAI7mD,EAAI,EAAGL,EAAI,EAAGmnD,EAAKpE,UAAUz5C,OAAQtJ,EAAImnD,EAAInnD,IAAKK,GAAK0iD,UAAU/iD,GAAGsJ,OACxE,IAAI+a,EAAIyW,MAAMz6B,GAAIynC,EAAI,EAA3B,IAA8B9nC,EAAI,EAAGA,EAAImnD,EAAInnD,IACzC,IAAK,IAAI3C,EAAI0lD,UAAU/iD,GAAIglB,EAAI,EAAGoiC,EAAK/pD,EAAEiM,OAAQ0b,EAAIoiC,EAAIpiC,IAAK8iB,IAC1DzjB,EAAEyjB,GAAKzqC,EAAE2nB,GACjB,OAAOX,CACT,CAEO,SAASgjC,EAAcC,EAAIvsB,EAAMwsB,GACtC,GAAIA,GAA6B,IAArBxE,UAAUz5C,OAAc,IAAK,IAA4By9C,EAAxB/mD,EAAI,EAAGwnD,EAAIzsB,EAAKzxB,OAAYtJ,EAAIwnD,EAAGxnD,KACxE+mD,GAAQ/mD,KAAK+6B,IACRgsB,IAAIA,EAAKjsB,MAAMwnB,UAAU3tC,MAAMC,KAAKmmB,EAAM,EAAG/6B,IAClD+mD,EAAG/mD,GAAK+6B,EAAK/6B,IAGrB,OAAOsnD,EAAGzjD,OAAOkjD,GAAMjsB,MAAMwnB,UAAU3tC,MAAMC,KAAKmmB,GACpD,CAEO,SAAS0sB,EAAQ36B,GACtB,OAAO0C,gBAAgBi4B,GAAWj4B,KAAK1C,EAAIA,EAAG0C,MAAQ,IAAIi4B,EAAQ36B,EACpE,CAEO,SAAS46B,EAAiBhD,EAASU,EAAYE,GACpD,IAAKa,OAAOwB,cAAe,MAAM,IAAIlF,UAAU,wCAC/C,IAAoDziD,EAAhD6lD,EAAIP,EAAUtwC,MAAM0vC,EAASU,GAAc,IAAQwC,EAAI,GAC3D,OAAO5nD,EAAI,CAAC,EAAGkmD,EAAK,QAASA,EAAK,SAAUA,EAAK,UAAWlmD,EAAEmmD,OAAOwB,eAAiB,WAAc,OAAOn4B,IAAM,EAAGxvB,EACpH,SAASkmD,EAAKpD,GAAS+C,EAAE/C,KAAI9iD,EAAE8iD,GAAK,SAAUh2B,GAAK,OAAO,IAAIy4B,SAAQ,SAAUloD,EAAG0B,GAAK6oD,EAAE17C,KAAK,CAAC42C,EAAGh2B,EAAGzvB,EAAG0B,IAAM,GAAK8oD,EAAO/E,EAAGh2B,EAAI,GAAI,EAAG,CACzI,SAAS+6B,EAAO/E,EAAGh2B,GAAK,KACVzI,EADqBwhC,EAAE/C,GAAGh2B,IACnBppB,iBAAiB+jD,EAAUlC,QAAQC,QAAQnhC,EAAE3gB,MAAMopB,GAAG+H,KAAKizB,EAASrC,GAAUsC,EAAOH,EAAE,GAAG,GAAIvjC,EADtE,CAAE,MAAO4Q,GAAK8yB,EAAOH,EAAE,GAAG,GAAI3yB,EAAI,CAC/E,IAAc5Q,CADmE,CAEjF,SAASyjC,EAAQpkD,GAASmkD,EAAO,OAAQnkD,EAAQ,CACjD,SAAS+hD,EAAO/hD,GAASmkD,EAAO,QAASnkD,EAAQ,CACjD,SAASqkD,EAAO5D,EAAGr3B,GAASq3B,EAAEr3B,GAAI86B,EAAE5lB,QAAS4lB,EAAEt+C,QAAQu+C,EAAOD,EAAE,GAAG,GAAIA,EAAE,GAAG,GAAK,CACnF,CAEO,SAASI,EAAiB1B,GAC/B,IAAItmD,EAAG1B,EACP,OAAO0B,EAAI,CAAC,EAAGkmD,EAAK,QAASA,EAAK,SAAS,SAAUjxB,GAAK,MAAMA,CAAG,IAAIixB,EAAK,UAAWlmD,EAAEmmD,OAAOzZ,UAAY,WAAc,OAAOld,IAAM,EAAGxvB,EAC1I,SAASkmD,EAAKpD,EAAGqB,GAAKnkD,EAAE8iD,GAAKwD,EAAExD,GAAK,SAAUh2B,GAAK,OAAQxuB,GAAKA,GAAK,CAAEoF,MAAO+jD,EAAQnB,EAAExD,GAAGh2B,IAAKugB,MAAM,GAAU8W,EAAIA,EAAEr3B,GAAKA,CAAG,EAAIq3B,CAAG,CACvI,CAEO,SAAS8D,EAAc3B,GAC5B,IAAKH,OAAOwB,cAAe,MAAM,IAAIlF,UAAU,wCAC/C,IAAiCziD,EAA7BumD,EAAID,EAAEH,OAAOwB,eACjB,OAAOpB,EAAIA,EAAE3xC,KAAK0xC,IAAMA,EAAqCO,EAASP,GAA2BtmD,EAAI,CAAC,EAAGkmD,EAAK,QAASA,EAAK,SAAUA,EAAK,UAAWlmD,EAAEmmD,OAAOwB,eAAiB,WAAc,OAAOn4B,IAAM,EAAGxvB,GAC9M,SAASkmD,EAAKpD,GAAK9iD,EAAE8iD,GAAKwD,EAAExD,IAAM,SAAUh2B,GAAK,OAAO,IAAIy4B,SAAQ,SAAUC,EAASC,IACvF,SAAgBD,EAASC,EAAQtD,EAAGr1B,GAAKy4B,QAAQC,QAAQ14B,GAAG+H,MAAK,SAAS/H,GAAK04B,EAAQ,CAAE9hD,MAAOopB,EAAGugB,KAAM8U,GAAM,GAAGsD,EAAS,CADbsC,CAAOvC,EAASC,GAA7B34B,EAAIw5B,EAAExD,GAAGh2B,IAA8BugB,KAAMvgB,EAAEppB,MAAQ,GAAI,CAAG,CAEjK,CAEO,SAASwkD,EAAqBC,EAAQC,GAE3C,OADI9mD,OAAOmiD,eAAkBniD,OAAOmiD,eAAe0E,EAAQ,MAAO,CAAEzkD,MAAO0kD,IAAiBD,EAAOC,IAAMA,EAClGD,CACT,CAEA,IAAIE,EAAqB/mD,OAAOqhD,OAAS,SAAU2D,EAAGx5B,GACpDxrB,OAAOmiD,eAAe6C,EAAG,UAAW,CAAEK,YAAY,EAAMjjD,MAAOopB,GAChE,EAAI,SAASw5B,EAAGx5B,GACfw5B,EAAW,QAAIx5B,CACjB,EAEO,SAASw7B,EAAaC,GAC3B,GAAIA,GAAOA,EAAI9B,WAAY,OAAO8B,EAClC,IAAI/kD,EAAS,CAAC,EACd,GAAW,MAAP+kD,EAAa,IAAK,IAAIzgB,KAAKygB,EAAe,YAANzgB,GAAmBxmC,OAAOghD,UAAUC,eAAe3tC,KAAK2zC,EAAKzgB,IAAIue,EAAgB7iD,EAAQ+kD,EAAKzgB,GAEtI,OADAugB,EAAmB7kD,EAAQ+kD,GACpB/kD,CACT,CAEO,SAASglD,EAAgBD,GAC9B,OAAQA,GAAOA,EAAI9B,WAAc8B,EAAM,CAAE7lC,QAAS6lC,EACpD,CAEO,SAASE,EAAuBC,EAAUl2B,EAAO4xB,EAAMD,GAC5D,GAAa,MAATC,IAAiBD,EAAG,MAAM,IAAI1B,UAAU,iDAC5C,GAAqB,mBAAVjwB,EAAuBk2B,IAAal2B,IAAU2xB,GAAK3xB,EAAM4L,IAAIsqB,GAAW,MAAM,IAAIjG,UAAU,4EACvG,MAAgB,MAAT2B,EAAeD,EAAa,MAATC,EAAeD,EAAEvvC,KAAK8zC,GAAYvE,EAAIA,EAAEzgD,MAAQ8uB,EAAMjQ,IAAImmC,EACtF,CAEO,SAASC,EAAuBD,EAAUl2B,EAAO9uB,EAAO0gD,EAAMD,GACnE,GAAa,MAATC,EAAc,MAAM,IAAI3B,UAAU,kCACtC,GAAa,MAAT2B,IAAiBD,EAAG,MAAM,IAAI1B,UAAU,iDAC5C,GAAqB,mBAAVjwB,EAAuBk2B,IAAal2B,IAAU2xB,GAAK3xB,EAAM4L,IAAIsqB,GAAW,MAAM,IAAIjG,UAAU,2EACvG,MAAiB,MAAT2B,EAAeD,EAAEvvC,KAAK8zC,EAAUhlD,GAASygD,EAAIA,EAAEzgD,MAAQA,EAAQ8uB,EAAMyM,IAAIypB,EAAUhlD,GAASA,CACtG,CAEO,SAASklD,EAAsBp2B,EAAOk2B,GAC3C,GAAiB,OAAbA,GAA0C,iBAAbA,GAA6C,mBAAbA,EAA0B,MAAM,IAAIjG,UAAU,0CAC/G,MAAwB,mBAAVjwB,EAAuBk2B,IAAal2B,EAAQA,EAAM4L,IAAIsqB,EACtE,CAEA,SACElG,YACAI,WACAI,SACAG,aACAO,UACAsB,aACAG,YACAS,cACAS,kBACAO,eACAC,WACAC,SACAG,WACAC,iBACAG,gBACAI,UACAC,mBACAM,mBACAC,gBACAC,uBACAI,eACAE,kBACAC,yBACAE,yBACAC,wB,GC9TEC,EAA2B,CAAC,EAGhC,SAASC,EAAoBC,GAE5B,IAAIC,EAAeH,EAAyBE,GAC5C,QAAqBnlD,IAAjBolD,EACH,OAAOA,EAAahH,QAGrB,IAAID,EAAS8G,EAAyBE,GAAY,CAGjD/G,QAAS,CAAC,GAOX,OAHAiH,EAAoBF,GAAUhH,EAAQA,EAAOC,QAAS8G,GAG/C/G,EAAOC,OACf,CCrBA8G,EAAoB3G,EAAI,CAACH,EAAS3tC,KACjC,IAAI,IAAI5Q,KAAO4Q,EACXy0C,EAAoBxC,EAAEjyC,EAAY5Q,KAASqlD,EAAoBxC,EAAEtE,EAASv+C,IAC5EnC,OAAOmiD,eAAezB,EAASv+C,EAAK,CAAEkjD,YAAY,EAAMpkC,IAAKlO,EAAW5Q,IAE1E,ECNDqlD,EAAoBxC,EAAI,CAAC7yC,EAAKy1C,IAAU5nD,OAAOghD,UAAUC,eAAe3tC,KAAKnB,EAAKy1C,GCClFJ,EAAoBzkC,EAAK29B,IACH,oBAAXmE,QAA0BA,OAAOgD,aAC1C7nD,OAAOmiD,eAAezB,EAASmE,OAAOgD,YAAa,CAAEzlD,MAAO,WAE7DpC,OAAOmiD,eAAezB,EAAS,aAAc,CAAEt+C,OAAO,GAAO,ECF9D,IAAI0lD,EAAsBN,EAAoB,M","sources":["webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-dom/lib/config/defaultContentModelFormatMap.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-dom/lib/config/defaultHTMLStyleMap.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-dom/lib/domToModel/context/createDomToModelContext.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-dom/lib/domToModel/context/defaultProcessors.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-dom/lib/domToModel/domToContentModel.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-dom/lib/domToModel/processors/blockProcessor.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-dom/lib/domToModel/processors/brProcessor.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-dom/lib/domToModel/processors/childProcessor.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-dom/lib/domToModel/processors/codeProcessor.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-dom/lib/domToModel/processors/delimiterProcessor.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-dom/lib/domToModel/processors/elementProcessor.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-dom/lib/domToModel/processors/entityProcessor.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-dom/lib/domToModel/processors/fontProcessor.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-dom/lib/domToModel/processors/formatContainerProcessor.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-dom/lib/domToModel/processors/generalProcessor.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-dom/lib/domToModel/processors/headingProcessor.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-dom/lib/domToModel/processors/hrProcessor.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-dom/lib/domToModel/processors/imageProcessor.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-dom/lib/domToModel/processors/knownElementProcessor.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-dom/lib/domToModel/processors/linkProcessor.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-dom/lib/domToModel/processors/listItemProcessor.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-dom/lib/domToModel/processors/listProcessor.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-dom/lib/domToModel/processors/pProcessor.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-dom/lib/domToModel/processors/tableProcessor.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-dom/lib/domToModel/processors/textProcessor.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-dom/lib/domToModel/utils/addSelectionMarker.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-dom/lib/domToModel/utils/areSameFormats.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-dom/lib/domToModel/utils/getBoundingClientRect.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-dom/lib/domToModel/utils/getDefaultStyle.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-dom/lib/domToModel/utils/getRegularSelectionOffsets.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-dom/lib/domToModel/utils/isBlockElement.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-dom/lib/domToModel/utils/parseFormat.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-dom/lib/domToModel/utils/stackFormat.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-dom/lib/domUtils/entityUtils.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-dom/lib/domUtils/getObjectKeys.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-dom/lib/domUtils/isElementOfType.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-dom/lib/domUtils/isNodeOfType.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-dom/lib/domUtils/metadata/updateListMetadata.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-dom/lib/domUtils/metadata/updateMetadata.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-dom/lib/domUtils/toArray.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-dom/lib/formatHandlers/block/directionFormatHandler.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-dom/lib/formatHandlers/block/displayFormatHandler.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-dom/lib/formatHandlers/block/htmlAlignFormatHandler.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-dom/lib/formatHandlers/block/lineHeightFormatHandler.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-dom/lib/formatHandlers/block/marginFormatHandler.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-dom/lib/formatHandlers/block/paddingFormatHandler.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-dom/lib/formatHandlers/block/textAlignFormatHandler.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-dom/lib/formatHandlers/block/whiteSpaceFormatHandler.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-dom/lib/formatHandlers/common/backgroundColorFormatHandler.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-dom/lib/formatHandlers/common/borderBoxFormatHandler.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-dom/lib/formatHandlers/common/borderFormatHandler.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-dom/lib/formatHandlers/common/boxShadowFormatHandler.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-dom/lib/formatHandlers/common/datasetFormatHandler.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-dom/lib/formatHandlers/common/floatFormatHandler.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-dom/lib/formatHandlers/common/idFormatHandler.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-dom/lib/formatHandlers/common/sizeFormatHandler.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-dom/lib/formatHandlers/common/verticalAlignFormatHandler.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-dom/lib/formatHandlers/common/wordBreakFormatHandler.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-dom/lib/formatHandlers/defaultFormatHandlers.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-dom/lib/formatHandlers/entity/entityFormatHandler.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-dom/lib/formatHandlers/list/listItemMetadataFormatHandler.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-dom/lib/formatHandlers/list/listItemThreadFormatHandler.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-dom/lib/formatHandlers/list/listLevelMetadataFormatHandler.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-dom/lib/formatHandlers/list/listLevelThreadFormatHandler.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-dom/lib/formatHandlers/list/listStylePositionFormatHandler.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-dom/lib/formatHandlers/segment/boldFormatHandler.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-dom/lib/formatHandlers/segment/fontFamilyFormatHandler.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-dom/lib/formatHandlers/segment/fontSizeFormatHandler.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-dom/lib/formatHandlers/segment/italicFormatHandler.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-dom/lib/formatHandlers/segment/letterSpacingFormatHandler.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-dom/lib/formatHandlers/segment/linkFormatHandler.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-dom/lib/formatHandlers/segment/strikeFormatHandler.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-dom/lib/formatHandlers/segment/superOrSubScriptFormatHandler.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-dom/lib/formatHandlers/segment/textColorFormatHandler.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-dom/lib/formatHandlers/segment/underlineFormatHandler.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-dom/lib/formatHandlers/table/tableLayoutFormatHandler.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-dom/lib/formatHandlers/table/tableSpacingFormatHandler.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-dom/lib/formatHandlers/table/textColorOnTableCellFormatHandler.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-dom/lib/formatHandlers/utils/color.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-dom/lib/formatHandlers/utils/dir.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-dom/lib/formatHandlers/utils/parseValueWithUnit.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-dom/lib/index.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-dom/lib/modelApi/block/setParagraphNotImplicit.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-dom/lib/modelApi/common/addBlock.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-dom/lib/modelApi/common/addDecorators.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-dom/lib/modelApi/common/addSegment.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-dom/lib/modelApi/common/applySegmentFormatToElement.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-dom/lib/modelApi/common/ensureParagraph.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-dom/lib/modelApi/common/hasSpacesOnly.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-dom/lib/modelApi/common/isEmpty.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-dom/lib/modelApi/common/isGeneralSegment.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-dom/lib/modelApi/common/isWhiteSpacePreserved.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-dom/lib/modelApi/common/normalizeContentModel.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-dom/lib/modelApi/common/normalizeParagraph.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-dom/lib/modelApi/common/normalizeSegment.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-dom/lib/modelApi/common/unwrapBlock.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-dom/lib/modelApi/creators/createBr.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-dom/lib/modelApi/creators/createContentModelDocument.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-dom/lib/modelApi/creators/createDivider.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-dom/lib/modelApi/creators/createEntity.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-dom/lib/modelApi/creators/createFormatContainer.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-dom/lib/modelApi/creators/createGeneralBlock.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-dom/lib/modelApi/creators/createGeneralSegment.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-dom/lib/modelApi/creators/createImage.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-dom/lib/modelApi/creators/createListItem.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-dom/lib/modelApi/creators/createListLevel.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-dom/lib/modelApi/creators/createParagraph.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-dom/lib/modelApi/creators/createParagraphDecorator.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-dom/lib/modelApi/creators/createSelectionMarker.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-dom/lib/modelApi/creators/createTable.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-dom/lib/modelApi/creators/createTableCell.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-dom/lib/modelApi/creators/createText.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-dom/lib/modelToDom/contentModelToDom.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-dom/lib/modelToDom/context/createModelToDomContext.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-dom/lib/modelToDom/context/defaultContentModelHandlers.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-dom/lib/modelToDom/handlers/handleBlock.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-dom/lib/modelToDom/handlers/handleBlockGroupChildren.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-dom/lib/modelToDom/handlers/handleBr.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-dom/lib/modelToDom/handlers/handleDivider.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-dom/lib/modelToDom/handlers/handleEntity.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-dom/lib/modelToDom/handlers/handleFormatContainer.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-dom/lib/modelToDom/handlers/handleGeneralModel.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-dom/lib/modelToDom/handlers/handleImage.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-dom/lib/modelToDom/handlers/handleList.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-dom/lib/modelToDom/handlers/handleListItem.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-dom/lib/modelToDom/handlers/handleParagraph.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-dom/lib/modelToDom/handlers/handleSegment.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-dom/lib/modelToDom/handlers/handleSegmentDecorator.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-dom/lib/modelToDom/handlers/handleTable.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-dom/lib/modelToDom/handlers/handleText.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-dom/lib/modelToDom/optimizers/mergeNode.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-dom/lib/modelToDom/optimizers/optimize.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-dom/lib/modelToDom/optimizers/removeUnnecessarySpan.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-dom/lib/modelToDom/utils/applyFormat.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-dom/lib/modelToDom/utils/handleSegmentCommon.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-dom/lib/modelToDom/utils/reuseCachedElement.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-dom/lib/modelToDom/utils/stackFormat.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-editor/lib/domUtils/borderValues.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-editor/lib/domUtils/metadata/updateImageMetadata.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-editor/lib/domUtils/metadata/updateTableCellMetadata.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-editor/lib/domUtils/metadata/updateTableMetadata.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-editor/lib/domUtils/stringUtil.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-editor/lib/editor/ContentModelEditor.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-editor/lib/editor/coreApi/createContentModel.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-editor/lib/editor/coreApi/createEditorContext.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-editor/lib/editor/coreApi/getDOMSelection.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-editor/lib/editor/coreApi/setContentModel.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-editor/lib/editor/coreApi/setDOMSelection.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-editor/lib/editor/coreApi/switchShadowEdit.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-editor/lib/editor/corePlugins/ContentModelCachePlugin.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-editor/lib/editor/corePlugins/ContentModelCopyPastePlugin.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-editor/lib/editor/corePlugins/ContentModelEditPlugin.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-editor/lib/editor/corePlugins/ContentModelFormatPlugin.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-editor/lib/editor/corePlugins/ContentModelTypeInContainerPlugin.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-editor/lib/editor/createContentModelEditorCore.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-editor/lib/editor/isContentModelEditor.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-editor/lib/editor/overrides/tablePreProcessor.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-editor/lib/editor/plugins/PastePlugin/ContentModelPastePlugin.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-editor/lib/editor/plugins/PastePlugin/Excel/processPastedContentFromExcel.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-editor/lib/editor/plugins/PastePlugin/PowerPoint/processPastedContentFromPowerPoint.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-editor/lib/editor/plugins/PastePlugin/WacComponents/processPastedContentWacComponents.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-editor/lib/editor/plugins/PastePlugin/WordDesktop/processPastedContentFromWordDesktop.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-editor/lib/editor/plugins/PastePlugin/WordDesktop/processWordComments.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-editor/lib/editor/plugins/PastePlugin/WordDesktop/processWordLists.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-editor/lib/editor/plugins/PastePlugin/utils/addParser.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-editor/lib/editor/plugins/PastePlugin/utils/deprecatedColorParser.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-editor/lib/editor/plugins/PastePlugin/utils/linkParser.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-editor/lib/editor/plugins/PastePlugin/utils/setProcessor.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-editor/lib/editor/utils/contentModelDomIndexer.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-editor/lib/editor/utils/handleKeyboardEventCommon.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-editor/lib/index.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-editor/lib/modelApi/block/getLeafSiblingBlock.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-editor/lib/modelApi/block/setModelAlignment.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-editor/lib/modelApi/block/setModelDirection.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-editor/lib/modelApi/block/setModelIndentation.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-editor/lib/modelApi/block/toggleModelBlockQuote.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-editor/lib/modelApi/common/clearModelFormat.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-editor/lib/modelApi/common/cloneModel.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-editor/lib/modelApi/common/getClosestAncestorBlockGroupIndex.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-editor/lib/modelApi/common/isBlockGroupOfType.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-editor/lib/modelApi/common/mergeModel.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-editor/lib/modelApi/common/retrieveModelFormatState.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-editor/lib/modelApi/common/wrapBlock.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-editor/lib/modelApi/edit/deleteSelection.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-editor/lib/modelApi/edit/deleteSteps/deleteAllSegmentBefore.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-editor/lib/modelApi/edit/deleteSteps/deleteCollapsedSelection.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-editor/lib/modelApi/edit/deleteSteps/deleteWordSelection.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-editor/lib/modelApi/edit/utils/createInsertPoint.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-editor/lib/modelApi/edit/utils/deleteBlock.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-editor/lib/modelApi/edit/utils/deleteExpandedSelection.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-editor/lib/modelApi/edit/utils/deleteSegment.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-editor/lib/modelApi/edit/utils/deleteSingleChar.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-editor/lib/modelApi/entity/insertEntityModel.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-editor/lib/modelApi/format/pendingFormat.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-editor/lib/modelApi/image/applyImageBorderFormat.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-editor/lib/modelApi/list/findListItemsInSameThread.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-editor/lib/modelApi/list/setListType.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-editor/lib/modelApi/selection/adjustSegmentSelection.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-editor/lib/modelApi/selection/adjustWordSelection.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-editor/lib/modelApi/selection/areSameRangeEx.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-editor/lib/modelApi/selection/collapseTableSelection.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-editor/lib/modelApi/selection/collectSelections.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-editor/lib/modelApi/selection/getSelectionRootNode.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-editor/lib/modelApi/selection/iterateSelections.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-editor/lib/modelApi/selection/setSelection.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-editor/lib/modelApi/table/alignTable.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-editor/lib/modelApi/table/alignTableCell.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-editor/lib/modelApi/table/applyTableFormat.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-editor/lib/modelApi/table/canMergeCells.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-editor/lib/modelApi/table/createTableStructure.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-editor/lib/modelApi/table/deleteTable.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-editor/lib/modelApi/table/deleteTableColumn.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-editor/lib/modelApi/table/deleteTableRow.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-editor/lib/modelApi/table/ensureFocusableParagraphForTable.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-editor/lib/modelApi/table/getSelectedCells.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-editor/lib/modelApi/table/insertTableColumn.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-editor/lib/modelApi/table/insertTableRow.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-editor/lib/modelApi/table/mergeTableCells.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-editor/lib/modelApi/table/mergeTableColumn.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-editor/lib/modelApi/table/mergeTableRow.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-editor/lib/modelApi/table/normalizeTable.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-editor/lib/modelApi/table/setTableCellBackgroundColor.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-editor/lib/modelApi/table/splitTableCellHorizontally.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-editor/lib/modelApi/table/splitTableCellVertically.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-editor/lib/publicApi/block/setAlignment.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-editor/lib/publicApi/block/setDirection.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-editor/lib/publicApi/block/setHeadingLevel.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-editor/lib/publicApi/block/setIndentation.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-editor/lib/publicApi/block/setParagraphMargin.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-editor/lib/publicApi/block/setSpacing.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-editor/lib/publicApi/block/toggleBlockQuote.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-editor/lib/publicApi/editing/keyboardDelete.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-editor/lib/publicApi/entity/insertEntity.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-editor/lib/publicApi/format/applyDefaultFormat.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-editor/lib/publicApi/format/applyPendingFormat.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-editor/lib/publicApi/format/clearFormat.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-editor/lib/publicApi/format/getFormatState.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-editor/lib/publicApi/image/adjustImageSelection.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-editor/lib/publicApi/image/changeImage.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-editor/lib/publicApi/image/insertImage.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-editor/lib/publicApi/image/setImageAltText.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-editor/lib/publicApi/image/setImageBorder.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-editor/lib/publicApi/image/setImageBoxShadow.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-editor/lib/publicApi/link/adjustLinkSelection.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-editor/lib/publicApi/link/insertLink.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-editor/lib/publicApi/link/removeLink.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-editor/lib/publicApi/list/setListStartNumber.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-editor/lib/publicApi/list/setListStyle.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-editor/lib/publicApi/list/toggleBullet.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-editor/lib/publicApi/list/toggleNumbering.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-editor/lib/publicApi/segment/applySegmentFormat.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-editor/lib/publicApi/segment/changeCapitalization.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-editor/lib/publicApi/segment/changeFontSize.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-editor/lib/publicApi/segment/setBackgroundColor.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-editor/lib/publicApi/segment/setFontName.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-editor/lib/publicApi/segment/setFontSize.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-editor/lib/publicApi/segment/setTextColor.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-editor/lib/publicApi/segment/toggleBold.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-editor/lib/publicApi/segment/toggleCode.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-editor/lib/publicApi/segment/toggleItalic.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-editor/lib/publicApi/segment/toggleStrikethrough.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-editor/lib/publicApi/segment/toggleSubscript.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-editor/lib/publicApi/segment/toggleSuperscript.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-editor/lib/publicApi/segment/toggleUnderline.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-editor/lib/publicApi/selection/getSelectedSegments.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-editor/lib/publicApi/selection/hasSelectionInBlock.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-editor/lib/publicApi/selection/hasSelectionInBlockGroup.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-editor/lib/publicApi/selection/hasSelectionInSegment.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-editor/lib/publicApi/table/editTable.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-editor/lib/publicApi/table/formatTable.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-editor/lib/publicApi/table/insertTable.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-editor/lib/publicApi/table/setTableCellShade.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-editor/lib/publicApi/utils/formatImageWithContentModel.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-editor/lib/publicApi/utils/formatParagraphWithContentModel.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-editor/lib/publicApi/utils/formatSegmentWithContentModel.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-editor/lib/publicApi/utils/formatWithContentModel.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-editor/lib/publicApi/utils/paste.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model/lib/createContentModelEditor.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model/lib/index.ts","webpack://roosterjsContentModel/external var \"roosterjs\"","webpack://roosterjsContentModel/./node_modules/tslib/tslib.es6.mjs","webpack://roosterjsContentModel/webpack/bootstrap","webpack://roosterjsContentModel/webpack/runtime/define property getters","webpack://roosterjsContentModel/webpack/runtime/hasOwnProperty shorthand","webpack://roosterjsContentModel/webpack/runtime/make namespace object","webpack://roosterjsContentModel/webpack/startup"],"sourcesContent":["import type { DefaultImplicitFormatMap } from 'roosterjs-content-model-types';\n\n/**\n * @internal\n * A map from tag name to its default implicit formats\n */\nexport const defaultContentModelFormatMap: DefaultImplicitFormatMap = {\n    a: {\n        underline: true,\n    },\n    blockquote: {\n        marginTop: '1em',\n        marginBottom: '1em',\n        marginLeft: '40px',\n        marginRight: '40px',\n    },\n    code: {\n        fontFamily: 'monospace',\n    },\n    h1: {\n        fontWeight: 'bold',\n        fontSize: '2em',\n    },\n    h2: {\n        fontWeight: 'bold',\n        fontSize: '1.5em',\n    },\n    h3: {\n        fontWeight: 'bold',\n        fontSize: '1.17em',\n    },\n    h4: {\n        fontWeight: 'bold',\n        fontSize: '1em', // Set this default value here to overwrite existing font size when change heading level\n    },\n    h5: {\n        fontWeight: 'bold',\n        fontSize: '0.83em',\n    },\n    h6: {\n        fontWeight: 'bold',\n        fontSize: '0.67em',\n    },\n    p: {\n        marginTop: '1em',\n        marginBottom: '1em',\n    },\n    pre: {\n        fontFamily: 'monospace',\n        whiteSpace: 'pre',\n        marginTop: '1em',\n        marginBottom: '1em',\n    },\n};\n","import type { DefaultStyleMap } from 'roosterjs-content-model-types';\n\nconst blockElement: Partial<CSSStyleDeclaration> = {\n    display: 'block',\n};\n\n/**\n * @internal\n */\nexport const defaultHTMLStyleMap: DefaultStyleMap = {\n    address: blockElement,\n    article: blockElement,\n    aside: blockElement,\n    b: {\n        fontWeight: 'bold',\n    },\n    blockquote: {\n        display: 'block',\n        marginTop: '1em',\n        marginBottom: '1em',\n        marginLeft: '40px',\n        marginRight: '40px',\n    },\n    br: blockElement,\n    center: {\n        display: 'block',\n        textAlign: 'center',\n    },\n    dd: blockElement,\n    div: blockElement,\n    dl: blockElement,\n    dt: blockElement,\n    em: {\n        fontStyle: 'italic',\n    },\n    fieldset: blockElement,\n    figcaption: blockElement,\n    figure: blockElement,\n    footer: blockElement,\n    form: blockElement,\n    h1: {\n        display: 'block',\n        fontWeight: 'bold',\n        fontSize: '2em',\n    },\n    h2: {\n        display: 'block',\n        fontWeight: 'bold',\n        fontSize: '1.5em',\n    },\n    h3: {\n        display: 'block',\n        fontWeight: 'bold',\n        fontSize: '1.17em',\n    },\n    h4: {\n        display: 'block',\n        fontWeight: 'bold',\n    },\n    h5: {\n        display: 'block',\n        fontWeight: 'bold',\n        fontSize: '0.83em',\n    },\n    h6: {\n        display: 'block',\n        fontWeight: 'bold',\n        fontSize: '0.67em',\n    },\n    header: blockElement,\n    hr: blockElement,\n    i: {\n        fontStyle: 'italic',\n    },\n    li: {\n        display: 'list-item',\n    },\n    main: blockElement,\n    nav: blockElement,\n    ol: blockElement,\n    p: {\n        display: 'block',\n        marginTop: '1em',\n        marginBottom: '1em',\n    },\n    pre: {\n        display: 'block',\n        fontFamily: 'monospace',\n        whiteSpace: 'pre',\n        marginTop: '1em',\n        marginBottom: '1em',\n    },\n    s: {\n        textDecoration: 'line-through',\n    },\n    section: blockElement,\n    strike: {\n        textDecoration: 'line-through',\n    },\n    strong: {\n        fontWeight: 'bold',\n    },\n    sub: {\n        verticalAlign: 'sub',\n        fontSize: 'smaller',\n    },\n    sup: {\n        verticalAlign: 'super',\n        fontSize: 'smaller',\n    },\n    table: {\n        display: 'table',\n        boxSizing: 'border-box',\n    },\n    td: {\n        display: 'table-cell',\n    },\n    th: {\n        display: 'table-cell',\n    },\n    u: {\n        textDecoration: 'underline',\n    },\n    ul: blockElement,\n};\n","import { defaultProcessorMap } from './defaultProcessors';\nimport { getObjectKeys } from '../../domUtils/getObjectKeys';\nimport {\n    defaultFormatKeysPerCategory,\n    defaultFormatParsers,\n} from '../../formatHandlers/defaultFormatHandlers';\nimport type {\n    ContentModelBlockFormat,\n    DomToModelContext,\n    DomToModelDecoratorContext,\n    DomToModelFormatContext,\n    DomToModelOption,\n    DomToModelSelectionContext,\n    DomToModelSettings,\n    EditorContext,\n    FormatParser,\n    FormatParsers,\n    FormatParsersPerCategory,\n} from 'roosterjs-content-model-types';\n\n/**\n * Create context object for DOM to Content Model conversion\n * @param editorContext Context of editor\n * @param options Option array to customize the DOM to Model conversion behavior\n */\nexport function createDomToModelContext(\n    editorContext?: EditorContext,\n    ...options: (DomToModelOption | undefined)[]\n): DomToModelContext {\n    return createDomToModelContextWithConfig(createDomToModelConfig(options), editorContext);\n}\n\n/**\n * Create context object for DOM to Content Model conversion with an existing configure\n * @param config A full config object to define how to convert DOM tree to Content Model\n * @param editorContext Context of editor\n */\nexport function createDomToModelContextWithConfig(\n    config: DomToModelSettings,\n    editorContext?: EditorContext\n) {\n    return Object.assign(\n        {},\n        editorContext,\n        createDomToModelSelectionContext(),\n        createDomToModelFormatContext(editorContext?.isRootRtl),\n        createDomToModelDecoratorContext(),\n        config\n    );\n}\n\nfunction createDomToModelSelectionContext(): DomToModelSelectionContext {\n    return { isInSelection: false };\n}\n\nfunction createDomToModelFormatContext(isRootRtl?: boolean): DomToModelFormatContext {\n    const blockFormat: ContentModelBlockFormat = isRootRtl ? { direction: 'rtl' } : {};\n\n    return {\n        blockFormat,\n        segmentFormat: {},\n\n        listFormat: {\n            levels: [],\n            threadItemCounts: [],\n        },\n    };\n}\n\nfunction createDomToModelDecoratorContext(): DomToModelDecoratorContext {\n    return {\n        link: {\n            format: {},\n            dataset: {},\n        },\n        code: {\n            format: {},\n        },\n        blockDecorator: {\n            format: {},\n            tagName: '',\n        },\n    };\n}\n\n/**\n * Create Dom to Content Model Config object\n * @param options All customizations of content model creation\n */\nexport function createDomToModelConfig(\n    options: (DomToModelOption | undefined)[]\n): DomToModelSettings {\n    return {\n        elementProcessors: Object.assign(\n            {},\n            defaultProcessorMap,\n            ...options.map(x => x?.processorOverride)\n        ),\n        formatParsers: buildFormatParsers(\n            options.map(x => x?.formatParserOverride),\n            options.map(x => x?.additionalFormatParsers)\n        ),\n        defaultElementProcessors: defaultProcessorMap,\n        defaultFormatParsers,\n    };\n}\n\n/**\n * @internal Export for test only\n * Build format parsers used by DOM to Content Model conversion\n * @param override\n * @param additionalParsersArray\n * @returns\n */\nexport function buildFormatParsers(\n    overrides: (Partial<FormatParsers> | undefined)[] = [],\n    additionalParsersArray: (Partial<FormatParsersPerCategory> | undefined)[] = []\n): FormatParsersPerCategory {\n    const combinedOverrides = Object.assign({}, ...overrides);\n\n    return getObjectKeys(defaultFormatKeysPerCategory).reduce((result, key) => {\n        const value = defaultFormatKeysPerCategory[key]\n            .map(\n                formatKey =>\n                    (combinedOverrides[formatKey] === undefined\n                        ? defaultFormatParsers[formatKey]\n                        : combinedOverrides[formatKey]) as FormatParser<any>\n            )\n            .concat(\n                ...additionalParsersArray.map(\n                    parsers => (parsers?.[key] ?? []) as FormatParser<any>[]\n                )\n            );\n\n        result[key] = value;\n\n        return result;\n    }, {} as FormatParsersPerCategory);\n}\n","import { brProcessor } from '../processors/brProcessor';\nimport { childProcessor } from '../processors/childProcessor';\nimport { codeProcessor } from '../processors/codeProcessor';\nimport { delimiterProcessor } from '../processors/delimiterProcessor';\nimport { elementProcessor } from '../processors/elementProcessor';\nimport { entityProcessor } from '../processors/entityProcessor';\nimport { fontProcessor } from '../processors/fontProcessor';\nimport { formatContainerProcessor } from '../processors/formatContainerProcessor';\nimport { generalProcessor } from '../processors/generalProcessor';\nimport { headingProcessor } from '../processors/headingProcessor';\nimport { hrProcessor } from '../processors/hrProcessor';\nimport { imageProcessor } from '../processors/imageProcessor';\nimport { knownElementProcessor } from '../processors/knownElementProcessor';\nimport { linkProcessor } from '../processors/linkProcessor';\nimport { listItemProcessor } from '../processors/listItemProcessor';\nimport { listProcessor } from '../processors/listProcessor';\nimport { pProcessor } from '../processors/pProcessor';\nimport { tableProcessor } from '../processors/tableProcessor';\nimport { textProcessor } from '../processors/textProcessor';\nimport type { ElementProcessorMap } from 'roosterjs-content-model-types';\n\n/**\n * @internal\n */\nexport const defaultProcessorMap: ElementProcessorMap = {\n    a: linkProcessor,\n    b: knownElementProcessor,\n    blockquote: knownElementProcessor,\n    br: brProcessor,\n    code: codeProcessor,\n    div: knownElementProcessor,\n    em: knownElementProcessor,\n    font: fontProcessor,\n    i: knownElementProcessor,\n    img: imageProcessor,\n    h1: headingProcessor,\n    h2: headingProcessor,\n    h3: headingProcessor,\n    h4: headingProcessor,\n    h5: headingProcessor,\n    h6: headingProcessor,\n    hr: hrProcessor,\n    li: listItemProcessor,\n    ol: listProcessor,\n    p: pProcessor,\n    pre: formatContainerProcessor,\n    s: knownElementProcessor,\n    section: knownElementProcessor,\n    span: knownElementProcessor,\n    strike: knownElementProcessor,\n    strong: knownElementProcessor,\n    sub: knownElementProcessor,\n    sup: knownElementProcessor,\n    table: tableProcessor,\n    u: knownElementProcessor,\n    ul: listProcessor,\n\n    '*': generalProcessor,\n    '#text': textProcessor,\n    element: elementProcessor,\n    entity: entityProcessor,\n    child: childProcessor,\n    delimiter: delimiterProcessor,\n};\n","import { createContentModelDocument } from '../modelApi/creators/createContentModelDocument';\nimport { normalizeContentModel } from '../modelApi/common/normalizeContentModel';\nimport type {\n    ContentModelDocument,\n    DOMSelection,\n    DomToModelContext,\n} from 'roosterjs-content-model-types';\n\n/**\n * Create Content Model from DOM tree in this editor\n * @param root Root element of DOM tree to create Content Model from\n * @param context Context object for DOM to Content Model conversion\n * @param selection Selection that already exists in content\n * @returns A ContentModelDocument object that contains all the models created from the give root element\n */\nexport function domToContentModel(\n    root: HTMLElement | DocumentFragment,\n    context: DomToModelContext,\n    selection?: DOMSelection\n): ContentModelDocument {\n    const model = createContentModelDocument(context.defaultFormat);\n\n    context.selection = selection;\n    context.elementProcessors.child(model, root, context);\n\n    normalizeContentModel(model);\n\n    return model;\n}\n","import { addBlock } from '../../modelApi/common/addBlock';\nimport { ContextStyles } from './formatContainerProcessor';\nimport { createParagraph } from '../../modelApi/creators/createParagraph';\nimport { parseFormat } from '../utils/parseFormat';\nimport type {\n    ContentModelBlockGroup,\n    ContentModelSegmentFormat,\n    DomToModelContext,\n} from 'roosterjs-content-model-types';\n\nconst SegmentDecoratorTags = ['A', 'CODE'];\n\n/**\n * @internal\n */\nexport function blockProcessor(\n    group: ContentModelBlockGroup,\n    element: HTMLElement,\n    context: DomToModelContext,\n    segmentFormat?: ContentModelSegmentFormat\n) {\n    const decorator = context.blockDecorator.tagName ? context.blockDecorator : undefined;\n    const isSegmentDecorator = SegmentDecoratorTags.indexOf(element.tagName) >= 0;\n\n    parseFormat(element, context.formatParsers.block, context.blockFormat, context);\n\n    const blockFormat = { ...context.blockFormat };\n\n    parseFormat(element, context.formatParsers.container, blockFormat, context);\n\n    ContextStyles.forEach(style => {\n        if (blockFormat[style]) {\n            context.blockFormat[style] = blockFormat[style];\n        }\n    });\n\n    if (!isSegmentDecorator) {\n        const paragraph = createParagraph(\n            false /*isImplicit*/,\n            blockFormat,\n            segmentFormat,\n            decorator\n        );\n\n        addBlock(group, paragraph);\n    }\n\n    context.elementProcessors.child(group, element, context);\n}\n","import { addSegment } from '../../modelApi/common/addSegment';\nimport { createBr } from '../../modelApi/creators/createBr';\nimport type { ElementProcessor } from 'roosterjs-content-model-types';\n\n/**\n * @internal\n */\nexport const brProcessor: ElementProcessor<HTMLBRElement> = (group, element, context) => {\n    const br = createBr(context.segmentFormat);\n\n    if (context.isInSelection) {\n        br.isSelected = true;\n    }\n\n    const paragraph = addSegment(group, br, context.blockFormat);\n    context.domIndexer?.onSegment(element, paragraph, [br]);\n};\n","import { addSelectionMarker } from '../utils/addSelectionMarker';\nimport { getRegularSelectionOffsets } from '../utils/getRegularSelectionOffsets';\nimport { isNodeOfType } from '../../domUtils/isNodeOfType';\nimport type {\n    ContentModelBlockGroup,\n    DomToModelContext,\n    ElementProcessor,\n} from 'roosterjs-content-model-types';\n\n/**\n * Content Model Element Processor for child elements\n * @param group The parent block group\n * @param parent Parent DOM node to process\n * @param context DOM to Content Model context\n */\nexport const childProcessor: ElementProcessor<ParentNode> = (\n    group: ContentModelBlockGroup,\n    parent: ParentNode,\n    context: DomToModelContext\n) => {\n    const [nodeStartOffset, nodeEndOffset] = getRegularSelectionOffsets(context, parent);\n    let index = 0;\n\n    for (let child = parent.firstChild; child; child = child.nextSibling) {\n        handleRegularSelection(index, context, group, nodeStartOffset, nodeEndOffset);\n\n        processChildNode(group, child, context);\n\n        index++;\n    }\n\n    handleRegularSelection(index, context, group, nodeStartOffset, nodeEndOffset);\n};\n\n/**\n * Helper function for processing child node\n * @param group The parent block group\n * @param parent Parent DOM node to process\n * @param context DOM to Content Model context\n *\n */\nexport function processChildNode(\n    group: ContentModelBlockGroup,\n    child: Node,\n    context: DomToModelContext\n) {\n    if (isNodeOfType(child, 'ELEMENT_NODE') && child.style.display != 'none') {\n        context.elementProcessors.element(group, child, context);\n    } else if (isNodeOfType(child, 'TEXT_NODE')) {\n        context.elementProcessors['#text'](group, child, context);\n    }\n}\n\n/**\n * Helper function to handle regular (range based) selection when process child node\n * @param index Index of current child node in its parent\n * @param context DOM to Content Model context\n * @param group The parent block group\n * @param nodeStartOffset Start offset of current regular selection\n * @param nodeEndOffset  End offset of current regular selection\n */\nexport function handleRegularSelection(\n    index: number,\n    context: DomToModelContext,\n    group: ContentModelBlockGroup,\n    nodeStartOffset: number,\n    nodeEndOffset: number\n) {\n    if (index == nodeStartOffset) {\n        context.isInSelection = true;\n\n        addSelectionMarker(group, context);\n    }\n\n    if (index == nodeEndOffset && context.selection?.type == 'range') {\n        if (!context.selection.range.collapsed) {\n            addSelectionMarker(group, context);\n        }\n        context.isInSelection = false;\n    }\n}\n","import { knownElementProcessor } from './knownElementProcessor';\nimport { parseFormat } from '../utils/parseFormat';\nimport { stackFormat } from '../utils/stackFormat';\nimport type { ElementProcessor } from 'roosterjs-content-model-types';\n\n/**\n * @internal\n */\nexport const codeProcessor: ElementProcessor<HTMLElement> = (group, element, context) => {\n    stackFormat(context, { code: 'codeDefault' }, () => {\n        parseFormat(element, context.formatParsers.code, context.code.format, context);\n\n        knownElementProcessor(group, element, context);\n    });\n};\n","import { getRegularSelectionOffsets } from '../utils/getRegularSelectionOffsets';\nimport { handleRegularSelection } from './childProcessor';\nimport type { ElementProcessor } from 'roosterjs-content-model-types';\n\n/**\n * @internal\n * @param group\n * @param element\n * @param context\n */\nexport const delimiterProcessor: ElementProcessor<Node> = (group, element, context) => {\n    let index = 0;\n    const [nodeStartOffset, nodeEndOffset] = getRegularSelectionOffsets(context, element);\n\n    for (let child = element.firstChild; child; child = child.nextSibling) {\n        handleRegularSelection(index, context, group, nodeStartOffset, nodeEndOffset);\n\n        delimiterProcessor(group, child, context);\n        index++;\n    }\n\n    handleRegularSelection(index, context, group, nodeStartOffset, nodeEndOffset);\n};\n","import { getDelimiterFromElement } from 'roosterjs-editor-dom';\nimport { isEntityElement } from '../../domUtils/entityUtils';\nimport type {\n    DomToModelContext,\n    ElementProcessor,\n    ElementProcessorMap,\n} from 'roosterjs-content-model-types';\n\n/**\n * @internal\n * @param group\n * @param element\n * @param context\n */\nexport const elementProcessor: ElementProcessor<HTMLElement> = (group, element, context) => {\n    const tagName = element.tagName.toLowerCase() as keyof ElementProcessorMap;\n    const processor = (tryGetProcessorForEntity(element, context) ||\n        tryGetProcessorForDelimiter(element, context) ||\n        context.elementProcessors[tagName] ||\n        (tagName.indexOf(':') >= 0 && context.elementProcessors.child) ||\n        context.elementProcessors['*']) as ElementProcessor<Node>;\n    processor(group, element, context);\n};\n\nfunction tryGetProcessorForEntity(element: HTMLElement, context: DomToModelContext) {\n    return isEntityElement(element) || element.contentEditable == 'false' // For readonly element, treat as an entity\n        ? context.elementProcessors.entity\n        : null;\n}\n\nfunction tryGetProcessorForDelimiter(element: Node, context: DomToModelContext) {\n    return getDelimiterFromElement(element) ? context.elementProcessors.delimiter : null;\n}\n","import { addBlock } from '../../modelApi/common/addBlock';\nimport { addSegment } from '../../modelApi/common/addSegment';\nimport { createEntity } from '../../modelApi/creators/createEntity';\nimport { isBlockElement } from '../utils/isBlockElement';\nimport { parseFormat } from '../utils/parseFormat';\nimport { stackFormat } from '../utils/stackFormat';\nimport type { ElementProcessor } from 'roosterjs-content-model-types';\n\n/**\n * Content Model Element Processor for entity\n * @param group The parent block group\n * @param parent Parent DOM node to process\n * @param context DOM to Content Model context\n */\nexport const entityProcessor: ElementProcessor<HTMLElement> = (group, element, context) => {\n    const isBlockEntity = isBlockElement(element, context);\n\n    stackFormat(\n        context,\n        { segment: isBlockEntity ? 'empty' : undefined, paragraph: 'empty' },\n        () => {\n            const entityModel = createEntity(element, true /*isReadonly*/, context.segmentFormat);\n\n            parseFormat(element, context.formatParsers.entity, entityModel.entityFormat, context);\n\n            // TODO: Need to handle selection for editable entity\n            if (context.isInSelection) {\n                entityModel.isSelected = true;\n            }\n\n            if (isBlockEntity) {\n                addBlock(group, entityModel);\n            } else {\n                const paragraph = addSegment(group, entityModel);\n                context.domIndexer?.onSegment(element, paragraph, [entityModel]);\n            }\n        }\n    );\n};\n","import { isBlockElement } from '../utils/isBlockElement';\nimport { parseFormat } from '../utils/parseFormat';\nimport { stackFormat } from '../utils/stackFormat';\nimport type { ElementProcessor } from 'roosterjs-content-model-types';\n\nconst FontSizes = ['10px', '13px', '16px', '18px', '24px', '32px', '48px'];\n\nfunction getFontSize(size: string | null) {\n    const intSize = parseInt(size || '');\n\n    if (Number.isNaN(intSize)) {\n        return undefined;\n    } else if (intSize < 1) {\n        return FontSizes[0];\n    } else if (intSize > FontSizes.length) {\n        return FontSizes[FontSizes.length - 1];\n    } else {\n        return FontSizes[intSize - 1];\n    }\n}\n\n/**\n * @internal\n */\nexport const fontProcessor: ElementProcessor<HTMLFontElement> = (group, element, context) => {\n    stackFormat(\n        context,\n        {\n            segment: isBlockElement(element, context) ? 'shallowCloneForBlock' : 'shallowClone',\n        },\n        () => {\n            const fontFamily = element.getAttribute('face');\n            const fontSize = getFontSize(element.getAttribute('size'));\n            const textColor = element.getAttribute('color');\n            const format = context.segmentFormat;\n\n            if (fontFamily) {\n                format.fontFamily = fontFamily;\n            }\n\n            if (fontSize) {\n                format.fontSize = fontSize;\n            }\n\n            if (textColor) {\n                format.textColor = textColor;\n            }\n\n            parseFormat(element, context.formatParsers.segment, context.segmentFormat, context);\n\n            context.elementProcessors.child(group, element, context);\n        }\n    );\n};\n","import { addBlock } from '../../modelApi/common/addBlock';\nimport { createFormatContainer } from '../../modelApi/creators/createFormatContainer';\nimport { createParagraph } from '../../modelApi/creators/createParagraph';\nimport { getDefaultStyle } from '../utils/getDefaultStyle';\nimport { parseFormat } from '../utils/parseFormat';\nimport { setParagraphNotImplicit } from '../../modelApi/block/setParagraphNotImplicit';\nimport { stackFormat } from '../utils/stackFormat';\nimport type {\n    ContentModelFormatContainer,\n    ContentModelFormatContainerFormat,\n    ContentModelParagraph,\n    ElementProcessor,\n    MarginFormat,\n    PaddingFormat,\n} from 'roosterjs-content-model-types';\n\n/**\n * @internal\n */\nexport const ContextStyles: (keyof (MarginFormat & PaddingFormat))[] = [\n    'marginLeft',\n    'marginRight',\n    'paddingLeft',\n    'paddingRight',\n];\n\n/**\n * @internal\n */\nexport const formatContainerProcessor: ElementProcessor<HTMLElement> = (\n    group,\n    element,\n    context\n) => {\n    stackFormat(context, { segment: 'shallowCloneForBlock', paragraph: 'shallowClone' }, () => {\n        parseFormat(element, context.formatParsers.block, context.blockFormat, context);\n        parseFormat(element, context.formatParsers.segmentOnBlock, context.segmentFormat, context);\n\n        const format: ContentModelFormatContainerFormat = {\n            ...context.blockFormat,\n        };\n\n        parseFormat(element, context.formatParsers.container, format, context);\n\n        const tagName =\n            getDefaultStyle(element, context).display == 'block'\n                ? element.tagName.toLowerCase()\n                : 'div';\n        const formatContainer = createFormatContainer(tagName, format);\n\n        // It is possible to inherit margin left/right styles from parent DIV or other containers,\n        // since we are going into a deeper level of format container now,\n        // the container will render these styles so no need to keep them in context format\n        ContextStyles.forEach(style => {\n            delete context.blockFormat[style];\n        });\n\n        context.elementProcessors.child(formatContainer, element, context);\n\n        if (element.style.fontSize && parseInt(element.style.fontSize) == 0) {\n            formatContainer.zeroFontSize = true;\n        }\n\n        if (shouldFallbackToParagraph(formatContainer)) {\n            // For DIV container that only has one paragraph child, container style can be merged into paragraph\n            // and no need to have this container\n            const paragraph = formatContainer.blocks[0] as ContentModelParagraph;\n\n            if (formatContainer.zeroFontSize) {\n                paragraph.segmentFormat = Object.assign({}, paragraph.segmentFormat, {\n                    fontSize: '0',\n                });\n            }\n\n            Object.assign(paragraph.format, formatContainer.format);\n            setParagraphNotImplicit(paragraph);\n            addBlock(group, paragraph);\n        } else {\n            addBlock(group, formatContainer);\n        }\n    });\n\n    addBlock(group, createParagraph(true /*isImplicit*/, context.blockFormat));\n};\n\nfunction shouldFallbackToParagraph(formatContainer: ContentModelFormatContainer) {\n    const firstChild = formatContainer.blocks[0];\n\n    return (\n        formatContainer.tagName == 'div' &&\n        formatContainer.blocks.length == 1 &&\n        firstChild.blockType == 'Paragraph' &&\n        firstChild.isImplicit\n    );\n}\n","import { addBlock } from '../../modelApi/common/addBlock';\nimport { addDecorators } from '../../modelApi/common/addDecorators';\nimport { addSegment } from '../../modelApi/common/addSegment';\nimport { createGeneralBlock } from '../../modelApi/creators/createGeneralBlock';\nimport { createGeneralSegment } from '../../modelApi/creators/createGeneralSegment';\nimport { isBlockElement } from '../utils/isBlockElement';\nimport { stackFormat } from '../utils/stackFormat';\nimport type { ElementProcessor } from 'roosterjs-content-model-types';\n\nconst generalBlockProcessor: ElementProcessor<HTMLElement> = (group, element, context) => {\n    const block = createGeneralBlock(element);\n    const isSelectedBefore = context.isInSelection;\n\n    stackFormat(\n        context,\n        {\n            segment: 'empty',\n            paragraph: 'empty',\n            link: 'empty',\n        },\n        () => {\n            addBlock(group, block);\n\n            context.elementProcessors.child(block, element, context);\n        }\n    );\n\n    if (isSelectedBefore && context.isInSelection) {\n        block.isSelected = true;\n    }\n};\n\nconst generalSegmentProcessor: ElementProcessor<HTMLElement> = (group, element, context) => {\n    const segment = createGeneralSegment(element, context.segmentFormat);\n    const isSelectedBefore = context.isInSelection;\n\n    addDecorators(segment, context);\n    const paragraph = addSegment(group, segment);\n    context.domIndexer?.onSegment(element, paragraph, [segment]);\n\n    stackFormat(\n        context,\n        {\n            segment:\n                'empty' /*clearFormat, General segment will include all properties and styles when generate back to HTML, so no need to carry over existing segment format*/,\n        },\n        () => {\n            context.elementProcessors.child(segment, element, context);\n        }\n    );\n\n    if (isSelectedBefore && context.isInSelection) {\n        segment.isSelected = true;\n    }\n};\n\n/**\n * @internal\n */\nexport const generalProcessor: ElementProcessor<HTMLElement> = (group, element, context) => {\n    const processor = isBlockElement(element, context)\n        ? generalBlockProcessor\n        : generalSegmentProcessor;\n\n    processor(group, element, context);\n};\n","import { addBlock } from '../../modelApi/common/addBlock';\nimport { blockProcessor } from './blockProcessor';\nimport { createParagraph } from '../../modelApi/creators/createParagraph';\nimport { createParagraphDecorator } from '../../modelApi/creators/createParagraphDecorator';\nimport { getObjectKeys } from '../../domUtils/getObjectKeys';\nimport { parseFormat } from '../utils/parseFormat';\nimport { stackFormat } from '../utils/stackFormat';\nimport type { ContentModelSegmentFormat, ElementProcessor } from 'roosterjs-content-model-types';\n\n/**\n * @internal\n */\nexport const headingProcessor: ElementProcessor<HTMLHeadingElement> = (group, element, context) => {\n    stackFormat(\n        context,\n        { segment: 'shallowCloneForBlock', paragraph: 'shallowClone', blockDecorator: 'empty' },\n        () => {\n            const segmentFormat: ContentModelSegmentFormat = {};\n\n            parseFormat(element, context.formatParsers.segmentOnBlock, segmentFormat, context);\n\n            // These formats are already declared on heading element, no need to keep them in context.\n            // And we should not duplicate them in context, either. Because when we want to turn off heading,\n            // inner text should not keep those text format from heading.\n            getObjectKeys(segmentFormat).forEach(key => {\n                delete context.segmentFormat[key];\n            });\n\n            context.blockDecorator = createParagraphDecorator(element.tagName, segmentFormat);\n\n            blockProcessor(group, element, context);\n        }\n    );\n\n    addBlock(group, createParagraph(true /*isImplicit*/, context.blockFormat));\n};\n","import { addBlock } from '../../modelApi/common/addBlock';\nimport { createDivider } from '../../modelApi/creators/createDivider';\nimport { parseFormat } from '../utils/parseFormat';\nimport { stackFormat } from '../utils/stackFormat';\nimport type { ElementProcessor } from 'roosterjs-content-model-types';\n\n/**\n * @internal\n */\nexport const hrProcessor: ElementProcessor<HTMLHRElement> = (group, element, context) => {\n    stackFormat(\n        context,\n        {\n            paragraph: 'shallowClone',\n        },\n        () => {\n            parseFormat(element, context.formatParsers.divider, context.blockFormat, context);\n\n            const hr = createDivider('hr', context.blockFormat);\n\n            if (element.size) {\n                hr.size = element.size;\n            }\n\n            if (context.isInSelection) {\n                hr.isSelected = true;\n            }\n\n            addBlock(group, hr);\n        }\n    );\n};\n","import { addDecorators } from '../../modelApi/common/addDecorators';\nimport { addSegment } from '../../modelApi/common/addSegment';\nimport { createImage } from '../../modelApi/creators/createImage';\nimport { parseFormat } from '../utils/parseFormat';\nimport { stackFormat } from '../utils/stackFormat';\nimport type { ContentModelImageFormat, ElementProcessor } from 'roosterjs-content-model-types';\n\n/**\n * @internal\n */\nexport const imageProcessor: ElementProcessor<HTMLImageElement> = (group, element, context) => {\n    stackFormat(context, { segment: 'shallowClone' }, () => {\n        const imageFormat: ContentModelImageFormat = context.segmentFormat;\n\n        parseFormat(element, context.formatParsers.segment, imageFormat, context);\n        parseFormat(element, context.formatParsers.image, imageFormat, context);\n        parseFormat(element, context.formatParsers.block, context.blockFormat, context);\n\n        const image = createImage(element.src, imageFormat);\n        const alt = element.alt;\n        const title = element.title;\n\n        parseFormat(element, context.formatParsers.dataset, image.dataset, context);\n        addDecorators(image, context);\n\n        if (alt) {\n            image.alt = alt;\n        }\n        if (title) {\n            image.title = title;\n        }\n        if (context.isInSelection) {\n            image.isSelected = true;\n        }\n        if (context.selection?.type == 'image' && context.selection.image == element) {\n            image.isSelectedAsImageSelection = true;\n            image.isSelected = true;\n        }\n\n        const paragraph = addSegment(group, image);\n        context.domIndexer?.onSegment(element, paragraph, [image]);\n    });\n};\n","import { addBlock } from '../../modelApi/common/addBlock';\nimport { blockProcessor } from './blockProcessor';\nimport { createParagraph } from '../../modelApi/creators/createParagraph';\nimport { formatContainerProcessor } from './formatContainerProcessor';\nimport { getDefaultStyle } from '../utils/getDefaultStyle';\nimport { isBlockElement } from '../utils/isBlockElement';\nimport { parseFormat } from '../utils/parseFormat';\nimport { stackFormat } from '../utils/stackFormat';\nimport type {\n    ContentModelSegmentFormat,\n    DomToModelContext,\n    ElementProcessor,\n} from 'roosterjs-content-model-types';\n\nconst FormatContainerTriggerStyles: (keyof CSSStyleDeclaration)[] = [\n    'marginBottom',\n    'marginTop',\n    'paddingBottom',\n    'paddingTop',\n    'paddingLeft',\n    'paddingRight',\n    'borderTopWidth',\n    'borderBottomWidth',\n    'borderLeftWidth',\n    'borderRightWidth',\n    'width',\n    'height',\n    'maxWidth',\n    'maxHeight',\n    'minWidth',\n    'minHeight',\n];\nconst ByPassFormatContainerTags = ['H1', 'H2', 'H3', 'H4', 'H5', 'H6', 'P', 'A'];\nconst SegmentDecoratorTags = ['A', 'CODE'];\n\n/**\n * @internal\n */\nexport const knownElementProcessor: ElementProcessor<HTMLElement> = (group, element, context) => {\n    const isBlock = isBlockElement(element, context);\n\n    if (\n        (isBlock || element.style.display == 'inline-block') && // For inline-block here, we will also check if it should be represented as Format Container\n        shouldUseFormatContainer(element, context)\n    ) {\n        formatContainerProcessor(group, element, context);\n    } else if (isBlock) {\n        const decorator = context.blockDecorator.tagName ? context.blockDecorator : undefined;\n        const isSegmentDecorator = SegmentDecoratorTags.indexOf(element.tagName) >= 0;\n\n        stackFormat(context, { segment: 'shallowCloneForBlock', paragraph: 'shallowClone' }, () => {\n            const segmentFormat: ContentModelSegmentFormat = {};\n\n            parseFormat(element, context.formatParsers.segmentOnBlock, segmentFormat, context);\n            Object.assign(context.segmentFormat, segmentFormat);\n\n            blockProcessor(group, element, context, segmentFormat);\n        });\n\n        if (isBlock && !isSegmentDecorator) {\n            addBlock(\n                group,\n                createParagraph(\n                    true /*isImplicit*/,\n                    context.blockFormat,\n                    undefined /*segmentFormat*/,\n                    decorator\n                )\n            );\n        }\n    } else {\n        stackFormat(\n            context,\n            {\n                segment: 'shallowClone',\n                paragraph: 'shallowClone',\n                link: 'cloneFormat',\n            },\n            () => {\n                parseFormat(element, context.formatParsers.segment, context.segmentFormat, context);\n\n                if (context.link.format.href && element.tagName != 'A') {\n                    parseFormat(\n                        element,\n                        context.formatParsers.segmentUnderLink,\n                        context.link.format,\n                        context\n                    );\n                }\n\n                context.elementProcessors.child(group, element, context);\n            }\n        );\n    }\n};\n\nfunction shouldUseFormatContainer(element: HTMLElement, context: DomToModelContext) {\n    // For those tags that we know we should not use format container, just return false\n    if (ByPassFormatContainerTags.indexOf(element.tagName) >= 0) {\n        return false;\n    }\n\n    const style = element.style;\n    const defaultStyle = getDefaultStyle(element, context);\n\n    const bgcolor = style.getPropertyValue('background-color');\n\n    // For block element with background, we need to use format container\n    if (bgcolor && bgcolor != 'transparent') {\n        return true;\n    }\n\n    // For block element with positive value of border width or top/bottom margin/padding,\n    // we need to use format container\n    if (\n        FormatContainerTriggerStyles.some(\n            key => parseInt((style[key] as string) || (defaultStyle[key] as string) || '') > 0\n        )\n    ) {\n        return true;\n    }\n\n    // For margin left/right with value \"auto\", we need to use format container\n    if (style.marginLeft == 'auto' || style.marginRight == 'auto') {\n        return true;\n    }\n\n    // For element with \"align\" attribute, we need to use format container\n    if (element.getAttribute('align')) {\n        return true;\n    }\n\n    return false;\n}\n","import { knownElementProcessor } from './knownElementProcessor';\nimport { parseFormat } from '../utils/parseFormat';\nimport { stackFormat } from '../utils/stackFormat';\nimport type { ElementProcessor } from 'roosterjs-content-model-types';\n\n/**\n * @internal\n */\nexport const linkProcessor: ElementProcessor<HTMLElement> = (group, element, context) => {\n    if (element.hasAttribute('href')) {\n        stackFormat(context, { link: 'linkDefault' }, () => {\n            parseFormat(element, context.formatParsers.link, context.link.format, context);\n            parseFormat(element, context.formatParsers.dataset, context.link.dataset, context);\n\n            knownElementProcessor(group, element, context);\n        });\n    } else {\n        // A tag without href, can be treated as normal SPAN tag\n        knownElementProcessor(group, element, context);\n    }\n};\n","import { createListItem } from '../../modelApi/creators/createListItem';\nimport { parseFormat } from '../utils/parseFormat';\nimport { stackFormat } from '../utils/stackFormat';\nimport type { ElementProcessor } from 'roosterjs-content-model-types';\n\n/**\n * @internal\n */\nexport const listItemProcessor: ElementProcessor<HTMLLIElement> = (group, element, context) => {\n    const { listFormat } = context;\n\n    if (listFormat.listParent && listFormat.levels.length > 0) {\n        stackFormat(\n            context,\n            {\n                segment: 'shallowCloneForBlock',\n            },\n            () => {\n                parseFormat(\n                    element,\n                    context.formatParsers.segmentOnBlock,\n                    context.segmentFormat,\n                    context\n                );\n\n                const listItem = createListItem(listFormat.levels, context.segmentFormat);\n                parseFormat(\n                    element,\n                    context.formatParsers.listItemElement,\n                    listItem.format,\n                    context\n                );\n\n                listFormat.listParent!.blocks.push(listItem);\n\n                parseFormat(\n                    element,\n                    context.formatParsers.listItem,\n                    listItem.levels[listItem.levels.length - 1].format,\n                    context\n                );\n\n                context.elementProcessors.child(listItem, element, context);\n\n                const firstChild = listItem.blocks[0];\n\n                if (\n                    listItem.blocks.length == 1 &&\n                    firstChild.blockType == 'Paragraph' &&\n                    firstChild.isImplicit\n                ) {\n                    Object.assign(listItem.format, firstChild.format);\n                    firstChild.format = {};\n                }\n            }\n        );\n    } else {\n        const currentBlocks = listFormat.listParent?.blocks;\n        const lastItem = currentBlocks?.[currentBlocks?.length - 1];\n\n        context.elementProcessors['*'](\n            lastItem?.blockType == 'BlockGroup' ? lastItem : group,\n            element,\n            context\n        );\n    }\n};\n","import { createListLevel } from '../../modelApi/creators/createListLevel';\nimport { listLevelMetadataFormatHandler } from '../../formatHandlers/list/listLevelMetadataFormatHandler';\nimport { parseFormat } from '../utils/parseFormat';\nimport { stackFormat } from '../utils/stackFormat';\nimport { updateListMetadata } from '../../domUtils/metadata/updateListMetadata';\nimport type { ContentModelListLevel, ElementProcessor } from 'roosterjs-content-model-types';\n\n/**\n * @internal\n */\nexport const listProcessor: ElementProcessor<HTMLOListElement | HTMLUListElement> = (\n    group,\n    element,\n    context\n) => {\n    stackFormat(\n        context,\n        {\n            segment: 'shallowCloneForBlock',\n            paragraph: 'shallowCloneForGroup',\n        },\n        () => {\n            const level: ContentModelListLevel = createListLevel(\n                element.tagName as 'OL' | 'UL',\n                context.blockFormat\n            );\n            const { listFormat } = context;\n\n            parseFormat(element, context.formatParsers.dataset, level.dataset, context);\n            parseFormat(element, context.formatParsers.listLevel, level.format, context);\n\n            // TODO: Move this out into roosterjs-content-model-editor package\n            updateListMetadata(level, metadata => {\n                metadata = metadata || {};\n                parseFormat(element, [listLevelMetadataFormatHandler.parse], metadata, context);\n\n                if (\n                    typeof metadata.orderedStyleType == 'undefined' &&\n                    typeof metadata.unorderedStyleType == 'undefined'\n                ) {\n                    metadata = null;\n                }\n\n                return metadata;\n            });\n\n            parseFormat(element, context.formatParsers.segment, context.segmentFormat, context);\n\n            const originalListParent = listFormat.listParent;\n\n            listFormat.listParent = listFormat.listParent || group;\n            listFormat.levels.push(level);\n\n            try {\n                context.elementProcessors.child(group, element, context);\n            } finally {\n                listFormat.levels.pop();\n                listFormat.listParent = originalListParent;\n            }\n        }\n    );\n};\n","import { addBlock } from '../../modelApi/common/addBlock';\nimport { blockProcessor } from './blockProcessor';\nimport { createParagraph } from '../../modelApi/creators/createParagraph';\nimport { createParagraphDecorator } from '../../modelApi/creators/createParagraphDecorator';\nimport { parseFormat } from '../utils/parseFormat';\nimport { stackFormat } from '../utils/stackFormat';\nimport type { ContentModelSegmentFormat, ElementProcessor } from 'roosterjs-content-model-types';\n\n/**\n * @internal\n */\nexport const pProcessor: ElementProcessor<HTMLElement> = (group, element, context) => {\n    stackFormat(\n        context,\n        { blockDecorator: 'empty', segment: 'shallowCloneForBlock', paragraph: 'shallowClone' },\n        () => {\n            context.blockDecorator = createParagraphDecorator(element.tagName);\n\n            const segmentFormat: ContentModelSegmentFormat = {};\n\n            parseFormat(element, context.formatParsers.segmentOnBlock, segmentFormat, context);\n            Object.assign(context.segmentFormat, segmentFormat);\n\n            blockProcessor(group, element, context, segmentFormat);\n        }\n    );\n\n    addBlock(group, createParagraph(true /*isImplicit*/, context.blockFormat));\n};\n","import { addBlock } from '../../modelApi/common/addBlock';\nimport { createTable } from '../../modelApi/creators/createTable';\nimport { createTableCell } from '../../modelApi/creators/createTableCell';\nimport { getBoundingClientRect } from '../utils/getBoundingClientRect';\nimport { isElementOfType } from '../../domUtils/isElementOfType';\nimport { isNodeOfType } from '../../domUtils/isNodeOfType';\nimport { parseFormat } from '../utils/parseFormat';\nimport { stackFormat } from '../utils/stackFormat';\nimport type {\n    ContentModelTableCellFormat,\n    DatasetFormat,\n    ElementProcessor,\n} from 'roosterjs-content-model-types';\n\n/**\n * Content Model Element Processor for table\n *\n * For Table with merged/splitted cells, HTML uses colSpan and rowSpan attributes to specify how it should be rendered.\n * To make it easier to edit a table, we will use a different way to describe table.\n *\n * 1. For a m * n table (m rows, n columns), we always create a m * n array for the cells.\n * 2. For a regular table cell, it is mapped to one item of this array\n * 3. For a merged/splitted table cell, it will has colSpan/rowSpan value. We also created TableCell model for those spanned\n * cells, and use \"spanLeft\" and \"spanAbove\" to mark its state\n * 4. When edit table, we always edit on this mapped m * n array because it always has an item for each cell\n * 5. When write back to DOM, we create TD/TH elements for those non-spanned cells, and mark its colSpan/rowSpan value according\n * its neighbour cell's spanLeft/spanAbove attribute\n * @param group The parent block group\n * @param parent Parent DOM node to process\n * @param context DOM to Content Model context\n */\nexport const tableProcessor: ElementProcessor<HTMLTableElement> = (\n    group,\n    tableElement,\n    context\n) => {\n    stackFormat(\n        context,\n        { segment: 'shallowCloneForBlock', paragraph: 'shallowCloneForGroup' },\n        () => {\n            parseFormat(tableElement, context.formatParsers.block, context.blockFormat, context);\n\n            const table = createTable(tableElement.rows.length, context.blockFormat);\n            const tableSelection = context.selection?.type == 'table' ? context.selection : null;\n            const selectedTable = tableSelection?.table;\n            const hasTableSelection = selectedTable == tableElement;\n\n            if (context.allowCacheElement) {\n                table.cachedElement = tableElement;\n            }\n\n            context.domIndexer?.onTable(tableElement, table);\n\n            parseFormat(tableElement, context.formatParsers.table, table.format, context);\n            parseFormat(tableElement, context.formatParsers.tableBorder, table.format, context);\n            parseFormat(\n                tableElement,\n                context.formatParsers.segmentOnBlock,\n                context.segmentFormat,\n                context\n            );\n            parseFormat(tableElement, context.formatParsers.dataset, table.dataset, context);\n            addBlock(group, table);\n\n            const columnPositions: number[] = [0];\n            const rowPositions: number[] = [0];\n            const zoomScale = context.zoomScale || 1;\n\n            for (let row = 0; row < tableElement.rows.length; row++) {\n                const tr = tableElement.rows[row];\n                const tableRow = table.rows[row];\n\n                const tbody = tr.parentNode;\n\n                if (\n                    isNodeOfType(tbody, 'ELEMENT_NODE') &&\n                    (isElementOfType(tbody, 'tbody') ||\n                        isElementOfType(tbody, 'thead') ||\n                        isElementOfType(tbody, 'tfoot'))\n                ) {\n                    parseFormat(tbody, context.formatParsers.tableRow, tableRow.format, context);\n                } else if (context.allowCacheElement) {\n                    tableRow.cachedElement = tr;\n                }\n\n                parseFormat(tr, context.formatParsers.tableRow, tableRow.format, context);\n\n                stackFormat(context, { paragraph: 'shallowClone', segment: 'shallowClone' }, () => {\n                    const parent = tr.parentElement;\n                    const parentTag = parent?.tagName;\n\n                    if (\n                        parent &&\n                        (parentTag == 'TBODY' || parentTag == 'THEAD' || parentTag == 'TFOOT')\n                    ) {\n                        // If there is TBODY around TR, retrieve format from TBODY first, in case some format are declared there\n                        parseFormat(\n                            parent,\n                            context.formatParsers.block,\n                            context.blockFormat,\n                            context\n                        );\n                        parseFormat(\n                            parent,\n                            context.formatParsers.segmentOnBlock,\n                            context.segmentFormat,\n                            context\n                        );\n                    }\n\n                    parseFormat(tr, context.formatParsers.block, context.blockFormat, context);\n                    parseFormat(\n                        tr,\n                        context.formatParsers.segmentOnBlock,\n                        context.segmentFormat,\n                        context\n                    );\n\n                    for (\n                        let sourceCol = 0, targetCol = 0;\n                        sourceCol < tr.cells.length;\n                        sourceCol++\n                    ) {\n                        for (; tableRow.cells[targetCol]; targetCol++) {}\n\n                        const td = tr.cells[sourceCol];\n                        const hasSelectionBeforeCell = context.isInSelection;\n                        const colEnd = targetCol + td.colSpan;\n                        const rowEnd = row + td.rowSpan;\n                        const needCalcWidth = columnPositions[colEnd] === undefined;\n                        const needCalcHeight = rowPositions[rowEnd] === undefined;\n\n                        if (needCalcWidth || needCalcHeight) {\n                            const rect = getBoundingClientRect(td);\n\n                            if (rect.width > 0 || rect.height > 0) {\n                                if (needCalcWidth) {\n                                    columnPositions[colEnd] =\n                                        columnPositions[targetCol] + rect.width / zoomScale;\n                                }\n\n                                if (needCalcHeight) {\n                                    rowPositions[rowEnd] =\n                                        rowPositions[row] + rect.height / zoomScale;\n                                }\n                            }\n                        }\n\n                        stackFormat(\n                            context,\n                            { paragraph: 'shallowClone', segment: 'shallowClone' },\n                            () => {\n                                parseFormat(\n                                    td,\n                                    context.formatParsers.block,\n                                    context.blockFormat,\n                                    context\n                                );\n                                parseFormat(\n                                    td,\n                                    context.formatParsers.segmentOnTableCell,\n                                    context.segmentFormat,\n                                    context\n                                );\n\n                                const cellFormat: ContentModelTableCellFormat = {\n                                    ...context.blockFormat,\n                                };\n                                const dataset: DatasetFormat = {};\n\n                                parseFormat(\n                                    td,\n                                    context.formatParsers.tableCell,\n                                    cellFormat,\n                                    context\n                                );\n                                parseFormat(\n                                    td,\n                                    context.formatParsers.tableBorder,\n                                    cellFormat,\n                                    context\n                                );\n                                parseFormat(td, context.formatParsers.dataset, dataset, context);\n\n                                for (\n                                    let colSpan = 1;\n                                    colSpan <= td.colSpan;\n                                    colSpan++, targetCol++\n                                ) {\n                                    for (let rowSpan = 1; rowSpan <= td.rowSpan; rowSpan++) {\n                                        const hasTd = colSpan == 1 && rowSpan == 1;\n                                        const cell = createTableCell(\n                                            colSpan > 1,\n                                            rowSpan > 1,\n                                            td.tagName == 'TH',\n                                            cellFormat\n                                        );\n\n                                        cell.dataset = { ...dataset };\n\n                                        const spannedRow = table.rows[row + rowSpan - 1];\n\n                                        if (spannedRow) {\n                                            spannedRow.cells[targetCol] = cell;\n                                        }\n\n                                        if (hasTd) {\n                                            if (context.allowCacheElement) {\n                                                cell.cachedElement = td;\n                                            }\n\n                                            const { listParent, levels } = context.listFormat;\n\n                                            context.listFormat.listParent = undefined;\n                                            context.listFormat.levels = [];\n\n                                            try {\n                                                context.elementProcessors.child(cell, td, context);\n                                            } finally {\n                                                context.listFormat.listParent = listParent;\n                                                context.listFormat.levels = levels;\n                                            }\n                                        }\n\n                                        const hasSelectionAfterCell = context.isInSelection;\n\n                                        if (\n                                            (hasSelectionBeforeCell && hasSelectionAfterCell) ||\n                                            (hasTableSelection &&\n                                                tableSelection &&\n                                                row >= tableSelection.firstRow &&\n                                                row <= tableSelection.lastRow &&\n                                                targetCol >= tableSelection.firstColumn &&\n                                                targetCol <= tableSelection.lastColumn)\n                                        ) {\n                                            cell.isSelected = true;\n                                        }\n                                    }\n                                }\n                            }\n                        );\n                    }\n                });\n\n                for (let col = 0; col < tableRow.cells.length; col++) {\n                    if (!tableRow.cells[col]) {\n                        tableRow.cells[col] = createTableCell(\n                            false,\n                            false,\n                            false,\n                            context.blockFormat\n                        );\n                    }\n                }\n            }\n\n            table.widths = calcSizes(columnPositions);\n\n            const heights = calcSizes(rowPositions);\n\n            table.rows.forEach((row, i) => {\n                if (heights[i] > 0) {\n                    row.height = heights[i];\n                }\n            });\n        }\n    );\n};\n\nfunction calcSizes(positions: number[]): number[] {\n    let result: number[] = [];\n    let lastPos = positions[positions.length - 1];\n\n    for (let i = positions.length - 2; i >= 0; i--) {\n        if (positions[i] === undefined) {\n            result[i] = 0;\n        } else {\n            result[i] = lastPos - positions[i];\n            lastPos = positions[i];\n        }\n    }\n\n    return result;\n}\n","import { addDecorators } from '../../modelApi/common/addDecorators';\nimport { addSegment } from '../../modelApi/common/addSegment';\nimport { addSelectionMarker } from '../utils/addSelectionMarker';\nimport { createText } from '../../modelApi/creators/createText';\nimport { ensureParagraph } from '../../modelApi/common/ensureParagraph';\nimport { getRegularSelectionOffsets } from '../utils/getRegularSelectionOffsets';\nimport { hasSpacesOnly } from '../../modelApi/common/hasSpacesOnly';\nimport type {\n    ContentModelBlockGroup,\n    ContentModelParagraph,\n    ContentModelText,\n    DomToModelContext,\n    ElementProcessor,\n} from 'roosterjs-content-model-types';\n\n/**\n * @internal\n */\nexport const textProcessor: ElementProcessor<Text> = (\n    group: ContentModelBlockGroup,\n    textNode: Text,\n    context: DomToModelContext\n) => {\n    let txt = textNode.nodeValue || '';\n    let [txtStartOffset, txtEndOffset] = getRegularSelectionOffsets(context, textNode);\n    const segments: (ContentModelText | undefined)[] = [];\n    const paragraph = ensureParagraph(group, context.blockFormat);\n\n    if (txtStartOffset >= 0) {\n        const subText = txt.substring(0, txtStartOffset);\n        segments.push(addTextSegment(group, subText, paragraph, context));\n        context.isInSelection = true;\n\n        addSelectionMarker(group, context);\n\n        txt = txt.substring(txtStartOffset);\n        txtEndOffset -= txtStartOffset;\n    }\n\n    if (txtEndOffset >= 0) {\n        const subText = txt.substring(0, txtEndOffset);\n        segments.push(addTextSegment(group, subText, paragraph, context));\n\n        if (\n            context.selection &&\n            (context.selection.type != 'range' || !context.selection.range.collapsed)\n        ) {\n            addSelectionMarker(group, context);\n        }\n\n        context.isInSelection = false;\n        txt = txt.substring(txtEndOffset);\n    }\n\n    segments.push(addTextSegment(group, txt, paragraph, context));\n    context.domIndexer?.onSegment(\n        textNode,\n        paragraph,\n        segments.filter((x): x is ContentModelText => !!x)\n    );\n};\n\n// When we see these values of white-space style, need to preserve spaces and line-breaks and let browser handle it for us.\nconst WhiteSpaceValuesNeedToHandle = ['pre', 'pre-wrap', 'pre-line', 'break-spaces'];\n\nfunction addTextSegment(\n    group: ContentModelBlockGroup,\n    text: string,\n    paragraph: ContentModelParagraph,\n    context: DomToModelContext\n): ContentModelText | undefined {\n    let textModel: ContentModelText | undefined;\n\n    if (text) {\n        if (\n            !hasSpacesOnly(text) ||\n            (paragraph?.segments.length ?? 0) > 0 ||\n            WhiteSpaceValuesNeedToHandle.indexOf(paragraph?.format.whiteSpace || '') >= 0\n        ) {\n            textModel = createText(text, context.segmentFormat);\n\n            if (context.isInSelection) {\n                textModel.isSelected = true;\n            }\n\n            addDecorators(textModel, context);\n\n            addSegment(group, textModel, context.blockFormat);\n        }\n    }\n\n    return textModel;\n}\n","import { addDecorators } from '../../modelApi/common/addDecorators';\nimport { addSegment } from '../../modelApi/common/addSegment';\nimport { createSelectionMarker } from '../../modelApi/creators/createSelectionMarker';\nimport type { ContentModelBlockGroup, DomToModelContext } from 'roosterjs-content-model-types';\n\n/**\n * @internal\n */\nexport function addSelectionMarker(group: ContentModelBlockGroup, context: DomToModelContext) {\n    const marker = createSelectionMarker(context.segmentFormat);\n\n    addDecorators(marker, context);\n\n    addSegment(group, marker, context.blockFormat);\n}\n","import { getObjectKeys } from '../../domUtils/getObjectKeys';\nimport type { ContentModelFormatBase } from 'roosterjs-content-model-types';\n\n/**\n * Check if the two given formats object are equal. This is a check to value but not to reference\n * @param f1 The first format object to check\n * @param f2 The second format object to check\n */\nexport function areSameFormats<T extends ContentModelFormatBase>(f1: T, f2: T) {\n    if (f1 == f2) {\n        return true;\n    } else {\n        const keys1 = getObjectKeys(f1);\n        const keys2 = getObjectKeys(f2);\n\n        return keys1.length == keys2.length && keys1.every(key => f1[key] == f2[key]);\n    }\n}\n","/**\n * @internal\n */\nexport function getBoundingClientRect(element: Element): DOMRect {\n    return element.getBoundingClientRect();\n}\n","import { defaultHTMLStyleMap } from '../../config/defaultHTMLStyleMap';\nimport type { DefaultStyleMap, DomToModelContext } from 'roosterjs-content-model-types';\n\n/**\n * @internal\n * Get default CSS style of given element\n * @param element The element to get default style from\n * @param context The context of DOM to Content Model conversion\n * @returns A valid CSS style object\n */\nexport function getDefaultStyle(\n    element: HTMLElement,\n    context: DomToModelContext\n): Partial<CSSStyleDeclaration> {\n    let tag = element.tagName.toLowerCase() as keyof DefaultStyleMap;\n\n    return defaultHTMLStyleMap[tag] || {};\n}\n","import type { DomToModelContext } from 'roosterjs-content-model-types';\n\n/**\n * Get offset numbers of a regular (range based) selection.\n * If the selection start/end position is not in the given node, it will return -1 for the related value\n * @param context DOM to Content Model context used for retrieve the selection\n * @param currentContainer The container node to check\n * @returns a tuple of start and end offsets. -1 means selection is not directly under the given node\n */\nexport function getRegularSelectionOffsets(\n    context: DomToModelContext,\n    currentContainer: Node\n): [number, number] {\n    const range = context.selection?.type == 'range' ? context.selection.range : null;\n\n    let startOffset = range?.startContainer == currentContainer ? range.startOffset : -1;\n    let endOffset = range?.endContainer == currentContainer ? range.endOffset! : -1;\n\n    return [startOffset, endOffset];\n}\n","import { getDefaultStyle } from './getDefaultStyle';\nimport type { DomToModelContext } from 'roosterjs-content-model-types';\n\nconst BLOCK_DISPLAY_STYLES = ['block', 'list-item', 'table', 'table-cell', 'flex'];\n\n/**\n * @internal\n * Check if the given element will be layout as a block\n * @param element The element to check\n * @param context The context of DOM to Content Model conversion\n */\nexport function isBlockElement(element: HTMLElement, context: DomToModelContext): boolean {\n    const display = element.style.display || getDefaultStyle(element, context).display || '';\n\n    return BLOCK_DISPLAY_STYLES.indexOf(display) >= 0;\n}\n","import { getDefaultStyle } from './getDefaultStyle';\nimport type {\n    ContentModelFormatBase,\n    DomToModelContext,\n    FormatParser,\n} from 'roosterjs-content-model-types';\n\n/**\n * Parse formats of the given HTML element using specified format parsers\n * @param element The element to parse format from\n * @param parsers The parses we are using to parse format\n * @param format The format object to hold result format\n * @param context DOM to Content Model context\n */\nexport function parseFormat<T extends ContentModelFormatBase>(\n    element: HTMLElement,\n    parsers: (FormatParser<T> | null)[],\n    format: T,\n    context: DomToModelContext\n) {\n    const defaultStyle = getDefaultStyle(element, context);\n\n    parsers.forEach(parser => {\n        parser?.(format, element, context, defaultStyle);\n    });\n}\n","import { getObjectKeys } from '../../domUtils/getObjectKeys';\nimport type {\n    ContentModelBlockFormat,\n    ContentModelCode,\n    ContentModelFormatBase,\n    ContentModelLink,\n    ContentModelParagraphDecorator,\n    ContentModelSegmentFormat,\n    DomToModelContext,\n} from 'roosterjs-content-model-types';\n\n/**\n * @internal\n */\nexport interface StackFormatOptions {\n    segment?: 'shallowClone' | 'shallowCloneForBlock' | 'empty';\n    paragraph?: 'shallowClone' | 'shallowCloneForGroup' | 'empty';\n    blockDecorator?: 'empty';\n    link?: 'linkDefault' | 'cloneFormat' | 'empty';\n    code?: 'codeDefault' | 'empty';\n}\n\n// Some styles, such as background color, won't be inherited by block element if it was originally\n// declared from an inline element. So we need to skip them.\n// e.g.\n// <span style=\"background-color: red\">\n//   line 1       <---------------------------- in red here\n//   <div>line 2</div>  <---------------------- not in red here\n// </span>\nconst SkippedStylesForBlock: (keyof ContentModelSegmentFormat)[] = ['backgroundColor'];\nconst SkippedStylesForTable: (keyof ContentModelBlockFormat)[] = [\n    'marginLeft',\n    'marginRight',\n    'paddingLeft',\n    'paddingRight',\n];\n\n/**\n * @internal\n */\nexport function stackFormat(\n    context: DomToModelContext,\n    options: StackFormatOptions,\n    callback: () => void\n) {\n    const {\n        segmentFormat,\n        blockFormat,\n        link: linkFormat,\n        code: codeFormat,\n        blockDecorator: decoratorFormat,\n    } = context;\n    const { segment, paragraph, link, code, blockDecorator } = options;\n\n    try {\n        context.segmentFormat = stackFormatInternal(segmentFormat, segment);\n        context.blockFormat = stackFormatInternal(blockFormat, paragraph);\n        context.link = stackLinkInternal(linkFormat, link);\n        context.code = stackCodeInternal(codeFormat, code);\n        context.blockDecorator = stackDecoratorInternal(decoratorFormat, blockDecorator);\n\n        callback();\n    } finally {\n        context.segmentFormat = segmentFormat;\n        context.blockFormat = blockFormat;\n        context.link = linkFormat;\n        context.code = codeFormat;\n        context.blockDecorator = decoratorFormat;\n    }\n}\n\nfunction stackLinkInternal(\n    linkFormat: ContentModelLink,\n    link?: 'linkDefault' | 'cloneFormat' | 'empty'\n) {\n    switch (link) {\n        case 'linkDefault':\n            return {\n                format: {\n                    underline: true,\n                },\n                dataset: {},\n            };\n\n        case 'empty':\n            return {\n                format: {},\n                dataset: {},\n            };\n\n        case 'cloneFormat':\n        default:\n            return {\n                dataset: linkFormat.dataset,\n                format: { ...linkFormat.format },\n            };\n    }\n}\n\nfunction stackCodeInternal(codeFormat: ContentModelCode, code?: 'codeDefault' | 'empty') {\n    switch (code) {\n        case 'codeDefault':\n            return {\n                format: {\n                    fontFamily: 'monospace',\n                },\n            };\n        case 'empty':\n            return {\n                format: {},\n            };\n        default:\n            return codeFormat;\n    }\n}\n\nfunction stackDecoratorInternal(\n    format: ContentModelParagraphDecorator,\n    decorator?: 'decoratorDefault' | 'empty'\n) {\n    switch (decorator) {\n        case 'empty':\n            return {\n                format: {},\n                tagName: '',\n            };\n        default:\n            return format;\n    }\n}\n\nfunction stackFormatInternal<T extends ContentModelFormatBase>(\n    format: T,\n    processType?: 'shallowClone' | 'shallowCloneForBlock' | 'shallowCloneForGroup' | 'empty'\n): T | {} {\n    switch (processType) {\n        case 'empty':\n            return {};\n\n        case undefined:\n            return format;\n\n        default:\n            const result = { ...format };\n\n            getObjectKeys(format).forEach(key => {\n                if (\n                    (processType == 'shallowCloneForBlock' &&\n                        SkippedStylesForBlock.indexOf(key as keyof ContentModelSegmentFormat) >=\n                            0) ||\n                    (processType == 'shallowCloneForGroup' &&\n                        SkippedStylesForTable.indexOf(key as keyof ContentModelBlockFormat) >= 0)\n                ) {\n                    delete result[key];\n                }\n            });\n\n            return result;\n    }\n}\n","import { isNodeOfType } from './isNodeOfType';\nimport type { ContentModelEntityFormat } from 'roosterjs-content-model-types';\n\nconst ENTITY_INFO_NAME = '_Entity';\nconst ENTITY_TYPE_PREFIX = '_EType_';\nconst ENTITY_ID_PREFIX = '_EId_';\nconst ENTITY_READONLY_PREFIX = '_EReadonly_';\n\n/**\n * @internal\n */\nexport function isEntityElement(node: Node): boolean {\n    return isNodeOfType(node, 'ELEMENT_NODE') && node.classList.contains(ENTITY_INFO_NAME);\n}\n\n/**\n * @internal\n */\nexport function parseEntityClassName(\n    className: string,\n    format: ContentModelEntityFormat\n): boolean | undefined {\n    if (className == ENTITY_INFO_NAME) {\n        return true;\n    } else if (className.indexOf(ENTITY_TYPE_PREFIX) == 0) {\n        format.entityType = className.substring(ENTITY_TYPE_PREFIX.length);\n    } else if (className.indexOf(ENTITY_ID_PREFIX) == 0) {\n        format.id = className.substring(ENTITY_ID_PREFIX.length);\n    } else if (className.indexOf(ENTITY_READONLY_PREFIX) == 0) {\n        format.isReadonly = className.substring(ENTITY_READONLY_PREFIX.length) == '1';\n    }\n}\n\n/**\n * @internal\n */\nexport function generateEntityClassNames(format: ContentModelEntityFormat): string {\n    return format.isFakeEntity\n        ? ''\n        : `${ENTITY_INFO_NAME} ${ENTITY_TYPE_PREFIX}${format.entityType ?? ''} ${\n              format.id ? `${ENTITY_ID_PREFIX}${format.id} ` : ''\n          }${ENTITY_READONLY_PREFIX}${format.isReadonly ? '1' : '0'}`;\n}\n","/**\n * Provide a strong-typed version of Object.keys()\n * @param obj The source object\n * @returns Array of keys\n */\nexport function getObjectKeys<T extends string | number | symbol>(\n    obj: Record<T, any> | Partial<Record<T, any>>\n): T[] {\n    return Object.keys(obj) as T[];\n}\n","/**\n * Check if the given element is of the type that we are checking according to its tag name\n * @param element The element to check\n * @param tag The HTML tag name to check\n * @returns True if the element has the given tag, otherwise false\n */\nexport function isElementOfType<Tag extends keyof HTMLElementTagNameMap>(\n    element: HTMLElement,\n    tag: Tag\n): element is HTMLElementTagNameMap[Tag] {\n    return element?.tagName?.toLocaleLowerCase() == tag;\n}\n","/**\n * A type map from node type number to its type declaration. This is used by utility function isNodeOfType()\n */\nexport interface NodeTypeMap {\n    /**\n     * Attribute node\n     */\n    ATTRIBUTE_NODE: Attr;\n\n    /**\n     * Comment node\n     */\n    COMMENT_NODE: Comment;\n\n    /**\n     * DocumentFragment node\n     */\n    DOCUMENT_FRAGMENT_NODE: DocumentFragment;\n\n    /**\n     * Document node\n     */\n    DOCUMENT_NODE: Document;\n\n    /**\n     * DocumentType node\n     */\n    DOCUMENT_TYPE_NODE: DocumentType;\n\n    /**\n     * HTMLElement node\n     */\n    ELEMENT_NODE: HTMLElement;\n\n    /**\n     * ProcessingInstruction node\n     */\n    PROCESSING_INSTRUCTION_NODE: ProcessingInstruction;\n\n    /**\n     * Text node\n     */\n    TEXT_NODE: Text;\n}\n\n/**\n * Type checker for Node. Return true if it of the specified node type\n * @param node The node to check\n * @param expectedType The type to check\n */\nexport function isNodeOfType<T extends keyof NodeTypeMap>(\n    node: Node | null | undefined,\n    expectedType: T\n): node is NodeTypeMap[T] {\n    return !!node && node.nodeType == Node[expectedType];\n}\n","import { BulletListType, NumberingListType } from 'roosterjs-editor-types';\nimport { createNumberDefinition, createObjectDefinition } from 'roosterjs-editor-dom';\nimport { updateMetadata } from './updateMetadata';\nimport type { ContentModelWithDataset, ListMetadataFormat } from 'roosterjs-content-model-types';\n\nconst ListStyleDefinitionMetadata = createObjectDefinition<ListMetadataFormat>(\n    {\n        orderedStyleType: createNumberDefinition(\n            true /** isOptional */,\n            undefined /** value **/,\n            NumberingListType.Min,\n            NumberingListType.Max\n        ),\n        unorderedStyleType: createNumberDefinition(\n            true /** isOptional */,\n            undefined /** value **/,\n            BulletListType.Min,\n            BulletListType.Max\n        ),\n    },\n    true /** isOptional */,\n    true /** allowNull */\n);\n\n/**\n * Update list metadata with a callback\n * @param list The list Content Model (metadata holder)\n * @param callback The callback function used for updating metadata\n */\nexport function updateListMetadata(\n    list: ContentModelWithDataset<ListMetadataFormat>,\n    callback?: (format: ListMetadataFormat | null) => ListMetadataFormat | null\n): ListMetadataFormat | null {\n    return updateMetadata(list, callback, ListStyleDefinitionMetadata);\n}\n","import { validate } from 'roosterjs-editor-dom';\nimport type { ContentModelWithDataset } from 'roosterjs-content-model-types';\nimport type { Definition } from 'roosterjs-editor-types';\n\nconst EditingInfoDatasetName = 'editingInfo';\n\n/**\n * Update metadata of the given model\n * @param model The model to update metadata to\n * @param callback A callback function to update metadata\n * @param definition @optional Metadata definition used for verify the metadata object\n * @returns The metadata object if any, or null\n */\nexport function updateMetadata<T>(\n    model: ContentModelWithDataset<T>,\n    callback?: (metadata: T | null) => T | null,\n    definition?: Definition<T>\n): T | null {\n    const metadataString = model.dataset[EditingInfoDatasetName];\n    let obj: T | null = null;\n\n    try {\n        obj = JSON.parse(metadataString) as T;\n    } catch {}\n\n    if (definition && !validate(obj, definition)) {\n        obj = null;\n    }\n\n    if (callback) {\n        obj = callback(obj);\n\n        if (!obj) {\n            delete model.dataset[EditingInfoDatasetName];\n        } else if (!definition || validate(obj, definition)) {\n            model.dataset[EditingInfoDatasetName] = JSON.stringify(obj);\n        }\n    }\n\n    return obj;\n}\n\n/**\n * Check if the given model has metadata\n * @param model The content model to check\n */\nexport function hasMetadata<T>(model: ContentModelWithDataset<T> | HTMLElement): boolean {\n    return !!model.dataset[EditingInfoDatasetName];\n}\n","/**\n * Convert a named node map to an array\n * @param collection The map to convert\n */\nexport default function toArray(collection: NamedNodeMap): Attr[];\n\n/**\n * Convert a named node map to an array\n * @param collection The map to convert\n */\nexport default function toArray(collection: DataTransferItemList): DataTransferItem[];\n\n/**\n * Convert a collection to an array\n * @param collection The collection to convert\n */\nexport default function toArray<T extends Node>(collection: NodeListOf<T>): T[];\n\n/**\n * Convert a collection to an array\n * @param collection The collection to convert\n */\nexport default function toArray<T extends Element>(collection: HTMLCollectionOf<T>): T[];\n\n/**\n * Convert an array to an array.\n * This is to satisfy typescript compiler. For some cases the object can be a collection at runtime,\n * but the declaration is an array. e.g. ClipboardData.types\n * @param array The array to convert\n */\nexport default function toArray<T>(array: readonly T[]): T[];\n\nexport default function toArray(collection: any): any[] {\n    return [].slice.call(collection);\n}\n","import type { DirectionFormat } from 'roosterjs-content-model-types';\nimport type { FormatHandler } from '../FormatHandler';\n\n/**\n * @internal\n */\nexport const directionFormatHandler: FormatHandler<DirectionFormat> = {\n    parse: (format, element, _, defaultStyle) => {\n        const dir = element.style.direction || element.dir || defaultStyle.direction;\n\n        if (dir) {\n            format.direction = dir == 'rtl' ? 'rtl' : 'ltr';\n        }\n    },\n    apply: (format, element) => {\n        if (format.direction) {\n            element.style.direction = format.direction;\n        }\n    },\n};\n","import type { DisplayFormat } from 'roosterjs-content-model-types';\nimport type { FormatHandler } from '../FormatHandler';\n\n/**\n * @internal\n */\nexport const displayFormatHandler: FormatHandler<DisplayFormat> = {\n    parse: (format, element) => {\n        const display = element.style.display;\n\n        if (display) {\n            format.display = display;\n        }\n    },\n    apply: (format, element) => {\n        if (format.display) {\n            element.style.display = format.display;\n        }\n    },\n};\n","import { calcAlign, ResultMap } from '../utils/dir';\nimport { directionFormatHandler } from './directionFormatHandler';\nimport type {\n    DirectionFormat,\n    HtmlAlignFormat,\n    TextAlignFormat,\n} from 'roosterjs-content-model-types';\nimport type { FormatHandler } from '../FormatHandler';\n\n/**\n * @internal\n */\nexport const htmlAlignFormatHandler: FormatHandler<\n    DirectionFormat & HtmlAlignFormat & TextAlignFormat\n> = {\n    parse: (format, element, context, defaultStyle) => {\n        directionFormatHandler.parse(format, element, context, defaultStyle);\n\n        const htmlAlign = element.getAttribute('align');\n\n        if (htmlAlign) {\n            format.htmlAlign = calcAlign(htmlAlign, format.direction);\n            delete format.textAlign;\n            delete context.blockFormat.textAlign;\n        }\n    },\n    apply: (format, element) => {\n        const dir: 'ltr' | 'rtl' = format.direction == 'rtl' ? 'rtl' : 'ltr';\n\n        if (format.htmlAlign) {\n            element.setAttribute('align', ResultMap[format.htmlAlign][dir]);\n        }\n    },\n};\n","import type { FormatHandler } from '../FormatHandler';\nimport type { LineHeightFormat } from 'roosterjs-content-model-types';\n\n/**\n * @internal\n */\nexport const lineHeightFormatHandler: FormatHandler<LineHeightFormat> = {\n    parse: (format, element, context, defaultStyle) => {\n        const lineHeight = element.style.lineHeight || defaultStyle.lineHeight;\n\n        if (lineHeight && lineHeight != 'inherit') {\n            format.lineHeight = lineHeight;\n        }\n    },\n    apply: (format, element) => {\n        if (format.lineHeight) {\n            element.style.lineHeight = format.lineHeight;\n        }\n    },\n};\n","import { parseValueWithUnit } from '../utils/parseValueWithUnit';\nimport type { FormatHandler } from '../FormatHandler';\nimport type { MarginFormat } from 'roosterjs-content-model-types';\n\nconst MarginKeys: (keyof MarginFormat & keyof CSSStyleDeclaration)[] = [\n    'marginTop',\n    'marginRight',\n    'marginBottom',\n    'marginLeft',\n];\n\n/**\n * @internal\n */\nexport const marginFormatHandler: FormatHandler<MarginFormat> = {\n    parse: (format, element, _, defaultStyle) => {\n        MarginKeys.forEach(key => {\n            const value = element.style[key] || defaultStyle[key];\n\n            if (value) {\n                switch (key) {\n                    case 'marginTop':\n                    case 'marginBottom':\n                        format[key] = value;\n                        break;\n\n                    case 'marginLeft':\n                    case 'marginRight':\n                        format[key] = format[key]\n                            ? parseValueWithUnit(format[key] || '', element) +\n                              parseValueWithUnit(value, element) +\n                              'px'\n                            : value;\n                        break;\n                }\n            }\n        });\n    },\n    apply: (format, element, context) => {\n        MarginKeys.forEach(key => {\n            const value = format[key];\n\n            if (value != context.implicitFormat[key]) {\n                element.style[key] = value || '0';\n            }\n        });\n    },\n};\n","import type { FormatHandler } from '../FormatHandler';\nimport type { PaddingFormat } from 'roosterjs-content-model-types';\n\nconst PaddingKeys: (keyof PaddingFormat & keyof CSSStyleDeclaration)[] = [\n    'paddingTop',\n    'paddingRight',\n    'paddingBottom',\n    'paddingLeft',\n];\n\n/**\n * @internal\n */\nexport const paddingFormatHandler: FormatHandler<PaddingFormat> = {\n    parse: (format, element) => {\n        PaddingKeys.forEach(key => {\n            const value = element.style[key];\n\n            if (value) {\n                format[key] = value;\n            }\n        });\n    },\n    apply: (format, element) => {\n        PaddingKeys.forEach(key => {\n            const value = format[key];\n            if (value) {\n                element.style[key] = value;\n            }\n        });\n    },\n};\n","import { calcAlign, ResultMap } from '../utils/dir';\nimport { directionFormatHandler } from './directionFormatHandler';\nimport type { DirectionFormat, TextAlignFormat } from 'roosterjs-content-model-types';\nimport type { FormatHandler } from '../FormatHandler';\n\n/**\n * @internal\n */\nexport const textAlignFormatHandler: FormatHandler<DirectionFormat & TextAlignFormat> = {\n    parse: (format, element, context, defaultStyle) => {\n        directionFormatHandler.parse(format, element, context, defaultStyle);\n\n        let textAlign = element.style.textAlign || defaultStyle.textAlign;\n\n        if (\n            element.tagName == 'LI' &&\n            element.parentElement?.style.display === 'flex' &&\n            element.parentElement.style.flexDirection === 'column' &&\n            element.style.alignSelf\n        ) {\n            // For LI element with flex style applied, we use its \"align-self\" style value instead since LI has a different implementation for align\n            textAlign = element.style.alignSelf;\n        }\n\n        if (textAlign) {\n            format.textAlign = calcAlign(textAlign, format.direction);\n        }\n    },\n    apply: (format, element) => {\n        const dir: 'ltr' | 'rtl' = format.direction == 'rtl' ? 'rtl' : 'ltr';\n\n        if (format.textAlign) {\n            const parent = element.parentElement;\n            const parentTag = parent?.tagName;\n\n            if (element.tagName == 'LI' && parent && (parentTag == 'OL' || parentTag == 'UL')) {\n                element.style.alignSelf = format.textAlign;\n                element.parentElement.style.flexDirection = 'column';\n                element.parentElement.style.display = 'flex';\n            } else {\n                element.style.textAlign = ResultMap[format.textAlign][dir];\n            }\n        }\n    },\n};\n","import type { FormatHandler } from '../FormatHandler';\nimport type { WhiteSpaceFormat } from 'roosterjs-content-model-types';\n\n/**\n * @internal\n */\nexport const whiteSpaceFormatHandler: FormatHandler<WhiteSpaceFormat> = {\n    parse: (format, element, _, defaultStyle) => {\n        const whiteSpace = element.style.whiteSpace || defaultStyle.whiteSpace;\n\n        if (whiteSpace) {\n            format.whiteSpace = whiteSpace;\n        }\n    },\n    apply: (format, element, context) => {\n        const whiteSpace = context.implicitFormat.whiteSpace;\n        if (format.whiteSpace != whiteSpace) {\n            element.style.whiteSpace = format.whiteSpace || 'normal';\n        }\n    },\n};\n","import { getColor, setColor } from '../utils/color';\nimport type { BackgroundColorFormat } from 'roosterjs-content-model-types';\nimport type { FormatHandler } from '../FormatHandler';\n\n/**\n * @internal\n */\nexport const backgroundColorFormatHandler: FormatHandler<BackgroundColorFormat> = {\n    parse: (format, element, context, defaultStyle) => {\n        const backgroundColor =\n            getColor(\n                element,\n                true /*isBackground*/,\n                context.darkColorHandler,\n                !!context.isDarkMode\n            ) || defaultStyle.backgroundColor;\n\n        if (backgroundColor) {\n            format.backgroundColor = backgroundColor;\n        }\n    },\n    apply: (format, element, context) => {\n        if (format.backgroundColor) {\n            setColor(\n                element,\n                format.backgroundColor,\n                true /*isBackground*/,\n                context.darkColorHandler,\n                !!context.isDarkMode\n            );\n        }\n    },\n};\n","import type { BorderBoxFormat } from 'roosterjs-content-model-types';\nimport type { FormatHandler } from '../FormatHandler';\n\n/**\n * @internal\n */\nexport const borderBoxFormatHandler: FormatHandler<BorderBoxFormat> = {\n    parse: (format, element) => {\n        if (element.style?.boxSizing == 'border-box') {\n            format.useBorderBox = true;\n        }\n    },\n    apply: (format, element) => {\n        if (format.useBorderBox) {\n            element.style.boxSizing = 'border-box';\n        }\n    },\n};\n","import type { BorderFormat } from 'roosterjs-content-model-types';\nimport type { FormatHandler } from '../FormatHandler';\n\n/**\n * Keys of border items\n */\nexport const BorderKeys: (keyof BorderFormat & keyof CSSStyleDeclaration)[] = [\n    'borderTop',\n    'borderRight',\n    'borderBottom',\n    'borderLeft',\n    'borderRadius',\n];\n\n/**\n * @internal\n */\nexport const borderFormatHandler: FormatHandler<BorderFormat> = {\n    parse: (format, element) => {\n        BorderKeys.forEach(key => {\n            const value = element.style[key];\n\n            if (value) {\n                format[key] = value == 'none' ? '' : value;\n            }\n        });\n    },\n    apply: (format, element) => {\n        BorderKeys.forEach(key => {\n            const value = format[key];\n\n            if (value) {\n                element.style[key] = value;\n            }\n        });\n    },\n};\n","import type { BoxShadowFormat } from 'roosterjs-content-model-types';\nimport type { FormatHandler } from '../FormatHandler';\n\n/**\n * @internal\n */\nexport const boxShadowFormatHandler: FormatHandler<BoxShadowFormat> = {\n    parse: (format, element) => {\n        if (element.style?.boxShadow) {\n            format.boxShadow = element.style.boxShadow;\n        }\n    },\n    apply: (format, element) => {\n        if (format.boxShadow) {\n            element.style.boxShadow = format.boxShadow;\n        }\n    },\n};\n","import { getObjectKeys } from '../../domUtils/getObjectKeys';\nimport type { DatasetFormat } from 'roosterjs-content-model-types';\nimport type { FormatHandler } from '../FormatHandler';\n\n/**\n * @internal\n */\nexport const datasetFormatHandler: FormatHandler<DatasetFormat> = {\n    parse: (format, element) => {\n        const dataset = element.dataset;\n\n        getObjectKeys(dataset).forEach(key => {\n            format[key] = dataset[key] || '';\n        });\n    },\n\n    apply: (format, element) => {\n        getObjectKeys(format).forEach(key => {\n            element.dataset[key] = format[key];\n        });\n    },\n};\n","import type { FloatFormat } from 'roosterjs-content-model-types';\nimport type { FormatHandler } from '../FormatHandler';\n\n/**\n * @internal\n */\nexport const floatFormatHandler: FormatHandler<FloatFormat> = {\n    parse: (format, element) => {\n        const float = element.style.float || element.getAttribute('align');\n\n        if (float) {\n            format.float = float;\n        }\n    },\n    apply: (format, element) => {\n        if (format.float) {\n            element.style.float = format.float;\n        }\n    },\n};\n","import type { FormatHandler } from '../FormatHandler';\nimport type { IdFormat } from 'roosterjs-content-model-types';\n\n/**\n * @internal\n */\nexport const idFormatHandler: FormatHandler<IdFormat> = {\n    parse: (format, element) => {\n        if (element.id) {\n            format.id = element.id;\n        }\n    },\n    apply: (format, element) => {\n        if (format.id) {\n            element.id = format.id;\n        }\n    },\n};\n","import type { FormatHandler } from '../FormatHandler';\nimport type { SizeFormat } from 'roosterjs-content-model-types';\n\nconst PercentageRegex = /[\\d\\.]+%/;\n\n/**\n * @internal\n */\nexport const sizeFormatHandler: FormatHandler<SizeFormat> = {\n    parse: (format, element, context) => {\n        const width = element.style.width || tryParseSize(element, 'width');\n        const height = element.style.height || tryParseSize(element, 'height');\n        const maxWidth = element.style.maxWidth;\n        const maxHeight = element.style.maxHeight;\n        const minWidth = element.style.minWidth;\n        const minHeight = element.style.minHeight;\n\n        if (width) {\n            format.width = width;\n        }\n        if (height) {\n            format.height = height;\n        }\n        if (maxWidth) {\n            format.maxWidth = maxWidth;\n        }\n        if (maxHeight) {\n            format.maxHeight = maxHeight;\n        }\n        if (minWidth) {\n            format.minWidth = minWidth;\n        }\n        if (minHeight) {\n            format.minHeight = minHeight;\n        }\n    },\n    apply: (format, element) => {\n        if (format.width) {\n            element.style.width = format.width;\n        }\n        if (format.height) {\n            element.style.height = format.height;\n        }\n        if (format.maxWidth) {\n            element.style.maxWidth = format.maxWidth;\n        }\n        if (format.maxHeight) {\n            element.style.maxHeight = format.maxHeight;\n        }\n        if (format.minWidth) {\n            element.style.minWidth = format.minWidth;\n        }\n        if (format.minHeight) {\n            element.style.minHeight = format.minHeight;\n        }\n    },\n};\n\nfunction tryParseSize(element: HTMLElement, attrName: 'width' | 'height'): string | undefined {\n    const attrValue = element.getAttribute(attrName);\n    const value = parseInt(attrValue || '');\n\n    return attrValue && PercentageRegex.test(attrValue)\n        ? attrValue\n        : Number.isNaN(value)\n        ? undefined\n        : value + 'px';\n}\n","import type { FormatHandler } from '../FormatHandler';\nimport type { VerticalAlignFormat } from 'roosterjs-content-model-types';\n\n/**\n * @internal\n */\nexport const verticalAlignFormatHandler: FormatHandler<VerticalAlignFormat> = {\n    parse: (format, element) => {\n        const align = element.style.verticalAlign || element.getAttribute('valign');\n\n        switch (align) {\n            case 'baseline':\n            case 'initial':\n            case 'super':\n            case 'sub':\n            case 'text-top':\n            case 'text-bottom':\n            case 'top':\n                format.verticalAlign = 'top';\n                break;\n\n            case 'bottom':\n                format.verticalAlign = 'bottom';\n                break;\n\n            case 'middle':\n                format.verticalAlign = 'middle';\n                break;\n        }\n    },\n    apply: (format, element) => {\n        if (format.verticalAlign) {\n            element.style.verticalAlign = format.verticalAlign;\n        }\n    },\n};\n","import type { FormatHandler } from '../FormatHandler';\nimport type { WordBreakFormat } from 'roosterjs-content-model-types';\n\n/**\n * @internal\n */\nexport const wordBreakFormatHandler: FormatHandler<WordBreakFormat> = {\n    parse: (format, element, _, defaultStyle) => {\n        const wordBreak = element.style.wordBreak || defaultStyle.wordBreak;\n\n        if (wordBreak) {\n            format.wordBreak = wordBreak;\n        }\n    },\n    apply: (format, element) => {\n        if (format.wordBreak) {\n            element.style.wordBreak = format.wordBreak;\n        }\n    },\n};\n","import { backgroundColorFormatHandler } from './common/backgroundColorFormatHandler';\nimport { boldFormatHandler } from './segment/boldFormatHandler';\nimport { borderBoxFormatHandler } from './common/borderBoxFormatHandler';\nimport { borderFormatHandler } from './common/borderFormatHandler';\nimport { boxShadowFormatHandler } from './common/boxShadowFormatHandler';\nimport { datasetFormatHandler } from './common/datasetFormatHandler';\nimport { directionFormatHandler } from './block/directionFormatHandler';\nimport { displayFormatHandler } from './block/displayFormatHandler';\nimport { entityFormatHandler } from './entity/entityFormatHandler';\nimport { floatFormatHandler } from './common/floatFormatHandler';\nimport { fontFamilyFormatHandler } from './segment/fontFamilyFormatHandler';\nimport { fontSizeFormatHandler } from './segment/fontSizeFormatHandler';\nimport { getObjectKeys } from '../domUtils/getObjectKeys';\nimport { htmlAlignFormatHandler } from './block/htmlAlignFormatHandler';\nimport { idFormatHandler } from './common/idFormatHandler';\nimport { italicFormatHandler } from './segment/italicFormatHandler';\nimport { letterSpacingFormatHandler } from './segment/letterSpacingFormatHandler';\nimport { lineHeightFormatHandler } from './block/lineHeightFormatHandler';\nimport { linkFormatHandler } from './segment/linkFormatHandler';\nimport { listItemThreadFormatHandler } from './list/listItemThreadFormatHandler';\nimport { listLevelThreadFormatHandler } from './list/listLevelThreadFormatHandler';\nimport { listStylePositionFormatHandler } from './list/listStylePositionFormatHandler';\nimport { marginFormatHandler } from './block/marginFormatHandler';\nimport { paddingFormatHandler } from './block/paddingFormatHandler';\nimport { sizeFormatHandler } from './common/sizeFormatHandler';\nimport { strikeFormatHandler } from './segment/strikeFormatHandler';\nimport { superOrSubScriptFormatHandler } from './segment/superOrSubScriptFormatHandler';\nimport { tableLayoutFormatHandler } from './table/tableLayoutFormatHandler';\nimport { tableSpacingFormatHandler } from './table/tableSpacingFormatHandler';\nimport { textAlignFormatHandler } from './block/textAlignFormatHandler';\nimport { textColorFormatHandler } from './segment/textColorFormatHandler';\nimport { textColorOnTableCellFormatHandler } from './table/textColorOnTableCellFormatHandler';\nimport { underlineFormatHandler } from './segment/underlineFormatHandler';\nimport { verticalAlignFormatHandler } from './common/verticalAlignFormatHandler';\nimport { whiteSpaceFormatHandler } from './block/whiteSpaceFormatHandler';\nimport { wordBreakFormatHandler } from './common/wordBreakFormatHandler';\nimport type { FormatHandler } from './FormatHandler';\nimport type {\n    ContentModelFormatMap,\n    FormatApplier,\n    FormatAppliers,\n    FormatHandlerTypeMap,\n    FormatKey,\n    FormatParser,\n    FormatParsers,\n} from 'roosterjs-content-model-types';\n\ntype FormatHandlers = {\n    [Key in FormatKey]: FormatHandler<FormatHandlerTypeMap[Key]>;\n};\n\nconst defaultFormatHandlerMap: FormatHandlers = {\n    backgroundColor: backgroundColorFormatHandler,\n    bold: boldFormatHandler,\n    border: borderFormatHandler,\n    borderBox: borderBoxFormatHandler,\n    boxShadow: boxShadowFormatHandler,\n    dataset: datasetFormatHandler,\n    direction: directionFormatHandler,\n    display: displayFormatHandler,\n    float: floatFormatHandler,\n    fontFamily: fontFamilyFormatHandler,\n    fontSize: fontSizeFormatHandler,\n    entity: entityFormatHandler,\n    htmlAlign: htmlAlignFormatHandler,\n    id: idFormatHandler,\n    italic: italicFormatHandler,\n    letterSpacing: letterSpacingFormatHandler,\n    lineHeight: lineHeightFormatHandler,\n    link: linkFormatHandler,\n    listItemThread: listItemThreadFormatHandler,\n    listLevelThread: listLevelThreadFormatHandler,\n    listStylePosition: listStylePositionFormatHandler,\n    margin: marginFormatHandler,\n    padding: paddingFormatHandler,\n    size: sizeFormatHandler,\n    strike: strikeFormatHandler,\n    superOrSubScript: superOrSubScriptFormatHandler,\n    tableLayout: tableLayoutFormatHandler,\n    tableSpacing: tableSpacingFormatHandler,\n    textAlign: textAlignFormatHandler,\n    textColor: textColorFormatHandler,\n    textColorOnTableCell: textColorOnTableCellFormatHandler,\n    underline: underlineFormatHandler,\n    verticalAlign: verticalAlignFormatHandler,\n    whiteSpace: whiteSpaceFormatHandler,\n    wordBreak: wordBreakFormatHandler,\n};\n\nconst styleBasedSegmentFormats: (keyof FormatHandlerTypeMap)[] = [\n    'letterSpacing',\n    'fontFamily',\n    'fontSize',\n];\n\nconst elementBasedSegmentFormats: (keyof FormatHandlerTypeMap)[] = [\n    'strike',\n    'underline',\n    'superOrSubScript',\n    'italic',\n    'bold',\n];\nconst sharedBlockFormats: (keyof FormatHandlerTypeMap)[] = [\n    'direction',\n    'textAlign',\n    'lineHeight',\n    'whiteSpace',\n];\nconst sharedContainerFormats: (keyof FormatHandlerTypeMap)[] = [\n    'backgroundColor',\n    'margin',\n    'padding',\n    'border',\n];\n\n/**\n * @internal\n */\nexport const defaultFormatKeysPerCategory: {\n    [key in keyof ContentModelFormatMap]: (keyof FormatHandlerTypeMap)[];\n} = {\n    block: sharedBlockFormats,\n    listItem: ['listItemThread'],\n    listItemElement: [...sharedBlockFormats, 'direction', 'textAlign', 'lineHeight', 'margin'],\n    listLevel: [\n        'listLevelThread',\n        'direction',\n        'textAlign',\n        'margin',\n        'padding',\n        'listStylePosition',\n        'backgroundColor',\n    ],\n    styleBasedSegment: [...styleBasedSegmentFormats, 'textColor', 'backgroundColor', 'lineHeight'],\n    elementBasedSegment: elementBasedSegmentFormats,\n    segment: [\n        ...styleBasedSegmentFormats,\n        ...elementBasedSegmentFormats,\n        'textColor',\n        'backgroundColor',\n        'lineHeight',\n    ],\n    segmentOnBlock: [...styleBasedSegmentFormats, ...elementBasedSegmentFormats, 'textColor'],\n    segmentOnTableCell: [\n        ...styleBasedSegmentFormats,\n        ...elementBasedSegmentFormats,\n        'textColorOnTableCell',\n    ],\n    tableCell: [\n        'border',\n        'backgroundColor',\n        'padding',\n        'verticalAlign',\n        'wordBreak',\n        'textColor',\n        'htmlAlign',\n        'size',\n    ],\n    tableRow: ['backgroundColor'],\n    table: [\n        'id',\n        'border',\n        'backgroundColor',\n        'display',\n        'htmlAlign',\n        'margin',\n        'size',\n        'tableLayout',\n    ],\n    tableBorder: ['borderBox', 'tableSpacing'],\n    tableCellBorder: ['borderBox'],\n    image: [\n        'id',\n        'size',\n        'margin',\n        'padding',\n        'borderBox',\n        'border',\n        'boxShadow',\n        'display',\n        'float',\n        'verticalAlign',\n    ],\n    link: [\n        'link',\n        'textColor',\n        'underline',\n        'display',\n        'margin',\n        'padding',\n        'backgroundColor',\n        'border',\n        'size',\n        'textAlign',\n    ],\n    segmentUnderLink: ['textColor'],\n    code: ['fontFamily', 'display'],\n    dataset: ['dataset'],\n    divider: [...sharedBlockFormats, ...sharedContainerFormats, 'display', 'size', 'htmlAlign'],\n    container: [...sharedContainerFormats, 'htmlAlign', 'size', 'display'],\n    entity: ['entity'],\n};\n\n/**\n * @internal\n */\nexport const defaultFormatParsers: FormatParsers = getObjectKeys(defaultFormatHandlerMap).reduce(\n    (result, key) => {\n        result[key] = defaultFormatHandlerMap[key].parse as FormatParser<any>;\n        return result;\n    },\n    <FormatParsers>{}\n);\n\n/**\n * @internal\n */\nexport const defaultFormatAppliers: FormatAppliers = getObjectKeys(defaultFormatHandlerMap).reduce(\n    (result, key) => {\n        result[key] = defaultFormatHandlerMap[key].apply as FormatApplier<any>;\n        return result;\n    },\n    <FormatAppliers>{}\n);\n","import { generateEntityClassNames, parseEntityClassName } from '../../domUtils/entityUtils';\nimport type { EntityInfoFormat, IdFormat } from 'roosterjs-content-model-types';\nimport type { FormatHandler } from '../FormatHandler';\n\n/**\n * @internal\n */\nexport const entityFormatHandler: FormatHandler<EntityInfoFormat & IdFormat> = {\n    parse: (format, element) => {\n        let isEntity = false;\n\n        element.classList.forEach(name => {\n            isEntity = parseEntityClassName(name, format) || isEntity;\n        });\n\n        if (!isEntity) {\n            format.isFakeEntity = true;\n            format.isReadonly = !element.isContentEditable;\n        }\n    },\n\n    apply: (format, element) => {\n        if (!format.isFakeEntity) {\n            element.className = generateEntityClassNames(format);\n        }\n\n        if (format.isReadonly) {\n            element.contentEditable = 'false';\n        } else {\n            element.removeAttribute('contenteditable');\n        }\n    },\n};\n","import { getObjectKeys } from '../../domUtils/getObjectKeys';\nimport { isNodeOfType } from '../../domUtils/isNodeOfType';\nimport { OrderedMap, UnorderedMap } from './listLevelMetadataFormatHandler';\nimport type { FormatHandler } from '../FormatHandler';\nimport type { ListMetadataFormat } from 'roosterjs-content-model-types';\n\nconst OrderedMapPlaceholderRegex = /\\$\\{(\\w+)\\}/;\nconst DefaultOrderedListStyles = ['decimal', 'lower-alpha', 'lower-roman'];\nconst DefaultUnorderedListStyles = ['disc', 'circle', 'square'];\nconst CharCodeOfA = 65;\nconst RomanValues: Record<string, number> = {\n    M: 1000,\n    CM: 900,\n    D: 500,\n    CD: 400,\n    C: 100,\n    XC: 90,\n    L: 50,\n    XL: 40,\n    X: 10,\n    IX: 9,\n    V: 5,\n    IV: 4,\n    I: 1,\n};\n\n/**\n * @internal\n */\nexport const listItemMetadataFormatHandler: FormatHandler<ListMetadataFormat> = {\n    parse: () => {\n        // TODO: Handle list style override\n    },\n    apply: (format, element, context) => {\n        const parent = element.parentNode;\n        const depth = context.listFormat.nodeStack.length - 2; // Minus two for the parent element and convert length to index\n\n        if (depth >= 0 && isNodeOfType(parent, 'ELEMENT_NODE') && !parent.style.listStyleType) {\n            const parentTag = parent.tagName;\n            const style =\n                parentTag == 'OL'\n                    ? getOrderedListStyleValue(\n                          OrderedMap[format.orderedStyleType!],\n                          context.listFormat.threadItemCounts[depth]\n                      ) ?? DefaultOrderedListStyles[depth % DefaultOrderedListStyles.length]\n                    : UnorderedMap[format.unorderedStyleType!] ??\n                      DefaultUnorderedListStyles[depth % DefaultUnorderedListStyles.length];\n\n            if (style && (depth > 0 || (style != 'decimal' && style != 'disc'))) {\n                element.style.listStyleType = style;\n            }\n        }\n    },\n};\n\n/**\n * @internal\n * Export for test only\n */\nexport function getOrderedListStyleValue(\n    template: string | undefined,\n    listNumber: number\n): string | undefined {\n    return template\n        ? template.replace(OrderedMapPlaceholderRegex, (match, subStr) => {\n              switch (subStr) {\n                  case 'Number':\n                      return listNumber + '';\n                  case 'LowerAlpha':\n                      return convertDecimalsToAlpha(listNumber, true /*isLowerCase*/);\n                  case 'UpperAlpha':\n                      return convertDecimalsToAlpha(listNumber, false /*isLowerCase*/);\n                  case 'LowerRoman':\n                      return convertDecimalsToRoman(listNumber, true /*isLowerCase*/);\n                  case 'UpperRoman':\n                      return convertDecimalsToRoman(listNumber, false /*isLowerCase*/);\n              }\n\n              return '';\n          })\n        : undefined;\n}\n\nfunction convertDecimalsToAlpha(decimal: number, isLowerCase?: boolean): string {\n    let alpha = '';\n    decimal--;\n\n    while (decimal >= 0) {\n        alpha = String.fromCharCode((decimal % 26) + CharCodeOfA) + alpha;\n        decimal = Math.floor(decimal / 26) - 1;\n    }\n    return isLowerCase ? alpha.toLowerCase() : alpha;\n}\n\nfunction convertDecimalsToRoman(decimal: number, isLowerCase?: boolean) {\n    let romanValue = '';\n    for (let i of getObjectKeys(RomanValues)) {\n        let timesRomanCharAppear = Math.floor(decimal / RomanValues[i]);\n        decimal = decimal - timesRomanCharAppear * RomanValues[i];\n        romanValue = romanValue + i.repeat(timesRomanCharAppear);\n    }\n    return isLowerCase ? romanValue.toLocaleLowerCase() : romanValue;\n}\n","import { isElementOfType } from '../../domUtils/isElementOfType';\nimport { isNodeOfType } from '../../domUtils/isNodeOfType';\nimport type { FormatHandler } from '../FormatHandler';\nimport type { ListThreadFormat } from 'roosterjs-content-model-types';\n\n/**\n * @internal\n */\nexport const listItemThreadFormatHandler: FormatHandler<ListThreadFormat> = {\n    parse: (format, element, context, defaultStyles) => {\n        const { listFormat } = context;\n        const depth = listFormat.levels.length;\n        const display = element.style.display || defaultStyles.display;\n\n        if (display && display != 'list-item') {\n            format.displayForDummyItem = display;\n        } else if (isLiUnderOl(element) && depth > 0) {\n            listFormat.threadItemCounts[depth - 1]++;\n            listFormat.threadItemCounts.splice(depth);\n            listFormat.levels.forEach(level => {\n                // Delete restart number so next list item doesn't need to have this value.\n                // Then it will be treated as a continuous list item to the previous one\n                delete level.format.startNumberOverride;\n            });\n        }\n    },\n    apply: (format, element, context) => {\n        if (format.displayForDummyItem) {\n            element.style.display = format.displayForDummyItem;\n        } else if (isLiUnderOl(element)) {\n            const { listFormat } = context;\n            const { threadItemCounts } = listFormat;\n            const index = listFormat.nodeStack.length - 2; // The first one is always the parent of list, then minus another 1 to convert length to index\n\n            if (index >= 0) {\n                threadItemCounts.splice(index + 1);\n                threadItemCounts[index] = (threadItemCounts[index] ?? 0) + 1;\n            }\n        }\n    },\n};\n\nfunction isLiUnderOl(element: HTMLElement) {\n    return (\n        isElementOfType(element, 'li') &&\n        isNodeOfType(element.parentNode, 'ELEMENT_NODE') &&\n        isElementOfType(element.parentNode, 'ol')\n    );\n}\n","import { BulletListType, NumberingListType } from 'roosterjs-editor-types';\nimport { getObjectKeys } from '../../domUtils/getObjectKeys';\nimport { isElementOfType } from '../../domUtils/isElementOfType';\nimport type { FormatHandler } from '../FormatHandler';\nimport type { ListMetadataFormat } from 'roosterjs-content-model-types';\n\n/**\n * @internal\n */\nexport const OrderedMap: Record<NumberingListType, string> = {\n    [NumberingListType.Decimal]: 'decimal',\n    [NumberingListType.DecimalDash]: '\"${Number}- \"',\n    [NumberingListType.DecimalParenthesis]: '\"${Number}) \"',\n    [NumberingListType.DecimalDoubleParenthesis]: '\"(${Number}) \"',\n    [NumberingListType.LowerAlpha]: 'lower-alpha',\n    [NumberingListType.LowerAlphaDash]: '\"${LowerAlpha}- \"',\n    [NumberingListType.LowerAlphaParenthesis]: '\"${LowerAlpha}) \"',\n    [NumberingListType.LowerAlphaDoubleParenthesis]: '\"(${LowerAlpha}) \"',\n    [NumberingListType.UpperAlpha]: 'upper-alpha',\n    [NumberingListType.UpperAlphaDash]: '\"${UpperAlpha}- \"',\n    [NumberingListType.UpperAlphaParenthesis]: '\"${UpperAlpha}) \"',\n    [NumberingListType.UpperAlphaDoubleParenthesis]: '\"(${UpperAlpha}) \"',\n    [NumberingListType.LowerRoman]: 'lower-roman',\n    [NumberingListType.LowerRomanDash]: '\"${LowerRoman}- \"',\n    [NumberingListType.LowerRomanParenthesis]: '\"${LowerRoman}) \"',\n    [NumberingListType.LowerRomanDoubleParenthesis]: '\"(${LowerRoman}) \"',\n    [NumberingListType.UpperRoman]: 'upper-roman',\n    [NumberingListType.UpperRomanDash]: '\"${UpperRoman}- \"',\n    [NumberingListType.UpperRomanParenthesis]: '\"${UpperRoman}) \"',\n    [NumberingListType.UpperRomanDoubleParenthesis]: '\"(${UpperRoman}) \"',\n};\n\n/**\n * @internal\n */\nexport const UnorderedMap: Record<BulletListType, string> = {\n    [BulletListType.Disc]: 'disc',\n    [BulletListType.Square]: '\"∎ \"',\n    [BulletListType.Circle]: 'circle',\n    [BulletListType.Dash]: '\"- \"',\n    [BulletListType.LongArrow]: '\"➔ \"',\n    [BulletListType.DoubleLongArrow]: '\"➔ \"',\n    [BulletListType.ShortArrow]: '\"➢ \"',\n    [BulletListType.UnfilledArrow]: '\"➪ \"',\n    [BulletListType.Hyphen]: '\"— \"',\n};\n\nconst OLTypeToStyleMap: Record<string, string> = {\n    '1': 'decimal',\n    a: 'lower-alpha',\n    A: 'upper-alpha',\n    i: 'lower-roman',\n    I: 'upper-roman',\n};\n\n/**\n * @internal\n */\nexport const listLevelMetadataFormatHandler: FormatHandler<ListMetadataFormat> = {\n    parse: (format, element) => {\n        const listStyle =\n            element.style.listStyleType ||\n            (isElementOfType(element, 'ol') && OLTypeToStyleMap[element.type]);\n        const tag = element.tagName;\n\n        if (listStyle) {\n            if (tag == 'OL' && format.orderedStyleType === undefined) {\n                const value = getKeyFromValue(OrderedMap, listStyle);\n                format.orderedStyleType =\n                    typeof value === 'undefined' ? undefined : parseInt(value);\n            } else if (tag == 'UL' && format.unorderedStyleType === undefined) {\n                const value = getKeyFromValue(UnorderedMap, listStyle);\n                format.unorderedStyleType =\n                    typeof value === 'undefined' ? undefined : parseInt(value);\n            }\n        }\n    },\n    apply: (format, element) => {\n        const tag = element.tagName;\n        const listType =\n            tag == 'OL'\n                ? OrderedMap[format.orderedStyleType!]\n                : UnorderedMap[format.unorderedStyleType!];\n\n        if (listType && listType.indexOf('\"') < 0) {\n            element.style.listStyleType = listType;\n        }\n    },\n};\n\nfunction getKeyFromValue<K extends string | number, V>(\n    map: Record<K, V>,\n    value: V | undefined\n): string | undefined {\n    const result =\n        value === undefined ? undefined : getObjectKeys(map).filter(key => map[key] == value)[0];\n\n    // During run time the key is always string\n    return (result as any) as string | undefined;\n}\n","import { isElementOfType } from '../../domUtils/isElementOfType';\nimport type { FormatHandler } from '../FormatHandler';\nimport type { ListThreadFormat } from 'roosterjs-content-model-types';\n\n/**\n * @internal\n */\nexport const listLevelThreadFormatHandler: FormatHandler<ListThreadFormat> = {\n    parse: (format, element, context) => {\n        if (isElementOfType(element, 'ol')) {\n            const { listFormat } = context;\n            const { threadItemCounts, levels } = listFormat;\n            const depth = levels.length;\n\n            if (\n                typeof threadItemCounts[depth] === 'number' &&\n                element.start != threadItemCounts[depth] + 1\n            ) {\n                format.startNumberOverride = element.start;\n            }\n\n            threadItemCounts[depth] = element.start - 1;\n        }\n    },\n    apply: (format, element, context) => {\n        const {\n            listFormat: { threadItemCounts, nodeStack },\n        } = context;\n        const depth = nodeStack.length - 1; // The first one is always the parent of list\n\n        if (depth >= 0 && isElementOfType(element, 'ol')) {\n            const startNumber = format.startNumberOverride;\n\n            if (typeof startNumber === 'number') {\n                threadItemCounts[depth] = startNumber - 1;\n            } else if (typeof threadItemCounts[depth] != 'number') {\n                threadItemCounts[depth] = 0;\n            }\n\n            threadItemCounts.splice(depth + 1);\n            element.start = threadItemCounts[depth] + 1;\n        }\n    },\n};\n","import type { FormatHandler } from '../FormatHandler';\nimport type { ListStylePositionFormat } from 'roosterjs-content-model-types';\n\n/**\n * @internal\n */\nexport const listStylePositionFormatHandler: FormatHandler<ListStylePositionFormat> = {\n    parse: (format, element) => {\n        const listStylePosition = element.style.listStylePosition;\n\n        if (listStylePosition) {\n            format.listStylePosition = listStylePosition;\n        }\n    },\n    apply: (format, element) => {\n        if (format.listStylePosition) {\n            element.style.listStylePosition = format.listStylePosition;\n        }\n    },\n};\n","import { moveChildNodes } from 'roosterjs-editor-dom';\nimport type { BoldFormat } from 'roosterjs-content-model-types';\nimport type { FormatHandler } from '../FormatHandler';\n\n/**\n * @internal\n */\nexport const boldFormatHandler: FormatHandler<BoldFormat> = {\n    parse: (format, element, context, defaultStyle) => {\n        const fontWeight = element.style.fontWeight || defaultStyle.fontWeight;\n\n        if (fontWeight) {\n            format.fontWeight = fontWeight;\n        }\n    },\n    apply: (format, element, context) => {\n        if (typeof format.fontWeight === 'undefined') {\n            return;\n        }\n\n        const blockFontWeight = context.implicitFormat.fontWeight;\n\n        if (\n            (blockFontWeight && blockFontWeight != format.fontWeight) ||\n            (!blockFontWeight && format.fontWeight && format.fontWeight != 'normal')\n        ) {\n            if (format.fontWeight == 'bold') {\n                const b = element.ownerDocument.createElement('b');\n                moveChildNodes(b, element);\n                element.appendChild(b);\n            } else {\n                element.style.fontWeight = format.fontWeight || 'normal';\n            }\n        }\n    },\n};\n","import type { FontFamilyFormat } from 'roosterjs-content-model-types';\nimport type { FormatHandler } from '../FormatHandler';\n\n/**\n * @internal\n */\nexport const fontFamilyFormatHandler: FormatHandler<FontFamilyFormat> = {\n    parse: (format, element, context, defaultStyle) => {\n        const fontFamily = element.style.fontFamily || defaultStyle.fontFamily;\n\n        if (fontFamily && fontFamily != 'inherit') {\n            format.fontFamily = fontFamily;\n        }\n    },\n    apply: (format, element, context) => {\n        if (format.fontFamily && format.fontFamily != context.implicitFormat.fontFamily) {\n            element.style.fontFamily = format.fontFamily;\n        }\n    },\n};\n","import { isSuperOrSubScript } from './superOrSubScriptFormatHandler';\nimport { parseValueWithUnit } from '../utils/parseValueWithUnit';\nimport type { FontSizeFormat } from 'roosterjs-content-model-types';\nimport type { FormatHandler } from '../FormatHandler';\n\n/**\n * @internal\n */\nexport const fontSizeFormatHandler: FormatHandler<FontSizeFormat> = {\n    parse: (format, element, context, defaultStyle) => {\n        const fontSize = element.style.fontSize || defaultStyle.fontSize;\n        const verticalAlign = element.style.verticalAlign || defaultStyle.verticalAlign;\n\n        // when font size is 'smaller' and the style is for superscript/subscript,\n        // the font size will be handled by superOrSubScript handler\n        if (fontSize && !isSuperOrSubScript(fontSize, verticalAlign) && fontSize != 'inherit') {\n            if (element.style.fontSize) {\n                format.fontSize = normalizeFontSize(fontSize, context.segmentFormat.fontSize);\n            } else if (defaultStyle.fontSize) {\n                format.fontSize = fontSize;\n            }\n        }\n    },\n    apply: (format, element, context) => {\n        if (format.fontSize && format.fontSize != context.implicitFormat.fontSize) {\n            element.style.fontSize = format.fontSize;\n        }\n    },\n};\n\n// https://developer.mozilla.org/en-US/docs/Web/CSS/font-size\nconst KnownFontSizes: Record<string, string> = {\n    'xx-small': '6.75pt',\n    'x-small': '7.5pt',\n    small: '9.75pt',\n    medium: '12pt',\n    large: '13.5pt',\n    'x-large': '18pt',\n    'xx-large': '24pt',\n    'xxx-large': '36pt',\n};\n\nfunction normalizeFontSize(fontSize: string, contextFont: string | undefined): string | undefined {\n    const knownFontSize = KnownFontSizes[fontSize];\n\n    if (knownFontSize) {\n        return knownFontSize;\n    } else if (\n        fontSize == 'smaller' ||\n        fontSize == 'larger' ||\n        fontSize.endsWith('em') ||\n        fontSize.endsWith('%')\n    ) {\n        if (!contextFont) {\n            return undefined;\n        } else {\n            const existingFontSize = parseValueWithUnit(contextFont, undefined /*element*/, 'px');\n\n            if (existingFontSize) {\n                switch (fontSize) {\n                    case 'smaller':\n                        return Math.round((existingFontSize * 500) / 6) / 100 + 'px';\n                    case 'larger':\n                        return Math.round((existingFontSize * 600) / 5) / 100 + 'px';\n                    default:\n                        return parseValueWithUnit(fontSize, existingFontSize, 'px') + 'px';\n                }\n            }\n        }\n    } else if (fontSize == 'inherit' || fontSize == 'revert' || fontSize == 'unset') {\n        return undefined;\n    } else {\n        return fontSize;\n    }\n}\n","import { moveChildNodes } from 'roosterjs-editor-dom';\nimport type { FormatHandler } from '../FormatHandler';\nimport type { ItalicFormat } from 'roosterjs-content-model-types';\n\n/**\n * @internal\n */\nexport const italicFormatHandler: FormatHandler<ItalicFormat> = {\n    parse: (format, element, context, defaultStyle) => {\n        const fontStyle = element.style.fontStyle || defaultStyle.fontStyle;\n\n        if (fontStyle == 'italic' || fontStyle == 'oblique') {\n            format.italic = true;\n        } else if (fontStyle == 'initial' || fontStyle == 'normal') {\n            format.italic = false;\n        }\n    },\n    apply: (format, element, context) => {\n        if (typeof format.italic === 'undefined') {\n            return;\n        }\n\n        const implicitItalic = context.implicitFormat.italic;\n\n        if (!!implicitItalic != !!format.italic) {\n            if (format.italic) {\n                const i = element.ownerDocument.createElement('i');\n                moveChildNodes(i, element);\n                element.appendChild(i);\n            } else {\n                element.style.fontStyle = 'normal';\n            }\n        }\n    },\n};\n","import type { FormatHandler } from '../FormatHandler';\nimport type { LetterSpacingFormat } from 'roosterjs-content-model-types';\n\n/**\n * @internal\n */\nexport const letterSpacingFormatHandler: FormatHandler<LetterSpacingFormat> = {\n    parse: (format, element, context, defaultStyle) => {\n        const letterSpacing = element.style.letterSpacing || defaultStyle.letterSpacing;\n\n        if (letterSpacing) {\n            format.letterSpacing = letterSpacing;\n        }\n    },\n    apply: (format, element, context) => {\n        if (format.letterSpacing) {\n            element.style.letterSpacing = format.letterSpacing;\n        }\n    },\n};\n","import { isElementOfType } from '../../domUtils/isElementOfType';\nimport type { FormatHandler } from '../FormatHandler';\nimport type { LinkFormat } from 'roosterjs-content-model-types';\n\n/**\n * @internal\n */\nexport const linkFormatHandler: FormatHandler<LinkFormat> = {\n    parse: (format, element) => {\n        if (isElementOfType(element, 'a')) {\n            const name = element.name;\n            const href = element.getAttribute('href'); // Use getAttribute to get original HREF but not the resolved absolute url\n            const target = element.target;\n            const rel = element.rel;\n            const id = element.id;\n            const className = element.className;\n            const title = element.title;\n\n            if (name) {\n                format.name = name;\n            }\n\n            if (href) {\n                format.href = href;\n            }\n\n            if (target) {\n                format.target = target;\n            }\n\n            if (id) {\n                format.anchorId = id;\n            }\n\n            if (rel) {\n                format.relationship = rel;\n            }\n\n            if (title) {\n                format.anchorTitle = title;\n            }\n\n            if (className) {\n                format.anchorClass = className;\n            }\n        }\n    },\n    apply: (format, element) => {\n        if (isElementOfType(element, 'a') && format.href) {\n            element.href = format.href;\n\n            if (format.name) {\n                element.name = format.name;\n            }\n\n            if (format.target) {\n                element.target = format.target;\n            }\n\n            if (format.anchorId) {\n                element.id = format.anchorId;\n            }\n\n            if (format.anchorClass) {\n                element.className = format.anchorClass;\n            }\n\n            if (format.anchorTitle) {\n                element.title = format.anchorTitle;\n            }\n\n            if (format.relationship) {\n                element.rel = format.relationship;\n            }\n        }\n    },\n};\n","import { moveChildNodes } from 'roosterjs-editor-dom';\nimport type { FormatHandler } from '../FormatHandler';\nimport type { StrikeFormat } from 'roosterjs-content-model-types';\n\n/**\n * @internal\n */\nexport const strikeFormatHandler: FormatHandler<StrikeFormat> = {\n    parse: (format, element, context, defaultStyle) => {\n        const textDecoration = element.style.textDecoration || defaultStyle.textDecoration;\n\n        if (textDecoration?.indexOf('line-through')! >= 0) {\n            format.strikethrough = true;\n        }\n    },\n    apply: (format, element) => {\n        if (format.strikethrough) {\n            const strike = element.ownerDocument.createElement('s');\n            moveChildNodes(strike, element);\n            element.appendChild(strike);\n        }\n    },\n};\n","import { moveChildNodes } from 'roosterjs-editor-dom';\nimport type { FormatHandler } from '../FormatHandler';\nimport type { SuperOrSubScriptFormat } from 'roosterjs-content-model-types';\n\n/**\n * @internal\n */\nexport const superOrSubScriptFormatHandler: FormatHandler<SuperOrSubScriptFormat> = {\n    parse: (format, element, context, defaultStyle) => {\n        const verticalAlign = element.style.verticalAlign || defaultStyle.verticalAlign;\n        const fontSize = element.style.fontSize || defaultStyle.fontSize;\n\n        if (isSuperOrSubScript(fontSize, verticalAlign)) {\n            format.superOrSubScriptSequence = (format.superOrSubScriptSequence || '')\n                .split(' ')\n                .concat(verticalAlign)\n                .join(' ')\n                .trim();\n        }\n    },\n    apply: (format, element) => {\n        if (format.superOrSubScriptSequence) {\n            format.superOrSubScriptSequence\n                .split(' ')\n                .reverse()\n                .forEach(value => {\n                    const tagName = value == 'super' ? 'sup' : value == 'sub' ? 'sub' : null;\n\n                    if (tagName) {\n                        const wrapper = element.ownerDocument.createElement(tagName);\n                        moveChildNodes(wrapper, element);\n                        element.appendChild(wrapper);\n                    }\n                });\n        }\n    },\n};\n\n/**\n * @internal\n */\nexport function isSuperOrSubScript(\n    fontSize: string | undefined,\n    verticalAlign: string | undefined\n): verticalAlign is 'sub' | 'super' {\n    return fontSize == 'smaller' && (verticalAlign == 'sub' || verticalAlign == 'super');\n}\n","import { getColor, setColor } from '../utils/color';\nimport type { FormatHandler } from '../FormatHandler';\nimport type { TextColorFormat } from 'roosterjs-content-model-types';\n\n/**\n * @internal\n */\nexport const textColorFormatHandler: FormatHandler<TextColorFormat> = {\n    parse: (format, element, context, defaultStyle) => {\n        const textColor =\n            getColor(\n                element,\n                false /*isBackground*/,\n                context.darkColorHandler,\n                !!context.isDarkMode\n            ) || defaultStyle.color;\n\n        if (textColor && textColor != 'inherit') {\n            format.textColor = textColor;\n        }\n    },\n    apply: (format, element, context) => {\n        const implicitColor = context.implicitFormat.textColor;\n\n        if (format.textColor && format.textColor != implicitColor) {\n            setColor(\n                element,\n                format.textColor,\n                false /*isBackground*/,\n                context.darkColorHandler,\n                !!context.isDarkMode\n            );\n        }\n    },\n};\n","import { moveChildNodes } from 'roosterjs-editor-dom';\nimport type { FormatHandler } from '../FormatHandler';\nimport type { UnderlineFormat } from 'roosterjs-content-model-types';\n\n/**\n * @internal\n */\nexport const underlineFormatHandler: FormatHandler<UnderlineFormat> = {\n    parse: (format, element, context, defaultStyle) => {\n        const textDecoration = element.style.textDecoration || defaultStyle.textDecoration;\n\n        if (textDecoration?.indexOf('underline')! >= 0) {\n            format.underline = true;\n        } else if (element.tagName == 'A' && textDecoration == 'none') {\n            format.underline = false;\n        }\n    },\n    apply: (format, element, context) => {\n        if (typeof format.underline === 'undefined') {\n            return;\n        }\n\n        const blockUnderline = context.implicitFormat.underline;\n\n        if (!!blockUnderline != !!format.underline) {\n            if (format.underline) {\n                const u = element.ownerDocument.createElement('u');\n                moveChildNodes(u, element);\n                element.appendChild(u);\n            } else {\n                element.style.textDecoration = 'none';\n            }\n        }\n    },\n};\n","import type { FormatHandler } from '../FormatHandler';\nimport type { TableLayoutFormat } from 'roosterjs-content-model-types';\n\n/**\n * @internal\n */\nexport const tableLayoutFormatHandler: FormatHandler<TableLayoutFormat> = {\n    parse: (format, element) => {\n        const tableLayout = element.style.tableLayout;\n        if (tableLayout && tableLayout != 'inherit') {\n            format.tableLayout = tableLayout;\n        }\n    },\n    apply: (format, element) => {\n        if (format.tableLayout) {\n            element.style.tableLayout = format.tableLayout;\n        }\n    },\n};\n","import type { FormatHandler } from '../FormatHandler';\nimport type { SpacingFormat } from 'roosterjs-content-model-types';\n\nconst BorderCollapsed = 'collapse';\n\n/**\n * @internal\n */\nexport const tableSpacingFormatHandler: FormatHandler<SpacingFormat> = {\n    parse: (format, element) => {\n        if (element.style.borderCollapse == BorderCollapsed) {\n            format.borderCollapse = true;\n        }\n    },\n    apply: (format, element) => {\n        if (format.borderCollapse) {\n            element.style.borderCollapse = BorderCollapsed;\n            element.style.borderSpacing = '0';\n            element.style.boxSizing = 'border-box';\n        }\n    },\n};\n","import type { FormatHandler } from '../FormatHandler';\nimport type { TextColorFormat } from 'roosterjs-content-model-types';\n\n/**\n * @internal\n */\nexport const textColorOnTableCellFormatHandler: FormatHandler<TextColorFormat> = {\n    parse: (format, element) => {\n        if (element.style.color) {\n            // Delete color from format since text color on TD/TH will be handled by separate code\n            // and text color on segment format context need to be reset so that it will not inherit\n            // value outer container\n            delete format.textColor;\n        }\n    },\n    apply: () => {},\n};\n","import type { DarkColorHandler } from 'roosterjs-editor-types';\n\n/**\n * List of deprecated colors\n */\nexport const DeprecatedColors: string[] = [\n    'inactiveborder',\n    'activeborder',\n    'inactivecaptiontext',\n    'inactivecaption',\n    'activecaption',\n    'appworkspace',\n    'infobackground',\n    'background',\n    'buttonhighlight',\n    'buttonshadow',\n    'captiontext',\n    'infotext',\n    'menutext',\n    'menu',\n    'scrollbar',\n    'threeddarkshadow',\n    'threedface',\n    'threedhighlight',\n    'threedlightshadow',\n    'threedfhadow',\n    'windowtext',\n    'windowframe',\n    'window',\n];\n\n/**\n * @internal\n */\nexport function getColor(\n    element: HTMLElement,\n    isBackground: boolean,\n    darkColorHandler: DarkColorHandler | undefined | null,\n    isDarkMode: boolean\n): string | undefined {\n    let color: string | undefined;\n\n    if (!color) {\n        color =\n            (darkColorHandler &&\n                tryGetFontColor(element, isDarkMode, darkColorHandler, isBackground)) ||\n            (isBackground ? element.style.backgroundColor : element.style.color) ||\n            element.getAttribute(isBackground ? 'bgcolor' : 'color') ||\n            undefined;\n    }\n\n    if (color && DeprecatedColors.indexOf(color) > -1) {\n        color = undefined;\n    }\n\n    if (darkColorHandler) {\n        color = darkColorHandler.parseColorValue(color).lightModeColor;\n    }\n\n    return color;\n}\n\n/**\n * @internal\n */\nexport function setColor(\n    element: HTMLElement,\n    lightModeColor: string,\n    isBackground: boolean,\n    darkColorHandler: DarkColorHandler | undefined | null,\n    isDarkMode: boolean\n) {\n    const effectiveColor = darkColorHandler\n        ? darkColorHandler.registerColor(lightModeColor, isDarkMode)\n        : lightModeColor;\n\n    if (isBackground) {\n        element.style.backgroundColor = effectiveColor;\n    } else {\n        element.style.color = effectiveColor;\n    }\n}\n\n/**\n * There is a known issue that when input with IME in Chrome, it is possible Chrome insert a new FONT tag with colors.\n * If editor is in dark mode, this color will cause the FONT tag doesn't have light mode color info so that after convert\n * to light mode the color will be wrong.\n * To workaround it, we check if this is a known color (for light mode with VariableBasedDarkColor enabled, all used colors\n * are stored in darkColorHandler), then use the related light mode color instead.\n */\nfunction tryGetFontColor(\n    element: HTMLElement,\n    isDarkMode: boolean,\n    darkColorHandler: DarkColorHandler,\n    isBackground: boolean\n) {\n    let darkColor: string | null;\n\n    return element.tagName == 'FONT' &&\n        !element.style.getPropertyValue(isBackground ? 'background-color' : 'color') &&\n        isDarkMode &&\n        (darkColor = element.getAttribute(isBackground ? 'bgcolor' : 'color'))\n        ? darkColorHandler.findLightColorFromDarkColor(darkColor)\n        : null;\n}\n","/**\n * @internal\n */\nexport const ResultMap = {\n    start: {\n        ltr: 'left',\n        rtl: 'right',\n    },\n    center: {\n        ltr: 'center',\n        rtl: 'center',\n    },\n    end: {\n        ltr: 'right',\n        rtl: 'left',\n    },\n    initial: {\n        ltr: 'initial',\n        rtl: 'initial',\n    },\n    justify: {\n        ltr: 'justify',\n        rtl: 'justify',\n    },\n};\n\n/**\n * @internal\n */\nexport function calcAlign(align: string, dir?: 'ltr' | 'rtl') {\n    switch (align) {\n        case 'center':\n            return 'center';\n\n        case 'left':\n            return dir == 'rtl' ? 'end' : 'start';\n\n        case 'right':\n            return dir == 'rtl' ? 'start' : 'end';\n\n        case 'start':\n        case 'end':\n            return align;\n\n        case 'justify':\n        case 'initial':\n            return align;\n\n        default:\n            return undefined;\n    }\n}\n","const MarginValueRegex = /(-?\\d+(\\.\\d+)?)([a-z]+|%)/;\n\n/**\n * Parse unit value with its unit\n * @param value The source value to parse\n * @param currentSizePxOrElement The source element which has this unit value, or current font size (in px) from context.\n * @param resultUnit Unit for result, can be px or pt. @default px\n */\nexport function parseValueWithUnit(\n    value: string = '',\n    currentSizePxOrElement?: number | HTMLElement,\n    resultUnit: 'px' | 'pt' = 'px'\n): number {\n    const match = MarginValueRegex.exec(value);\n    let result = 0;\n\n    if (match) {\n        const [_, numStr, __, unit] = match;\n        const num = parseFloat(numStr);\n\n        switch (unit) {\n            case 'px':\n                result = num;\n                break;\n            case 'pt':\n                result = ptToPx(num);\n                break;\n            case 'em':\n                result = getFontSize(currentSizePxOrElement) * num;\n                break;\n            case 'ex':\n                result = (getFontSize(currentSizePxOrElement) * num) / 2;\n                break;\n            case '%':\n                result = (getFontSize(currentSizePxOrElement) * num) / 100;\n                break;\n            default:\n                // TODO: Support more unit if need\n                break;\n        }\n    }\n\n    if (result > 0 && resultUnit == 'pt') {\n        result = pxToPt(result);\n    }\n\n    return result;\n}\n\nfunction getFontSize(currentSizeOrElement?: number | HTMLElement): number {\n    if (typeof currentSizeOrElement === 'undefined') {\n        return 0;\n    } else if (typeof currentSizeOrElement === 'number') {\n        return currentSizeOrElement;\n    } else {\n        const styleInPt =\n            currentSizeOrElement.ownerDocument.defaultView?.getComputedStyle(currentSizeOrElement)\n                .fontSize ?? '';\n        const floatInPt = parseFloat(styleInPt);\n        const floatInPx = ptToPx(floatInPt);\n\n        return floatInPx;\n    }\n}\n\nfunction ptToPx(pt: number): number {\n    return Math.round((pt * 4000) / 3) / 1000;\n}\n\nfunction pxToPt(px: number) {\n    return Math.round((px * 3000) / 4) / 1000;\n}\n","export { domToContentModel } from './domToModel/domToContentModel';\nexport { contentModelToDom } from './modelToDom/contentModelToDom';\n\nexport {\n    childProcessor,\n    handleRegularSelection,\n    processChildNode,\n} from './domToModel/processors/childProcessor';\nexport { entityProcessor } from './domToModel/processors/entityProcessor';\nexport { tableProcessor } from './domToModel/processors/tableProcessor';\nexport { getRegularSelectionOffsets } from './domToModel/utils/getRegularSelectionOffsets';\nexport { parseFormat } from './domToModel/utils/parseFormat';\nexport { areSameFormats } from './domToModel/utils/areSameFormats';\n\nexport { updateMetadata, hasMetadata } from './domUtils/metadata/updateMetadata';\nexport { updateListMetadata } from './domUtils/metadata/updateListMetadata';\nexport { isNodeOfType, NodeTypeMap } from './domUtils/isNodeOfType';\nexport { isElementOfType } from './domUtils/isElementOfType';\nexport { getObjectKeys } from './domUtils/getObjectKeys';\nexport { default as toArray } from './domUtils/toArray';\n\nexport { createBr } from './modelApi/creators/createBr';\nexport { createListItem } from './modelApi/creators/createListItem';\nexport { createFormatContainer } from './modelApi/creators/createFormatContainer';\nexport { createParagraph } from './modelApi/creators/createParagraph';\nexport { createSelectionMarker } from './modelApi/creators/createSelectionMarker';\nexport { createTable } from './modelApi/creators/createTable';\nexport { createTableCell } from './modelApi/creators/createTableCell';\nexport { createText } from './modelApi/creators/createText';\nexport { createImage } from './modelApi/creators/createImage';\nexport { createContentModelDocument } from './modelApi/creators/createContentModelDocument';\nexport { createParagraphDecorator } from './modelApi/creators/createParagraphDecorator';\nexport { createGeneralSegment } from './modelApi/creators/createGeneralSegment';\nexport { createGeneralBlock } from './modelApi/creators/createGeneralBlock';\nexport { createEntity } from './modelApi/creators/createEntity';\nexport { createDivider } from './modelApi/creators/createDivider';\nexport { createListLevel } from './modelApi/creators/createListLevel';\n\nexport { addBlock } from './modelApi/common/addBlock';\nexport { addCode } from './modelApi/common/addDecorators';\nexport { addLink } from './modelApi/common/addDecorators';\nexport { ensureParagraph } from './modelApi/common/ensureParagraph';\n\nexport { normalizeContentModel } from './modelApi/common/normalizeContentModel';\nexport { isGeneralSegment } from './modelApi/common/isGeneralSegment';\nexport { unwrapBlock } from './modelApi/common/unwrapBlock';\nexport { addSegment } from './modelApi/common/addSegment';\nexport { isWhiteSpacePreserved } from './modelApi/common/isWhiteSpacePreserved';\nexport { normalizeSingleSegment } from './modelApi/common/normalizeSegment';\nexport { applySegmentFormatToElement } from './modelApi/common/applySegmentFormatToElement';\n\nexport { setParagraphNotImplicit } from './modelApi/block/setParagraphNotImplicit';\n\nexport { parseValueWithUnit } from './formatHandlers/utils/parseValueWithUnit';\nexport { BorderKeys } from './formatHandlers/common/borderFormatHandler';\nexport { DeprecatedColors } from './formatHandlers/utils/color';\n\nexport {\n    createDomToModelContext,\n    createDomToModelContextWithConfig,\n    createDomToModelConfig,\n} from './domToModel/context/createDomToModelContext';\nexport {\n    createModelToDomContext,\n    createModelToDomContextWithConfig,\n    createModelToDomConfig,\n} from './modelToDom/context/createModelToDomContext';\n","import type { ContentModelBlock } from 'roosterjs-content-model-types';\n\n/**\n * For a given block, if it is a paragraph, set it to be not-implicit\n * @param block The block to check\n */\nexport function setParagraphNotImplicit(block: ContentModelBlock) {\n    if (block.blockType == 'Paragraph' && block.isImplicit) {\n        block.isImplicit = false;\n    }\n}\n","import type { ContentModelBlock, ContentModelBlockGroup } from 'roosterjs-content-model-types';\n\n/**\n * Add a given block to block group\n * @param group The block group to add block into\n * @param block The block to add\n */\nexport function addBlock(group: ContentModelBlockGroup, block: ContentModelBlock) {\n    group.blocks.push(block);\n}\n","import type {\n    ContentModelCode,\n    ContentModelLink,\n    ContentModelSegment,\n    DomToModelDecoratorContext,\n} from 'roosterjs-content-model-types';\n\n/**\n * @internal\n */\nexport function addLink(segment: ContentModelSegment, link: ContentModelLink) {\n    if (link.format.href) {\n        segment.link = {\n            format: { ...link.format },\n            dataset: { ...link.dataset },\n        };\n    }\n}\n\n/**\n * Add a code decorator into segment if any\n * @param segment The segment to add decorator to\n * @param code The code decorator to add\n */\nexport function addCode(segment: ContentModelSegment, code: ContentModelCode) {\n    if (code.format.fontFamily) {\n        segment.code = {\n            format: { ...code.format },\n        };\n    }\n}\n\n/**\n * @internal\n */\nexport function addDecorators(segment: ContentModelSegment, context: DomToModelDecoratorContext) {\n    addLink(segment, context.link);\n    addCode(segment, context.code);\n}\n","import { ensureParagraph } from './ensureParagraph';\nimport type {\n    ContentModelBlockFormat,\n    ContentModelBlockGroup,\n    ContentModelParagraph,\n    ContentModelSegment,\n} from 'roosterjs-content-model-types';\n\n/**\n * Add a given segment into a paragraph from its parent group. If the last block of the given group is not paragraph, create a new paragraph.\n * @param group The parent block group of the paragraph to add segment into\n * @param newSegment The segment to add\n * @param blockFormat The block format used for creating a new paragraph when need\n * @returns The parent paragraph where the segment is added to\n */\nexport function addSegment(\n    group: ContentModelBlockGroup,\n    newSegment: ContentModelSegment,\n    blockFormat?: ContentModelBlockFormat\n): ContentModelParagraph {\n    const paragraph = ensureParagraph(group, blockFormat);\n    const lastSegment = paragraph.segments[paragraph.segments.length - 1];\n\n    if (newSegment.segmentType == 'SelectionMarker') {\n        if (!lastSegment || !lastSegment.isSelected) {\n            paragraph.segments.push(newSegment);\n        }\n    } else {\n        if (newSegment.isSelected && lastSegment?.segmentType == 'SelectionMarker') {\n            paragraph.segments.pop();\n        }\n\n        paragraph.segments.push(newSegment);\n    }\n\n    return paragraph;\n}\n","import { applyFormat } from '../../modelToDom/utils/applyFormat';\nimport { createModelToDomContext } from '../../modelToDom/context/createModelToDomContext';\nimport type { ContentModelSegmentFormat } from 'roosterjs-content-model-types';\n\n/**\n * Format an existing HTML element using Segment Format\n * @param element The element to format\n * @param format The format to apply\n */\nexport function applySegmentFormatToElement(\n    element: HTMLElement,\n    format: ContentModelSegmentFormat\n) {\n    const context = createModelToDomContext();\n    applyFormat(element, context.formatAppliers.segment, format, context);\n}\n","import { addBlock } from './addBlock';\nimport { createParagraph } from '../creators/createParagraph';\nimport type {\n    ContentModelBlockFormat,\n    ContentModelBlockGroup,\n    ContentModelParagraph,\n} from 'roosterjs-content-model-types';\n\n/**\n * Ensure there is a Paragraph that can insert segments in a Content Model Block Group\n * @param group The parent block group of the target paragraph\n * @param blockFormat Format of the paragraph. This is only used if we need to create a new paragraph\n */\nexport function ensureParagraph(\n    group: ContentModelBlockGroup,\n    blockFormat?: ContentModelBlockFormat\n): ContentModelParagraph {\n    const lastBlock = group.blocks[group.blocks.length - 1];\n\n    if (lastBlock?.blockType == 'Paragraph') {\n        return lastBlock;\n    } else {\n        const paragraph = createParagraph(true, blockFormat);\n        addBlock(group, paragraph);\n\n        return paragraph;\n    }\n}\n","// A regex to match text that only has space and CR\n// We use real space char \" \" (\\u0020) here but not \"\\s\" since \"\\s\" will also match \"&nbsp;\" (\\u00A0) which is something we need to keep\nconst SPACE_TEXT_REGEX = /^[\\r\\n\\t ]*$/;\n\n/**\n * @internal\n * Check if the given string only has space, including line breaks.\n * @param txt The string to check\n */\nexport function hasSpacesOnly(txt: string): boolean {\n    return SPACE_TEXT_REGEX.test(txt);\n}\n","import type {\n    ContentModelBlock,\n    ContentModelBlockGroup,\n    ContentModelSegment,\n} from 'roosterjs-content-model-types';\n\n/**\n * @internal\n */\nexport function isBlockEmpty(block: ContentModelBlock): boolean {\n    switch (block.blockType) {\n        case 'Paragraph':\n            return block.segments.length == 0;\n\n        case 'Table':\n            return block.rows.every(row => row.cells.length == 0);\n\n        case 'BlockGroup':\n            return isBlockGroupEmpty(block);\n\n        case 'Entity':\n            return false;\n\n        default:\n            return false;\n    }\n}\n\n/**\n * @internal\n */\nexport function isBlockGroupEmpty(group: ContentModelBlockGroup): boolean {\n    switch (group.blockGroupType) {\n        case 'FormatContainer':\n            // Format Container of DIV is a container for style, so we always treat it as not empty\n            return group.tagName == 'div' ? false : group.blocks.every(isBlockEmpty);\n\n        case 'ListItem':\n            return group.blocks.every(isBlockEmpty);\n\n        case 'Document':\n        case 'General':\n        case 'TableCell':\n            return false;\n\n        default:\n            return true;\n    }\n}\n\n/**\n * @internal\n */\nexport function isSegmentEmpty(segment: ContentModelSegment): boolean {\n    switch (segment.segmentType) {\n        case 'Text':\n            return !segment.text;\n\n        case 'Image':\n            return !segment.src;\n\n        default:\n            return false;\n    }\n}\n\n/**\n * @internal\n */\nexport function isEmpty(\n    model: ContentModelBlock | ContentModelBlockGroup | ContentModelSegment\n): boolean {\n    if (isBlockGroup(model)) {\n        return isBlockGroupEmpty(model);\n    } else if (isBlock(model)) {\n        return isBlockEmpty(model);\n    } else if (isSegment(model)) {\n        return isSegmentEmpty(model);\n    }\n\n    return false;\n}\n\nfunction isSegment(\n    model: ContentModelBlock | ContentModelBlockGroup | ContentModelSegment\n): model is ContentModelSegment {\n    return typeof (<ContentModelSegment>model).segmentType === 'string';\n}\n\nfunction isBlock(\n    model: ContentModelBlock | ContentModelBlockGroup | ContentModelSegment\n): model is ContentModelBlock {\n    return typeof (<ContentModelBlock>model).blockType === 'string';\n}\n\nfunction isBlockGroup(\n    model: ContentModelBlock | ContentModelBlockGroup | ContentModelSegment\n): model is ContentModelBlockGroup {\n    return typeof (<ContentModelBlockGroup>model).blockGroupType === 'string';\n}\n","import type {\n    ContentModelBlockGroup,\n    ContentModelGeneralSegment,\n} from 'roosterjs-content-model-types';\n\n/**\n * Check if the given block group is a general segment\n * @param group The group to check\n */\nexport function isGeneralSegment(\n    group: ContentModelBlockGroup | ContentModelGeneralSegment\n): group is ContentModelGeneralSegment {\n    return (\n        group.blockGroupType == 'General' &&\n        (<ContentModelGeneralSegment>group).segmentType == 'General'\n    );\n}\n","import type { ContentModelParagraph } from 'roosterjs-content-model-types';\n\n// According to https://developer.mozilla.org/en-US/docs/Web/CSS/white-space, these style values will need to preserve white spaces\nconst WHITESPACE_PRE_VALUES = ['pre', 'pre-wrap', 'break-spaces'];\n\n/**\n * Check if we have white-space to be preserved for a given paragraph\n * @param paragraph The paragraph to check\n */\nexport function isWhiteSpacePreserved(paragraph: ContentModelParagraph): boolean {\n    return (\n        (paragraph.format.whiteSpace &&\n            WHITESPACE_PRE_VALUES.indexOf(paragraph.format.whiteSpace) >= 0) ||\n        false\n    );\n}\n","import { isBlockEmpty } from './isEmpty';\nimport { normalizeParagraph } from './normalizeParagraph';\nimport { unwrapBlock } from './unwrapBlock';\nimport type { ContentModelBlockGroup } from 'roosterjs-content-model-types';\n\n/**\n * For a given content model, normalize it to make the model be consistent.\n * This process includes:\n * - For a list item without any list level, unwrap the list item\n * - For a paragraph, make sure it has BR at the end if it is an empty paragraph\n * - For text segments under paragraph, make sure its space values are correct (use nbsp to replace space when necessary)\n * - For an empty block, remove it\n * @param group The root level block group of content model to normalize\n */\nexport function normalizeContentModel(group: ContentModelBlockGroup) {\n    for (let i = group.blocks.length - 1; i >= 0; i--) {\n        const block = group.blocks[i];\n\n        switch (block.blockType) {\n            case 'BlockGroup':\n                if (block.blockGroupType == 'ListItem' && block.levels.length == 0) {\n                    i += block.blocks.length;\n                    unwrapBlock(group, block);\n                } else {\n                    normalizeContentModel(block);\n                }\n                break;\n            case 'Paragraph':\n                normalizeParagraph(block);\n                break;\n            case 'Table':\n                for (let r = 0; r < block.rows.length; r++) {\n                    for (let c = 0; c < block.rows[r].cells.length; c++) {\n                        if (block.rows[r].cells[c]) {\n                            normalizeContentModel(block.rows[r].cells[c]);\n                        }\n                    }\n                }\n                break;\n        }\n\n        if (isBlockEmpty(block)) {\n            group.blocks.splice(i, 1);\n        }\n    }\n}\n","import { areSameFormats } from '../../domToModel/utils/areSameFormats';\nimport { createBr } from '../creators/createBr';\nimport { isSegmentEmpty } from './isEmpty';\nimport { isWhiteSpacePreserved } from './isWhiteSpacePreserved';\nimport { normalizeAllSegments } from './normalizeSegment';\nimport type { ContentModelParagraph } from 'roosterjs-content-model-types';\n/**\n * @internal\n */\nexport function normalizeParagraph(paragraph: ContentModelParagraph) {\n    const segments = paragraph.segments;\n\n    if (!paragraph.isImplicit && segments.length > 0) {\n        const last = segments[segments.length - 1];\n        const secondLast = segments[segments.length - 2];\n\n        if (\n            last.segmentType == 'SelectionMarker' &&\n            (!secondLast || secondLast.segmentType == 'Br')\n        ) {\n            segments.push(createBr(last.format));\n        } else if (segments.length > 1 && segments[segments.length - 1].segmentType == 'Br') {\n            const noMarkerSegments = segments.filter(x => x.segmentType != 'SelectionMarker');\n\n            // When there is content with a <BR> tag at the end, we can remove the BR.\n            // But if there are more than one <BR> at the end, do not remove them.\n            if (\n                noMarkerSegments.length > 1 &&\n                noMarkerSegments[noMarkerSegments.length - 2].segmentType != 'Br'\n            ) {\n                segments.pop();\n            }\n        }\n    }\n\n    if (!isWhiteSpacePreserved(paragraph)) {\n        normalizeAllSegments(paragraph);\n    }\n\n    removeEmptyLinks(paragraph);\n\n    removeEmptySegments(paragraph);\n}\n\nfunction removeEmptySegments(block: ContentModelParagraph) {\n    for (let j = block.segments.length - 1; j >= 0; j--) {\n        if (isSegmentEmpty(block.segments[j])) {\n            block.segments.splice(j, 1);\n        }\n    }\n}\n\nfunction removeEmptyLinks(paragraph: ContentModelParagraph) {\n    const marker = paragraph.segments.find(x => x.segmentType == 'SelectionMarker');\n    if (marker) {\n        const markerIndex = paragraph.segments.indexOf(marker);\n        const prev = paragraph.segments[markerIndex - 1];\n        const next = paragraph.segments[markerIndex + 1];\n        if (\n            (prev &&\n                !prev.link &&\n                areSameFormats(prev.format, marker.format) &&\n                (!next || (!next.link && areSameFormats(next.format, marker.format))) &&\n                marker.link) ||\n            (!prev &&\n                marker.link &&\n                next &&\n                !next.link &&\n                areSameFormats(next.format, marker.format))\n        ) {\n            delete marker.link;\n        }\n    }\n}\n","import { hasSpacesOnly } from './hasSpacesOnly';\nimport type {\n    ContentModelParagraph,\n    ContentModelSegment,\n    ContentModelText,\n} from 'roosterjs-content-model-types';\n\nconst SPACE = '\\u0020';\nconst NONE_BREAK_SPACE = '\\u00A0';\nconst LEADING_SPACE_REGEX = /^\\u0020+/;\nconst TRAILING_SPACE_REGEX = /\\u0020+$/;\n\n/**\n * @internal\n */\nexport function normalizeAllSegments(paragraph: ContentModelParagraph) {\n    const context = resetNormalizeSegmentContext();\n\n    paragraph.segments.forEach(segment => {\n        normalizeSegment(segment, context);\n    });\n\n    normalizeTextSegments(context.textSegments, context.lastInlineSegment);\n    normalizeLastTextSegment(context.lastTextSegment, context.lastInlineSegment);\n}\n\n/**\n * Normalize a given segment, make sure its spaces are correctly represented by space and non-break space\n * @param segment The segment to normalize\n * @param ignoreTrailingSpaces Whether we should ignore the trailing space of the text segment @default false\n */\nexport function normalizeSingleSegment(\n    segment: ContentModelSegment,\n    ignoreTrailingSpaces: boolean = false\n) {\n    const context = resetNormalizeSegmentContext();\n\n    context.ignoreTrailingSpaces = ignoreTrailingSpaces;\n    normalizeSegment(segment, context);\n}\n\n/**\n * @internal Export for test only\n */\nexport interface NormalizeSegmentContext {\n    textSegments: ContentModelText[];\n    ignoreLeadingSpaces: boolean;\n    ignoreTrailingSpaces: boolean;\n    lastTextSegment: ContentModelText | undefined;\n    lastInlineSegment: ContentModelSegment | undefined;\n}\n\n/**\n * @internal Export for test only\n */\nexport function createNormalizeSegmentContext(): NormalizeSegmentContext {\n    return resetNormalizeSegmentContext();\n}\n\nfunction resetNormalizeSegmentContext(\n    context?: Partial<NormalizeSegmentContext>\n): NormalizeSegmentContext {\n    return Object.assign(context ?? {}, {\n        textSegments: [],\n        ignoreLeadingSpaces: true,\n        ignoreTrailingSpaces: true,\n        lastInlineSegment: undefined,\n        lastTextSegment: undefined,\n    });\n}\n\n/**\n * @internal Export for test only\n */\nexport function normalizeSegment(segment: ContentModelSegment, context: NormalizeSegmentContext) {\n    switch (segment.segmentType) {\n        case 'Br':\n            normalizeTextSegments(context.textSegments, context.lastInlineSegment);\n            normalizeLastTextSegment(context.lastTextSegment, context.lastInlineSegment);\n\n            // Line ends, reset all states\n            resetNormalizeSegmentContext(context);\n            break;\n\n        case 'Entity':\n        case 'General':\n        case 'Image':\n            // Here \"inline segment\" means a segment showing some content inline such as text, image, or other inline HTML elements\n            // BR will end current line, so it is not treated as \"inline\" here.\n            // We will do some normalization to the trailing spaces for non-inline-segments\n            context.lastInlineSegment = segment;\n            context.ignoreLeadingSpaces = false;\n            break;\n\n        case 'Text':\n            context.textSegments.push(segment);\n            context.lastInlineSegment = segment;\n            context.lastTextSegment = segment;\n\n            const first = segment.text.substring(0, 1);\n            const last = segment.text.substr(-1);\n\n            if (!hasSpacesOnly(segment.text)) {\n                if (first == SPACE) {\n                    // 1. Multiple leading space => single &nbsp; or empty (depends on if previous segment ends with space)\n                    segment.text = segment.text.replace(\n                        LEADING_SPACE_REGEX,\n                        context.ignoreLeadingSpaces ? '' : NONE_BREAK_SPACE\n                    );\n                }\n\n                if (last == SPACE) {\n                    // 2. Multiple trailing space => single space\n                    segment.text = segment.text.replace(\n                        TRAILING_SPACE_REGEX,\n                        context.ignoreTrailingSpaces ? SPACE : NONE_BREAK_SPACE\n                    );\n                }\n            }\n\n            context.ignoreLeadingSpaces = last == SPACE;\n\n            break;\n    }\n}\n\nfunction normalizeTextSegments(\n    segments: ContentModelText[],\n    lastInlineSegment: ContentModelSegment | undefined\n) {\n    segments.forEach(segment => {\n        // 3. Segment ends with &nbsp; replace it with space if the previous char is not space so that next segment can wrap\n        // Only do this for segments that is not the last one since the last space will be removed in step 4\n        if (segment != lastInlineSegment) {\n            const text = segment.text;\n\n            if (\n                text.substr(-1) == NONE_BREAK_SPACE &&\n                text.length > 1 &&\n                text.substr(-2, 1) != SPACE\n            ) {\n                segment.text = text.substring(0, text.length - 1) + SPACE;\n            }\n        }\n    });\n}\n\nfunction normalizeLastTextSegment(\n    segment: ContentModelText | undefined,\n    lastInlineSegment: ContentModelSegment | undefined\n) {\n    if (segment && segment == lastInlineSegment && segment?.text.substr(-1) == SPACE) {\n        // 4. last text segment of the paragraph, remove trailing space\n        segment.text = segment.text.replace(TRAILING_SPACE_REGEX, '');\n    }\n}\n","import { setParagraphNotImplicit } from '../block/setParagraphNotImplicit';\nimport type { ContentModelBlock, ContentModelBlockGroup } from 'roosterjs-content-model-types';\n\n/**\n * Unwrap a given block group, move its child blocks to be under its parent group\n * @param parent Parent block group of the unwrapping group\n * @param groupToUnwrap  The block group to unwrap\n */\nexport function unwrapBlock(\n    parent: ContentModelBlockGroup | null,\n    groupToUnwrap: ContentModelBlockGroup & ContentModelBlock\n) {\n    const index = parent?.blocks.indexOf(groupToUnwrap) ?? -1;\n\n    if (index >= 0) {\n        groupToUnwrap.blocks.forEach(setParagraphNotImplicit);\n\n        parent?.blocks.splice(index, 1, ...groupToUnwrap.blocks);\n    }\n}\n","import type { ContentModelBr, ContentModelSegmentFormat } from 'roosterjs-content-model-types';\n\n/**\n * Create a ContentModelBr model\n * @param format @optional The format of this model\n */\nexport function createBr(format?: ContentModelSegmentFormat): ContentModelBr {\n    return {\n        segmentType: 'Br',\n        format: format ? { ...format } : {},\n    };\n}\n","import type {\n    ContentModelDocument,\n    ContentModelSegmentFormat,\n} from 'roosterjs-content-model-types';\n\n/**\n * Create a ContentModelDocument model\n * @param defaultFormat @optional Default format of this model\n */\nexport function createContentModelDocument(\n    defaultFormat?: ContentModelSegmentFormat\n): ContentModelDocument {\n    const result: ContentModelDocument = {\n        blockGroupType: 'Document',\n        blocks: [],\n    };\n\n    if (defaultFormat) {\n        result.format = defaultFormat;\n    }\n\n    return result;\n}\n","import type { ContentModelBlockFormat, ContentModelDivider } from 'roosterjs-content-model-types';\n\n/**\n * Create a ContentModelDivider model\n * @param tagName Tag name of this divider. Currently only hr and div are supported\n * @param format @optional The format of this model\n */\nexport function createDivider(\n    tagName: 'hr' | 'div',\n    format?: ContentModelBlockFormat\n): ContentModelDivider {\n    return {\n        blockType: 'Divider',\n        tagName,\n        format: format ? { ...format } : {},\n    };\n}\n","import type { ContentModelEntity, ContentModelSegmentFormat } from 'roosterjs-content-model-types';\n\n/**\n * Create a ContentModelEntity model\n * @param wrapper Wrapper element of this entity\n * @param isReadonly Whether this is a readonly entity @default true\n * @param segmentFormat @optional Segment format of this entity\n * @param type @optional Type of this entity\n * @param id @optional Id of this entity\n */\nexport function createEntity(\n    wrapper: HTMLElement,\n    isReadonly: boolean = true,\n    segmentFormat?: ContentModelSegmentFormat,\n    type?: string,\n    id?: string\n): ContentModelEntity {\n    return {\n        segmentType: 'Entity',\n        blockType: 'Entity',\n        format: { ...segmentFormat },\n        entityFormat: {\n            id,\n            entityType: type,\n            isReadonly,\n        },\n        wrapper,\n    };\n}\n","import type {\n    ContentModelFormatContainer,\n    ContentModelFormatContainerFormat,\n} from 'roosterjs-content-model-types';\n\n/**\n * Create a ContentModelFormatContainer model\n * @param tag Tag name of this format container, in lower case\n * @param format @optional The format of this model\n */\nexport function createFormatContainer(\n    tag: Lowercase<string>,\n    format?: ContentModelFormatContainerFormat\n): ContentModelFormatContainer {\n    return {\n        blockType: 'BlockGroup',\n        blockGroupType: 'FormatContainer',\n        tagName: tag,\n        blocks: [],\n        format: { ...(format || {}) },\n    };\n}\n","import type { ContentModelGeneralBlock } from 'roosterjs-content-model-types';\n\n/**\n * Create a ContentModelGeneralBlock model\n * @param element Original element of this model\n */\nexport function createGeneralBlock(element: HTMLElement): ContentModelGeneralBlock {\n    return {\n        blockType: 'BlockGroup',\n        blockGroupType: 'General',\n        element: element,\n        blocks: [],\n        format: {},\n    };\n}\n","import type {\n    ContentModelGeneralSegment,\n    ContentModelSegmentFormat,\n} from 'roosterjs-content-model-types';\n\n/**\n * Create a ContentModelGeneralSegment model\n * @param element The original DOM element\n * @param format @optional The format of this model\n */\nexport function createGeneralSegment(\n    element: HTMLElement,\n    format?: ContentModelSegmentFormat\n): ContentModelGeneralSegment {\n    return {\n        blockType: 'BlockGroup',\n        blockGroupType: 'General',\n        segmentType: 'General',\n        format: format ? { ...format } : {},\n        blocks: [],\n        element: element,\n    };\n}\n","import type { ContentModelImage, ContentModelImageFormat } from 'roosterjs-content-model-types';\n\n/**\n * Create a ContentModelImage model\n * @param src Image source\n * @param format @optional The format of this model\n */\nexport function createImage(src: string, format?: ContentModelImageFormat): ContentModelImage {\n    return {\n        segmentType: 'Image',\n        src: src,\n        format: format ? { ...format } : {},\n        dataset: {},\n    };\n}\n","import { createListLevel } from './createListLevel';\nimport { createSelectionMarker } from './createSelectionMarker';\nimport type {\n    ContentModelListItem,\n    ContentModelListLevel,\n    ContentModelSegmentFormat,\n} from 'roosterjs-content-model-types';\n\n/**\n * Create a ContentModelListItem model\n * @param levels Existing list levels\n * @param format @optional The format of this model\n */\nexport function createListItem(\n    levels: ContentModelListLevel[],\n    format?: ContentModelSegmentFormat\n): ContentModelListItem {\n    return {\n        blockType: 'BlockGroup',\n        blockGroupType: 'ListItem',\n        blocks: [],\n        levels: levels\n            ? levels.map(level => createListLevel(level.listType, level.format, level.dataset))\n            : [],\n        formatHolder: createSelectionMarker(format),\n        format: {},\n    };\n}\n","import type {\n    ContentModelListItemLevelFormat,\n    ContentModelListLevel,\n    DatasetFormat,\n} from 'roosterjs-content-model-types';\n\n/**\n * Create a ContentModelListLevel model\n * @param listType Tag name of the list, either OL or UL\n * @param format @optional The format of this model\n * @param dataset @optional The dataset of this model\n */\nexport function createListLevel(\n    listType: 'OL' | 'UL',\n    format?: ContentModelListItemLevelFormat,\n    dataset?: DatasetFormat\n): ContentModelListLevel {\n    return {\n        listType,\n        format: { ...format },\n        dataset: { ...dataset },\n    };\n}\n","import type {\n    ContentModelBlockFormat,\n    ContentModelParagraph,\n    ContentModelParagraphDecorator,\n    ContentModelSegmentFormat,\n} from 'roosterjs-content-model-types';\n\n/**\n * Create a ContentModelParagraph model\n * @param isImplicit @optional Whether this is an implicit paragraph. An implicit paragraph is a paragraph that will not render with DOM element container\n * @param blockFormat @optional Format of this paragraph\n * @param segmentFormat @optional Segment format applied to this block\n * @param decorator @optional Decorator of this paragraph\n */\nexport function createParagraph(\n    isImplicit?: boolean,\n    blockFormat?: ContentModelBlockFormat,\n    segmentFormat?: ContentModelSegmentFormat,\n    decorator?: ContentModelParagraphDecorator\n): ContentModelParagraph {\n    const result: ContentModelParagraph = {\n        blockType: 'Paragraph',\n        segments: [],\n        format: blockFormat ? { ...blockFormat } : {},\n    };\n\n    if (segmentFormat && Object.keys(segmentFormat).length > 0) {\n        result.segmentFormat = { ...segmentFormat };\n    }\n\n    if (isImplicit) {\n        result.isImplicit = true;\n    }\n\n    if (decorator) {\n        result.decorator = {\n            tagName: decorator.tagName,\n            format: { ...decorator.format },\n        };\n    }\n\n    return result;\n}\n","import type {\n    ContentModelParagraphDecorator,\n    ContentModelSegmentFormat,\n} from 'roosterjs-content-model-types';\n\n/**\n * Create a ContentModelParagraphDecorator model\n * @param tagName Tag name of this decorator\n * @param format @optional The format of this model\n */\nexport function createParagraphDecorator(\n    tagName: string,\n    format?: ContentModelSegmentFormat\n): ContentModelParagraphDecorator {\n    return {\n        tagName: tagName.toLocaleLowerCase(),\n        format: { ...(format || {}) },\n    };\n}\n","import type {\n    ContentModelSegmentFormat,\n    ContentModelSelectionMarker,\n} from 'roosterjs-content-model-types';\n\n/**\n * Create a ContentModelSelectionMarker model\n * @param format @optional The format of this model\n */\nexport function createSelectionMarker(\n    format?: ContentModelSegmentFormat\n): ContentModelSelectionMarker {\n    return {\n        segmentType: 'SelectionMarker',\n        isSelected: true,\n        format: format ? { ...format } : {},\n    };\n}\n","import type {\n    ContentModelTable,\n    ContentModelTableFormat,\n    ContentModelTableRow,\n} from 'roosterjs-content-model-types';\n\n/**\n * Create a ContentModelTable model\n * @param rowCount Count of rows of this table\n * @param format @optional The format of this model\n */\nexport function createTable(rowCount: number, format?: ContentModelTableFormat): ContentModelTable {\n    const rows: ContentModelTableRow[] = [];\n\n    for (let i = 0; i < rowCount; i++) {\n        rows.push({\n            height: 0,\n            format: {},\n            cells: [],\n        });\n    }\n\n    return {\n        blockType: 'Table',\n        rows,\n        format: { ...(format || {}) },\n        widths: [],\n        dataset: {},\n    };\n}\n","import type {\n    ContentModelTableCell,\n    ContentModelTableCellFormat,\n} from 'roosterjs-content-model-types';\n\n/**\n * Create a ContentModelTableCell model\n * @param spanLeftOrColSpan @optional Whether this is a table cell merged with its left cell, or colspan number @default false\n * @param spanAboveOrRowSpan Whether this is a table cell merged with its upper cell, or rowSpan number @default false\n * @param isHeader @optional Whether this is a header cell @default false\n * @param format @optional The format of this model\n */\nexport function createTableCell(\n    spanLeftOrColSpan?: boolean | number,\n    spanAboveOrRowSpan?: boolean | number,\n    isHeader?: boolean,\n    format?: ContentModelTableCellFormat\n): ContentModelTableCell {\n    const spanLeft =\n        typeof spanLeftOrColSpan === 'number' ? spanLeftOrColSpan > 1 : !!spanLeftOrColSpan;\n    const spanAbove =\n        typeof spanAboveOrRowSpan === 'number' ? spanAboveOrRowSpan > 1 : !!spanAboveOrRowSpan;\n    return {\n        blockGroupType: 'TableCell',\n        blocks: [],\n        format: format ? { ...format } : {},\n        spanLeft,\n        spanAbove,\n        isHeader: !!isHeader,\n        dataset: {},\n    };\n}\n","import { addCode, addLink } from '../common/addDecorators';\nimport type {\n    ContentModelCode,\n    ContentModelLink,\n    ContentModelSegmentFormat,\n    ContentModelText,\n} from 'roosterjs-content-model-types';\n\n/**\n * Create a ContentModelText model\n * @param text Text of this model\n * @param format @optional The format of this model\n * @param link @optional The link decorator\n * @param code @option The code decorator\n */\nexport function createText(\n    text: string,\n    format?: ContentModelSegmentFormat,\n    link?: ContentModelLink,\n    code?: ContentModelCode\n): ContentModelText {\n    const result: ContentModelText = {\n        segmentType: 'Text',\n        text: text,\n        format: format ? { ...format } : {},\n    };\n\n    if (link) {\n        addLink(result, link);\n    }\n\n    if (code) {\n        addCode(result, code);\n    }\n\n    return result;\n}\n","import toArray from '../domUtils/toArray';\nimport { createRange, Position } from 'roosterjs-editor-dom';\nimport { isNodeOfType } from '../domUtils/isNodeOfType';\nimport type {\n    ContentModelDocument,\n    DOMSelection,\n    ModelToDomBlockAndSegmentNode,\n    ModelToDomContext,\n    OnNodeCreated,\n} from 'roosterjs-content-model-types';\nimport type { NodePosition } from 'roosterjs-editor-types';\n\n/**\n * Create DOM tree fragment from Content Model document\n * @param doc Document object of the target DOM tree\n * @param root Target node that will become the container of new DOM tree.\n * When a DOM node with existing node is passed, it will be merged with content model so that unchanged blocks\n * won't be touched.\n * @param model The content model document to generate DOM tree from\n * @param context The context object for Content Model to DOM conversion\n * @param onNodeCreated Callback invoked when a DOM node is created\n * @returns The selection range created in DOM tree from this model, or null when there is no selection\n */\nexport function contentModelToDom(\n    doc: Document,\n    root: Node,\n    model: ContentModelDocument,\n    context: ModelToDomContext,\n    onNodeCreated?: OnNodeCreated\n): DOMSelection | null {\n    context.onNodeCreated = onNodeCreated;\n\n    context.modelHandlers.blockGroupChildren(doc, root, model, context);\n\n    const range = extractSelectionRange(context);\n\n    root.normalize();\n\n    return range;\n}\n\nfunction extractSelectionRange(context: ModelToDomContext): DOMSelection | null {\n    const {\n        regularSelection: { start, end },\n        tableSelection,\n        imageSelection,\n    } = context;\n\n    let startPosition: NodePosition | undefined;\n    let endPosition: NodePosition | undefined;\n\n    if (imageSelection) {\n        return imageSelection;\n    } else if (\n        (startPosition = start && calcPosition(start)) &&\n        (endPosition = end && calcPosition(end))\n    ) {\n        return {\n            type: 'range',\n            range: createRange(startPosition, endPosition),\n        };\n    } else if (tableSelection) {\n        return tableSelection;\n    } else {\n        return null;\n    }\n}\n\nfunction calcPosition(pos: ModelToDomBlockAndSegmentNode): NodePosition | undefined {\n    let result: NodePosition | undefined;\n\n    if (pos.block) {\n        if (!pos.segment) {\n            result = new Position(pos.block, 0);\n        } else if (isNodeOfType(pos.segment, 'TEXT_NODE')) {\n            result = new Position(pos.segment, pos.segment.nodeValue?.length || 0);\n        } else {\n            result = new Position(\n                pos.segment.parentNode!,\n                toArray(pos.segment.parentNode!.childNodes as NodeListOf<Node>).indexOf(\n                    pos.segment!\n                ) + 1\n            );\n        }\n    }\n\n    if (isNodeOfType(result?.node, 'DOCUMENT_FRAGMENT_NODE')) {\n        result = result?.normalize();\n    }\n\n    return result;\n}\n","import { defaultContentModelHandlers } from './defaultContentModelHandlers';\nimport { getObjectKeys } from '../../domUtils/getObjectKeys';\nimport {\n    defaultFormatAppliers,\n    defaultFormatKeysPerCategory,\n} from '../../formatHandlers/defaultFormatHandlers';\nimport type {\n    EditorContext,\n    FormatApplier,\n    FormatAppliers,\n    FormatAppliersPerCategory,\n    ModelToDomContext,\n    ModelToDomFormatContext,\n    ModelToDomOption,\n    ModelToDomSelectionContext,\n    ModelToDomSettings,\n} from 'roosterjs-content-model-types';\n\n/**\n * Create context object fro Content Model to DOM conversion\n * @param editorContext Context of editor\n * @param options Option array to customize the Model to DOM conversion behavior\n */\nexport function createModelToDomContext(\n    editorContext?: EditorContext,\n    ...options: (ModelToDomOption | undefined)[]\n): ModelToDomContext {\n    return createModelToDomContextWithConfig(createModelToDomConfig(options), editorContext);\n}\n\n/**\n * Create context object for Content Model to DOM conversion with an existing configure\n * @param config A full config object to define how to convert Content Model to DOM tree\n * @param editorContext Context of editor\n */\nexport function createModelToDomContextWithConfig(\n    config: ModelToDomSettings,\n    editorContext?: EditorContext\n) {\n    return Object.assign(\n        {},\n        editorContext,\n        createModelToDomSelectionContext(),\n        createModelToDomFormatContext(),\n        config\n    );\n}\n\nfunction createModelToDomSelectionContext(): ModelToDomSelectionContext {\n    return {\n        regularSelection: {\n            current: {\n                block: null,\n                segment: null,\n            },\n        },\n    };\n}\n\nfunction createModelToDomFormatContext(): ModelToDomFormatContext {\n    return {\n        listFormat: {\n            threadItemCounts: [],\n            nodeStack: [],\n        },\n        implicitFormat: {},\n    };\n}\n\n/**\n * Create Content Model to DOM Config object\n * @param options All customizations of DOM creation\n */\nexport function createModelToDomConfig(\n    options: (ModelToDomOption | undefined)[]\n): ModelToDomSettings {\n    return {\n        modelHandlers: Object.assign(\n            {},\n            defaultContentModelHandlers,\n            ...options.map(x => x?.modelHandlerOverride)\n        ),\n        formatAppliers: buildFormatAppliers(\n            options.map(x => x?.formatApplierOverride),\n            options.map(x => x?.additionalFormatAppliers)\n        ),\n        defaultModelHandlers: defaultContentModelHandlers,\n        defaultFormatAppliers,\n    };\n}\n\n/**\n * @internal Export for test only\n * Build format appliers used by Content Model to DOM conversion\n */\nexport function buildFormatAppliers(\n    overrides: (Partial<FormatAppliers> | undefined)[] = [],\n    additionalAppliersArray: (Partial<FormatAppliersPerCategory> | undefined)[] = []\n): FormatAppliersPerCategory {\n    const combinedOverrides = Object.assign({}, ...overrides);\n\n    return getObjectKeys(defaultFormatKeysPerCategory).reduce((result, key) => {\n        const value = defaultFormatKeysPerCategory[key]\n            .map(\n                formatKey =>\n                    (combinedOverrides[formatKey] === undefined\n                        ? defaultFormatAppliers[formatKey]\n                        : combinedOverrides[formatKey]) as FormatApplier<any>\n            )\n            .concat(\n                ...additionalAppliersArray.map(\n                    appliers => (appliers?.[key] ?? []) as FormatApplier<any>[]\n                )\n            );\n\n        result[key] = value;\n\n        return result;\n    }, {} as FormatAppliersPerCategory);\n}\n","import { handleBlock } from '../handlers/handleBlock';\nimport { handleBlockGroupChildren } from '../handlers/handleBlockGroupChildren';\nimport { handleBr } from '../handlers/handleBr';\nimport { handleDivider } from '../handlers/handleDivider';\nimport { handleEntityBlock, handleEntitySegment } from '../handlers/handleEntity';\nimport { handleFormatContainer } from '../handlers/handleFormatContainer';\nimport { handleGeneralBlock, handleGeneralSegment } from '../handlers/handleGeneralModel';\nimport { handleImage } from '../handlers/handleImage';\nimport { handleList } from '../handlers/handleList';\nimport { handleListItem } from '../handlers/handleListItem';\nimport { handleParagraph } from '../handlers/handleParagraph';\nimport { handleSegment } from '../handlers/handleSegment';\nimport { handleSegmentDecorator } from '../handlers/handleSegmentDecorator';\nimport { handleTable } from '../handlers/handleTable';\nimport { handleText } from '../handlers/handleText';\nimport type { ContentModelHandlerMap } from 'roosterjs-content-model-types';\n\n/**\n * @internal\n */\nexport const defaultContentModelHandlers: ContentModelHandlerMap = {\n    block: handleBlock,\n    blockGroupChildren: handleBlockGroupChildren,\n    br: handleBr,\n    entityBlock: handleEntityBlock,\n    entitySegment: handleEntitySegment,\n    generalBlock: handleGeneralBlock,\n    generalSegment: handleGeneralSegment,\n    divider: handleDivider,\n    image: handleImage,\n    list: handleList,\n    listItem: handleListItem,\n    paragraph: handleParagraph,\n    formatContainer: handleFormatContainer,\n    segment: handleSegment,\n    segmentDecorator: handleSegmentDecorator,\n    table: handleTable,\n    text: handleText,\n};\n","import type {\n    ContentModelBlock,\n    ContentModelBlockHandler,\n    ModelToDomContext,\n} from 'roosterjs-content-model-types';\n\n/**\n * @internal\n */\nexport const handleBlock: ContentModelBlockHandler<ContentModelBlock> = (\n    doc: Document,\n    parent: Node,\n    block: ContentModelBlock,\n    context: ModelToDomContext,\n    refNode: Node | null\n) => {\n    const handlers = context.modelHandlers;\n\n    switch (block.blockType) {\n        case 'Table':\n            refNode = handlers.table(doc, parent, block, context, refNode);\n            break;\n        case 'Paragraph':\n            refNode = handlers.paragraph(doc, parent, block, context, refNode);\n            break;\n        case 'Entity':\n            refNode = handlers.entityBlock(doc, parent, block, context, refNode);\n            break;\n        case 'Divider':\n            refNode = handlers.divider(doc, parent, block, context, refNode);\n            break;\n        case 'BlockGroup':\n            switch (block.blockGroupType) {\n                case 'General':\n                    refNode = handlers.generalBlock(doc, parent, block, context, refNode);\n                    break;\n\n                case 'FormatContainer':\n                    refNode = handlers.formatContainer(doc, parent, block, context, refNode);\n                    break;\n\n                case 'ListItem':\n                    refNode = handlers.listItem(doc, parent, block, context, refNode);\n                    break;\n            }\n\n            break;\n    }\n\n    return refNode;\n};\n","import type {\n    ContentModelBlockGroup,\n    ContentModelHandler,\n    ModelToDomContext,\n} from 'roosterjs-content-model-types';\n\n/**\n * @internal\n */\nexport const handleBlockGroupChildren: ContentModelHandler<ContentModelBlockGroup> = (\n    doc: Document,\n    parent: Node,\n    group: ContentModelBlockGroup,\n    context: ModelToDomContext\n) => {\n    const { listFormat } = context;\n    const nodeStack = listFormat.nodeStack;\n    let refNode: Node | null = parent.firstChild;\n\n    try {\n        group.blocks.forEach((childBlock, index) => {\n            // When process list, we need a node stack.\n            // When there are two continuous lists, they should share the same stack\n            // so that list items with same type/threadId can be merged into the same list element\n            // In other cases, clear the stack so that two separate lists won't share the same list element\n            if (\n                index == 0 ||\n                childBlock.blockType != 'BlockGroup' ||\n                childBlock.blockGroupType != 'ListItem'\n            ) {\n                listFormat.nodeStack = [];\n            }\n\n            refNode = context.modelHandlers.block(doc, parent, childBlock, context, refNode);\n        });\n\n        // Remove all rest node if any since they don't appear in content model\n        while (refNode) {\n            const next = refNode.nextSibling;\n\n            refNode.parentNode?.removeChild(refNode);\n            refNode = next;\n        }\n    } finally {\n        listFormat.nodeStack = nodeStack;\n    }\n};\n","import { handleSegmentCommon } from '../utils/handleSegmentCommon';\nimport type { ContentModelBr, ContentModelSegmentHandler } from 'roosterjs-content-model-types';\n\n/**\n * @internal\n */\nexport const handleBr: ContentModelSegmentHandler<ContentModelBr> = (\n    doc,\n    parent,\n    segment,\n    context,\n    segmentNodes\n) => {\n    const br = doc.createElement('br');\n    const element = doc.createElement('span');\n    element.appendChild(br);\n    parent.appendChild(element);\n\n    handleSegmentCommon(doc, br, element, segment, context, segmentNodes);\n};\n","import { applyFormat } from '../utils/applyFormat';\nimport { reuseCachedElement } from '../utils/reuseCachedElement';\nimport type {\n    ContentModelBlockHandler,\n    ContentModelDivider,\n    ModelToDomContext,\n} from 'roosterjs-content-model-types';\n\n/**\n * @internal\n */\nexport const handleDivider: ContentModelBlockHandler<ContentModelDivider> = (\n    doc: Document,\n    parent: Node,\n    divider: ContentModelDivider,\n    context: ModelToDomContext,\n    refNode: Node | null\n) => {\n    let element = context.allowCacheElement ? divider.cachedElement : undefined;\n\n    if (element) {\n        refNode = reuseCachedElement(parent, element, refNode);\n    } else {\n        element = doc.createElement(divider.tagName);\n\n        if (context.allowCacheElement) {\n            divider.cachedElement = element;\n        }\n\n        parent.insertBefore(element, refNode);\n\n        applyFormat(element, context.formatAppliers.divider, divider.format, context);\n\n        if (divider.size) {\n            element.setAttribute('size', divider.size);\n        }\n    }\n\n    context.onNodeCreated?.(divider, element);\n\n    return refNode;\n};\n","import { addDelimiters, wrap } from 'roosterjs-editor-dom';\nimport { applyFormat } from '../utils/applyFormat';\nimport { getObjectKeys } from '../../domUtils/getObjectKeys';\nimport { reuseCachedElement } from '../utils/reuseCachedElement';\nimport type {\n    ContentModelBlockHandler,\n    ContentModelEntity,\n    ContentModelSegmentHandler,\n} from 'roosterjs-content-model-types';\n\n/**\n * @internal\n */\nexport const handleEntityBlock: ContentModelBlockHandler<ContentModelEntity> = (\n    _,\n    parent,\n    entityModel,\n    context,\n    refNode\n) => {\n    let { entityFormat, wrapper } = entityModel;\n\n    applyFormat(wrapper, context.formatAppliers.entity, entityFormat, context);\n\n    refNode = reuseCachedElement(parent, wrapper, refNode);\n    context.onNodeCreated?.(entityModel, wrapper);\n\n    return refNode;\n};\n\n/**\n * @internal\n */\nexport const handleEntitySegment: ContentModelSegmentHandler<ContentModelEntity> = (\n    _,\n    parent,\n    entityModel,\n    context,\n    newSegments\n) => {\n    let { entityFormat, wrapper, format } = entityModel;\n\n    parent.appendChild(wrapper);\n    newSegments?.push(wrapper);\n\n    if (getObjectKeys(format).length > 0) {\n        const span = wrap(wrapper, 'span');\n\n        applyFormat(span, context.formatAppliers.segment, format, context);\n    }\n\n    applyFormat(wrapper, context.formatAppliers.entity, entityFormat, context);\n\n    if (context.addDelimiterForEntity && entityFormat.isReadonly) {\n        const [after, before] = addDelimiters(wrapper);\n\n        newSegments?.push(after, before);\n        context.regularSelection.current.segment = after;\n    } else {\n        context.regularSelection.current.segment = wrapper;\n    }\n\n    context.onNodeCreated?.(entityModel, wrapper);\n};\n","import { applyFormat } from '../utils/applyFormat';\nimport { isBlockGroupEmpty } from '../../modelApi/common/isEmpty';\nimport { reuseCachedElement } from '../utils/reuseCachedElement';\nimport { stackFormat } from '../utils/stackFormat';\nimport type {\n    ContentModelBlockFormat,\n    ContentModelBlockHandler,\n    ContentModelFormatContainer,\n    ContentModelSegmentFormat,\n    ModelToDomContext,\n} from 'roosterjs-content-model-types';\n\nconst PreChildFormat: ContentModelSegmentFormat & ContentModelBlockFormat = {\n    fontFamily: 'monospace',\n    whiteSpace: 'pre',\n};\n\n/**\n * @internal\n */\nexport const handleFormatContainer: ContentModelBlockHandler<ContentModelFormatContainer> = (\n    doc: Document,\n    parent: Node,\n    container: ContentModelFormatContainer,\n    context: ModelToDomContext,\n    refNode: Node | null\n) => {\n    let element = context.allowCacheElement ? container.cachedElement : undefined;\n\n    if (element) {\n        refNode = reuseCachedElement(parent, element, refNode);\n\n        context.modelHandlers.blockGroupChildren(doc, element, container, context);\n    } else if (!isBlockGroupEmpty(container)) {\n        const containerNode = doc.createElement(container.tagName);\n\n        if (context.allowCacheElement) {\n            container.cachedElement = containerNode;\n        }\n\n        parent.insertBefore(containerNode, refNode);\n\n        stackFormat(context, container.tagName, () => {\n            applyFormat(containerNode, context.formatAppliers.container, container.format, context);\n            applyFormat(\n                containerNode,\n                context.formatAppliers.segmentOnBlock,\n                container.format,\n                context\n            );\n\n            applyFormat(containerNode, context.formatAppliers.container, container.format, context);\n        });\n\n        if (container.tagName == 'pre') {\n            stackFormat(context, PreChildFormat, () => {\n                context.modelHandlers.blockGroupChildren(doc, containerNode, container, context);\n            });\n        } else {\n            context.modelHandlers.blockGroupChildren(doc, containerNode, container, context);\n        }\n\n        element = containerNode;\n    }\n\n    if (element) {\n        context.onNodeCreated?.(container, element);\n    }\n\n    return refNode;\n};\n","import { handleSegmentCommon } from '../utils/handleSegmentCommon';\nimport { isNodeOfType } from '../../domUtils/isNodeOfType';\nimport { reuseCachedElement } from '../utils/reuseCachedElement';\nimport { wrap } from 'roosterjs-editor-dom';\nimport type {\n    ContentModelBlockHandler,\n    ContentModelGeneralBlock,\n    ContentModelGeneralSegment,\n    ContentModelSegmentHandler,\n} from 'roosterjs-content-model-types';\n\n/**\n * @internal\n */\nexport const handleGeneralBlock: ContentModelBlockHandler<ContentModelGeneralBlock> = (\n    doc,\n    parent,\n    group,\n    context,\n    refNode\n) => {\n    let node: Node = group.element;\n\n    if (refNode && node.parentNode == parent) {\n        refNode = reuseCachedElement(parent, node, refNode);\n    } else {\n        node = node.cloneNode();\n        group.element = node as HTMLElement;\n\n        parent.insertBefore(node, refNode);\n    }\n\n    context.onNodeCreated?.(group, node);\n    context.modelHandlers.blockGroupChildren(doc, node, group, context);\n\n    return refNode;\n};\n\n/**\n * @internal\n */\nexport const handleGeneralSegment: ContentModelSegmentHandler<ContentModelGeneralSegment> = (\n    doc,\n    parent,\n    group,\n    context,\n    segmentNodes\n) => {\n    const node = group.element.cloneNode() as HTMLElement;\n    group.element = node;\n    parent.appendChild(node);\n\n    if (isNodeOfType(node, 'ELEMENT_NODE')) {\n        const element = wrap(node, 'span');\n\n        handleSegmentCommon(doc, node, element, group, context, segmentNodes);\n        context.onNodeCreated?.(group, node);\n    }\n\n    context.modelHandlers.blockGroupChildren(doc, node, group, context);\n};\n","import { applyFormat } from '../utils/applyFormat';\nimport { handleSegmentCommon } from '../utils/handleSegmentCommon';\nimport { parseValueWithUnit } from '../../formatHandlers/utils/parseValueWithUnit';\nimport type { ContentModelImage, ContentModelSegmentHandler } from 'roosterjs-content-model-types';\n\n/**\n * @internal\n */\nexport const handleImage: ContentModelSegmentHandler<ContentModelImage> = (\n    doc,\n    parent,\n    imageModel,\n    context,\n    segmentNodes\n) => {\n    const img = doc.createElement('img');\n    const element = document.createElement('span');\n\n    parent.appendChild(element);\n    element.appendChild(img);\n\n    img.src = imageModel.src;\n\n    if (imageModel.alt) {\n        img.alt = imageModel.alt;\n    }\n\n    if (imageModel.title) {\n        img.title = imageModel.title;\n    }\n\n    applyFormat(img, context.formatAppliers.image, imageModel.format, context);\n    applyFormat(img, context.formatAppliers.dataset, imageModel.dataset, context);\n\n    const { width, height } = imageModel.format;\n    const widthNum = width ? parseValueWithUnit(width) : 0;\n    const heightNum = height ? parseValueWithUnit(height) : 0;\n\n    if (widthNum > 0) {\n        img.width = widthNum;\n    }\n\n    if (heightNum > 0) {\n        img.height = heightNum;\n    }\n\n    if (imageModel.isSelectedAsImageSelection) {\n        context.imageSelection = {\n            type: 'image',\n            image: img,\n        };\n    }\n\n    handleSegmentCommon(doc, img, element, imageModel, context, segmentNodes);\n};\n","import { applyFormat } from '../utils/applyFormat';\nimport { listLevelMetadataFormatHandler } from '../../formatHandlers/list/listLevelMetadataFormatHandler';\nimport { updateListMetadata } from '../../domUtils/metadata/updateListMetadata';\nimport type {\n    ContentModelBlockHandler,\n    ContentModelListItem,\n    ModelToDomContext,\n} from 'roosterjs-content-model-types';\n\n/**\n * @internal\n */\nexport const handleList: ContentModelBlockHandler<ContentModelListItem> = (\n    doc: Document,\n    parent: Node,\n    listItem: ContentModelListItem,\n    context: ModelToDomContext,\n    refNode: Node | null\n) => {\n    let layer = 0;\n    const { nodeStack } = context.listFormat;\n\n    if (nodeStack.length == 0) {\n        nodeStack.push({\n            node: parent,\n        });\n    }\n\n    // Skip existing list levels that has same properties so we can reuse them\n    for (; layer < listItem.levels.length && layer + 1 < nodeStack.length; layer++) {\n        const stackLevel = nodeStack[layer + 1];\n        const itemLevel = listItem.levels[layer];\n\n        if (\n            stackLevel.listType != itemLevel.listType ||\n            stackLevel.dataset?.editingInfo != itemLevel.dataset.editingInfo ||\n            (itemLevel.listType == 'OL' && typeof itemLevel.format.startNumberOverride === 'number')\n        ) {\n            break;\n        }\n    }\n\n    // Cut off remained list levels that we can't reuse\n    nodeStack.splice(layer + 1);\n\n    // Create new list levels that are after reused ones\n    for (; layer < listItem.levels.length; layer++) {\n        const level = listItem.levels[layer];\n        const newList = doc.createElement(level.listType || 'UL');\n        const lastParent = nodeStack[nodeStack.length - 1].node;\n\n        lastParent.insertBefore(newList, layer == 0 ? refNode : null);\n\n        applyFormat(newList, context.formatAppliers.listLevel, level.format, context);\n\n        // TODO: Move this out into roosterjs-content-model-editor package\n        updateListMetadata(level, metadata => {\n            applyFormat(newList, [listLevelMetadataFormatHandler.apply], metadata || {}, context);\n\n            if (\n                metadata &&\n                typeof metadata.orderedStyleType == 'undefined' &&\n                typeof metadata.unorderedStyleType == 'undefined'\n            ) {\n                metadata = null;\n            }\n\n            return metadata;\n        });\n        applyFormat(newList, context.formatAppliers.dataset, level.dataset, context);\n\n        nodeStack.push({ node: newList, ...level });\n\n        context.onNodeCreated?.(level, newList);\n    }\n\n    return refNode;\n};\n","import { applyFormat } from '../utils/applyFormat';\nimport { listItemMetadataFormatHandler } from '../../formatHandlers/list/listItemMetadataFormatHandler';\nimport { setParagraphNotImplicit } from '../../modelApi/block/setParagraphNotImplicit';\nimport { unwrap } from 'roosterjs-editor-dom';\nimport { updateListMetadata } from '../../domUtils/metadata/updateListMetadata';\nimport type {\n    ContentModelBlockHandler,\n    ContentModelListItem,\n    ModelToDomContext,\n} from 'roosterjs-content-model-types';\n\n/**\n * @internal\n */\nexport const handleListItem: ContentModelBlockHandler<ContentModelListItem> = (\n    doc: Document,\n    parent: Node,\n    listItem: ContentModelListItem,\n    context: ModelToDomContext,\n    refNode: Node | null\n) => {\n    refNode = context.modelHandlers.list(doc, parent, listItem, context, refNode);\n\n    const { nodeStack } = context.listFormat;\n\n    let listParent = nodeStack?.[nodeStack?.length - 1]?.node || parent;\n    const li = doc.createElement('li');\n    const level = listItem.levels[listItem.levels.length - 1];\n\n    // It is possible listParent is the same with parent param.\n    // This happens when outdent a list item to cause it has no list level\n    listParent.insertBefore(li, refNode?.parentNode == listParent ? refNode : null);\n\n    if (level) {\n        applyFormat(li, context.formatAppliers.listItemElement, listItem.format, context);\n        applyFormat(li, context.formatAppliers.segment, listItem.formatHolder.format, context);\n        applyFormat(li, context.formatAppliers.listItem, level.format, context);\n\n        // TODO: Move this out into roosterjs-content-model-editor package\n        updateListMetadata(level, metadata => {\n            applyFormat(li, [listItemMetadataFormatHandler.apply], metadata || {}, context);\n\n            return metadata;\n        });\n\n        context.modelHandlers.blockGroupChildren(doc, li, listItem, context);\n    } else {\n        // There is no level for this list item, that means it should be moved out of the list\n        // For each paragraph, make it not implicit so it will have a DIV around it, to avoid more paragraphs connected together\n        listItem.blocks.forEach(setParagraphNotImplicit);\n\n        context.modelHandlers.blockGroupChildren(doc, li, listItem, context);\n\n        unwrap(li);\n    }\n\n    context.onNodeCreated?.(listItem, li);\n\n    return refNode;\n};\n","import { applyFormat } from '../utils/applyFormat';\nimport { getObjectKeys } from '../../domUtils/getObjectKeys';\nimport { optimize } from '../optimizers/optimize';\nimport { reuseCachedElement } from '../utils/reuseCachedElement';\nimport { stackFormat } from '../utils/stackFormat';\nimport { unwrap } from 'roosterjs-editor-dom';\nimport type {\n    ContentModelBlockHandler,\n    ContentModelParagraph,\n    ModelToDomContext,\n} from 'roosterjs-content-model-types';\n\nconst DefaultParagraphTag = 'div';\n\n/**\n * @internal\n */\nexport const handleParagraph: ContentModelBlockHandler<ContentModelParagraph> = (\n    doc: Document,\n    parent: Node,\n    paragraph: ContentModelParagraph,\n    context: ModelToDomContext,\n    refNode: Node | null\n) => {\n    let container = context.allowCacheElement ? paragraph.cachedElement : undefined;\n\n    if (container) {\n        refNode = reuseCachedElement(parent, container, refNode);\n    } else {\n        stackFormat(context, paragraph.decorator?.tagName || null, () => {\n            const needParagraphWrapper =\n                !paragraph.isImplicit ||\n                !!paragraph.decorator ||\n                (getObjectKeys(paragraph.format).length > 0 &&\n                    paragraph.segments.some(segment => segment.segmentType != 'SelectionMarker'));\n            const formatOnWrapper = needParagraphWrapper\n                ? {\n                      ...(paragraph.decorator?.format || {}),\n                      ...paragraph.segmentFormat,\n                  }\n                : {};\n\n            container = doc.createElement(paragraph.decorator?.tagName || DefaultParagraphTag);\n\n            parent.insertBefore(container, refNode);\n\n            context.regularSelection.current = {\n                block: needParagraphWrapper ? container : container.parentNode,\n                segment: null,\n            };\n\n            const handleSegments = () => {\n                const parent = container;\n\n                if (parent) {\n                    const firstSegment = paragraph.segments[0];\n\n                    if (firstSegment?.segmentType == 'SelectionMarker') {\n                        // Make sure there is a segment created before selection marker.\n                        // If selection marker is the first selected segment in a paragraph, create a dummy text node,\n                        // so after rewrite, the regularSelection object can have a valid segment object set to the text node.\n                        context.modelHandlers.text(\n                            doc,\n                            parent,\n                            {\n                                ...firstSegment,\n                                segmentType: 'Text',\n                                text: '',\n                            },\n                            context,\n                            []\n                        );\n                    }\n\n                    paragraph.segments.forEach(segment => {\n                        const newSegments: Node[] = [];\n                        context.modelHandlers.segment(doc, parent, segment, context, newSegments);\n\n                        newSegments.forEach(node => {\n                            context.domIndexer?.onSegment(node, paragraph, [segment]);\n                        });\n                    });\n                }\n            };\n\n            if (needParagraphWrapper) {\n                stackFormat(context, formatOnWrapper, handleSegments);\n\n                applyFormat(container, context.formatAppliers.block, paragraph.format, context);\n                applyFormat(container, context.formatAppliers.container, paragraph.format, context);\n                applyFormat(\n                    container,\n                    context.formatAppliers.segmentOnBlock,\n                    formatOnWrapper,\n                    context\n                );\n            } else {\n                handleSegments();\n            }\n\n            optimize(container);\n\n            // It is possible the next sibling node is changed during processing child segments\n            // e.g. When this paragraph is an implicit paragraph and it contains an inline entity segment\n            // The segment will be appended to container as child then the container will be removed\n            // since this paragraph it is implicit. In that case container.nextSibling will become original\n            // inline entity's next sibling. So reset refNode to its real next sibling (after change) here\n            // to make sure the value is correct.\n            refNode = container.nextSibling;\n\n            if (container) {\n                context.onNodeCreated?.(paragraph, container);\n                context.domIndexer?.onParagraph(container);\n            }\n\n            if (needParagraphWrapper) {\n                if (context.allowCacheElement) {\n                    paragraph.cachedElement = container;\n                }\n            } else {\n                unwrap(container);\n                container = undefined;\n            }\n        });\n    }\n\n    return refNode;\n};\n","import type {\n    ContentModelSegment,\n    ContentModelSegmentHandler,\n} from 'roosterjs-content-model-types';\n\n/**\n * @internal\n */\nexport const handleSegment: ContentModelSegmentHandler<ContentModelSegment> = (\n    doc,\n    parent,\n    segment,\n    context,\n    segmentNodes\n) => {\n    const regularSelection = context.regularSelection;\n\n    // If start position is not set yet, and current segment is in selection, set start position\n    if (segment.isSelected && !regularSelection.start) {\n        regularSelection.start = {\n            ...regularSelection.current,\n        };\n    }\n\n    switch (segment.segmentType) {\n        case 'Text':\n            context.modelHandlers.text(doc, parent, segment, context, segmentNodes);\n            break;\n\n        case 'Br':\n            context.modelHandlers.br(doc, parent, segment, context, segmentNodes);\n            break;\n\n        case 'Image':\n            context.modelHandlers.image(doc, parent, segment, context, segmentNodes);\n            break;\n\n        case 'General':\n            context.modelHandlers.generalSegment(doc, parent, segment, context, segmentNodes);\n            break;\n\n        case 'Entity':\n            context.modelHandlers.entitySegment(doc, parent, segment, context, segmentNodes);\n            break;\n    }\n\n    // If end position is not set, or it is not finalized, and current segment is still in selection, set end position\n    // If there is other selection, we will overwrite regularSelection.end when we process that segment\n    if (segment.isSelected && regularSelection.start) {\n        regularSelection.end = {\n            ...regularSelection.current,\n        };\n    }\n};\n","import { applyFormat } from '../utils/applyFormat';\nimport { moveChildNodes } from 'roosterjs-editor-dom';\nimport { stackFormat } from '../utils/stackFormat';\nimport type {\n    ContentModelSegment,\n    ContentModelSegmentHandler,\n} from 'roosterjs-content-model-types';\n\n/**\n * @internal\n */\nexport const handleSegmentDecorator: ContentModelSegmentHandler<ContentModelSegment> = (\n    _,\n    parent,\n    segment,\n    context,\n    segmentNodes\n) => {\n    const { code, link } = segment;\n\n    if (link) {\n        stackFormat(context, 'a', () => {\n            const a = document.createElement('a');\n\n            moveChildNodes(a, parent);\n            parent.appendChild(a);\n\n            applyFormat(a, context.formatAppliers.link, link.format, context);\n            applyFormat(a, context.formatAppliers.dataset, link.dataset, context);\n\n            segmentNodes?.push(a);\n            context.onNodeCreated?.(link, a);\n        });\n    }\n\n    if (code) {\n        stackFormat(context, 'code', () => {\n            const codeNode = document.createElement('code');\n\n            moveChildNodes(codeNode, parent);\n            parent.appendChild(codeNode);\n\n            applyFormat(codeNode, context.formatAppliers.code, code.format, context);\n\n            segmentNodes?.push(codeNode);\n            context.onNodeCreated?.(code, codeNode);\n        });\n    }\n};\n","import { applyFormat } from '../utils/applyFormat';\nimport { hasMetadata } from '../../domUtils/metadata/updateMetadata';\nimport { isBlockEmpty } from '../../modelApi/common/isEmpty';\nimport { moveChildNodes } from 'roosterjs-editor-dom';\nimport { reuseCachedElement } from '../utils/reuseCachedElement';\nimport type {\n    ContentModelBlockHandler,\n    ContentModelTable,\n    ModelToDomContext,\n    TableSelection,\n} from 'roosterjs-content-model-types';\n\n/**\n * @internal\n */\nexport const handleTable: ContentModelBlockHandler<ContentModelTable> = (\n    doc: Document,\n    parent: Node,\n    table: ContentModelTable,\n    context: ModelToDomContext,\n    refNode: Node | null\n) => {\n    if (isBlockEmpty(table)) {\n        // Empty table, do not create TABLE element and just return\n        return refNode;\n    }\n\n    let tableNode = context.allowCacheElement ? table.cachedElement : undefined;\n\n    if (tableNode) {\n        refNode = reuseCachedElement(parent, tableNode, refNode);\n\n        moveChildNodes(tableNode);\n    } else {\n        tableNode = doc.createElement('table');\n\n        if (context.allowCacheElement) {\n            table.cachedElement = tableNode;\n        }\n\n        parent.insertBefore(tableNode, refNode);\n\n        applyFormat(tableNode, context.formatAppliers.block, table.format, context);\n        applyFormat(tableNode, context.formatAppliers.table, table.format, context);\n        applyFormat(tableNode, context.formatAppliers.tableBorder, table.format, context);\n        applyFormat(tableNode, context.formatAppliers.dataset, table.dataset, context);\n    }\n\n    context.onNodeCreated?.(table, tableNode);\n\n    const tbody = doc.createElement('tbody');\n    tableNode.appendChild(tbody);\n\n    for (let row = 0; row < table.rows.length; row++) {\n        const tableRow = table.rows[row];\n\n        if (tableRow.cells.length == 0) {\n            // Skip empty row\n            continue;\n        }\n\n        const tr = (context.allowCacheElement && tableRow.cachedElement) || doc.createElement('tr');\n        tbody.appendChild(tr);\n        moveChildNodes(tr);\n\n        if (!tableRow.cachedElement) {\n            if (context.allowCacheElement) {\n                tableRow.cachedElement = tr;\n            }\n\n            applyFormat(tr, context.formatAppliers.tableRow, tableRow.format, context);\n        }\n\n        context.onNodeCreated?.(tableRow, tr);\n\n        for (let col = 0; col < tableRow.cells.length; col++) {\n            const cell = tableRow.cells[col];\n\n            if (cell.isSelected) {\n                const tableSelection: TableSelection = context.tableSelection || {\n                    type: 'table',\n                    table: tableNode,\n                    firstColumn: col,\n                    lastColumn: col,\n                    firstRow: row,\n                    lastRow: row,\n                };\n\n                if (tableSelection.table == tableNode) {\n                    tableSelection.lastColumn = Math.max(tableSelection.lastColumn, col);\n                    tableSelection.lastRow = Math.max(tableSelection.lastRow, row);\n                }\n\n                context.tableSelection = tableSelection;\n            }\n\n            if (!cell.spanAbove && !cell.spanLeft) {\n                let td =\n                    (context.allowCacheElement && cell.cachedElement) ||\n                    doc.createElement(cell.isHeader ? 'th' : 'td');\n\n                tr.appendChild(td);\n\n                let rowSpan = 1;\n                let colSpan = 1;\n                let width = table.widths[col];\n                let height = tableRow.height;\n\n                for (; table.rows[row + rowSpan]?.cells[col]?.spanAbove; rowSpan++) {\n                    height += table.rows[row + rowSpan].height;\n                }\n                for (; tableRow.cells[col + colSpan]?.spanLeft; colSpan++) {\n                    width += table.widths[col + colSpan];\n                }\n\n                if (rowSpan > 1) {\n                    td.rowSpan = rowSpan;\n                }\n\n                if (colSpan > 1) {\n                    td.colSpan = colSpan;\n                }\n\n                if (!cell.cachedElement || (cell.format.useBorderBox && hasMetadata(table))) {\n                    if (width > 0 && !td.style.width) {\n                        td.style.width = width + 'px';\n                    }\n\n                    if (height > 0 && !td.style.height) {\n                        td.style.height = height + 'px';\n                    }\n                }\n\n                if (!cell.cachedElement) {\n                    if (context.allowCacheElement) {\n                        cell.cachedElement = td;\n                    }\n\n                    applyFormat(td, context.formatAppliers.block, cell.format, context);\n                    applyFormat(td, context.formatAppliers.tableCell, cell.format, context);\n                    applyFormat(td, context.formatAppliers.tableCellBorder, cell.format, context);\n                    applyFormat(td, context.formatAppliers.dataset, cell.dataset, context);\n                }\n\n                context.modelHandlers.blockGroupChildren(doc, td, cell, context);\n\n                context.onNodeCreated?.(cell, td);\n            }\n        }\n    }\n\n    context.domIndexer?.onTable(tableNode, table);\n\n    return refNode;\n};\n","import { handleSegmentCommon } from '../utils/handleSegmentCommon';\nimport type { ContentModelSegmentHandler, ContentModelText } from 'roosterjs-content-model-types';\n\n/**\n * @internal\n */\nexport const handleText: ContentModelSegmentHandler<ContentModelText> = (\n    doc,\n    parent,\n    segment,\n    context,\n    segmentNodes\n) => {\n    const txt = doc.createTextNode(segment.text);\n    const element = doc.createElement('span');\n\n    parent.appendChild(element);\n    element.appendChild(txt);\n\n    handleSegmentCommon(doc, txt, element, segment, context, segmentNodes);\n};\n","import { isNodeOfType } from '../../domUtils/isNodeOfType';\n\nconst OptimizeTags = ['SPAN', 'B', 'EM', 'I', 'U', 'SUB', 'SUP', 'STRIKE', 'S', 'A', 'CODE'];\n\n/**\n * @internal\n */\nexport function mergeNode(root: Node) {\n    for (let child = root.firstChild; child; ) {\n        const next = child.nextSibling;\n\n        if (\n            next &&\n            isNodeOfType(child, 'ELEMENT_NODE') &&\n            isNodeOfType(next, 'ELEMENT_NODE') &&\n            child.tagName == next.tagName &&\n            OptimizeTags.indexOf(child.tagName) >= 0 &&\n            hasSameAttributes(child, next)\n        ) {\n            while (next.firstChild) {\n                child.appendChild(next.firstChild);\n            }\n\n            next.parentNode!.removeChild(next);\n        } else {\n            child = next;\n        }\n    }\n}\n\nfunction hasSameAttributes(element1: HTMLElement, element2: HTMLElement) {\n    const attr1 = element1.attributes;\n    const attr2 = element2.attributes;\n\n    if (attr1.length != attr2.length) {\n        return false;\n    }\n\n    for (let i = 0; i < attr1.length; i++) {\n        if (attr1[i].name != attr2[i].name || attr1[i].value != attr2[i].value) {\n            return false;\n        }\n    }\n\n    return true;\n}\n","import { isEntityElement } from '../../domUtils/entityUtils';\nimport { mergeNode } from './mergeNode';\nimport { removeUnnecessarySpan } from './removeUnnecessarySpan';\n\n/**\n * @internal\n */\nexport function optimize(root: Node) {\n    /**\n     * Do no do any optimization to entity\n     */\n    if (isEntityElement(root)) {\n        return;\n    }\n\n    removeUnnecessarySpan(root);\n    mergeNode(root);\n\n    for (let child = root.firstChild; child; child = child.nextSibling) {\n        optimize(child);\n    }\n}\n","import { isNodeOfType } from '../../domUtils/isNodeOfType';\n\n/**\n * @internal\n */\nexport function removeUnnecessarySpan(root: Node) {\n    for (let child = root.firstChild; child; ) {\n        if (\n            isNodeOfType(child, 'ELEMENT_NODE') &&\n            child.tagName == 'SPAN' &&\n            child.attributes.length == 0\n        ) {\n            const node = child;\n            let refNode = child.nextSibling;\n            child = child.nextSibling;\n\n            while (node.lastChild) {\n                const newNode = node.lastChild;\n                root.insertBefore(newNode, refNode);\n                refNode = newNode;\n            }\n\n            root.removeChild(node);\n        } else {\n            child = child.nextSibling;\n        }\n    }\n}\n","import type {\n    ContentModelFormatBase,\n    FormatApplier,\n    ModelToDomContext,\n} from 'roosterjs-content-model-types';\n\n/**\n * @internal\n * Apply formats to the given HTML element using specified appliers\n * @param element The element to apply formats to\n * @param appliers The appliers we are using to apply formats\n * @param format The format object we get format info from\n * @param context Content Model to DOM context\n */\nexport function applyFormat<T extends ContentModelFormatBase>(\n    element: HTMLElement,\n    appliers: (FormatApplier<T> | null)[],\n    format: T,\n    context: ModelToDomContext\n) {\n    appliers.forEach(applier => {\n        applier?.(format, element, context);\n    });\n}\n","import { applyFormat } from './applyFormat';\nimport type { ContentModelSegment, ModelToDomContext } from 'roosterjs-content-model-types';\n\n/**\n * @internal\n */\nexport function handleSegmentCommon(\n    doc: Document,\n    segmentNode: Node,\n    containerNode: HTMLElement,\n    segment: ContentModelSegment,\n    context: ModelToDomContext,\n    segmentNodes: Node[]\n) {\n    if (!segmentNode.firstChild) {\n        context.regularSelection.current.segment = segmentNode;\n    }\n\n    applyFormat(containerNode, context.formatAppliers.styleBasedSegment, segment.format, context);\n\n    segmentNodes?.push(segmentNode);\n    context.modelHandlers.segmentDecorator(doc, containerNode, segment, context, segmentNodes);\n\n    applyFormat(containerNode, context.formatAppliers.elementBasedSegment, segment.format, context);\n\n    context.onNodeCreated?.(segment, segmentNode);\n}\n","import { isEntityElement } from '../../domUtils/entityUtils';\n\n/**\n * @internal\n */\nexport function reuseCachedElement(parent: Node, element: Node, refNode: Node | null): Node | null {\n    if (element.parentNode == parent) {\n        // Remove nodes before the one we are hitting since they don't appear in Content Model at this position.\n        // But we don't want to touch entity since it would better to keep entity at its place unless it is removed\n        // In that case we will remove it after we have handled all other nodes\n        while (refNode && refNode != element && !isEntityElement(refNode)) {\n            const next = refNode.nextSibling;\n\n            refNode.parentNode?.removeChild(refNode);\n            refNode = next;\n        }\n\n        if (refNode && refNode == element) {\n            refNode = refNode.nextSibling;\n        } else {\n            parent.insertBefore(element, refNode);\n        }\n    } else {\n        parent.insertBefore(element, refNode);\n    }\n\n    return refNode;\n}\n\n/**\n * @internal\n */\nexport function removeNode(node: Node): Node | null {\n    const next = node.nextSibling;\n    node.parentNode?.removeChild(node);\n\n    return next;\n}\n","import { defaultContentModelFormatMap } from '../../config/defaultContentModelFormatMap';\nimport type {\n    ContentModelBlockFormat,\n    ContentModelSegmentFormat,\n    ModelToDomContext,\n} from 'roosterjs-content-model-types';\n\n/**\n * @internal\n */\nexport function stackFormat(\n    context: ModelToDomContext,\n    tagNameOrFormat: string | (ContentModelSegmentFormat & ContentModelBlockFormat) | null,\n    callback: () => void\n) {\n    const newFormat =\n        typeof tagNameOrFormat === 'string'\n            ? defaultContentModelFormatMap[tagNameOrFormat]\n            : tagNameOrFormat;\n\n    if (newFormat) {\n        const implicitFormat = context.implicitFormat;\n\n        try {\n            context.implicitFormat = {\n                ...implicitFormat,\n                ...newFormat,\n            };\n\n            callback();\n        } finally {\n            context.implicitFormat = implicitFormat;\n        }\n    } else {\n        callback();\n    }\n}\n","import type { Border } from '../publicTypes/interface/Border';\n\nconst BorderStyles = [\n    'none',\n    'hidden',\n    'dotted',\n    'dashed',\n    'solid',\n    'double',\n    'groove',\n    'ridge',\n    'inset',\n    'outset',\n];\nconst BorderSizeRegex = /^(thin|medium|thick|[\\d\\.]+\\w*)$/;\n\n/**\n * Extract an integrated border string with border width, style, color to value tuple\n * @param combinedBorder The integrated border style string\n * @returns An array with the splitted values\n */\nexport function extractBorderValues(combinedBorder?: string): Border {\n    const result: Border = {};\n    const values = (combinedBorder || '').replace(/, /g, ',').split(' ');\n\n    values.forEach(v => {\n        if (BorderStyles.indexOf(v) >= 0 && !result.style) {\n            result.style = v;\n        } else if (BorderSizeRegex.test(v) && !result.width) {\n            result.width = v;\n        } else if (v && !result.color) {\n            result.color = v; // TODO: Do we need to use a regex to match all possible colors?\n        }\n    });\n\n    return result;\n}\n\n/**\n * Combine border value array back to string\n * @param values Input string values\n * @param initialValue Initial value for those items without valid value\n */\nexport function combineBorderValue(value: Border): string {\n    return [value.width || '', value.style || '', value.color || ''].join(' ').trim() || 'none';\n}\n","import { updateMetadata } from 'roosterjs-content-model-dom';\nimport type { ContentModelImage, ImageMetadataFormat } from 'roosterjs-content-model-types';\nimport {\n    createNumberDefinition,\n    createObjectDefinition,\n    createStringDefinition,\n} from 'roosterjs-editor-dom';\n\nconst NumberDefinition = createNumberDefinition();\n\nconst ImageMetadataFormatDefinition = createObjectDefinition<Required<ImageMetadataFormat>>({\n    widthPx: NumberDefinition,\n    heightPx: NumberDefinition,\n    leftPercent: NumberDefinition,\n    rightPercent: NumberDefinition,\n    topPercent: NumberDefinition,\n    bottomPercent: NumberDefinition,\n    angleRad: NumberDefinition,\n    src: createStringDefinition(),\n    naturalHeight: NumberDefinition,\n    naturalWidth: NumberDefinition,\n});\n\n/**\n * Update image metadata with a callback\n * @param image The image Content Model\n * @param callback The callback function used for updating metadata\n */\nexport function updateImageMetadata(\n    image: ContentModelImage,\n    callback?: (format: ImageMetadataFormat | null) => ImageMetadataFormat | null\n): ImageMetadataFormat | null {\n    return updateMetadata(image, callback, ImageMetadataFormatDefinition);\n}\n","import { createBooleanDefinition, createObjectDefinition } from 'roosterjs-editor-dom';\nimport { updateMetadata } from 'roosterjs-content-model-dom';\nimport type { ContentModelTableCell } from 'roosterjs-content-model-types';\nimport type { TableCellMetadataFormat } from 'roosterjs-editor-types';\n\nconst TableCellMetadataFormatDefinition = createObjectDefinition<Required<TableCellMetadataFormat>>(\n    {\n        bgColorOverride: createBooleanDefinition(true /** isOptional */),\n        vAlignOverride: createBooleanDefinition(true /** isOptional */),\n    },\n    false /* isOptional */,\n    true /** allowNull */\n);\n\n/**\n * Update table cell metadata with a callback\n * @param cell The table cell Content Model\n * @param callback The callback function used for updating metadata\n */\nexport function updateTableCellMetadata(\n    cell: ContentModelTableCell,\n    callback?: (format: TableCellMetadataFormat | null) => TableCellMetadataFormat | null\n): TableCellMetadataFormat | null {\n    return updateMetadata(cell, callback, TableCellMetadataFormatDefinition);\n}\n","import { TableBorderFormat } from 'roosterjs-editor-types';\nimport { updateMetadata } from 'roosterjs-content-model-dom';\nimport type { ContentModelTable, TableMetadataFormat } from 'roosterjs-content-model-types';\nimport {\n    createBooleanDefinition,\n    createNumberDefinition,\n    createObjectDefinition,\n    createStringDefinition,\n} from 'roosterjs-editor-dom';\n\nconst NullStringDefinition = createStringDefinition(\n    false /** isOptional */,\n    undefined /** value */,\n    true /** allowNull */\n);\n\nconst BooleanDefinition = createBooleanDefinition(false /** isOptional */);\n\nconst TableFormatDefinition = createObjectDefinition<Required<TableMetadataFormat>>(\n    {\n        topBorderColor: NullStringDefinition,\n        bottomBorderColor: NullStringDefinition,\n        verticalBorderColor: NullStringDefinition,\n        hasHeaderRow: BooleanDefinition,\n        headerRowColor: NullStringDefinition,\n        hasFirstColumn: BooleanDefinition,\n        hasBandedColumns: BooleanDefinition,\n        hasBandedRows: BooleanDefinition,\n        bgColorEven: NullStringDefinition,\n        bgColorOdd: NullStringDefinition,\n        tableBorderFormat: createNumberDefinition(\n            false /** isOptional */,\n            undefined /* value */,\n            TableBorderFormat.DEFAULT /* first table border format, TODO: Use Min/Max to specify valid values */,\n            TableBorderFormat.CLEAR /* last table border format, , TODO: Use Min/Max to specify valid values */\n        ),\n        verticalAlign: NullStringDefinition,\n    },\n    false /* isOptional */,\n    true /** allowNull */\n);\n\n/**\n * Update table metadata with a callback\n * @param table The table Content Model\n * @param callback The callback function used for updating metadata\n */\nexport function updateTableMetadata(\n    table: ContentModelTable,\n    callback?: (format: TableMetadataFormat | null) => TableMetadataFormat | null\n): TableMetadataFormat | null {\n    return updateMetadata(table, callback, TableFormatDefinition);\n}\n","const SPACES_REGEX = /[\\u2000\\u2009\\u200a​\\u200b​\\u202f\\u205f​\\u3000\\s\\t\\r\\n]/gm;\nconst PUNCTUATIONS = '.,?!:\"()[]\\\\/';\n\n/**\n * @internal\n * Check if the given character is punctuation\n * @param char The character to check\n */\nexport function isPunctuation(char: string) {\n    return PUNCTUATIONS.indexOf(char) >= 0;\n}\n\n/**\n * @internal\n * Check if the give character is a space. A space can be normal ASCII pace (32) or non-break space (160) or other kinds of spaces\n * such as ZeroWidthSpace, ...\n * @param char The character to check\n */\nexport function isSpace(char: string) {\n    const code = char?.charCodeAt(0) ?? 0;\n    return code == 160 || code == 32 || SPACES_REGEX.test(char);\n}\n\n/**\n * @internal\n * Normalize spaces of the given string. After normalization, all leading (for forward) or trailing (for backward) spaces\n * will be replaces with non-break space (160)\n * @param txt The string to normalize\n * @param isForward Whether normalize forward or backward\n */\nexport function normalizeText(txt: string, isForward: boolean): string {\n    return txt.replace(isForward ? /^\\u0020+/ : /\\u0020+$/, '\\u00A0');\n}\n","import { createContentModelEditorCore } from './createContentModelEditorCore';\nimport { EditorBase } from 'roosterjs-editor-core';\nimport type { ContentModelEditorCore } from '../publicTypes/ContentModelEditorCore';\nimport type {\n    ContentModelEditorOptions,\n    IContentModelEditor,\n} from '../publicTypes/IContentModelEditor';\nimport type {\n    ContentModelDocument,\n    DOMSelection,\n    DomToModelOption,\n    ModelToDomOption,\n    OnNodeCreated,\n} from 'roosterjs-content-model-types';\n\n/**\n * Editor for Content Model.\n * (This class is still under development, and may still be changed in the future with some breaking changes)\n */\nexport default class ContentModelEditor\n    extends EditorBase<ContentModelEditorCore, ContentModelEditorOptions>\n    implements IContentModelEditor {\n    /**\n     * Creates an instance of Editor\n     * @param contentDiv The DIV HTML element which will be the container element of editor\n     * @param options An optional options object to customize the editor\n     */\n    constructor(contentDiv: HTMLDivElement, options: ContentModelEditorOptions = {}) {\n        super(contentDiv, options, createContentModelEditorCore);\n\n        if (options.cacheModel) {\n            // Create an initial content model to cache\n            // TODO: Once we have standalone editor and get rid of `ensureTypeInContainer` function, we can set init content\n            // using content model and cache the model directly\n            this.createContentModel();\n        }\n    }\n\n    /**\n     * Create Content Model from DOM tree in this editor\n     * @param option The option to customize the behavior of DOM to Content Model conversion\n     */\n    createContentModel(\n        option?: DomToModelOption,\n        selectionOverride?: DOMSelection\n    ): ContentModelDocument {\n        const core = this.getCore();\n\n        return core.api.createContentModel(core, option, selectionOverride);\n    }\n\n    /**\n     * Set content with content model\n     * @param model The content model to set\n     * @param option Additional options to customize the behavior of Content Model to DOM conversion\n     * @param onNodeCreated An optional callback that will be called when a DOM node is created\n     */\n    setContentModel(\n        model: ContentModelDocument,\n        option?: ModelToDomOption,\n        onNodeCreated?: OnNodeCreated\n    ): DOMSelection | null {\n        const core = this.getCore();\n\n        return core.api.setContentModel(core, model, option, onNodeCreated);\n    }\n\n    /**\n     * Get current DOM selection\n     */\n    getDOMSelection(): DOMSelection | null {\n        const core = this.getCore();\n\n        return core.api.getDOMSelection(core);\n    }\n\n    /**\n     * Set DOMSelection into editor content.\n     * This is the replacement of IEditor.select.\n     * @param selection The selection to set\n     */\n    setDOMSelection(selection: DOMSelection) {\n        const core = this.getCore();\n\n        core.api.setDOMSelection(core, selection);\n    }\n}\n","import { cloneModel } from '../../modelApi/common/cloneModel';\nimport type { DOMSelection, DomToModelOption } from 'roosterjs-content-model-types';\nimport {\n    createDomToModelContext,\n    createDomToModelContextWithConfig,\n    domToContentModel,\n} from 'roosterjs-content-model-dom';\nimport type {\n    ContentModelEditorCore,\n    CreateContentModel,\n} from '../../publicTypes/ContentModelEditorCore';\n\n/**\n * @internal\n * Create Content Model from DOM tree in this editor\n * @param core The editor core object\n * @param option The option to customize the behavior of DOM to Content Model conversion\n * @param selectionOverride When passed, use this selection range instead of current selection in editor\n */\nexport const createContentModel: CreateContentModel = (core, option, selectionOverride) => {\n    let cachedModel = selectionOverride ? null : core.cache.cachedModel;\n\n    if (cachedModel && core.lifecycle.shadowEditFragment) {\n        // When in shadow edit, use a cloned model so we won't pollute the cached one\n        cachedModel = cloneModel(cachedModel, { includeCachedElement: true });\n    }\n\n    if (cachedModel) {\n        return cachedModel;\n    } else {\n        const selection = selectionOverride || core.api.getDOMSelection(core) || undefined;\n        const model = internalCreateContentModel(core, selection, option);\n\n        if (!option && !selectionOverride) {\n            core.cache.cachedModel = model;\n            core.cache.cachedSelection = selection;\n        }\n\n        return model;\n    }\n};\n\nfunction internalCreateContentModel(\n    core: ContentModelEditorCore,\n    selection?: DOMSelection,\n    option?: DomToModelOption\n) {\n    const editorContext = core.api.createEditorContext(core);\n    const domToModelContext = option\n        ? createDomToModelContext(editorContext, ...(core.defaultDomToModelOptions || []), option)\n        : createDomToModelContextWithConfig(core.defaultDomToModelConfig, editorContext);\n\n    return domToContentModel(core.contentDiv, domToModelContext, selection);\n}\n","import type { CreateEditorContext } from '../../publicTypes/ContentModelEditorCore';\nimport type { EditorContext } from 'roosterjs-content-model-types';\n\n/**\n * @internal\n * Create a EditorContext object used by ContentModel API\n */\nexport const createEditorContext: CreateEditorContext = core => {\n    const { lifecycle, format, darkColorHandler, contentDiv, cache } = core;\n\n    const context: EditorContext = {\n        isDarkMode: lifecycle.isDarkMode,\n        defaultFormat: format.defaultFormat,\n        darkColorHandler: darkColorHandler,\n        addDelimiterForEntity: true,\n        allowCacheElement: true,\n        domIndexer: cache.domIndexer,\n    };\n\n    checkRootRtl(contentDiv, context);\n    checkZoomScale(contentDiv, context);\n\n    return context;\n};\n\nfunction checkZoomScale(element: HTMLElement, context: EditorContext) {\n    const originalWidth = element?.getBoundingClientRect()?.width || 0;\n    const visualWidth = element.offsetWidth;\n\n    if (visualWidth > 0 && originalWidth > 0) {\n        context.zoomScale = Math.round((originalWidth / visualWidth) * 100) / 100;\n    }\n}\n\nfunction checkRootRtl(element: HTMLElement, context: EditorContext) {\n    const style = element?.ownerDocument.defaultView?.getComputedStyle(element);\n\n    if (style?.direction == 'rtl') {\n        context.isRootRtl = true;\n    }\n}\n","import { SelectionRangeTypes } from 'roosterjs-editor-types';\nimport type {\n    ContentModelEditorCore,\n    GetDOMSelection,\n} from '../../publicTypes/ContentModelEditorCore';\nimport type { DOMSelection } from 'roosterjs-content-model-types';\n\n/**\n * @internal\n */\nexport const getDOMSelection: GetDOMSelection = core => {\n    return core.cache.cachedSelection ?? getNewSelection(core);\n};\n\nfunction getNewSelection(core: ContentModelEditorCore): DOMSelection | null {\n    // TODO: Get rid of getSelectionRangeEx when we have standalone editor\n    const rangeEx = core.api.getSelectionRangeEx(core);\n\n    if (rangeEx.type == SelectionRangeTypes.Normal && rangeEx.ranges[0]) {\n        return {\n            type: 'range',\n            range: rangeEx.ranges[0],\n        };\n    } else if (rangeEx.type == SelectionRangeTypes.TableSelection && rangeEx.coordinates) {\n        return {\n            type: 'table',\n            table: rangeEx.table,\n            firstColumn: rangeEx.coordinates.firstCell.x,\n            lastColumn: rangeEx.coordinates.lastCell.x,\n            firstRow: rangeEx.coordinates.firstCell.y,\n            lastRow: rangeEx.coordinates.lastCell.y,\n        };\n    } else if (rangeEx.type == SelectionRangeTypes.ImageSelection) {\n        return {\n            type: 'image',\n            image: rangeEx.image,\n        };\n    } else {\n        return null;\n    }\n}\n","import type { SetContentModel } from '../../publicTypes/ContentModelEditorCore';\nimport {\n    contentModelToDom,\n    createModelToDomContext,\n    createModelToDomContextWithConfig,\n} from 'roosterjs-content-model-dom';\n\n/**\n * @internal\n * Set content with content model\n * @param core The editor core object\n * @param model The content model to set\n * @param option Additional options to customize the behavior of Content Model to DOM conversion\n */\nexport const setContentModel: SetContentModel = (core, model, option, onNodeCreated) => {\n    const editorContext = core.api.createEditorContext(core);\n    const modelToDomContext = option\n        ? createModelToDomContext(editorContext, ...(core.defaultModelToDomOptions || []), option)\n        : createModelToDomContextWithConfig(core.defaultModelToDomConfig, editorContext);\n    const selection = contentModelToDom(\n        core.contentDiv.ownerDocument,\n        core.contentDiv,\n        model,\n        modelToDomContext,\n        onNodeCreated\n    );\n\n    core.contentDiv.normalize();\n\n    if (!core.lifecycle.shadowEditFragment) {\n        core.cache.cachedSelection = selection || undefined;\n\n        if (selection) {\n            core.api.setDOMSelection(core, selection);\n        }\n\n        core.cache.cachedModel = model;\n    }\n\n    return selection;\n};\n","import { SelectionRangeTypes } from 'roosterjs-editor-types';\nimport type { SelectionRangeEx } from 'roosterjs-editor-types';\nimport type { SetDOMSelection } from '../../publicTypes/ContentModelEditorCore';\n\n/**\n * @internal\n */\nexport const setDOMSelection: SetDOMSelection = (core, selection) => {\n    // TODO: Get rid of SelectionRangeEx in standalone editor\n    const rangeEx: SelectionRangeEx =\n        selection.type == 'range'\n            ? {\n                  type: SelectionRangeTypes.Normal,\n                  ranges: [selection.range],\n                  areAllCollapsed: selection.range.collapsed,\n              }\n            : selection.type == 'image'\n            ? {\n                  type: SelectionRangeTypes.ImageSelection,\n                  ranges: [],\n                  areAllCollapsed: false,\n                  image: selection.image,\n              }\n            : {\n                  type: SelectionRangeTypes.TableSelection,\n                  ranges: [],\n                  areAllCollapsed: false,\n                  table: selection.table,\n                  coordinates: {\n                      firstCell: {\n                          x: selection.firstColumn,\n                          y: selection.firstRow,\n                      },\n                      lastCell: {\n                          x: selection.lastColumn,\n                          y: selection.lastRow,\n                      },\n                  },\n              };\n\n    core.api.select(core, rangeEx);\n};\n","import { getSelectionPath } from 'roosterjs-editor-dom';\nimport { PluginEventType } from 'roosterjs-editor-types';\nimport type { ContentModelEditorCore } from '../../publicTypes/ContentModelEditorCore';\nimport type { SwitchShadowEdit } from 'roosterjs-editor-types';\n\n/**\n * @internal\n * Switch the Shadow Edit mode of editor On/Off\n * @param editorCore The EditorCore object\n * @param isOn True to switch On, False to switch Off\n */\nexport const switchShadowEdit: SwitchShadowEdit = (editorCore, isOn): void => {\n    // TODO: Use strong-typed editor core object\n    const core = editorCore as ContentModelEditorCore;\n\n    if (isOn != !!core.lifecycle.shadowEditFragment) {\n        if (isOn) {\n            const model = !core.cache.cachedModel ? core.api.createContentModel(core) : null;\n            const range = core.api.getSelectionRange(core, true /*tryGetFromCache*/);\n\n            // Fake object, not used in Content Model Editor, just to satisfy original editor code\n            // TODO: we can remove them once we have standalone Content Model Editor\n            const fragment = core.contentDiv.ownerDocument.createDocumentFragment();\n            const selectionPath = range && getSelectionPath(core.contentDiv, range);\n\n            core.api.triggerEvent(\n                core,\n                {\n                    eventType: PluginEventType.EnteredShadowEdit,\n                    fragment,\n                    selectionPath,\n                },\n                false /*broadcast*/\n            );\n\n            // This need to be done after EnteredShadowEdit event is triggered since EnteredShadowEdit event will cause a SelectionChanged event\n            // if current selection is table selection or image selection\n            if (!core.cache.cachedModel && model) {\n                core.cache.cachedModel = model;\n            }\n\n            core.lifecycle.shadowEditSelectionPath = selectionPath;\n            core.lifecycle.shadowEditFragment = fragment;\n        } else {\n            core.lifecycle.shadowEditFragment = null;\n            core.lifecycle.shadowEditSelectionPath = null;\n\n            core.api.triggerEvent(\n                core,\n                {\n                    eventType: PluginEventType.LeavingShadowEdit,\n                },\n                false /*broadcast*/\n            );\n\n            if (core.cache.cachedModel) {\n                core.api.setContentModel(core, core.cache.cachedModel);\n            }\n        }\n    }\n};\n","import { areSameRangeEx } from '../../modelApi/selection/areSameRangeEx';\nimport { isCharacterValue } from 'roosterjs-editor-dom';\nimport { Keys, PluginEventType } from 'roosterjs-editor-types';\nimport type ContentModelContentChangedEvent from '../../publicTypes/event/ContentModelContentChangedEvent';\nimport type { ContentModelCachePluginState } from '../../publicTypes/pluginState/ContentModelCachePluginState';\nimport type { IContentModelEditor } from '../../publicTypes/IContentModelEditor';\nimport type {\n    IEditor,\n    PluginEvent,\n    PluginKeyDownEvent,\n    PluginWithState,\n} from 'roosterjs-editor-types';\n\n/**\n * ContentModel cache plugin manages cached Content Model, and refresh the cache when necessary\n */\nexport default class ContentModelCachePlugin\n    implements PluginWithState<ContentModelCachePluginState> {\n    private editor: IContentModelEditor | null = null;\n\n    /**\n     * Construct a new instance of ContentModelEditPlugin class\n     * @param state State of this plugin\n     */\n    constructor(private state: ContentModelCachePluginState) {\n        // TODO: Remove tempState parameter once we have standalone Content Model editor\n    }\n\n    /**\n     * Get name of this plugin\n     */\n    getName() {\n        return 'ContentModelCache';\n    }\n\n    /**\n     * The first method that editor will call to a plugin when editor is initializing.\n     * It will pass in the editor instance, plugin should take this chance to save the\n     * editor reference so that it can call to any editor method or format API later.\n     * @param editor The editor object\n     */\n    initialize(editor: IEditor) {\n        // TODO: Later we may need a different interface for Content Model editor plugin\n        this.editor = editor as IContentModelEditor;\n        this.editor.getDocument().addEventListener('selectionchange', this.onNativeSelectionChange);\n    }\n\n    /**\n     * The last method that editor will call to a plugin before it is disposed.\n     * Plugin can take this chance to clear the reference to editor. After this method is\n     * called, plugin should not call to any editor method since it will result in error.\n     */\n    dispose() {\n        if (this.editor) {\n            this.editor\n                .getDocument()\n                .removeEventListener('selectionchange', this.onNativeSelectionChange);\n            this.editor = null;\n        }\n    }\n\n    /**\n     * Get plugin state object\n     */\n    getState(): ContentModelCachePluginState {\n        return this.state;\n    }\n\n    /**\n     * Core method for a plugin. Once an event happens in editor, editor will call this\n     * method of each plugin to handle the event as long as the event is not handled\n     * exclusively by another plugin.\n     * @param event The event to handle:\n     */\n    onPluginEvent(event: PluginEvent) {\n        if (!this.editor) {\n            return;\n        }\n\n        switch (event.eventType) {\n            case PluginEventType.KeyDown:\n                if (this.shouldClearCache(event)) {\n                    this.invalidateCache();\n                }\n                break;\n\n            case PluginEventType.Input:\n                {\n                    this.updateCachedModel(this.editor, true /*forceUpdate*/);\n                }\n                break;\n\n            case PluginEventType.SelectionChanged:\n                this.updateCachedModel(this.editor);\n                break;\n\n            case PluginEventType.ContentChanged:\n                {\n                    const { contentModel, selection } = event as ContentModelContentChangedEvent;\n\n                    if (contentModel && this.state.domIndexer) {\n                        this.state.cachedModel = contentModel;\n                        this.state.cachedSelection = selection;\n                    } else {\n                        this.invalidateCache();\n                    }\n                }\n\n                break;\n        }\n    }\n\n    private onNativeSelectionChange = () => {\n        if (this.editor?.hasFocus()) {\n            this.updateCachedModel(this.editor);\n        }\n    };\n\n    private invalidateCache() {\n        if (!this.editor?.isInShadowEdit()) {\n            this.state.cachedModel = undefined;\n            this.state.cachedSelection = undefined;\n        }\n    }\n\n    private updateCachedModel(editor: IContentModelEditor, forceUpdate?: boolean) {\n        const cachedSelection = this.state.cachedSelection;\n        this.state.cachedSelection = undefined; // Clear it to force getDOMSelection() retrieve the latest selection range\n\n        const newRangeEx = editor.getDOMSelection() || undefined;\n        const model = this.state.cachedModel;\n        const isSelectionChanged =\n            forceUpdate ||\n            !cachedSelection ||\n            !newRangeEx ||\n            !areSameRangeEx(newRangeEx, cachedSelection);\n\n        if (isSelectionChanged) {\n            if (\n                !model ||\n                !newRangeEx ||\n                !this.state.domIndexer?.reconcileSelection(model, newRangeEx, cachedSelection)\n            ) {\n                this.invalidateCache();\n            } else {\n                this.state.cachedSelection = newRangeEx;\n            }\n        } else {\n            this.state.cachedSelection = cachedSelection;\n        }\n    }\n\n    private shouldClearCache(event: PluginKeyDownEvent) {\n        const { rawEvent, handledByEditFeature } = event;\n\n        // In these cases we can't update the model, so clear cache:\n        // 1. It is already handled by Content Edit Features\n        if (handledByEditFeature) {\n            return true;\n        }\n\n        // 2. Default behavior is prevented, which means other plugins has handled the event\n        if (rawEvent.defaultPrevented) {\n            return true;\n        }\n\n        // 3. ENTER key is pressed. ENTER key will create new paragraph, so need to update cache to reflect this change\n        // TODO: Handle ENTER key to better reuse content model\n\n        if (rawEvent.which == Keys.ENTER) {\n            return true;\n        }\n\n        // 4. Current selection is image or table or expanded range selection, and is inputting some text\n        if (\n            (this.state.cachedSelection?.type != 'range' ||\n                !this.state.cachedSelection.range.collapsed) &&\n            isCharacterValue(rawEvent)\n        ) {\n            return true;\n        }\n\n        return false;\n    }\n}\n\n/**\n * @internal\n * Create a new instance of ContentModelCachePlugin class.\n * This is mostly for unit test\n * @param state State of this plugin\n */\nexport function createContentModelCachePlugin(state: ContentModelCachePluginState) {\n    return new ContentModelCachePlugin(state);\n}\n","import paste from '../../publicApi/utils/paste';\nimport { cloneModel } from '../../modelApi/common/cloneModel';\nimport { DeleteResult } from '../../modelApi/edit/utils/DeleteSelectionStep';\nimport { deleteSelection } from '../../modelApi/edit/deleteSelection';\nimport { formatWithContentModel } from '../../publicApi/utils/formatWithContentModel';\nimport { iterateSelections } from '../../modelApi/selection/iterateSelections';\nimport type { IContentModelEditor } from '../../publicTypes/IContentModelEditor';\nimport {\n    contentModelToDom,\n    createModelToDomContext,\n    isElementOfType,\n    isNodeOfType,\n    normalizeContentModel,\n    toArray,\n} from 'roosterjs-content-model-dom';\nimport type { DOMSelection, OnNodeCreated } from 'roosterjs-content-model-types';\nimport {\n    addRangeToSelection,\n    createElement,\n    moveChildNodes,\n    createRange,\n    extractClipboardItems,\n    wrap,\n} from 'roosterjs-editor-dom';\nimport type {\n    CopyPastePluginState,\n    IEditor,\n    PluginWithState,\n    ClipboardData,\n} from 'roosterjs-editor-types';\nimport {\n    ChangeSource,\n    PluginEventType,\n    KnownCreateElementDataIndex,\n    ColorTransformDirection,\n} from 'roosterjs-editor-types';\n\n/**\n * Copy and paste plugin for handling onCopy and onPaste event\n */\nexport default class ContentModelCopyPastePlugin implements PluginWithState<CopyPastePluginState> {\n    private editor: IContentModelEditor | null = null;\n    private disposer: (() => void) | null = null;\n\n    /**\n     * Construct a new instance of CopyPastePlugin\n     * @param options The editor options\n     */\n    constructor(private state: CopyPastePluginState) {}\n\n    /**\n     * Get a friendly name of  this plugin\n     */\n    getName() {\n        return 'ContentModelCopyPaste';\n    }\n\n    /**\n     * Initialize this plugin. This should only be called from Editor\n     * @param editor Editor instance\n     */\n    initialize(editor: IEditor) {\n        this.editor = editor as IContentModelEditor;\n        this.disposer = this.editor.addDomEventHandler({\n            paste: e => this.onPaste(e),\n            copy: e => this.onCutCopy(e, false /*isCut*/),\n            cut: e => this.onCutCopy(e, true /*isCut*/),\n        });\n    }\n\n    /**\n     * Dispose this plugin\n     */\n    dispose() {\n        if (this.disposer) {\n            this.disposer();\n        }\n        this.disposer = null;\n        this.editor = null;\n    }\n\n    /**\n     * Get plugin state object\n     */\n    getState() {\n        return this.state;\n    }\n\n    private onCutCopy(event: Event, isCut: boolean) {\n        if (!this.editor) {\n            return;\n        }\n        const selection = this.editor.getDOMSelection();\n        if (selection && (selection.type != 'range' || !selection.range.collapsed)) {\n            const model = this.editor.createContentModel();\n\n            const pasteModel = cloneModel(model, {\n                includeCachedElement: this.editor.isDarkMode()\n                    ? (node, type) => {\n                          if (type == 'cache') {\n                              return undefined;\n                          } else {\n                              const result = node.cloneNode(true /*deep*/) as HTMLElement;\n\n                              this.editor?.transformToDarkColor(\n                                  result,\n                                  ColorTransformDirection.DarkToLight\n                              );\n\n                              result.style.color = result.style.color || 'inherit';\n                              result.style.backgroundColor =\n                                  result.style.backgroundColor || 'inherit';\n\n                              return result;\n                          }\n                      }\n                    : false,\n            });\n            if (selection.type === 'table') {\n                iterateSelections([pasteModel], (path, tableContext) => {\n                    if (tableContext?.table) {\n                        const table = tableContext?.table;\n                        table.rows = table.rows\n                            .map(row => {\n                                return {\n                                    ...row,\n                                    cells: row.cells.filter(cell => cell.isSelected),\n                                };\n                            })\n                            .filter(row => row.cells.length > 0);\n                        return true;\n                    }\n                    return false;\n                });\n            }\n            const tempDiv = this.getTempDiv(this.editor);\n            const selectionForCopy = contentModelToDom(\n                tempDiv.ownerDocument,\n                tempDiv,\n                pasteModel,\n                createModelToDomContext(),\n                onNodeCreated\n            );\n\n            let newRange: Range | null = selectionExToRange(selectionForCopy, tempDiv);\n            if (newRange) {\n                newRange = this.editor.triggerPluginEvent(PluginEventType.BeforeCutCopy, {\n                    clonedRoot: tempDiv,\n                    range: newRange,\n                    rawEvent: event as ClipboardEvent,\n                    isCut,\n                }).range;\n\n                if (newRange) {\n                    addRangeToSelection(newRange);\n                }\n\n                this.editor.runAsync(editor => {\n                    cleanUpAndRestoreSelection(tempDiv);\n                    editor.focus();\n                    (editor as IContentModelEditor).setDOMSelection(selection);\n\n                    if (isCut) {\n                        formatWithContentModel(\n                            editor as IContentModelEditor,\n                            'cut',\n                            (model, context) => {\n                                if (\n                                    deleteSelection(model, [], context).deleteResult ==\n                                    DeleteResult.Range\n                                ) {\n                                    normalizeContentModel(model);\n                                }\n\n                                return true;\n                            },\n                            {\n                                changeSource: ChangeSource.Cut,\n                            }\n                        );\n                    }\n                });\n            } else {\n                cleanUpAndRestoreSelection(tempDiv);\n            }\n        }\n    }\n\n    private onPaste = (event: Event) => {\n        if (this.editor && isClipboardEvent(event)) {\n            const editor = this.editor;\n\n            const dataTransfer = event.clipboardData;\n\n            if (dataTransfer?.items) {\n                event.preventDefault();\n                extractClipboardItems(\n                    toArray(dataTransfer.items),\n                    {\n                        allowedCustomPasteType: this.state.allowedCustomPasteType,\n                    },\n                    true /*pasteNativeEvent*/\n                ).then((clipboardData: ClipboardData) => {\n                    if (!editor.isDisposed()) {\n                        paste(editor, clipboardData);\n                    }\n                });\n            }\n        }\n    };\n\n    private getTempDiv(editor: IEditor) {\n        const div = editor.getCustomData(\n            'CopyPasteTempDiv',\n            () => {\n                const tempDiv = createElement(\n                    KnownCreateElementDataIndex.CopyPasteTempDiv,\n                    editor.getDocument()\n                ) as HTMLDivElement;\n\n                editor.getDocument().body.appendChild(tempDiv);\n\n                return tempDiv;\n            },\n            tempDiv => tempDiv.parentNode?.removeChild(tempDiv)\n        );\n\n        div.style.backgroundColor = 'white';\n        div.style.color = 'black';\n        div.childNodes.forEach(node => div.removeChild(node));\n\n        div.style.display = '';\n        div.focus();\n\n        return div;\n    }\n}\n\nfunction cleanUpAndRestoreSelection(tempDiv: HTMLDivElement) {\n    tempDiv.style.backgroundColor = '';\n    tempDiv.style.color = '';\n    tempDiv.style.display = 'none';\n    moveChildNodes(tempDiv);\n}\n\nfunction isClipboardEvent(event: Event): event is ClipboardEvent {\n    return !!(event as ClipboardEvent).clipboardData;\n}\n\nfunction selectionExToRange(selection: DOMSelection | null, tempDiv: HTMLDivElement): Range | null {\n    if (!selection) {\n        return null;\n    }\n    let newRange: Range | null = null;\n    if (selection.type === 'table') {\n        const table = tempDiv.querySelector(`#${selection.table.id}`) as HTMLTableElement;\n        const elementToSelect =\n            table.parentElement?.childElementCount == 1 ? table.parentElement : table;\n        newRange = createRange(elementToSelect);\n    } else if (selection.type === 'image') {\n        const image = tempDiv.querySelector('#' + selection.image.id);\n\n        if (image) {\n            newRange = createRange(image);\n        }\n    } else {\n        newRange = selection.range;\n    }\n\n    return newRange;\n}\n\n/**\n * @internal\n * Exported only for unit testing\n */\nexport const onNodeCreated: OnNodeCreated = (_, node): void => {\n    if (isNodeOfType(node, 'ELEMENT_NODE') && isElementOfType(node, 'table')) {\n        wrap(node, 'div');\n    }\n    if (isNodeOfType(node, 'ELEMENT_NODE') && !node.isContentEditable) {\n        node.removeAttribute('contenteditable');\n    }\n};\n","import keyboardDelete from '../../publicApi/editing/keyboardDelete';\nimport { Keys, PluginEventType } from 'roosterjs-editor-types';\nimport type { IContentModelEditor } from '../../publicTypes/IContentModelEditor';\nimport type {\n    EditorPlugin,\n    IEditor,\n    PluginEvent,\n    PluginKeyDownEvent,\n} from 'roosterjs-editor-types';\n\n/**\n * ContentModel plugins helps editor to do editing operation on top of content model.\n * This includes:\n * 1. Delete Key\n * 2. Backspace Key\n */\nexport default class ContentModelEditPlugin implements EditorPlugin {\n    private editor: IContentModelEditor | null = null;\n\n    /**\n     * Get name of this plugin\n     */\n    getName() {\n        return 'ContentModelEdit';\n    }\n\n    /**\n     * The first method that editor will call to a plugin when editor is initializing.\n     * It will pass in the editor instance, plugin should take this chance to save the\n     * editor reference so that it can call to any editor method or format API later.\n     * @param editor The editor object\n     */\n    initialize(editor: IEditor) {\n        // TODO: Later we may need a different interface for Content Model editor plugin\n        this.editor = editor as IContentModelEditor;\n    }\n\n    /**\n     * The last method that editor will call to a plugin before it is disposed.\n     * Plugin can take this chance to clear the reference to editor. After this method is\n     * called, plugin should not call to any editor method since it will result in error.\n     */\n    dispose() {\n        this.editor = null;\n    }\n\n    /**\n     * Core method for a plugin. Once an event happens in editor, editor will call this\n     * method of each plugin to handle the event as long as the event is not handled\n     * exclusively by another plugin.\n     * @param event The event to handle:\n     */\n    onPluginEvent(event: PluginEvent) {\n        if (this.editor) {\n            switch (event.eventType) {\n                case PluginEventType.KeyDown:\n                    this.handleKeyDownEvent(this.editor, event);\n                    break;\n            }\n        }\n    }\n\n    private handleKeyDownEvent(editor: IContentModelEditor, event: PluginKeyDownEvent) {\n        const rawEvent = event.rawEvent;\n        const which = rawEvent.which;\n\n        if (!rawEvent.defaultPrevented && !event.handledByEditFeature) {\n            // TODO: Consider use ContentEditFeature and need to hide other conflict features that are not based on Content Model\n            switch (which) {\n                case Keys.BACKSPACE:\n                case Keys.DELETE:\n                    // Use our API to handle BACKSPACE/DELETE key.\n                    // No need to clear cache here since if we rely on browser's behavior, there will be Input event and its handler will reconcile cache\n                    keyboardDelete(editor, rawEvent);\n                    break;\n            }\n        }\n    }\n}\n\n/**\n * @internal\n * Create a new instance of ContentModelEditPlugin class.\n * This is mostly for unit test\n */\nexport function createContentModelEditPlugin() {\n    return new ContentModelEditPlugin();\n}\n","import applyDefaultFormat from '../../publicApi/format/applyDefaultFormat';\nimport applyPendingFormat from '../../publicApi/format/applyPendingFormat';\nimport { canApplyPendingFormat, clearPendingFormat } from '../../modelApi/format/pendingFormat';\nimport { getObjectKeys } from 'roosterjs-content-model-dom';\nimport { isCharacterValue } from 'roosterjs-editor-dom';\nimport { Keys, PluginEventType } from 'roosterjs-editor-types';\nimport type { IContentModelEditor } from '../../publicTypes/IContentModelEditor';\nimport type { IEditor, PluginEvent, PluginWithState } from 'roosterjs-editor-types';\nimport type { ContentModelFormatPluginState } from '../../publicTypes/pluginState/ContentModelFormatPluginState';\n\n// During IME input, KeyDown event will have \"Process\" as key\nconst ProcessKey = 'Process';\n\n/**\n * ContentModelFormat plugins helps editor to do formatting on top of content model.\n * This includes:\n * 1. Handle pending format changes when selection is collapsed\n */\nexport default class ContentModelFormatPlugin\n    implements PluginWithState<ContentModelFormatPluginState> {\n    private editor: IContentModelEditor | null = null;\n    private hasDefaultFormat = false;\n\n    /**\n     * Construct a new instance of ContentModelEditPlugin class\n     * @param state State of this plugin\n     */\n    constructor(private state: ContentModelFormatPluginState) {\n        // TODO: Remove tempState parameter once we have standalone Content Model editor\n    }\n\n    /**\n     * Get name of this plugin\n     */\n    getName() {\n        return 'ContentModelFormat';\n    }\n\n    /**\n     * The first method that editor will call to a plugin when editor is initializing.\n     * It will pass in the editor instance, plugin should take this chance to save the\n     * editor reference so that it can call to any editor method or format API later.\n     * @param editor The editor object\n     */\n    initialize(editor: IEditor) {\n        // TODO: Later we may need a different interface for Content Model editor plugin\n        this.editor = editor as IContentModelEditor;\n        this.hasDefaultFormat =\n            getObjectKeys(this.state.defaultFormat).filter(\n                x => typeof this.state.defaultFormat[x] !== 'undefined'\n            ).length > 0;\n    }\n\n    /**\n     * The last method that editor will call to a plugin before it is disposed.\n     * Plugin can take this chance to clear the reference to editor. After this method is\n     * called, plugin should not call to any editor method since it will result in error.\n     */\n    dispose() {\n        this.editor = null;\n    }\n\n    /**\n     * Get plugin state object\n     */\n    getState(): ContentModelFormatPluginState {\n        return this.state;\n    }\n\n    /**\n     * Core method for a plugin. Once an event happens in editor, editor will call this\n     * method of each plugin to handle the event as long as the event is not handled\n     * exclusively by another plugin.\n     * @param event The event to handle:\n     */\n    onPluginEvent(event: PluginEvent) {\n        if (!this.editor) {\n            return;\n        }\n\n        switch (event.eventType) {\n            case PluginEventType.Input:\n                // In Safari, isComposing will be undefined but isInIME() works\n                if (!event.rawEvent.isComposing && !this.editor.isInIME()) {\n                    this.checkAndApplyPendingFormat(event.rawEvent.data);\n                }\n\n                break;\n\n            case PluginEventType.CompositionEnd:\n                this.checkAndApplyPendingFormat(event.rawEvent.data);\n                break;\n\n            case PluginEventType.KeyDown:\n                if (event.rawEvent.which >= Keys.PAGEUP && event.rawEvent.which <= Keys.DOWN) {\n                    clearPendingFormat(this.editor);\n                } else if (\n                    this.hasDefaultFormat &&\n                    (isCharacterValue(event.rawEvent) || event.rawEvent.key == ProcessKey)\n                ) {\n                    applyDefaultFormat(this.editor, this.state.defaultFormat);\n                }\n\n                break;\n\n            case PluginEventType.MouseUp:\n            case PluginEventType.ContentChanged:\n                if (!canApplyPendingFormat(this.editor)) {\n                    clearPendingFormat(this.editor);\n                }\n                break;\n        }\n    }\n\n    private checkAndApplyPendingFormat(data: string | null) {\n        if (this.editor && data) {\n            applyPendingFormat(this.editor, data);\n            clearPendingFormat(this.editor);\n        }\n    }\n}\n\n/**\n * @internal\n * Create a new instance of ContentModelFormatPlugin.\n * This is mostly for unit test\n */\nexport function createContentModelFormatPlugin(state: ContentModelFormatPluginState) {\n    return new ContentModelFormatPlugin(state);\n}\n","import type { EditorPlugin } from 'roosterjs-editor-types';\n\n/**\n * Dummy plugin, just to skip original TypeInContainerPlugin's behavior\n */\nexport default class ContentModelTypeInContainerPlugin implements EditorPlugin {\n    /**\n     * Get name of this plugin\n     */\n    getName() {\n        return 'ContentModelTypeInContainer';\n    }\n\n    /**\n     * The first method that editor will call to a plugin when editor is initializing.\n     * It will pass in the editor instance, plugin should take this chance to save the\n     * editor reference so that it can call to any editor method or format API later.\n     * @param editor The editor object\n     */\n    initialize() {}\n\n    /**\n     * The last method that editor will call to a plugin before it is disposed.\n     * Plugin can take this chance to clear the reference to editor. After this method is\n     * called, plugin should not call to any editor method since it will result in error.\n     */\n    dispose() {}\n}\n","import ContentModelCopyPastePlugin from './corePlugins/ContentModelCopyPastePlugin';\nimport ContentModelTypeInContainerPlugin from './corePlugins/ContentModelTypeInContainerPlugin';\nimport { contentModelDomIndexer } from './utils/contentModelDomIndexer';\nimport { createContentModel } from './coreApi/createContentModel';\nimport { createContentModelCachePlugin } from './corePlugins/ContentModelCachePlugin';\nimport { createContentModelEditPlugin } from './corePlugins/ContentModelEditPlugin';\nimport { createContentModelFormatPlugin } from './corePlugins/ContentModelFormatPlugin';\nimport { createDomToModelConfig, createModelToDomConfig } from 'roosterjs-content-model-dom';\nimport { createEditorContext } from './coreApi/createEditorContext';\nimport { createEditorCore } from 'roosterjs-editor-core';\nimport { getDOMSelection } from './coreApi/getDOMSelection';\nimport { setContentModel } from './coreApi/setContentModel';\nimport { setDOMSelection } from './coreApi/setDOMSelection';\nimport { switchShadowEdit } from './coreApi/switchShadowEdit';\nimport { tablePreProcessor } from './overrides/tablePreProcessor';\nimport type { ContentModelEditorCore } from '../publicTypes/ContentModelEditorCore';\nimport type { ContentModelEditorOptions } from '../publicTypes/IContentModelEditor';\nimport type { ContentModelPluginState } from '../publicTypes/pluginState/ContentModelPluginState';\nimport type { CoreCreator, EditorCore } from 'roosterjs-editor-types';\n\n/**\n * Editor Core creator for Content Model editor\n */\nexport const createContentModelEditorCore: CoreCreator<\n    ContentModelEditorCore,\n    ContentModelEditorOptions\n> = (contentDiv, options) => {\n    const pluginState = getPluginState(options);\n    const modifiedOptions: ContentModelEditorOptions = {\n        ...options,\n        plugins: [\n            createContentModelCachePlugin(pluginState.cache),\n            ...(options.plugins || []),\n            createContentModelFormatPlugin(pluginState.format),\n            createContentModelEditPlugin(),\n        ],\n        corePluginOverride: {\n            typeInContainer: new ContentModelTypeInContainerPlugin(),\n            copyPaste: new ContentModelCopyPastePlugin(pluginState.copyPaste),\n            ...options.corePluginOverride,\n        },\n    };\n\n    const core = createEditorCore(contentDiv, modifiedOptions) as ContentModelEditorCore;\n\n    promoteToContentModelEditorCore(core, modifiedOptions, pluginState);\n\n    return core;\n};\n\n/**\n * Creator Content Model Editor Core from Editor Core\n * @param core The original EditorCore object\n * @param options Options of this editor\n */\nexport function promoteToContentModelEditorCore(\n    core: EditorCore,\n    options: ContentModelEditorOptions,\n    pluginState: ContentModelPluginState\n) {\n    const cmCore = core as ContentModelEditorCore;\n\n    promoteCorePluginState(cmCore, pluginState);\n    promoteContentModelInfo(cmCore, options);\n    promoteCoreApi(cmCore);\n}\n\nfunction promoteCorePluginState(\n    cmCore: ContentModelEditorCore,\n    pluginState: ContentModelPluginState\n) {\n    Object.assign(cmCore, pluginState);\n}\n\nfunction promoteContentModelInfo(\n    cmCore: ContentModelEditorCore,\n    options: ContentModelEditorOptions\n) {\n    cmCore.defaultDomToModelOptions = [\n        {\n            processorOverride: {\n                table: tablePreProcessor,\n            },\n        },\n        options.defaultDomToModelOptions,\n    ];\n    cmCore.defaultModelToDomOptions = [options.defaultModelToDomOptions];\n    cmCore.defaultDomToModelConfig = createDomToModelConfig(cmCore.defaultDomToModelOptions);\n    cmCore.defaultModelToDomConfig = createModelToDomConfig(cmCore.defaultModelToDomOptions);\n}\n\nfunction promoteCoreApi(cmCore: ContentModelEditorCore) {\n    cmCore.api.createEditorContext = createEditorContext;\n    cmCore.api.createContentModel = createContentModel;\n    cmCore.api.setContentModel = setContentModel;\n    cmCore.api.switchShadowEdit = switchShadowEdit;\n    cmCore.api.getDOMSelection = getDOMSelection;\n    cmCore.api.setDOMSelection = setDOMSelection;\n    cmCore.originalApi.createEditorContext = createEditorContext;\n    cmCore.originalApi.createContentModel = createContentModel;\n    cmCore.originalApi.setContentModel = setContentModel;\n    cmCore.originalApi.getDOMSelection = getDOMSelection;\n    cmCore.originalApi.setDOMSelection = setDOMSelection;\n}\n\nfunction getPluginState(options: ContentModelEditorOptions): ContentModelPluginState {\n    const format = options.defaultFormat || {};\n    return {\n        cache: {\n            domIndexer: options.cacheModel ? contentModelDomIndexer : undefined,\n        },\n        copyPaste: {\n            allowedCustomPasteType: options.allowedCustomPasteType || [],\n        },\n        format: {\n            defaultFormat: {\n                fontWeight: format.bold ? 'bold' : undefined,\n                italic: format.italic || undefined,\n                underline: format.underline || undefined,\n                fontFamily: format.fontFamily || undefined,\n                fontSize: format.fontSize || undefined,\n                textColor: format.textColors?.lightModeColor || format.textColor || undefined,\n                backgroundColor:\n                    format.backgroundColors?.lightModeColor || format.backgroundColor || undefined,\n            },\n        },\n    };\n}\n","import type { IContentModelEditor } from '../publicTypes/IContentModelEditor';\nimport type { IEditor } from 'roosterjs-editor-types';\n\n/**\n * Check if the given editor object is Content Model editor\n * @param editor The editor to check\n * @returns True if the given editor is Content Model editor, otherwise false\n */\nexport default function isContentModelEditor(editor: IEditor): editor is IContentModelEditor {\n    const contentModelEditor = editor as IContentModelEditor;\n\n    return !!contentModelEditor.createContentModel;\n}\n","import { contains } from 'roosterjs-editor-dom';\nimport { entityProcessor, hasMetadata, tableProcessor } from 'roosterjs-content-model-dom';\nimport { getSelectionRootNode } from '../../modelApi/selection/getSelectionRootNode';\nimport type { DomToModelContext, ElementProcessor } from 'roosterjs-content-model-types';\n\n/**\n * @internal\n */\nexport const tablePreProcessor: ElementProcessor<HTMLTableElement> = (group, element, context) => {\n    const processor = shouldUseTableProcessor(element, context) ? tableProcessor : entityProcessor;\n\n    processor(group, element, context);\n};\n\nfunction shouldUseTableProcessor(element: HTMLTableElement, context: DomToModelContext) {\n    // Treat table as a real table when:\n    // 1. It is a roosterjs table (has metadata)\n    // 2. Table is in selection\n    // 3. There is selection inside table (or whole table is selected)\n    // Otherwise, we treat the table as entity so we will not change it when write back\n    return (\n        hasMetadata(element) ||\n        context.isInSelection ||\n        contains(element, getSelectionRootNode(context.selection), true /*treatSameNodeAsContain*/)\n    );\n}\n","import addParser from './utils/addParser';\nimport { chainSanitizerCallback, getPasteSource } from 'roosterjs-editor-dom';\nimport { deprecatedBorderColorParser } from './utils/deprecatedColorParser';\nimport { KnownPasteSourceType, PasteType, PluginEventType } from 'roosterjs-editor-types';\nimport { parseLink } from './utils/linkParser';\nimport { processPastedContentFromExcel } from './Excel/processPastedContentFromExcel';\nimport { processPastedContentFromPowerPoint } from './PowerPoint/processPastedContentFromPowerPoint';\nimport { processPastedContentFromWordDesktop } from './WordDesktop/processPastedContentFromWordDesktop';\nimport { processPastedContentWacComponents } from './WacComponents/processPastedContentWacComponents';\nimport type ContentModelBeforePasteEvent from '../../../publicTypes/event/ContentModelBeforePasteEvent';\nimport type { ContentModelBlockFormat, FormatParser } from 'roosterjs-content-model-types';\nimport type { IContentModelEditor } from '../../../publicTypes/IContentModelEditor';\nimport type {\n    EditorPlugin,\n    HtmlSanitizerOptions,\n    IEditor,\n    PluginEvent,\n} from 'roosterjs-editor-types';\n\nconst GOOGLE_SHEET_NODE_NAME = 'google-sheets-html-origin';\n\n/**\n * Paste plugin, handles BeforePaste event and reformat some special content, including:\n * 1. Content copied from Word\n * 2. Content copied from Excel\n * 3. Content copied from Word Online or OneNote Online\n * 4. Content copied from Power Point\n * (This class is still under development, and may still be changed in the future with some breaking changes)\n */\nexport default class ContentModelPastePlugin implements EditorPlugin {\n    private editor: IContentModelEditor | null = null;\n\n    /**\n     * Construct a new instance of Paste class\n     * @param unknownTagReplacement Replace solution of unknown tags, default behavior is to replace with SPAN\n     */\n    constructor(private unknownTagReplacement: string = 'SPAN') {}\n\n    /**\n     * Get name of this plugin\n     */\n    getName() {\n        return 'ContentModelPaste';\n    }\n\n    /**\n     * The first method that editor will call to a plugin when editor is initializing.\n     * It will pass in the editor instance, plugin should take this chance to save the\n     * editor reference so that it can call to any editor method or format API later.\n     * @param editor The editor object\n     */\n    initialize(editor: IEditor) {\n        // TODO: Later we may need a different interface for Content Model editor plugin\n        this.editor = editor as IContentModelEditor;\n    }\n\n    /**\n     * The last method that editor will call to a plugin before it is disposed.\n     * Plugin can take this chance to clear the reference to editor. After this method is\n     * called, plugin should not call to any editor method since it will result in error.\n     */\n    dispose() {\n        this.editor = null;\n    }\n\n    /**\n     * Core method for a plugin. Once an event happens in editor, editor will call this\n     * method of each plugin to handle the event as long as the event is not handled\n     * exclusively by another plugin.\n     * @param event The event to handle:\n     */\n    onPluginEvent(event: PluginEvent) {\n        if (!this.editor || event.eventType != PluginEventType.BeforePaste) {\n            return;\n        }\n\n        const ev = event as ContentModelBeforePasteEvent;\n        if (!ev.domToModelOption) {\n            return;\n        }\n        const pasteSource = getPasteSource(ev, false);\n        switch (pasteSource) {\n            case KnownPasteSourceType.WordDesktop:\n                processPastedContentFromWordDesktop(ev);\n                break;\n            case KnownPasteSourceType.WacComponents:\n                processPastedContentWacComponents(ev);\n                break;\n            case KnownPasteSourceType.ExcelOnline:\n            case KnownPasteSourceType.ExcelDesktop:\n                if (ev.pasteType === PasteType.Normal || ev.pasteType === PasteType.MergeFormat) {\n                    // Handle HTML copied from Excel\n                    processPastedContentFromExcel(ev, this.editor.getTrustedHTMLHandler());\n                }\n                break;\n            case KnownPasteSourceType.GoogleSheets:\n                ev.sanitizingOption.additionalTagReplacements[GOOGLE_SHEET_NODE_NAME] = '*';\n                break;\n            case KnownPasteSourceType.PowerPointDesktop:\n                processPastedContentFromPowerPoint(ev, this.editor.getTrustedHTMLHandler());\n                break;\n        }\n\n        addParser(ev.domToModelOption, 'link', parseLink);\n        addParser(ev.domToModelOption, 'tableCell', deprecatedBorderColorParser);\n        addParser(ev.domToModelOption, 'table', deprecatedBorderColorParser);\n        sanitizeBlockStyles(ev.sanitizingOption);\n\n        if (ev.pasteType === PasteType.MergeFormat) {\n            addParser(ev.domToModelOption, 'block', blockElementParser);\n            addParser(ev.domToModelOption, 'listLevel', blockElementParser);\n        }\n\n        ev.sanitizingOption.unknownTagReplacement = this.unknownTagReplacement;\n    }\n}\n\n/**\n * For block elements that have background color style, remove the background color when user selects the merge current format\n * paste option\n */\nconst blockElementParser: FormatParser<ContentModelBlockFormat> = (\n    format: ContentModelBlockFormat,\n    element: HTMLElement\n) => {\n    if (element.style.backgroundColor) {\n        delete format.backgroundColor;\n    }\n};\n\nfunction sanitizeBlockStyles(sanitizingOption: Required<HtmlSanitizerOptions>) {\n    chainSanitizerCallback(sanitizingOption.cssStyleCallbacks, 'display', (value: string) => {\n        return value != 'flex'; // return whether we keep the style\n    });\n}\n","import addParser from '../utils/addParser';\nimport { isNodeOfType } from 'roosterjs-content-model-dom';\nimport { moveChildNodes } from 'roosterjs-editor-dom';\nimport { setProcessor } from '../utils/setProcessor';\nimport type ContentModelBeforePasteEvent from '../../../../publicTypes/event/ContentModelBeforePasteEvent';\nimport type { TrustedHTMLHandler } from 'roosterjs-editor-types';\n\nconst LAST_TD_END_REGEX = /<\\/\\s*td\\s*>((?!<\\/\\s*tr\\s*>)[\\s\\S])*$/i;\nconst LAST_TR_END_REGEX = /<\\/\\s*tr\\s*>((?!<\\/\\s*table\\s*>)[\\s\\S])*$/i;\nconst LAST_TR_REGEX = /<tr[^>]*>[^<]*/i;\nconst LAST_TABLE_REGEX = /<table[^>]*>[^<]*/i;\nconst DEFAULT_BORDER_STYLE = 'solid 1px #d4d4d4';\n\n/**\n * @internal\n * Convert pasted content from Excel, add borders when source doc doesn't have a border\n * @param event The BeforePaste event\n */\n\nexport function processPastedContentFromExcel(\n    event: ContentModelBeforePasteEvent,\n    trustedHTMLHandler: TrustedHTMLHandler\n) {\n    const { fragment, htmlBefore, clipboardData } = event;\n    const html = clipboardData.html ? excelHandler(clipboardData.html, htmlBefore) : undefined;\n\n    if (html && clipboardData.html != html) {\n        const doc = new DOMParser().parseFromString(trustedHTMLHandler(html), 'text/html');\n        moveChildNodes(fragment, doc?.body);\n    }\n\n    // For Excel Online\n    const firstChild = fragment.firstChild;\n    if (\n        isNodeOfType(firstChild, 'ELEMENT_NODE') &&\n        firstChild.tagName == 'div' &&\n        firstChild.firstChild\n    ) {\n        const tableFound = Array.from(firstChild.childNodes).every((child: Node) => {\n            // Tables pasted from Excel Online should be of the format: 0 to N META tags and 1 TABLE tag\n            const tagName = isNodeOfType(child, 'ELEMENT_NODE') && child.tagName;\n\n            return tagName == 'META'\n                ? true\n                : tagName == 'TABLE'\n                ? child == firstChild.lastChild\n                : false;\n        });\n\n        // Extract Table from Div\n        if (tableFound && firstChild.lastChild) {\n            event.fragment.replaceChildren(firstChild.lastChild);\n        }\n    }\n\n    addParser(event.domToModelOption, 'tableCell', (format, element) => {\n        if (element.style.borderStyle === 'none') {\n            format.borderBottom = DEFAULT_BORDER_STYLE;\n            format.borderLeft = DEFAULT_BORDER_STYLE;\n            format.borderRight = DEFAULT_BORDER_STYLE;\n            format.borderTop = DEFAULT_BORDER_STYLE;\n        }\n    });\n\n    setProcessor(event.domToModelOption, 'child', (group, element, context) => {\n        const segmentFormat = { ...context.segmentFormat };\n        if (group.blockGroupType === 'TableCell' && group.format.textColor) {\n            context.segmentFormat.textColor = group.format.textColor;\n        }\n\n        context.defaultElementProcessors.child(group, element, context);\n\n        if (group.blockGroupType === 'TableCell' && group.format.textColor) {\n            context.segmentFormat = segmentFormat;\n            delete group.format.textColor;\n        }\n    });\n}\n\n/**\n * @internal Export for test only\n * @param html Source html\n */\n\nexport function excelHandler(html: string, htmlBefore: string): string {\n    if (html.match(LAST_TD_END_REGEX)) {\n        const trMatch = htmlBefore.match(LAST_TR_REGEX);\n        const tr = trMatch ? trMatch[0] : '<TR>';\n        html = tr + html + '</TR>';\n    }\n    if (html.match(LAST_TR_END_REGEX)) {\n        let tableMatch = htmlBefore.match(LAST_TABLE_REGEX);\n        let table = tableMatch ? tableMatch[0] : '<TABLE>';\n        html = table + html + '</TABLE>';\n    }\n\n    return html;\n}\n","import { moveChildNodes } from 'roosterjs-editor-dom';\nimport type { BeforePasteEvent, TrustedHTMLHandler } from 'roosterjs-editor-types';\n\n/**\n * @internal\n * Convert pasted content from PowerPoint\n * @param event The BeforePaste event\n */\n\nexport function processPastedContentFromPowerPoint(\n    event: BeforePasteEvent,\n    trustedHTMLHandler: TrustedHTMLHandler\n) {\n    const { fragment, clipboardData } = event;\n\n    if (clipboardData.html && !clipboardData.text && clipboardData.image) {\n        // It is possible that PowerPoint copied both image and HTML but not plain text.\n        // We always prefer HTML if any.\n        const doc = new DOMParser().parseFromString(\n            trustedHTMLHandler(clipboardData.html),\n            'text/html'\n        );\n\n        moveChildNodes(fragment, doc?.body);\n    }\n}\n","import addParser from '../utils/addParser';\nimport { findClosestElementAncestor, matchesSelector } from 'roosterjs-editor-dom';\nimport { setProcessor } from '../utils/setProcessor';\nimport type ContentModelBeforePasteEvent from '../../../../publicTypes/event/ContentModelBeforePasteEvent';\nimport type {\n    ContentModelBlockFormat,\n    ContentModelBlockGroup,\n    ContentModelListItemLevelFormat,\n    ContentModelSegmentFormat,\n    DomToModelContext,\n    ElementProcessor,\n    FormatParser,\n} from 'roosterjs-content-model-types';\n\nconst WAC_IDENTIFY_SELECTOR =\n    'ul[class^=\"BulletListStyle\"]>.OutlineElement,ol[class^=\"NumberListStyle\"]>.OutlineElement,span.WACImageContainer,span.WACImageBorder';\nconst LIST_CONTAINER_ELEMENT_CLASS_NAME = 'ListContainerWrapper';\n\nconst PARAGRAPH = 'Paragraph';\nconst TABLE_CONTAINER = 'TableContainer';\n\nconst TEMP_ELEMENTS_CLASSES = [\n    'TableInsertRowGapBlank',\n    'TableColumnResizeHandle',\n    'TableCellTopBorderHandle',\n    'TableCellLeftBorderHandle',\n    'TableHoverColumnHandle',\n    'TableHoverRowHandle',\n    'ListMarkerWrappingSpan',\n];\n\nconst CLASSES_TO_KEEP = [\n    'OutlineElement',\n    'NumberListStyle',\n    'WACImageContainer',\n    'ListContainerWrapper',\n    'BulletListStyle',\n    ...TEMP_ELEMENTS_CLASSES,\n    'TableCellContent',\n    PARAGRAPH,\n    'WACImageContainer',\n    'WACImageBorder',\n    TABLE_CONTAINER,\n    'LineBreakBlob',\n];\n\nconst LIST_ELEMENT_TAGS = ['UL', 'OL', 'LI'];\nconst LIST_ELEMENT_SELECTOR = LIST_ELEMENT_TAGS.join(',');\n\n/**\n * Wac components do not use sub and super tags, instead only add vertical align to a span.\n * This parser normalize the content for content model\n */\nconst wacSubSuperParser: FormatParser<ContentModelSegmentFormat> = (\n    format: ContentModelSegmentFormat,\n    element: HTMLElement\n): void => {\n    const verticalAlign = element.style.verticalAlign;\n    if (verticalAlign === 'super') {\n        format.superOrSubScriptSequence = 'super';\n    }\n    if (verticalAlign === 'sub') {\n        format.superOrSubScriptSequence = 'sub';\n    }\n};\n\n/**\n * This processor does:\n * 1) Remove the display and margin of the element.\n * 2) When an element should be ignored but should handle the child elements call the default child processor.\n * 3) Removes the End of Paragraph element to avoid empty lines, we should only remove this if the previous element of the EOP is an EmptyTextRun\n * 4) Finally call the default processor.\n * @returns\n */\nconst wacElementProcessor: ElementProcessor<HTMLElement> = (\n    group: ContentModelBlockGroup,\n    element: HTMLElement,\n    context: DomToModelContext\n): void => {\n    const elementTag = element.tagName;\n    if (matchesSelector(element, WAC_IDENTIFY_SELECTOR)) {\n        element.style.removeProperty('display');\n        element.style.removeProperty('margin');\n    }\n\n    if (element.classList.contains(LIST_CONTAINER_ELEMENT_CLASS_NAME)) {\n        context.elementProcessors.child(group, element, context);\n        return;\n    }\n\n    if (TEMP_ELEMENTS_CLASSES.some(className => element.classList.contains(className))) {\n        return;\n    } else if (shouldClearListContext(elementTag, element, context)) {\n        const { listFormat } = context;\n        listFormat.levels = [];\n        listFormat.listParent = undefined;\n    }\n\n    context.defaultElementProcessors.element(group, element, context);\n};\n\n/**\n * This processor calls the default list processor and then sets the correct list level and list bullet.\n */\nconst wacLiElementProcessor: ElementProcessor<HTMLLIElement> = (\n    group: ContentModelBlockGroup,\n    element: HTMLLIElement,\n    context: DomToModelContext\n): void => {\n    context.defaultElementProcessors.li?.(group, element, context);\n    const { listFormat } = context;\n    const listParent = listFormat.listParent;\n    if (listParent) {\n        const lastblock = listParent.blocks[listParent.blocks.length - 1];\n        if (\n            lastblock.blockType == 'BlockGroup' &&\n            lastblock.blockGroupType == 'ListItem' &&\n            context.listFormat.listParent !== lastblock\n        ) {\n            const currentLevel = lastblock.levels[lastblock.levels.length - 1];\n\n            // Get item level from 'data-aria-level' attribute\n            let level = parseInt(element.getAttribute('data-aria-level') ?? '');\n            if (level > 0) {\n                if (level > lastblock.levels.length) {\n                    while (level != lastblock.levels.length) {\n                        lastblock.levels.push(currentLevel);\n                    }\n                } else {\n                    lastblock.levels.splice(level, lastblock.levels.length - 1);\n                    lastblock.levels[level - 1] = currentLevel;\n                }\n            }\n        }\n    }\n};\n\n/**\n * This parsers does:\n * 1) Sets the display for dummy item to undefined when the current style is block.\n * 2) Removes the Margin Left\n */\nconst wacListItemParser: FormatParser<ContentModelListItemLevelFormat> = (\n    format: ContentModelListItemLevelFormat,\n    element: HTMLElement\n): void => {\n    if (element.style.display === 'block') {\n        format.displayForDummyItem = undefined;\n    }\n\n    format.marginLeft = undefined;\n};\n\n/**\n * Wac usually adds padding to lists which is unwanted so remove it.\n */\nconst wacListLevelParser: FormatParser<ContentModelListItemLevelFormat> = (\n    format: ContentModelListItemLevelFormat\n): void => {\n    format.marginLeft = undefined;\n    format.paddingLeft = undefined;\n};\n\n/**\n * This function returns whether we need to clear the list format.\n * Word Online wraps lists inside divs to have this structure:\n *\n *  <div class='ListContainerWrapper'>\n *      <ol>...</ol>\n *  </div>\n *  <div>\n *      <p>...</p>\n *  <div>\n *  <div class='ListContainerWrapper'>\n *      <ol>...</ol>\n *  </div>\n *\n *  So if a elements is not contained inside of a list we should clear the list context to prevent normal text to be\n *  transformed into list\n *  For the above scenario, if we do not clear the format, the content inside of the second div would be transformed to a list too.\n */\nfunction shouldClearListContext(\n    elementTag: string,\n    element: HTMLElement,\n    context: DomToModelContext\n) {\n    return (\n        context.listFormat.levels.length > 0 &&\n        LIST_ELEMENT_TAGS.every(tag => tag != elementTag) &&\n        !findClosestElementAncestor(element, undefined, LIST_ELEMENT_SELECTOR)\n    );\n}\n\n/**\n * @internal\n * Convert pasted content from Office Online\n * Once it is known that the document is from WAC\n * We need to remove the display property and margin from all the list item\n * @param ev ContentModelBeforePasteEvent\n */\nexport function processPastedContentWacComponents(ev: ContentModelBeforePasteEvent) {\n    addParser(ev.domToModelOption, 'segment', wacSubSuperParser);\n    addParser(ev.domToModelOption, 'listItem', wacListItemParser);\n    addParser(ev.domToModelOption, 'listLevel', wacListLevelParser);\n    addParser(ev.domToModelOption, 'container', wacBlockParser);\n\n    setProcessor(ev.domToModelOption, 'element', wacElementProcessor);\n    setProcessor(ev.domToModelOption, 'li', wacLiElementProcessor);\n    setProcessor(ev.domToModelOption, 'ol', wacListProcessor);\n    setProcessor(ev.domToModelOption, 'ul', wacListProcessor);\n    ev.sanitizingOption.additionalAllowedCssClasses.push(...CLASSES_TO_KEEP);\n}\n\n/**\n * List items from word have this format when using List items:\n * @example\n        <div>\n           <ol></ol>\n        </div>\n        <div>\n           <ol></ol>\n        </div>\n        <div>\n           <ol></ol>\n        </div>\n *  Due to this the div between each of the lists we need to restore the list context to use the previous list,\n *  otherwise it could create a new list instead under the same list element\n */\nconst wacListProcessor: ElementProcessor<HTMLOListElement | HTMLUListElement> = (\n    group: ContentModelBlockGroup,\n    element: HTMLOListElement | HTMLUListElement,\n    context: DomToModelContext\n): void => {\n    const lastBlock = group.blocks[group.blocks.length - 1];\n    const isWrappedInContainer = findClosestElementAncestor(\n        element,\n        undefined,\n        `.${LIST_CONTAINER_ELEMENT_CLASS_NAME}`\n    );\n    if (\n        isWrappedInContainer?.previousElementSibling?.classList.contains(\n            LIST_CONTAINER_ELEMENT_CLASS_NAME\n        )\n    ) {\n        if (lastBlock?.blockType === 'BlockGroup' && lastBlock.blockGroupType == 'ListItem') {\n            context.listFormat = {\n                threadItemCounts: [],\n                levels: lastBlock.levels,\n                listParent: group,\n            };\n        }\n    }\n    if (element.tagName.toUpperCase() === 'OL') {\n        context.defaultElementProcessors.ol?.(group, element as HTMLOListElement, context);\n    } else {\n        context.defaultElementProcessors.ul?.(group, element as HTMLUListElement, context);\n    }\n};\n\nconst wacBlockParser: FormatParser<ContentModelBlockFormat> = (\n    format: ContentModelBlockFormat,\n    element: HTMLElement\n) => {\n    if (element.classList.contains(TABLE_CONTAINER) && element.style.marginLeft.startsWith('-')) {\n        delete format.marginLeft;\n    }\n};\n","import addParser from '../utils/addParser';\nimport { chainSanitizerCallback, getStyles, moveChildNodes } from 'roosterjs-editor-dom';\nimport { processWordComments } from './processWordComments';\nimport { processWordList } from './processWordLists';\nimport { setProcessor } from '../utils/setProcessor';\nimport type ContentModelBeforePasteEvent from '../../../../publicTypes/event/ContentModelBeforePasteEvent';\nimport type {\n    ContentModelBlockFormat,\n    ContentModelListItemFormat,\n    ContentModelListItemLevelFormat,\n    DomToModelContext,\n    ElementProcessor,\n    FormatParser,\n} from 'roosterjs-content-model-types';\n\nconst PERCENTAGE_REGEX = /%/;\nconst DEFAULT_BROWSER_LINE_HEIGHT_PERCENTAGE = 120;\n\n/**\n * @internal\n * Handles Pasted content when source is Word Desktop\n * @param ev ContentModelBeforePasteEvent\n */\nexport function processPastedContentFromWordDesktop(ev: ContentModelBeforePasteEvent) {\n    setProcessor(ev.domToModelOption, 'element', wordDesktopElementProcessor);\n    addParser(ev.domToModelOption, 'block', removeNonValidLineHeight);\n    addParser(ev.domToModelOption, 'listLevel', listLevelParser);\n    addParser(ev.domToModelOption, 'listItemElement', listItemElementParser);\n\n    // Remove \"border:none\" for image to fix image resize behavior\n    // We found a problem that when paste an image with \"border:none\" then the resize border will be\n    // displayed incorrectly when resize it. So we need to drop this style\n    chainSanitizerCallback(\n        ev.sanitizingOption.cssStyleCallbacks,\n        'border',\n        (value, element) => element.tagName != 'IMG' || value != 'none'\n    );\n\n    // Preserve <o:p> when its innerHTML is \"&nbsp;\" to avoid dropping an empty line\n    chainSanitizerCallback(ev.sanitizingOption.elementCallbacks, 'O:P', element => {\n        moveChildNodes(element);\n        element.appendChild(element.ownerDocument.createTextNode('\\u00A0')); // &nbsp;\n        return true;\n    });\n}\n\n/**\n * @internal\n * Exported only for unit test\n */\nexport const wordDesktopElementProcessor: ElementProcessor<HTMLElement> = (\n    group,\n    element,\n    context\n) => {\n    const styles = getStyles(element);\n    // Process Word Lists or Word Commands, otherwise use the default processor on this element.\n    if (\n        !(processWordList(styles, group, element, context) || processWordComments(styles, element))\n    ) {\n        context.defaultElementProcessors.element(group, element, context);\n    }\n};\n\nfunction removeNonValidLineHeight(\n    format: ContentModelBlockFormat,\n    element: HTMLElement,\n    context: DomToModelContext,\n    defaultStyle: Readonly<Partial<CSSStyleDeclaration>>\n): void {\n    //If the line height is less than the browser default line height, line between the text is going to be too narrow\n    let parsedLineHeight: number;\n    if (\n        PERCENTAGE_REGEX.test(element.style.lineHeight) &&\n        !isNaN((parsedLineHeight = parseInt(element.style.lineHeight))) &&\n        parsedLineHeight < DEFAULT_BROWSER_LINE_HEIGHT_PERCENTAGE\n    ) {\n        format.lineHeight = defaultStyle.lineHeight;\n    }\n}\n\nfunction listLevelParser(\n    format: ContentModelListItemLevelFormat,\n    element: HTMLElement,\n    context: DomToModelContext,\n    defaultStyle: Readonly<Partial<CSSStyleDeclaration>>\n): void {\n    if (element.style.marginLeft != '') {\n        format.marginLeft = defaultStyle.marginLeft;\n    }\n\n    format.marginBottom = undefined;\n}\n\nconst listItemElementParser: FormatParser<ContentModelListItemFormat> = (\n    format: ContentModelListItemFormat,\n    element: HTMLElement\n): void => {\n    if (element.style.marginLeft) {\n        format.marginLeft = undefined;\n    }\n    if (element.style.marginRight) {\n        format.marginRight = undefined;\n    }\n};\n","import { isElementOfType } from 'roosterjs-content-model-dom';\n\nconst MSO_COMMENT_ANCHOR_HREF_REGEX = /#_msocom_/;\nconst MSO_SPECIAL_CHARACTER = 'mso-special-character';\nconst MSO_SPECIAL_CHARACTER_COMMENT = 'comment';\nconst MSO_ELEMENT = 'mso-element';\nconst MSO_ELEMENT_COMMENT_LIST = 'comment-list';\n\n/**\n * @internal\n * Check whether the element contain Word attributes related to comments and if it does we should no process\n * this element.\n * @returns\n */\nexport function processWordComments(styles: Record<string, string>, element: HTMLElement) {\n    return (\n        styles[MSO_SPECIAL_CHARACTER] == MSO_SPECIAL_CHARACTER_COMMENT ||\n        (isElementOfType(element, 'a') && MSO_COMMENT_ANCHOR_HREF_REGEX.test(element.href)) ||\n        styles[MSO_ELEMENT] == MSO_ELEMENT_COMMENT_LIST\n    );\n}\n","import { getStyles } from 'roosterjs-editor-dom';\nimport {\n    addBlock,\n    createListItem,\n    createListLevel,\n    isNodeOfType,\n    parseFormat,\n} from 'roosterjs-content-model-dom';\nimport type {\n    ContentModelBlockGroup,\n    ContentModelListItemLevelFormat,\n    ContentModelListLevel,\n    DomToModelContext,\n    DomToModelListFormat,\n    FormatParser,\n} from 'roosterjs-content-model-types';\n\n/** Word list metadata style name */\nconst MSO_LIST = 'mso-list';\nconst MSO_LIST_IGNORE = 'ignore';\nconst LOOKUP_DEPTH = 5;\nconst WORD_FIRST_LIST = 'l0';\n\ninterface WordDesktopListFormat extends DomToModelListFormat {\n    wordLevel?: number | '';\n    wordList?: string;\n    wordKnownLevels?: Map<string, ContentModelListLevel[]>;\n}\n\n/**\n * @internal\n * @param styles\n * @param group\n * @param element\n * @param context\n * @returns\n */\nexport function processWordList(\n    styles: Record<string, string>,\n    group: ContentModelBlockGroup,\n    element: HTMLElement,\n    context: DomToModelContext\n) {\n    const listFormat = context.listFormat as WordDesktopListFormat;\n    if (!listFormat.wordKnownLevels) {\n        listFormat.wordKnownLevels = new Map<string, ContentModelListLevel[]>();\n    }\n    const wordListStyle = styles[MSO_LIST] || '';\n\n    // If the element contains Ignore style, do not process it,\n    // Usually this element contains the fake bullet used in Word Desktop.\n    if (wordListStyle.toLowerCase() === MSO_LIST_IGNORE) {\n        return true;\n    }\n\n    const listProps = wordListStyle.split(' ');\n    // Try get the list metadata from word, which follows this format: l1 level1 lfo2\n    // If we are able to get the level property means we can process this element to be a list\n    listFormat.wordLevel = listProps[1] && parseInt(listProps[1].substr('level'.length));\n\n    listFormat.wordList = listProps[0] || WORD_FIRST_LIST;\n    if (listFormat.levels.length == 0) {\n        listFormat.levels = listFormat.wordKnownLevels.get(listFormat.wordList) || [];\n    }\n\n    if (wordListStyle && group && typeof listFormat.wordLevel === 'number') {\n        const { wordLevel } = listFormat;\n        // Retrieve the Fake bullet on the element and also the list type\n        const fakeBullet = getFakeBulletText(element);\n        const listType = getFakeBulletTagName(fakeBullet);\n\n        // Create the new level of the list item and parse the format\n        const newLevel: ContentModelListLevel = createListLevel(listType);\n        parseFormat(element, context.formatParsers.listLevel, newLevel.format, context);\n\n        // If the list format is in a different level, update the array so we get the new item\n        // To be in the same level as the provided level metadata.\n        if (wordLevel > listFormat.levels.length) {\n            while (wordLevel != listFormat.levels.length) {\n                listFormat.levels.push(newLevel);\n            }\n        } else {\n            listFormat.levels.splice(wordLevel, listFormat.levels.length - 1);\n            listFormat.levels[wordLevel - 1] = newLevel;\n        }\n\n        listFormat.listParent = group;\n\n        processAsListItem(listFormat, context, element, group, fakeBullet);\n\n        if (\n            listFormat.levels.length > 0 &&\n            listFormat.wordKnownLevels.get(listFormat.wordList) != listFormat.levels\n        ) {\n            listFormat.wordKnownLevels.set(listFormat.wordList, [...listFormat.levels]);\n        }\n        return true;\n    }\n\n    return false;\n}\n\nfunction processAsListItem(\n    listFormat: WordDesktopListFormat,\n    context: DomToModelContext,\n    element: HTMLElement,\n    group: ContentModelBlockGroup,\n    fakeBullet: string\n) {\n    const listItem = createListItem(listFormat.levels, context.segmentFormat);\n    const lastLevel = listItem.levels[listItem.levels.length - 1];\n\n    parseFormat(element, context.formatParsers.segmentOnBlock, context.segmentFormat, context);\n    parseFormat(element, context.formatParsers.listItemElement, listItem.format, context);\n\n    if (lastLevel?.listType == 'OL') {\n        parseFormat(\n            element,\n            [startNumberOverrideParser(fakeBullet)],\n            listItem.levels[listItem.levels.length - 1].format,\n            context\n        );\n    }\n\n    context.elementProcessors.child(listItem, element, context);\n    addBlock(group, listItem);\n}\n\nfunction startNumberOverrideParser(\n    fakeBullet: string\n): FormatParser<ContentModelListItemLevelFormat> | null {\n    return (format, _, context) => {\n        const {\n            wordKnownLevels,\n            wordLevel,\n            wordList,\n        } = context.listFormat as WordDesktopListFormat;\n        if (typeof wordLevel === 'number' && wordList) {\n            const start = parseInt(fakeBullet);\n            if (start != undefined && !isNaN(start) && !wordKnownLevels?.has(wordList)) {\n                format.startNumberOverride = start;\n            }\n        }\n    };\n}\n\n/**\n * Check whether the string is a fake bullet from word Desktop\n */\nfunction isFakeBullet(fakeBullet: string): boolean {\n    return ['o', '·', '§', '-'].indexOf(fakeBullet) >= 0;\n}\n\n/** Given a fake bullet text, returns the type of list that should be used for it */\nfunction getFakeBulletTagName(fakeBullet: string): 'UL' | 'OL' {\n    return isFakeBullet(fakeBullet) ? 'UL' : 'OL';\n}\n\n/**\n * Finds the fake bullet text out of the specified node and returns it. For images, it will return\n * a bullet string. If not found, it returns null...\n */\nfunction getFakeBulletText(node: Node, levels?: number): string {\n    // Word uses the following format for their bullets:\n    // &lt;p style=\"mso-list:l1 level1 lfo2\"&gt;\n    // &lt;span style=\"...\"&gt;\n    // &lt;span style=\"mso-list:Ignore\"&gt;1.&lt;span style=\"...\"&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/span&gt;&lt;/span&gt;\n    // &lt;/span&gt;\n    // Content here...\n    // &lt;/p&gt;\n    //\n    // Basically, we need to locate the mso-list:Ignore SPAN, which holds either one text or image node. That\n    // text or image node will be the fake bullet we are looking for\n    let result: string = '';\n    levels = levels || LOOKUP_DEPTH;\n    let child: Node | null = node.firstChild;\n    while (!result && child) {\n        // Check if this is the node that holds the fake bullets (mso-list: Ignore)\n        if (isIgnoreNode(child)) {\n            // Yes... this is the node that holds either the text or image data\n            result = child.textContent?.trim() ?? '';\n\n            // This is the case for image case\n            if (result.length == 0) {\n                result = 'o';\n            }\n        } else if (isNodeOfType(child, 'ELEMENT_NODE') && levels > 1) {\n            // If this is an element and we are not in the last level, try to get the fake bullet\n            // out of the child\n            result = getFakeBulletText(child, levels - 1);\n        }\n\n        child = child.nextSibling;\n    }\n\n    return result;\n}\n/**\n * Checks if the specified node is marked as a mso-list: Ignore. These\n * nodes need to be ignored when a list item is converted into standard\n * HTML lists\n */\nfunction isIgnoreNode(node: Node): boolean {\n    if (isNodeOfType(node, 'ELEMENT_NODE')) {\n        let listAttribute = getStyles(node as HTMLElement)[MSO_LIST];\n        if (\n            listAttribute &&\n            listAttribute.length > 0 &&\n            listAttribute.trim().toLowerCase() == MSO_LIST_IGNORE\n        ) {\n            return true;\n        }\n    }\n\n    return false;\n}\n","import type {\n    ContentModelFormatMap,\n    DomToModelOption,\n    FormatParser,\n    FormatParsersPerCategory,\n} from 'roosterjs-content-model-types';\n\n/**\n * @internal\n */\nexport default function addParser<TKey extends keyof FormatParsersPerCategory>(\n    domToModelOption: DomToModelOption,\n    entry: TKey,\n    additionalFormatParsers: FormatParser<ContentModelFormatMap[TKey]>\n) {\n    if (!domToModelOption.additionalFormatParsers) {\n        domToModelOption.additionalFormatParsers = {};\n    }\n    if (!domToModelOption.additionalFormatParsers[entry]) {\n        domToModelOption.additionalFormatParsers[entry] = [];\n    }\n\n    domToModelOption.additionalFormatParsers[entry]?.push(additionalFormatParsers);\n}\n","import { BorderKeys, DeprecatedColors } from 'roosterjs-content-model-dom';\nimport type { BorderFormat, FormatParser } from 'roosterjs-content-model-types';\n\n/**\n * @internal\n */\nexport const deprecatedBorderColorParser: FormatParser<BorderFormat> = (\n    format: BorderFormat\n): void => {\n    BorderKeys.forEach(key => {\n        const value = format[key];\n        let color: string = '';\n        if (\n            value &&\n            DeprecatedColors.some(dColor => value.indexOf(dColor) > -1 && (color = dColor))\n        ) {\n            const newValue = value.replace(color, '').trimRight();\n            format[key] = newValue;\n        }\n    });\n};\n","import { isElementOfType } from 'roosterjs-content-model-dom';\nimport type { ContentModelHyperLinkFormat, FormatParser } from 'roosterjs-content-model-types';\n\nconst SUPPORTED_PROTOCOLS = ['http:', 'https:', 'notes:', 'mailto:', 'onenote:'];\nconst INVALID_LINKS_REGEX = /^file:\\/\\/\\/[a-zA-Z\\/]/i;\n\n/**\n * @internal\n */\nexport const parseLink: FormatParser<ContentModelHyperLinkFormat> = (format, element) => {\n    if (!isElementOfType(element, 'a')) {\n        return;\n    }\n\n    let url: URL | undefined;\n    try {\n        url = new URL(element.href);\n    } catch {\n        url = undefined;\n    }\n\n    if (\n        (url && SUPPORTED_PROTOCOLS.indexOf(url.protocol) === -1) ||\n        INVALID_LINKS_REGEX.test(element.href)\n    ) {\n        element.removeAttribute('href');\n        format.href = '';\n    }\n};\n","import type { DomToModelOption, ElementProcessorMap } from 'roosterjs-content-model-types';\n\n/**\n * @internal\n */\nexport function setProcessor<TKey extends keyof ElementProcessorMap>(\n    domToModelOption: DomToModelOption,\n    entry: TKey,\n    processorOverride: Partial<ElementProcessorMap>[TKey]\n) {\n    if (!domToModelOption.processorOverride) {\n        domToModelOption.processorOverride = {};\n    }\n\n    domToModelOption.processorOverride[entry] = processorOverride;\n}\n","import { createSelectionMarker, createText, isNodeOfType } from 'roosterjs-content-model-dom';\nimport { setSelection } from '../../modelApi/selection/setSelection';\nimport type {\n    ContentModelDocument,\n    ContentModelDomIndexer,\n    ContentModelParagraph,\n    ContentModelSegment,\n    ContentModelSelectionMarker,\n    ContentModelTable,\n    ContentModelTableRow,\n    ContentModelText,\n    DOMSelection,\n    Selectable,\n} from 'roosterjs-content-model-types';\n\ninterface SegmentItem {\n    paragraph: ContentModelParagraph;\n    segments: ContentModelSegment[];\n}\n\ninterface TableItem {\n    tableRows: ContentModelTableRow[];\n}\n\ninterface IndexedSegmentNode extends Node {\n    __roosterjsContentModel: SegmentItem;\n}\n\ninterface IndexedTableElement extends HTMLTableElement {\n    __roosterjsContentModel: TableItem;\n}\n\nfunction isIndexedSegment(node: Node): node is IndexedSegmentNode {\n    const { paragraph, segments } = (node as IndexedSegmentNode).__roosterjsContentModel ?? {};\n\n    return (\n        paragraph &&\n        paragraph.blockType == 'Paragraph' &&\n        Array.isArray(paragraph.segments) &&\n        Array.isArray(segments)\n    );\n}\n\nfunction onSegment(\n    segmentNode: Node,\n    paragraph: ContentModelParagraph,\n    segment: ContentModelSegment[]\n) {\n    const indexedText = segmentNode as IndexedSegmentNode;\n    indexedText.__roosterjsContentModel = {\n        paragraph,\n        segments: segment,\n    };\n}\n\nfunction onParagraph(paragraphElement: HTMLElement) {\n    let previousText: Text | null = null;\n\n    for (let child = paragraphElement.firstChild; child; child = child.nextSibling) {\n        if (isNodeOfType(child, 'TEXT_NODE')) {\n            if (!previousText) {\n                previousText = child;\n            } else {\n                const item = isIndexedSegment(previousText)\n                    ? previousText.__roosterjsContentModel\n                    : undefined;\n\n                if (item && isIndexedSegment(child)) {\n                    item.segments = item.segments.concat(child.__roosterjsContentModel.segments);\n                    child.__roosterjsContentModel.segments = [];\n                }\n            }\n        } else if (isNodeOfType(child, 'ELEMENT_NODE')) {\n            previousText = null;\n\n            onParagraph(child);\n        } else {\n            previousText = null;\n        }\n    }\n}\n\nfunction onTable(tableElement: HTMLTableElement, table: ContentModelTable) {\n    const indexedTable = tableElement as IndexedTableElement;\n    indexedTable.__roosterjsContentModel = { tableRows: table.rows };\n}\n\nfunction reconcileSelection(\n    model: ContentModelDocument,\n    newSelection: DOMSelection,\n    oldSelection?: DOMSelection\n): boolean {\n    if (oldSelection) {\n        if (\n            oldSelection.type == 'range' &&\n            oldSelection.range.collapsed &&\n            isNodeOfType(oldSelection.range.startContainer, 'TEXT_NODE')\n        ) {\n            if (isIndexedSegment(oldSelection.range.startContainer)) {\n                reconcileTextSelection(oldSelection.range.startContainer);\n            }\n        } else {\n            setSelection(model);\n        }\n    }\n\n    switch (newSelection.type) {\n        case 'image':\n        case 'table':\n            // For image and table selection, we just clear the cached model since during selecting the element id might be changed\n            return false;\n\n        case 'range':\n            const newRange = newSelection.range;\n            if (newRange) {\n                const {\n                    startContainer,\n                    startOffset,\n                    endContainer,\n                    endOffset,\n                    collapsed,\n                } = newRange;\n\n                if (collapsed) {\n                    return !!reconcileNodeSelection(startContainer, startOffset);\n                } else if (\n                    startContainer == endContainer &&\n                    isNodeOfType(startContainer, 'TEXT_NODE')\n                ) {\n                    return (\n                        isIndexedSegment(startContainer) &&\n                        !!reconcileTextSelection(startContainer, startOffset, endOffset)\n                    );\n                } else {\n                    const marker1 = reconcileNodeSelection(startContainer, startOffset);\n                    const marker2 = reconcileNodeSelection(endContainer, endOffset);\n\n                    if (marker1 && marker2) {\n                        setSelection(model, marker1, marker2);\n                        return true;\n                    } else {\n                        return false;\n                    }\n                }\n            }\n\n            break;\n    }\n\n    return false;\n}\n\nfunction reconcileNodeSelection(node: Node, offset: number): Selectable | undefined {\n    if (isNodeOfType(node, 'TEXT_NODE')) {\n        return isIndexedSegment(node) ? reconcileTextSelection(node, offset) : undefined;\n    } else if (offset >= node.childNodes.length) {\n        return insertMarker(node.lastChild, true /*isAfter*/);\n    } else {\n        return insertMarker(node.childNodes[offset], false /*isAfter*/);\n    }\n}\n\nfunction insertMarker(node: Node | null, isAfter: boolean): Selectable | undefined {\n    let marker: ContentModelSelectionMarker | undefined;\n\n    if (node && isIndexedSegment(node)) {\n        const { paragraph, segments } = node.__roosterjsContentModel;\n        const index = paragraph.segments.indexOf(segments[0]);\n\n        if (index >= 0) {\n            const formatSegment =\n                (!isAfter && paragraph.segments[index - 1]) || paragraph.segments[index];\n            marker = createSelectionMarker(formatSegment.format);\n\n            paragraph.segments.splice(isAfter ? index + 1 : index, 0, marker);\n        }\n    }\n\n    return marker;\n}\n\nfunction reconcileTextSelection(\n    textNode: IndexedSegmentNode,\n    startOffset?: number,\n    endOffset?: number\n) {\n    const { paragraph, segments } = textNode.__roosterjsContentModel;\n    const first = segments[0];\n    const last = segments[segments.length - 1];\n    let selectable: Selectable | undefined;\n\n    if (first?.segmentType == 'Text' && last?.segmentType == 'Text') {\n        const newSegments: ContentModelSegment[] = [];\n        const txt = textNode.nodeValue || '';\n        const textSegments: ContentModelText[] = [];\n\n        if (startOffset === undefined) {\n            first.text = txt;\n            newSegments.push(first);\n            textSegments.push(first);\n        } else {\n            if (startOffset > 0) {\n                first.text = txt.substring(0, startOffset);\n                newSegments.push(first);\n                textSegments.push(first);\n            }\n\n            if (endOffset === undefined) {\n                const marker = createSelectionMarker(first.format);\n                newSegments.push(marker);\n\n                selectable = marker;\n                endOffset = startOffset;\n            } else if (endOffset > startOffset) {\n                const middle = createText(\n                    txt.substring(startOffset, endOffset),\n                    first.format,\n                    first.link,\n                    first.code\n                );\n\n                middle.isSelected = true;\n                newSegments.push(middle);\n                textSegments.push(middle);\n                selectable = middle;\n            }\n\n            if (endOffset < txt.length) {\n                const newLast = createText(\n                    txt.substring(endOffset),\n                    first.format,\n                    first.link,\n                    first.code\n                );\n                newSegments.push(newLast);\n                textSegments.push(newLast);\n            }\n        }\n\n        let firstIndex = paragraph.segments.indexOf(first);\n        let lastIndex = paragraph.segments.indexOf(last);\n\n        if (firstIndex >= 0 && lastIndex >= 0) {\n            while (\n                firstIndex > 0 &&\n                paragraph.segments[firstIndex - 1].segmentType == 'SelectionMarker'\n            ) {\n                firstIndex--;\n            }\n\n            while (\n                lastIndex < paragraph.segments.length - 1 &&\n                paragraph.segments[lastIndex + 1].segmentType == 'SelectionMarker'\n            ) {\n                lastIndex++;\n            }\n\n            paragraph.segments.splice(firstIndex, lastIndex - firstIndex + 1, ...newSegments);\n        }\n\n        onSegment(textNode, paragraph, textSegments);\n\n        delete paragraph.cachedElement;\n    }\n\n    return selectable;\n}\n\n/**\n * @internal\n * Implementation of ContentModelDomIndexer\n */\nexport const contentModelDomIndexer: ContentModelDomIndexer = {\n    onSegment,\n    onParagraph,\n    onTable,\n    reconcileSelection,\n};\n","import { DeleteResult } from '../../modelApi/edit/utils/DeleteSelectionStep';\nimport { normalizeContentModel } from 'roosterjs-content-model-dom';\nimport { PluginEventType } from 'roosterjs-editor-types';\nimport type { ContentModelDocument } from 'roosterjs-content-model-types';\nimport type { FormatWithContentModelContext } from '../../publicTypes/parameter/FormatWithContentModelContext';\nimport type { IContentModelEditor } from '../../publicTypes/IContentModelEditor';\n\n/**\n * @internal\n * @return True means content is changed, so need to rewrite content model to editor. Otherwise false\n */\nexport function handleKeyboardEventResult(\n    editor: IContentModelEditor,\n    model: ContentModelDocument,\n    rawEvent: KeyboardEvent,\n    result: DeleteResult,\n    context: FormatWithContentModelContext\n): boolean {\n    context.skipUndoSnapshot = true;\n\n    switch (result) {\n        case DeleteResult.NotDeleted:\n            // We have not delete anything, we will let browser handle this event\n            return false;\n\n        case DeleteResult.NothingToDelete:\n            // We known there is nothing to delete, no need to let browser keep handling the event\n            rawEvent.preventDefault();\n            return false;\n\n        case DeleteResult.Range:\n        case DeleteResult.SingleChar:\n            // We have deleted what we need from content model, no need to let browser keep handling the event\n            rawEvent.preventDefault();\n            normalizeContentModel(model);\n\n            if (result == DeleteResult.Range) {\n                // A range is about to be deleted, so add an undo snapshot immediately\n                context.skipUndoSnapshot = false;\n            }\n\n            // Trigger an event to let plugins know the content is about to be changed by Content Model keyboard editing.\n            // So plugins can do proper handling. e.g. UndoPlugin can decide whether take a snapshot before this change happens.\n            editor.triggerPluginEvent(PluginEventType.BeforeKeyboardEditing, {\n                rawEvent,\n            });\n\n            return true;\n    }\n}\n\n/**\n * @internal\n */\nexport function shouldDeleteWord(rawEvent: KeyboardEvent, isMac: boolean) {\n    return (\n        (isMac && rawEvent.altKey && !rawEvent.metaKey) ||\n        (!isMac && rawEvent.ctrlKey && !rawEvent.altKey)\n    );\n}\n\n/**\n * @internal\n */\nexport function shouldDeleteAllSegmentsBefore(rawEvent: KeyboardEvent) {\n    return rawEvent.metaKey && !rawEvent.altKey;\n}\n","export { ContentModelFormatState } from './publicTypes/format/formatState/ContentModelFormatState';\nexport { ImageFormatState } from './publicTypes/format/formatState/ImageFormatState';\nexport { Border } from './publicTypes/interface/Border';\nexport {\n    CreateEditorContext,\n    ContentModelCoreApiMap,\n    ContentModelEditorCore,\n    CreateContentModel,\n    SetContentModel,\n    GetDOMSelection,\n    SetDOMSelection,\n} from './publicTypes/ContentModelEditorCore';\nexport {\n    default as ContentModelBeforePasteEvent,\n    ContentModelBeforePasteEventData,\n    CompatibleContentModelBeforePasteEvent,\n} from './publicTypes/event/ContentModelBeforePasteEvent';\nexport {\n    default as ContentModelContentChangedEvent,\n    CompatibleContentModelContentChangedEvent,\n    ContentModelContentChangedEventData,\n} from './publicTypes/event/ContentModelContentChangedEvent';\n\nexport { IContentModelEditor, ContentModelEditorOptions } from './publicTypes/IContentModelEditor';\nexport { InsertPoint } from './publicTypes/selection/InsertPoint';\nexport { TableSelectionContext } from './publicTypes/selection/TableSelectionContext';\nexport {\n    DeletedEntity,\n    FormatWithContentModelContext,\n    FormatWithContentModelOptions,\n    ContentModelFormatter,\n} from './publicTypes/parameter/FormatWithContentModelContext';\nexport {\n    InsertEntityOptions,\n    InsertEntityPosition,\n} from './publicTypes/parameter/InsertEntityOptions';\n\nexport { default as insertTable } from './publicApi/table/insertTable';\nexport { default as formatTable } from './publicApi/table/formatTable';\nexport { default as setTableCellShade } from './publicApi/table/setTableCellShade';\nexport { default as editTable } from './publicApi/table/editTable';\nexport { default as toggleBullet } from './publicApi/list/toggleBullet';\nexport { default as toggleNumbering } from './publicApi/list/toggleNumbering';\nexport { default as toggleBold } from './publicApi/segment/toggleBold';\nexport { default as toggleItalic } from './publicApi/segment/toggleItalic';\nexport { default as toggleUnderline } from './publicApi/segment/toggleUnderline';\nexport { default as toggleStrikethrough } from './publicApi/segment/toggleStrikethrough';\nexport { default as toggleSubscript } from './publicApi/segment/toggleSubscript';\nexport { default as toggleSuperscript } from './publicApi/segment/toggleSuperscript';\nexport { default as setBackgroundColor } from './publicApi/segment/setBackgroundColor';\nexport { default as setFontName } from './publicApi/segment/setFontName';\nexport { default as setFontSize } from './publicApi/segment/setFontSize';\nexport { default as setTextColor } from './publicApi/segment/setTextColor';\nexport { default as changeFontSize } from './publicApi/segment/changeFontSize';\nexport { default as applySegmentFormat } from './publicApi/segment/applySegmentFormat';\nexport { default as changeCapitalization } from './publicApi/segment/changeCapitalization';\nexport { default as insertImage } from './publicApi/image/insertImage';\nexport { default as setListStyle } from './publicApi/list/setListStyle';\nexport { default as setListStartNumber } from './publicApi/list/setListStartNumber';\nexport { default as hasSelectionInBlock } from './publicApi/selection/hasSelectionInBlock';\nexport { default as hasSelectionInSegment } from './publicApi/selection/hasSelectionInSegment';\nexport { default as hasSelectionInBlockGroup } from './publicApi/selection/hasSelectionInBlockGroup';\nexport { default as getSelectedSegments } from './publicApi/selection/getSelectedSegments';\nexport { default as setIndentation } from './publicApi/block/setIndentation';\nexport { default as setAlignment } from './publicApi/block/setAlignment';\nexport { default as setDirection } from './publicApi/block/setDirection';\nexport { default as setHeadingLevel } from './publicApi/block/setHeadingLevel';\nexport { default as toggleBlockQuote } from './publicApi/block/toggleBlockQuote';\nexport { default as setSpacing } from './publicApi/block/setSpacing';\nexport { default as setImageBorder } from './publicApi/image/setImageBorder';\nexport { default as setImageBoxShadow } from './publicApi/image/setImageBoxShadow';\nexport { default as changeImage } from './publicApi/image/changeImage';\nexport { default as getFormatState } from './publicApi/format/getFormatState';\nexport { default as applyPendingFormat } from './publicApi/format/applyPendingFormat';\nexport { default as clearFormat } from './publicApi/format/clearFormat';\nexport { default as insertLink } from './publicApi/link/insertLink';\nexport { default as removeLink } from './publicApi/link/removeLink';\nexport { default as adjustLinkSelection } from './publicApi/link/adjustLinkSelection';\nexport { default as setImageAltText } from './publicApi/image/setImageAltText';\nexport { default as adjustImageSelection } from './publicApi/image/adjustImageSelection';\nexport { default as setParagraphMargin } from './publicApi/block/setParagraphMargin';\nexport { default as toggleCode } from './publicApi/segment/toggleCode';\nexport { default as paste } from './publicApi/utils/paste';\nexport { default as insertEntity } from './publicApi/entity/insertEntity';\nexport { formatWithContentModel } from './publicApi/utils/formatWithContentModel';\nexport { default as keyboardDelete } from './publicApi/editing/keyboardDelete';\n\nexport { default as ContentModelEditor } from './editor/ContentModelEditor';\nexport { default as isContentModelEditor } from './editor/isContentModelEditor';\nexport { default as ContentModelPastePlugin } from './editor/plugins/PastePlugin/ContentModelPastePlugin';\n\nexport { default as ContentModelFormatPlugin } from './editor/corePlugins/ContentModelFormatPlugin';\nexport { default as ContentModelEditPlugin } from './editor/corePlugins/ContentModelEditPlugin';\nexport { default as ContentModelTypeInContainerPlugin } from './editor/corePlugins/ContentModelTypeInContainerPlugin';\nexport { default as ContentModelCopyPastePlugin } from './editor/corePlugins/ContentModelCopyPastePlugin';\nexport { default as ContentModelCachePlugin } from './editor/corePlugins/ContentModelCachePlugin';\n\nexport {\n    createContentModelEditorCore,\n    promoteToContentModelEditorCore,\n} from './editor/createContentModelEditorCore';\nexport { combineBorderValue, extractBorderValues } from './domUtils/borderValues';\nexport { updateImageMetadata } from './domUtils/metadata/updateImageMetadata';\nexport { updateTableCellMetadata } from './domUtils/metadata/updateTableCellMetadata';\nexport { updateTableMetadata } from './domUtils/metadata/updateTableMetadata';\n\nexport { ContentModelCachePluginState } from './publicTypes/pluginState/ContentModelCachePluginState';\nexport { ContentModelPluginState } from './publicTypes/pluginState/ContentModelPluginState';\nexport { ContentModelFormatPluginState } from './publicTypes/pluginState/ContentModelFormatPluginState';\n","import { isGeneralSegment } from 'roosterjs-content-model-dom';\nimport type {\n    ContentModelBlock,\n    ContentModelBlockGroup,\n    ContentModelParagraph,\n    ContentModelSegment,\n} from 'roosterjs-content-model-types';\n\n/**\n * @internal\n */\nexport type BlockAndPath = {\n    /**\n     * The sibling block\n     */\n    block: ContentModelBlock;\n\n    /**\n     * Path of this sibling block\n     */\n    path: ContentModelBlockGroup[];\n\n    /**\n     * If the input block is under a general segment, it is possible there are sibling segments under the same paragraph.\n     * Use this property to return the sibling sibling under the same paragraph\n     */\n    siblingSegment?: ContentModelSegment;\n};\n\n/**\n * @internal\n */\nexport function getLeafSiblingBlock(\n    path: ContentModelBlockGroup[],\n    block: ContentModelBlock,\n    isNext: boolean\n): BlockAndPath | null {\n    const newPath = [...path];\n\n    while (newPath.length > 0) {\n        let group = newPath[0];\n        const index = group.blocks.indexOf(block);\n\n        if (index < 0) {\n            break;\n        }\n\n        let nextBlock = group.blocks[index + (isNext ? 1 : -1)];\n\n        if (nextBlock) {\n            while (nextBlock.blockType == 'BlockGroup') {\n                const child = nextBlock.blocks[isNext ? 0 : nextBlock.blocks.length - 1];\n\n                if (!child) {\n                    return { block: nextBlock, path: newPath };\n                } else if (child.blockType != 'BlockGroup') {\n                    newPath.unshift(nextBlock);\n                    return { block: child, path: newPath };\n                } else {\n                    newPath.unshift(nextBlock);\n                    nextBlock = child;\n                }\n            }\n\n            return { block: nextBlock, path: newPath };\n        } else if (isGeneralSegment(group)) {\n            // For general segment, we need to check if there is sibling segment under the same paragraph\n            // First let's find the parent paragraph of this segment\n            newPath.shift();\n\n            let segmentIndex = -1;\n            const segment = group;\n            const para = newPath[0]?.blocks.find(\n                x => x.blockType == 'Paragraph' && (segmentIndex = x.segments.indexOf(segment)) >= 0\n            ) as ContentModelParagraph;\n\n            if (para) {\n                // Now we have found the parent paragraph, so let's check if it has a sibling segment\n                const siblingSegment = para.segments[segmentIndex + (isNext ? 1 : -1)];\n\n                if (siblingSegment) {\n                    // Return this block, path and segment since we have found it\n                    return { block: para, path: newPath, siblingSegment };\n                } else {\n                    // No sibling segment, let's keep go upper level\n                    block = para;\n                }\n            } else {\n                // Parent sibling is not found (in theory this should never happen), just return null\n                break;\n            }\n        } else if (group.blockGroupType != 'Document' && group.blockGroupType != 'TableCell') {\n            newPath.shift();\n            block = group;\n        } else {\n            break;\n        }\n    }\n\n    return null;\n}\n","import { alignTable } from '../table/alignTable';\nimport { getOperationalBlocks } from '../selection/collectSelections';\nimport { TableOperation } from 'roosterjs-editor-types';\nimport type { ContentModelDocument, ContentModelListItem } from 'roosterjs-content-model-types';\n\nconst ResultMap: Record<\n    'left' | 'center' | 'right',\n    Record<'ltr' | 'rtl', 'start' | 'center' | 'end'>\n> = {\n    left: {\n        ltr: 'start',\n        rtl: 'end',\n    },\n    center: {\n        ltr: 'center',\n        rtl: 'center',\n    },\n    right: {\n        ltr: 'end',\n        rtl: 'start',\n    },\n};\n\nconst TableAlignMap: Record<\n    'left' | 'center' | 'right',\n    Record<\n        'ltr' | 'rtl',\n        TableOperation.AlignLeft | TableOperation.AlignCenter | TableOperation.AlignRight\n    >\n> = {\n    left: {\n        ltr: TableOperation.AlignLeft,\n        rtl: TableOperation.AlignRight,\n    },\n    center: {\n        ltr: TableOperation.AlignCenter,\n        rtl: TableOperation.AlignCenter,\n    },\n    right: {\n        ltr: TableOperation.AlignRight,\n        rtl: TableOperation.AlignLeft,\n    },\n};\n\n/**\n * @internal\n */\nexport function setModelAlignment(\n    model: ContentModelDocument,\n    alignment: 'left' | 'center' | 'right'\n) {\n    const paragraphOrListItemOrTable = getOperationalBlocks<ContentModelListItem>(\n        model,\n        ['ListItem'],\n        ['TableCell']\n    );\n\n    paragraphOrListItemOrTable.forEach(({ block }) => {\n        const newAligment = ResultMap[alignment][block.format.direction == 'rtl' ? 'rtl' : 'ltr'];\n        if (block.blockType === 'Table') {\n            alignTable(\n                block,\n                TableAlignMap[alignment][block.format.direction == 'rtl' ? 'rtl' : 'ltr']\n            );\n        } else if (block) {\n            const { format } = block;\n            format.textAlign = newAligment;\n        }\n    });\n\n    return paragraphOrListItemOrTable.length > 0;\n}\n","import { findListItemsInSameThread } from '../list/findListItemsInSameThread';\nimport { getOperationalBlocks } from '../selection/collectSelections';\nimport { isBlockGroupOfType } from '../common/isBlockGroupOfType';\nimport type {\n    ContentModelBlockFormat,\n    ContentModelDocument,\n    ContentModelListItem,\n    MarginFormat,\n    PaddingFormat,\n} from 'roosterjs-content-model-types';\n\n/**\n * @internal\n */\nexport function setModelDirection(model: ContentModelDocument, direction: 'ltr' | 'rtl') {\n    const paragraphOrListItemOrTable = getOperationalBlocks<ContentModelListItem>(\n        model,\n        ['ListItem'],\n        ['TableCell']\n    );\n\n    paragraphOrListItemOrTable.forEach(({ block }) => {\n        if (isBlockGroupOfType<ContentModelListItem>(block, 'ListItem')) {\n            const items = findListItemsInSameThread(model, block);\n\n            items.forEach(item => {\n                item.levels.forEach(level => {\n                    level.format.direction = direction;\n                });\n\n                item.blocks.forEach(block => internalSetDirection(block.format, direction));\n            });\n        } else if (block) {\n            internalSetDirection(block.format, direction);\n        }\n    });\n\n    return paragraphOrListItemOrTable.length > 0;\n}\n\nfunction internalSetDirection(format: ContentModelBlockFormat, direction: 'ltr' | 'rtl') {\n    const wasRtl = format.direction == 'rtl';\n    const isRtl = direction == 'rtl';\n\n    if (wasRtl != isRtl) {\n        format.direction = direction;\n\n        // Adjust margin when change direction\n        // TODO: make margin and padding direction-aware, like what we did for textAlign. So no need to adjust them here\n        // TODO: Do we also need to handle border here?\n        const marginLeft = format.marginLeft;\n        const paddingLeft = format.paddingLeft;\n\n        setProperty(format, 'marginLeft', format.marginRight);\n        setProperty(format, 'marginRight', marginLeft);\n        setProperty(format, 'paddingLeft', format.paddingRight);\n        setProperty(format, 'paddingRight', paddingLeft);\n    }\n}\n\nfunction setProperty(\n    format: MarginFormat & PaddingFormat,\n    key: keyof (MarginFormat & PaddingFormat),\n    value: string | undefined\n) {\n    if (value) {\n        format[key] = value;\n    } else {\n        delete format[key];\n    }\n}\n","import { createListLevel, parseValueWithUnit } from 'roosterjs-content-model-dom';\nimport { getOperationalBlocks } from '../selection/collectSelections';\nimport { isBlockGroupOfType } from '../common/isBlockGroupOfType';\nimport type {\n    ContentModelDocument,\n    ContentModelListItem,\n    ContentModelListLevel,\n} from 'roosterjs-content-model-types';\n\nconst IndentStepInPixel = 40;\n\n/**\n * @internal\n */\nexport function setModelIndentation(\n    model: ContentModelDocument,\n    indentation: 'indent' | 'outdent',\n    length: number = IndentStepInPixel\n) {\n    const paragraphOrListItem = getOperationalBlocks<ContentModelListItem>(\n        model,\n        ['ListItem'],\n        ['TableCell']\n    );\n    const isIndent = indentation == 'indent';\n\n    paragraphOrListItem.forEach(({ block }) => {\n        if (isBlockGroupOfType<ContentModelListItem>(block, 'ListItem')) {\n            if (isIndent) {\n                const lastLevel = block.levels[block.levels.length - 1];\n                const newLevel: ContentModelListLevel = createListLevel(\n                    lastLevel?.listType || 'UL',\n                    lastLevel?.format\n                );\n\n                // New level is totally new, no need to have these attributes for now\n                delete newLevel.format.startNumberOverride;\n\n                block.levels.push(newLevel);\n            } else {\n                block.levels.pop();\n            }\n        } else if (block) {\n            const { format } = block;\n            const { marginLeft, marginRight, direction } = format;\n            const isRtl = direction == 'rtl';\n            const originalValue = parseValueWithUnit(isRtl ? marginRight : marginLeft);\n            let newValue = (isIndent ? Math.ceil : Math.floor)(originalValue / length) * length;\n\n            if (newValue == originalValue) {\n                newValue = Math.max(newValue + length * (isIndent ? 1 : -1), 0);\n            }\n\n            if (isRtl) {\n                format.marginRight = newValue + 'px';\n            } else {\n                format.marginLeft = newValue + 'px';\n            }\n        }\n    });\n\n    return paragraphOrListItem.length > 0;\n}\n","import { areSameFormats, createFormatContainer, unwrapBlock } from 'roosterjs-content-model-dom';\nimport { getOperationalBlocks } from '../selection/collectSelections';\nimport { isBlockGroupOfType } from '../common/isBlockGroupOfType';\nimport { wrapBlockStep1, wrapBlockStep2 } from '../common/wrapBlock';\nimport type { OperationalBlocks } from '../selection/collectSelections';\nimport type { WrapBlockStep1Result } from '../common/wrapBlock';\nimport type {\n    ContentModelBlock,\n    ContentModelBlockGroup,\n    ContentModelDocument,\n    ContentModelFormatContainer,\n    ContentModelFormatContainerFormat,\n    ContentModelListItem,\n} from 'roosterjs-content-model-types';\n\n/**\n * @internal\n */\nexport function toggleModelBlockQuote(\n    model: ContentModelDocument,\n    format: ContentModelFormatContainerFormat\n): boolean {\n    const paragraphOfQuote = getOperationalBlocks<\n        ContentModelFormatContainer | ContentModelListItem\n    >(model, ['FormatContainer', 'ListItem'], ['TableCell'], true /*deepFirst*/);\n\n    if (areAllBlockQuotes(paragraphOfQuote)) {\n        // All selections are already in quote, we need to unquote them\n        paragraphOfQuote.forEach(({ block, parent }) => {\n            unwrapBlock(parent, block);\n        });\n    } else {\n        const step1Results: WrapBlockStep1Result<ContentModelFormatContainer>[] = [];\n        const creator = () => createFormatContainer('blockquote', format);\n        const canMerge = (\n            target: ContentModelBlock,\n            current?: ContentModelFormatContainer\n        ): target is ContentModelFormatContainer =>\n            canMergeQuote(target, current?.format || format);\n\n        paragraphOfQuote.forEach(({ block, parent }) => {\n            if (isQuote(block)) {\n                // Already in quote, no op\n            } else {\n                wrapBlockStep1(step1Results, parent, block, creator, canMerge);\n            }\n        });\n\n        wrapBlockStep2(step1Results, canMerge);\n    }\n\n    return paragraphOfQuote.length > 0;\n}\n\nfunction canMergeQuote(\n    target: ContentModelBlock,\n    format: ContentModelFormatContainerFormat\n): target is ContentModelFormatContainer {\n    return isQuote(target) && areSameFormats(format, target.format);\n}\n\nfunction isQuote(block: ContentModelBlock): block is ContentModelFormatContainer {\n    return (\n        isBlockGroupOfType<ContentModelFormatContainer>(block, 'FormatContainer') &&\n        block.tagName == 'blockquote'\n    );\n}\n\nfunction areAllBlockQuotes(\n    blockAndParents: OperationalBlocks<ContentModelFormatContainer | ContentModelListItem>[]\n): blockAndParents is { block: ContentModelFormatContainer; parent: ContentModelBlockGroup }[] {\n    return blockAndParents.every(blockAndParent => isQuote(blockAndParent.block));\n}\n","import { adjustWordSelection } from '../selection/adjustWordSelection';\nimport { applyTableFormat } from '../table/applyTableFormat';\nimport { arrayPush } from 'roosterjs-editor-dom';\nimport { createFormatContainer } from 'roosterjs-content-model-dom';\nimport { getClosestAncestorBlockGroupIndex } from './getClosestAncestorBlockGroupIndex';\nimport { iterateSelections } from '../selection/iterateSelections';\nimport { updateTableCellMetadata } from '../../domUtils/metadata/updateTableCellMetadata';\nimport { updateTableMetadata } from '../../domUtils/metadata/updateTableMetadata';\nimport type { TableSelectionContext } from '../../publicTypes/selection/TableSelectionContext';\nimport type {\n    ContentModelBlock,\n    ContentModelBlockGroup,\n    ContentModelDocument,\n    ContentModelFormatContainer,\n    ContentModelListItem,\n    ContentModelSegment,\n    ContentModelSegmentFormat,\n    ContentModelTable,\n    Selectable,\n} from 'roosterjs-content-model-types';\n\n/**\n * @internal\n */\nexport function clearModelFormat(\n    model: ContentModelDocument,\n    blocksToClear: [ContentModelBlockGroup[], ContentModelBlock][],\n    segmentsToClear: ContentModelSegment[],\n    tablesToClear: [ContentModelTable, boolean][]\n) {\n    iterateSelections(\n        [model],\n        (path, tableContext, block, segments) => {\n            if (segments) {\n                arrayPush(segmentsToClear, segments);\n            }\n\n            if (block) {\n                blocksToClear.push([path, block]);\n            } else if (tableContext) {\n                clearTableCellFormat(tableContext, tablesToClear);\n            }\n        },\n        {\n            // When there is a default format to apply, we know how to handle segment format under list.\n            // So no need to clear format of list number.\n            // Otherwise, we will clear all format of selected text. And since they are under LI tag, we\n            // also need to clear the format of LI (format holder) so that the format is really cleared\n            includeListFormatHolder: model.format ? 'never' : 'anySegment',\n        }\n    );\n\n    const marker = segmentsToClear[0];\n\n    // 2. If selection is collapsed, add selection to whole word to clear if any\n    if (\n        blocksToClear.length == 1 &&\n        isOnlySelectionMarkerSelected(blocksToClear[0][1]) &&\n        blocksToClear.length == 1\n    ) {\n        segmentsToClear.splice(0, segmentsToClear.length, ...adjustWordSelection(model, marker));\n        clearListFormat(blocksToClear[0][0]);\n    } else if (blocksToClear.length > 1 || blocksToClear.some(x => isWholeBlockSelected(x[1]))) {\n        // 2. If a full block or multiple blocks are selected, clear block format\n        for (let i = blocksToClear.length - 1; i >= 0; i--) {\n            const [path, block] = blocksToClear[i];\n\n            clearBlockFormat(path, block);\n            clearListFormat(path);\n            clearContainerFormat(path, block);\n        }\n    }\n\n    // 3. Finally clear format for segments\n    clearSegmentsFormat(segmentsToClear, model.format);\n\n    // 4. Clear format for table if any\n    createTablesFormat(tablesToClear);\n}\n\nfunction createTablesFormat(tablesToClear: [ContentModelTable, boolean][]) {\n    tablesToClear.forEach(x => {\n        const [table, isWholeTableSelected] = x;\n        if (isWholeTableSelected) {\n            table.format = {\n                useBorderBox: table.format.useBorderBox,\n                borderCollapse: table.format.borderCollapse,\n            };\n            updateTableMetadata(table, () => null);\n        }\n\n        applyTableFormat(table, undefined /*newFormat*/, true);\n    });\n}\n\nfunction clearSegmentsFormat(\n    segmentsToClear: ContentModelSegment[],\n    defaultSegmentFormat: ContentModelSegmentFormat | undefined\n) {\n    segmentsToClear.forEach(x => {\n        x.format = { ...(defaultSegmentFormat || {}) };\n\n        if (x.link) {\n            delete x.link.format.textColor;\n        }\n\n        delete x.code;\n    });\n}\n\nfunction clearTableCellFormat(\n    tableContext: TableSelectionContext | undefined,\n    tablesToClear: [ContentModelTable, boolean][]\n) {\n    if (tableContext) {\n        const { table, colIndex, rowIndex, isWholeTableSelected } = tableContext;\n        const cell = table.rows[rowIndex].cells[colIndex];\n\n        if (cell.isSelected) {\n            updateTableCellMetadata(cell, () => null);\n            cell.isHeader = false;\n            cell.format = {\n                useBorderBox: cell.format.useBorderBox,\n            };\n        }\n\n        if (!tablesToClear.find(x => x[0] == table)) {\n            tablesToClear.push([table, isWholeTableSelected]);\n        }\n    }\n}\n\nfunction clearContainerFormat(path: ContentModelBlockGroup[], block: ContentModelBlock) {\n    const containerPathIndex = getClosestAncestorBlockGroupIndex(\n        path,\n        ['FormatContainer'],\n        ['TableCell']\n    );\n\n    if (containerPathIndex >= 0 && containerPathIndex < path.length - 1) {\n        const container = path[containerPathIndex] as ContentModelFormatContainer;\n        const containerIndex = path[containerPathIndex + 1].blocks.indexOf(container);\n        const blockIndex = container.blocks.indexOf(block);\n\n        if (blockIndex >= 0 && containerIndex >= 0) {\n            const newContainer = createFormatContainer(container.tagName, container.format);\n\n            container.blocks.splice(blockIndex, 1);\n            newContainer.blocks = container.blocks.splice(blockIndex);\n\n            path[containerPathIndex + 1].blocks.splice(containerIndex + 1, 0, block, newContainer);\n        }\n    }\n}\n\nfunction clearListFormat(path: ContentModelBlockGroup[]) {\n    const listItem = path[getClosestAncestorBlockGroupIndex(path, ['ListItem'], ['TableCell'])] as\n        | ContentModelListItem\n        | undefined;\n\n    if (listItem) {\n        listItem.levels = [];\n    }\n}\n\nfunction clearBlockFormat(path: ContentModelBlockGroup[], block: ContentModelBlock) {\n    if (block.blockType == 'Divider') {\n        const index = path[0].blocks.indexOf(block);\n\n        if (index >= 0) {\n            path[0].blocks.splice(index, 1);\n        }\n    } else if (block.blockType == 'Paragraph') {\n        block.format = {};\n        delete block.decorator;\n    }\n}\n\nfunction isOnlySelectionMarkerSelected(block: ContentModelBlock) {\n    const segments = block.blockType == 'Paragraph' ? block.segments.filter(x => x.isSelected) : [];\n\n    return segments.length == 1 && segments[0].segmentType == 'SelectionMarker';\n}\n\nfunction isWholeBlockSelected(block: ContentModelBlock) {\n    return (\n        (block as Selectable).isSelected ||\n        (block.blockType == 'Paragraph' && block.segments.every(x => x.isSelected))\n    );\n}\n","import type {\n    ContentModelBlock,\n    ContentModelBlockBase,\n    ContentModelBlockGroupBase,\n    ContentModelBlockGroupType,\n    ContentModelBlockType,\n    ContentModelDivider,\n    ContentModelDocument,\n    ContentModelEntity,\n    ContentModelFormatBase,\n    ContentModelFormatContainer,\n    ContentModelGeneralBlock,\n    ContentModelImage,\n    ContentModelListItem,\n    ContentModelParagraph,\n    ContentModelSegment,\n    ContentModelSegmentBase,\n    ContentModelSegmentType,\n    ContentModelSelectionMarker,\n    ContentModelTable,\n    ContentModelTableCell,\n    ContentModelWithDataset,\n    ContentModelWithFormat,\n    ContentModelGeneralSegment,\n    ContentModelText,\n    ContentModelTableRow,\n    ContentModelListLevel,\n} from 'roosterjs-content-model-types';\n\n/**\n * @internal\n */\nexport type CachedElementHandler = (\n    node: HTMLElement,\n    type: 'general' | 'entity' | 'cache'\n) => HTMLElement | undefined;\n\n/**\n * @internal\n * Options for cloneModel API\n */\nexport interface CloneModelOptions {\n    /**\n     * Specify how to deal with cached element, including cached block element, element in General Model, and wrapper element in Entity\n     * - True: Cloned model will have the same reference to the cached element\n     * - False/Not passed: For cached block element, cached element will be undefined. For General Model and Entity, the element will have deep clone and assign to the cloned model\n     * - A callback: invoke the callback with the source cached element and a string to specify model type, let the callback return the expected value of cached element.\n     * For General Model and Entity, the callback must return a valid element, otherwise there will be exception thrown.\n     */\n    includeCachedElement?: boolean | CachedElementHandler;\n}\n\n/**\n * @internal\n */\nexport function cloneModel(\n    model: ContentModelDocument,\n    options?: CloneModelOptions\n): ContentModelDocument {\n    const newModel: ContentModelDocument = cloneBlockGroupBase(model, options || {});\n\n    if (model.format) {\n        newModel.format = Object.assign({}, model.format);\n    }\n\n    return newModel;\n}\n\nfunction cloneBlock(block: ContentModelBlock, options: CloneModelOptions): ContentModelBlock {\n    switch (block.blockType) {\n        case 'BlockGroup':\n            switch (block.blockGroupType) {\n                case 'FormatContainer':\n                    return cloneFormatContainer(block, options);\n                case 'General':\n                    return cloneGeneralBlock(block, options);\n                case 'ListItem':\n                    return cloneListItem(block, options);\n            }\n            break;\n        case 'Divider':\n            return cloneDivider(block, options);\n        case 'Entity':\n            return cloneEntity(block, options);\n        case 'Paragraph':\n            return cloneParagraph(block, options);\n        case 'Table':\n            return cloneTable(block, options);\n    }\n}\n\nfunction cloneSegment(\n    segment: ContentModelSegment,\n    options: CloneModelOptions\n): ContentModelSegment {\n    switch (segment.segmentType) {\n        case 'Br':\n            return cloneSegmentBase(segment);\n        case 'Entity':\n            return cloneEntity(segment, options);\n        case 'General':\n            return cloneGeneralSegment(segment, options);\n        case 'Image':\n            return cloneImage(segment);\n        case 'SelectionMarker':\n            return cloneSelectionMarker(segment);\n        case 'Text':\n            return cloneText(segment);\n    }\n}\n\nfunction cloneModelWithFormat<T extends ContentModelFormatBase>(\n    model: ContentModelWithFormat<T>\n): ContentModelWithFormat<T> {\n    return {\n        format: Object.assign({}, model.format),\n    };\n}\n\nfunction cloneModelWithDataset<T>(model: ContentModelWithDataset<T>): ContentModelWithDataset<T> {\n    return {\n        dataset: Object.assign({}, model.dataset),\n    };\n}\n\nfunction cloneBlockBase<T extends ContentModelBlockType>(\n    block: ContentModelBlockBase<T>\n): ContentModelBlockBase<T> {\n    const { blockType } = block;\n\n    return Object.assign(\n        {\n            blockType,\n        },\n        cloneModelWithFormat(block)\n    );\n}\n\nfunction cloneBlockGroupBase<T extends ContentModelBlockGroupType>(\n    group: ContentModelBlockGroupBase<T>,\n    options: CloneModelOptions\n): ContentModelBlockGroupBase<T> {\n    const { blockGroupType, blocks } = group;\n\n    return {\n        blockGroupType: blockGroupType,\n        blocks: blocks.map(block => cloneBlock(block, options)),\n    };\n}\n\nfunction cloneSegmentBase<T extends ContentModelSegmentType>(\n    segment: ContentModelSegmentBase<T>\n): ContentModelSegmentBase<T> {\n    const { segmentType, isSelected, code, link } = segment;\n\n    const newSegment: ContentModelSegmentBase<T> = Object.assign(\n        {\n            segmentType,\n            isSelected,\n        },\n        cloneModelWithFormat(segment)\n    );\n\n    if (code) {\n        newSegment.code = cloneModelWithFormat(code);\n    }\n    if (link) {\n        newSegment.link = Object.assign(cloneModelWithFormat(link), cloneModelWithDataset(link));\n    }\n\n    return newSegment;\n}\n\nfunction cloneEntity(entity: ContentModelEntity, options: CloneModelOptions): ContentModelEntity {\n    const { wrapper, entityFormat } = entity;\n\n    return Object.assign(\n        {\n            wrapper: handleCachedElement(wrapper, 'entity', options),\n            entityFormat: { ...entityFormat },\n        },\n        cloneBlockBase(entity),\n        cloneSegmentBase(entity)\n    );\n}\n\nfunction cloneParagraph(\n    paragraph: ContentModelParagraph,\n    options: CloneModelOptions\n): ContentModelParagraph {\n    const { cachedElement, segments, isImplicit, decorator, segmentFormat } = paragraph;\n\n    const newParagraph: ContentModelParagraph = Object.assign(\n        {\n            cachedElement: handleCachedElement(cachedElement, 'cache', options),\n            isImplicit,\n            segments: segments.map(segment => cloneSegment(segment, options)),\n            segmentFormat: segmentFormat ? { ...segmentFormat } : undefined,\n        },\n        cloneBlockBase(paragraph),\n        cloneModelWithFormat(paragraph)\n    );\n\n    if (decorator) {\n        newParagraph.decorator = Object.assign(\n            {\n                tagName: decorator.tagName,\n            },\n            cloneModelWithFormat(decorator)\n        );\n    }\n\n    return newParagraph;\n}\n\nfunction cloneTable(table: ContentModelTable, options: CloneModelOptions): ContentModelTable {\n    const { cachedElement, widths, rows } = table;\n\n    return Object.assign(\n        {\n            cachedElement: handleCachedElement(cachedElement, 'cache', options),\n            widths: Array.from(widths),\n            rows: rows.map(row => cloneTableRow(row, options)),\n        },\n        cloneBlockBase(table),\n        cloneModelWithDataset(table)\n    );\n}\n\nfunction cloneTableRow(\n    row: ContentModelTableRow,\n    options: CloneModelOptions\n): ContentModelTableRow {\n    const { height, cells, cachedElement } = row;\n\n    return Object.assign(\n        {\n            height,\n            cachedElement: handleCachedElement(cachedElement, 'cache', options),\n            cells: cells.map(cell => cloneTableCell(cell, options)),\n        },\n        cloneModelWithFormat(row)\n    );\n}\n\nfunction cloneTableCell(\n    cell: ContentModelTableCell,\n    options: CloneModelOptions\n): ContentModelTableCell {\n    const { cachedElement, isSelected, spanAbove, spanLeft, isHeader } = cell;\n\n    return Object.assign(\n        {\n            cachedElement: handleCachedElement(cachedElement, 'cache', options),\n            isSelected,\n            spanAbove,\n            spanLeft,\n            isHeader,\n        },\n        cloneBlockGroupBase(cell, options),\n        cloneModelWithFormat(cell),\n        cloneModelWithDataset(cell)\n    );\n}\n\nfunction cloneFormatContainer(\n    container: ContentModelFormatContainer,\n    options: CloneModelOptions\n): ContentModelFormatContainer {\n    const { tagName, cachedElement } = container;\n    const newContainer: ContentModelFormatContainer = Object.assign(\n        { tagName, cachedElement: handleCachedElement(cachedElement, 'cache', options) },\n        cloneBlockBase(container),\n        cloneBlockGroupBase(container, options)\n    );\n\n    if (container.zeroFontSize) {\n        newContainer.zeroFontSize = true;\n    }\n\n    return newContainer;\n}\n\nfunction cloneListItem(\n    item: ContentModelListItem,\n    options: CloneModelOptions\n): ContentModelListItem {\n    const { formatHolder, levels } = item;\n\n    return Object.assign(\n        {\n            formatHolder: cloneSelectionMarker(formatHolder),\n            levels: levels.map(cloneListLevel),\n        },\n        cloneBlockBase(item),\n        cloneBlockGroupBase(item, options)\n    );\n}\n\nfunction cloneListLevel(level: ContentModelListLevel): ContentModelListLevel {\n    const { listType } = level;\n\n    return Object.assign({ listType }, cloneModelWithFormat(level), cloneModelWithDataset(level));\n}\nfunction cloneDivider(\n    divider: ContentModelDivider,\n    options: CloneModelOptions\n): ContentModelDivider {\n    const { tagName, isSelected, cachedElement } = divider;\n\n    return Object.assign(\n        {\n            isSelected,\n            tagName,\n            cachedElement: handleCachedElement(cachedElement, 'cache', options),\n        },\n        cloneBlockBase(divider)\n    );\n}\n\nfunction cloneGeneralBlock(\n    general: ContentModelGeneralBlock,\n    options: CloneModelOptions\n): ContentModelGeneralBlock {\n    const { element } = general;\n\n    return Object.assign(\n        {\n            element: handleCachedElement(element, 'general', options),\n        },\n        cloneBlockBase(general),\n        cloneBlockGroupBase(general, options)\n    );\n}\n\nfunction cloneSelectionMarker(marker: ContentModelSelectionMarker): ContentModelSelectionMarker {\n    return Object.assign({ isSelected: marker.isSelected }, cloneSegmentBase(marker));\n}\n\nfunction cloneImage(image: ContentModelImage): ContentModelImage {\n    const { src, alt, title, isSelectedAsImageSelection } = image;\n\n    return Object.assign(\n        { src, alt, title, isSelectedAsImageSelection },\n        cloneSegmentBase(image),\n        cloneModelWithDataset(image)\n    );\n}\n\nfunction cloneGeneralSegment(\n    general: ContentModelGeneralSegment,\n    options: CloneModelOptions\n): ContentModelGeneralSegment {\n    return Object.assign(cloneGeneralBlock(general, options), cloneSegmentBase(general));\n}\n\nfunction cloneText(textSegment: ContentModelText): ContentModelText {\n    const { text } = textSegment;\n    return Object.assign({ text }, cloneSegmentBase(textSegment));\n}\n\nfunction handleCachedElement<T extends HTMLElement>(\n    node: T,\n    type: 'general' | 'entity',\n    options: CloneModelOptions\n): T;\n\nfunction handleCachedElement<T extends HTMLElement>(\n    node: T | undefined,\n    type: 'cache',\n    options: CloneModelOptions\n): T | undefined;\n\nfunction handleCachedElement<T extends HTMLElement>(\n    node: T | undefined,\n    type: 'general' | 'entity' | 'cache',\n    options: CloneModelOptions\n): T | undefined {\n    const { includeCachedElement } = options;\n\n    if (!node) {\n        return undefined;\n    } else if (!includeCachedElement) {\n        return type == 'cache' ? undefined : (node.cloneNode(true /*deep*/) as T);\n    } else if (includeCachedElement === true) {\n        return node;\n    } else {\n        const result = includeCachedElement(node, type) as T | undefined;\n\n        if ((type == 'general' || type == 'entity') && !result) {\n            throw new Error('Entity and General Model must has wrapper element');\n        }\n\n        return result;\n    }\n}\n","import type {\n    ContentModelBlockGroup,\n    ContentModelBlockGroupBase,\n    ContentModelBlockGroupType,\n} from 'roosterjs-content-model-types';\n\n/**\n * @internal\n */\nexport type TypeOfBlockGroup<\n    T extends ContentModelBlockGroup\n> = T extends ContentModelBlockGroupBase<infer U> ? U : never;\n\n/**\n * @internal\n */\nexport function getClosestAncestorBlockGroupIndex<T extends ContentModelBlockGroup>(\n    path: ContentModelBlockGroup[],\n    blockGroupTypes: TypeOfBlockGroup<T>[],\n    stopTypes: ContentModelBlockGroupType[] = []\n): number {\n    for (let i = 0; i < path.length; i++) {\n        const group = path[i];\n\n        if ((blockGroupTypes as string[]).indexOf(group.blockGroupType) >= 0) {\n            return i;\n        } else if (stopTypes.indexOf(group.blockGroupType) >= 0) {\n            // Do not go across boundary specified by stopTypes.\n            // For example, in most case we will set table as the boundary,\n            // in order to allow modify list item under a table when the table itself is in another list item\n            // Although this is not very likely to happen in most case, but we still need to handle it\n            return -1;\n        }\n    }\n\n    return -1;\n}\n","import type { ContentModelBlock, ContentModelBlockGroup } from 'roosterjs-content-model-types';\nimport type { TypeOfBlockGroup } from './getClosestAncestorBlockGroupIndex';\n\n/**\n * @internal\n */\nexport function isBlockGroupOfType<T extends ContentModelBlockGroup>(\n    input: ContentModelBlock | ContentModelBlockGroup | null | undefined,\n    type: TypeOfBlockGroup<T>\n): input is T {\n    const item = <T | null | undefined>input;\n\n    return item?.blockGroupType == type;\n}\n","import { applyTableFormat } from '../table/applyTableFormat';\nimport { deleteSelection } from '../edit/deleteSelection';\nimport { getClosestAncestorBlockGroupIndex } from './getClosestAncestorBlockGroupIndex';\nimport { normalizeTable } from '../table/normalizeTable';\nimport {\n    addSegment,\n    createListItem,\n    createParagraph,\n    createSelectionMarker,\n    createTableCell,\n    getObjectKeys,\n    normalizeContentModel,\n} from 'roosterjs-content-model-dom';\nimport type { FormatWithContentModelContext } from '../../publicTypes/parameter/FormatWithContentModelContext';\nimport type { InsertPoint } from '../../publicTypes/selection/InsertPoint';\nimport type {\n    ContentModelBlock,\n    ContentModelBlockFormat,\n    ContentModelBlockGroup,\n    ContentModelDocument,\n    ContentModelListItem,\n    ContentModelParagraph,\n    ContentModelSegmentFormat,\n    ContentModelTable,\n} from 'roosterjs-content-model-types';\n\nconst HeadingTags = ['h1', 'h2', 'h3', 'h4', 'h5', 'h6'];\n\n/**\n * @internal\n * Options to specify how to merge models\n */\nexport interface MergeModelOption {\n    /**\n     * When there is only a table to merge, whether merge this table into current table (if any), or just directly insert (nested table).\n     * This is usually used when paste table inside a table\n     * @default false\n     */\n    mergeTable?: boolean;\n\n    /**\n     * Use this insert position to merge instead of querying selection from target model\n     * @default undefined\n     */\n    insertPosition?: InsertPoint;\n\n    /**\n     * Use this to decide whether to change the source model format when doing the merge.\n     * 'mergeAll': segment format of the insert position will be merged into the content that is merged into current model.\n     * If the source model already has some format, it will not be overwritten.\n     * 'keepSourceEmphasisFormat': format of the insert position will be set into the content that is merged into current model.\n     * If the source model already has emphasis format, such as, fontWeight, Italic or underline different than the default style, it will not be overwritten.\n     * 'none' the source segment format will not be modified.\n     * @default undefined\n     */\n    mergeFormat?: 'mergeAll' | 'keepSourceEmphasisFormat' | 'none';\n}\n\n/**\n * @internal\n */\nexport function mergeModel(\n    target: ContentModelDocument,\n    source: ContentModelDocument,\n    context?: FormatWithContentModelContext,\n    options?: MergeModelOption\n) {\n    const insertPosition =\n        options?.insertPosition ?? deleteSelection(target, [], context).insertPoint;\n\n    if (insertPosition) {\n        if (options?.mergeFormat && options.mergeFormat != 'none') {\n            const newFormat: ContentModelSegmentFormat = {\n                ...(target.format || {}),\n                ...insertPosition.marker.format,\n            };\n\n            applyDefaultFormat(source, newFormat, options?.mergeFormat);\n        }\n\n        for (let i = 0; i < source.blocks.length; i++) {\n            const block = source.blocks[i];\n\n            switch (block.blockType) {\n                case 'Paragraph':\n                    mergeParagraph(insertPosition, block, i == 0, context, options);\n                    break;\n\n                case 'Divider':\n                    insertBlock(insertPosition, block);\n                    break;\n\n                case 'Entity':\n                    insertBlock(insertPosition, block);\n                    context?.newEntities.push(block);\n                    break;\n\n                case 'Table':\n                    if (source.blocks.length == 1 && options?.mergeTable) {\n                        mergeTable(insertPosition, block, source);\n                    } else {\n                        insertBlock(insertPosition, block);\n                    }\n                    break;\n\n                case 'BlockGroup':\n                    switch (block.blockGroupType) {\n                        case 'General':\n                        case 'FormatContainer':\n                            insertBlock(insertPosition, block);\n                            break;\n                        case 'ListItem':\n                            mergeList(insertPosition, block);\n                            break;\n                    }\n                    break;\n            }\n        }\n    }\n\n    normalizeContentModel(target);\n}\n\nfunction mergeParagraph(\n    markerPosition: InsertPoint,\n    newPara: ContentModelParagraph,\n    mergeToCurrentParagraph: boolean,\n    context?: FormatWithContentModelContext,\n    option?: MergeModelOption\n) {\n    const { paragraph, marker } = markerPosition;\n    const newParagraph = mergeToCurrentParagraph\n        ? paragraph\n        : splitParagraph(markerPosition, newPara.format);\n    const segmentIndex = newParagraph.segments.indexOf(marker);\n\n    if (option?.mergeFormat == 'none' && mergeToCurrentParagraph) {\n        newParagraph.segments.forEach(segment => {\n            segment.format = { ...(newParagraph.segmentFormat || {}), ...segment.format };\n        });\n        delete newParagraph.segmentFormat;\n    }\n    if (segmentIndex >= 0) {\n        for (let i = 0; i < newPara.segments.length; i++) {\n            const segment = newPara.segments[i];\n\n            newParagraph.segments.splice(segmentIndex + i, 0, segment);\n\n            if (context && segment.segmentType == 'Entity') {\n                context.newEntities.push(segment);\n            }\n        }\n    }\n\n    if (newPara.decorator) {\n        newParagraph.decorator = { ...newPara.decorator };\n        if (HeadingTags.indexOf(newParagraph.decorator.tagName) > -1) {\n            const sourceKeys: (keyof ContentModelSegmentFormat)[] = getObjectKeys(\n                newParagraph.decorator.format\n            );\n            const segmentDecoratorKeys: (keyof ContentModelSegmentFormat)[] = getObjectKeys(\n                newParagraph.segmentFormat || {}\n            );\n\n            sourceKeys.forEach(key => {\n                if (segmentDecoratorKeys.indexOf(key) > -1) {\n                    delete newParagraph.segmentFormat?.[key];\n                }\n            });\n        }\n    }\n\n    if (!mergeToCurrentParagraph) {\n        newParagraph.format = newPara.format;\n    }\n}\n\nfunction mergeTable(\n    markerPosition: InsertPoint,\n    newTable: ContentModelTable,\n    source: ContentModelDocument\n) {\n    const { tableContext } = markerPosition;\n\n    if (tableContext && source.blocks.length == 1 && source.blocks[0] == newTable) {\n        const { table, colIndex, rowIndex } = tableContext;\n        for (let i = 0; i < newTable.rows.length; i++) {\n            for (let j = 0; j < newTable.rows[i].cells.length; j++) {\n                const newCell = newTable.rows[i].cells[j];\n\n                if (i == 0 && colIndex + j >= table.rows[0].cells.length) {\n                    for (let k = 0; k < table.rows.length; k++) {\n                        const leftCell = table.rows[k]?.cells[colIndex + j - 1];\n                        table.rows[k].cells[colIndex + j] = createTableCell(\n                            false /*spanLeft*/,\n                            false /*spanAbove*/,\n                            leftCell?.isHeader,\n                            leftCell?.format\n                        );\n                    }\n                }\n\n                if (j == 0 && rowIndex + i >= table.rows.length) {\n                    if (!table.rows[rowIndex + i]) {\n                        table.rows[rowIndex + i] = {\n                            cells: [],\n                            format: {},\n                            height: 0,\n                        };\n                    }\n\n                    for (let k = 0; k < table.rows[rowIndex].cells.length; k++) {\n                        const aboveCell = table.rows[rowIndex + i - 1]?.cells[k];\n                        table.rows[rowIndex + i].cells[k] = createTableCell(\n                            false /*spanLeft*/,\n                            false /*spanAbove*/,\n                            false /*isHeader*/,\n                            aboveCell?.format\n                        );\n                    }\n                }\n\n                table.rows[rowIndex + i].cells[colIndex + j] = newCell;\n\n                if (i == 0 && j == 0) {\n                    addSegment(newCell, createSelectionMarker());\n                }\n            }\n        }\n\n        normalizeTable(table, markerPosition.marker.format);\n        applyTableFormat(table, undefined /*newFormat*/, true /*keepCellShade*/);\n    } else {\n        insertBlock(markerPosition, newTable);\n    }\n}\n\nfunction mergeList(markerPosition: InsertPoint, newList: ContentModelListItem) {\n    splitParagraph(markerPosition, newList.format);\n\n    const { path, paragraph } = markerPosition;\n\n    const listItemIndex = getClosestAncestorBlockGroupIndex(path, ['ListItem']);\n    const listItem = path[listItemIndex] as ContentModelListItem;\n    const listParent = path[listItemIndex + 1]; // It is ok here when index is -1, that means there is no list and we just insert a new paragraph and use path[0] as its parent\n    const blockIndex = listParent.blocks.indexOf(listItem || paragraph);\n\n    if (blockIndex >= 0) {\n        listParent.blocks.splice(blockIndex, 0, newList);\n    }\n\n    if (listItem) {\n        listItem?.levels.forEach((level, i) => {\n            newList.levels[i] = { ...level };\n        });\n    }\n}\n\nfunction splitParagraph(markerPosition: InsertPoint, newParaFormat: ContentModelBlockFormat) {\n    const { paragraph, marker, path } = markerPosition;\n    const segmentIndex = paragraph.segments.indexOf(marker);\n    const paraIndex = path[0].blocks.indexOf(paragraph);\n    const newParagraph = createParagraph(\n        false /*isImplicit*/,\n        { ...paragraph.format, ...newParaFormat },\n        paragraph.segmentFormat\n    );\n\n    if (segmentIndex >= 0) {\n        newParagraph.segments = paragraph.segments.splice(segmentIndex);\n    }\n\n    if (paraIndex >= 0) {\n        path[0].blocks.splice(paraIndex + 1, 0, newParagraph);\n    }\n\n    const listItemIndex = getClosestAncestorBlockGroupIndex(\n        path,\n        ['ListItem'],\n        ['FormatContainer', 'TableCell']\n    );\n    const listItem = path[listItemIndex] as ContentModelListItem;\n\n    if (listItem) {\n        const listParent = listItemIndex >= 0 ? path[listItemIndex + 1] : null;\n        const blockIndex = listParent ? listParent.blocks.indexOf(listItem) : -1;\n\n        if (blockIndex >= 0 && listParent) {\n            const newListItem = createListItem(listItem.levels, listItem.formatHolder.format);\n\n            if (paraIndex >= 0) {\n                newListItem.blocks = listItem.blocks.splice(paraIndex + 1);\n            }\n\n            if (blockIndex >= 0) {\n                listParent.blocks.splice(blockIndex + 1, 0, newListItem);\n            }\n\n            path[listItemIndex] = newListItem;\n        }\n    }\n\n    markerPosition.paragraph = newParagraph;\n\n    return newParagraph;\n}\n\nfunction insertBlock(markerPosition: InsertPoint, block: ContentModelBlock) {\n    const { path } = markerPosition;\n    const newParaFormat = block.blockType !== 'Paragraph' ? {} : block.format;\n    const newPara = splitParagraph(markerPosition, newParaFormat);\n    const blockIndex = path[0].blocks.indexOf(newPara);\n\n    if (blockIndex >= 0) {\n        path[0].blocks.splice(blockIndex, 0, block);\n    }\n}\n\nfunction applyDefaultFormat(\n    group: ContentModelBlockGroup,\n    format: ContentModelSegmentFormat,\n    applyDefaultFormatOption: 'mergeAll' | 'keepSourceEmphasisFormat'\n) {\n    group.blocks.forEach(block => {\n        switch (block.blockType) {\n            case 'BlockGroup':\n                if (block.blockGroupType == 'ListItem') {\n                    block.formatHolder.format = mergeSegmentFormat(\n                        applyDefaultFormatOption,\n                        format,\n                        block.formatHolder.format\n                    );\n                }\n                applyDefaultFormat(block, format, applyDefaultFormatOption);\n                break;\n\n            case 'Table':\n                block.rows.forEach(row =>\n                    row.cells.forEach(cell => {\n                        applyDefaultFormat(cell, format, applyDefaultFormatOption);\n                    })\n                );\n                break;\n\n            case 'Paragraph':\n                const paragraphFormat = block.decorator?.format || {};\n                block.segments.forEach(segment => {\n                    if (segment.segmentType == 'General') {\n                        applyDefaultFormat(segment, format, applyDefaultFormatOption);\n                    }\n\n                    segment.format = mergeSegmentFormat(applyDefaultFormatOption, format, {\n                        ...paragraphFormat,\n                        ...segment.format,\n                    });\n                });\n\n                if (applyDefaultFormatOption === 'keepSourceEmphasisFormat') {\n                    delete block.decorator;\n                }\n                break;\n        }\n    });\n}\n\nfunction mergeSegmentFormat(\n    applyDefaultFormatOption: 'mergeAll' | 'keepSourceEmphasisFormat',\n    targetformat: ContentModelSegmentFormat,\n    sourceFormat: ContentModelSegmentFormat\n): ContentModelSegmentFormat {\n    return applyDefaultFormatOption == 'mergeAll'\n        ? { ...targetformat, ...sourceFormat }\n        : {\n              ...targetformat,\n              ...getSemanticFormat(sourceFormat),\n          };\n}\n\nfunction getSemanticFormat(segmentFormat: ContentModelSegmentFormat): ContentModelSegmentFormat {\n    const result: ContentModelSegmentFormat = {};\n\n    const { fontWeight, italic, underline } = segmentFormat;\n\n    if (fontWeight && fontWeight != 'normal') {\n        result.fontWeight = fontWeight;\n    }\n    if (italic) {\n        result.italic = italic;\n    }\n    if (underline) {\n        result.underline = underline;\n    }\n\n    return result;\n}\n","import { extractBorderValues } from '../../domUtils/borderValues';\nimport { getClosestAncestorBlockGroupIndex } from './getClosestAncestorBlockGroupIndex';\nimport { isBold } from '../../publicApi/segment/toggleBold';\nimport { iterateSelections } from '../selection/iterateSelections';\nimport { updateTableMetadata } from '../../domUtils/metadata/updateTableMetadata';\nimport type { ContentModelFormatState } from '../../publicTypes/format/formatState/ContentModelFormatState';\nimport type { TableSelectionContext } from '../../publicTypes/selection/TableSelectionContext';\nimport type {\n    ContentModelBlock,\n    ContentModelBlockGroup,\n    ContentModelDocument,\n    ContentModelFormatContainer,\n    ContentModelImage,\n    ContentModelListItem,\n    ContentModelParagraph,\n    ContentModelSegmentFormat,\n} from 'roosterjs-content-model-types';\n\n/**\n * @internal\n */\nexport function retrieveModelFormatState(\n    model: ContentModelDocument,\n    pendingFormat: ContentModelSegmentFormat | null,\n    formatState: ContentModelFormatState\n) {\n    let firstTableContext: TableSelectionContext | undefined;\n    let firstBlock: ContentModelBlock | undefined;\n    let isFirst = true;\n    let isFirstImage = true;\n    let isFirstSegment = true;\n\n    iterateSelections(\n        [model],\n        (path, tableContext, block, segments) => {\n            // Structure formats\n            retrieveStructureFormat(formatState, path, isFirst);\n\n            // Multiple line format\n            if (block) {\n                if (firstBlock) {\n                    formatState.isMultilineSelection = true;\n                } else {\n                    firstBlock = block;\n                }\n            }\n\n            if (block?.blockType == 'Paragraph') {\n                // Paragraph formats\n                retrieveParagraphFormat(formatState, block, isFirst);\n\n                // Segment formats\n                segments?.forEach(segment => {\n                    if (isFirstSegment || segment.segmentType != 'SelectionMarker') {\n                        const modelFormat = Object.assign({}, model.format);\n                        delete modelFormat?.italic;\n                        delete modelFormat?.underline;\n                        delete modelFormat?.fontWeight;\n\n                        retrieveSegmentFormat(\n                            formatState,\n                            isFirst,\n                            Object.assign(\n                                {},\n                                modelFormat,\n                                block.format,\n                                block.decorator?.format,\n                                segment.format,\n                                segment.code?.format,\n                                segment.link?.format,\n                                pendingFormat\n                            )\n                        );\n\n                        mergeValue(formatState, 'isCodeInline', !!segment?.code, isFirst);\n                    }\n\n                    // We only care the format of selection marker when it is the first selected segment. This is because when selection marker\n                    // is after some other selected segments, it mostly like appears at the beginning of a seconde line when the whole first line\n                    // is selected (e.g. triple-click on a line) then the second selection marker doesn't contain a correct format, so we need to\n                    // ignore it\n                    isFirstSegment = false;\n\n                    formatState.canUnlink = formatState.canUnlink || !!segment.link;\n                    formatState.canAddImageAltText =\n                        formatState.canAddImageAltText ||\n                        segments.some(segment => segment.segmentType == 'Image');\n\n                    isFirst = false;\n\n                    if (segment.segmentType === 'Image') {\n                        if (isFirstImage) {\n                            retrieveImageFormat(segment, formatState);\n                            isFirstImage = false;\n                        } else {\n                            formatState.imageFormat = undefined;\n                        }\n                    }\n                });\n\n                isFirst = false;\n            }\n\n            if (tableContext) {\n                if (firstTableContext) {\n                    const { table, colIndex, rowIndex } = firstTableContext;\n\n                    // Merge table format\n                    if (\n                        tableContext.table == table &&\n                        (tableContext.colIndex != colIndex || tableContext.rowIndex != rowIndex)\n                    ) {\n                        formatState.canMergeTableCell = true;\n                        formatState.isMultilineSelection = true;\n                    }\n                } else {\n                    // Table formats\n                    retrieveTableFormat(tableContext, formatState);\n                    firstTableContext = tableContext;\n                }\n            }\n\n            // TODO: Support Code block in format state for Content Model\n        },\n        {\n            includeListFormatHolder: 'never',\n        }\n    );\n\n    if (formatState.fontSize) {\n        formatState.fontSize = px2Pt(formatState.fontSize);\n    }\n}\n\nfunction retrieveSegmentFormat(\n    result: ContentModelFormatState,\n    isFirst: boolean,\n    mergedFormat: ContentModelSegmentFormat\n) {\n    const superOrSubscript = mergedFormat.superOrSubScriptSequence?.split(' ')?.pop();\n\n    mergeValue(result, 'isBold', isBold(mergedFormat.fontWeight), isFirst);\n    mergeValue(result, 'isItalic', mergedFormat.italic, isFirst);\n    mergeValue(result, 'isUnderline', mergedFormat.underline, isFirst);\n    mergeValue(result, 'isStrikeThrough', mergedFormat.strikethrough, isFirst);\n    mergeValue(result, 'isSuperscript', superOrSubscript == 'super', isFirst);\n    mergeValue(result, 'isSubscript', superOrSubscript == 'sub', isFirst);\n    mergeValue(result, 'letterSpacing', mergedFormat.letterSpacing, isFirst);\n\n    mergeValue(result, 'fontName', mergedFormat.fontFamily, isFirst);\n    mergeValue(result, 'fontSize', mergedFormat.fontSize, isFirst);\n    mergeValue(result, 'backgroundColor', mergedFormat.backgroundColor, isFirst);\n    mergeValue(result, 'textColor', mergedFormat.textColor, isFirst);\n\n    //TODO: handle block owning segments with different line-heights\n    mergeValue(result, 'lineHeight', mergedFormat.lineHeight, isFirst);\n}\n\nfunction retrieveParagraphFormat(\n    result: ContentModelFormatState,\n    paragraph: ContentModelParagraph,\n    isFirst: boolean\n) {\n    const headingLevel = parseInt((paragraph.decorator?.tagName || '').substring(1));\n    const validHeadingLevel = headingLevel >= 1 && headingLevel <= 6 ? headingLevel : undefined;\n\n    mergeValue(result, 'marginBottom', paragraph.format.marginBottom, isFirst);\n    mergeValue(result, 'marginTop', paragraph.format.marginTop, isFirst);\n    mergeValue(result, 'headingLevel', validHeadingLevel, isFirst);\n    mergeValue(result, 'headerLevel', validHeadingLevel, isFirst);\n    mergeValue(result, 'textAlign', paragraph.format.textAlign, isFirst);\n    mergeValue(result, 'direction', paragraph.format.direction, isFirst);\n}\n\nfunction retrieveStructureFormat(\n    result: ContentModelFormatState,\n    path: ContentModelBlockGroup[],\n    isFirst: boolean\n) {\n    const listItemIndex = getClosestAncestorBlockGroupIndex(path, ['ListItem'], []);\n    const containerIndex = getClosestAncestorBlockGroupIndex(path, ['FormatContainer'], []);\n\n    if (listItemIndex >= 0) {\n        const listItem = path[listItemIndex] as ContentModelListItem;\n        const listType = listItem?.levels[listItem.levels.length - 1]?.listType;\n\n        mergeValue(result, 'isBullet', listType == 'UL', isFirst);\n        mergeValue(result, 'isNumbering', listType == 'OL', isFirst);\n    }\n\n    mergeValue(\n        result,\n        'isBlockQuote',\n        containerIndex >= 0 &&\n            (path[containerIndex] as ContentModelFormatContainer)?.tagName == 'blockquote',\n        isFirst\n    );\n}\n\nfunction retrieveTableFormat(tableContext: TableSelectionContext, result: ContentModelFormatState) {\n    const tableFormat = updateTableMetadata(tableContext.table);\n\n    result.isInTable = true;\n    result.tableHasHeader = tableContext.table.rows.some(row =>\n        row.cells.some(cell => cell.isHeader)\n    );\n\n    if (tableFormat) {\n        result.tableFormat = tableFormat;\n    }\n}\n\nfunction retrieveImageFormat(image: ContentModelImage, result: ContentModelFormatState) {\n    const { format } = image;\n    const borderKey = 'borderTop';\n    const extractedBorder = extractBorderValues(format[borderKey]);\n    const borderColor = extractedBorder.color;\n    const borderWidth = extractedBorder.width;\n    const borderStyle = extractedBorder.style;\n    result.imageFormat = {\n        borderColor,\n        borderWidth,\n        borderStyle,\n        boxShadow: format.boxShadow,\n        borderRadius: format.borderRadius,\n    };\n}\n\nfunction mergeValue<K extends keyof ContentModelFormatState>(\n    format: ContentModelFormatState,\n    key: K,\n    newValue: ContentModelFormatState[K] | undefined,\n    isFirst: boolean\n) {\n    if (isFirst) {\n        if (newValue !== undefined) {\n            format[key] = newValue;\n        }\n    } else if (newValue !== format[key]) {\n        delete format[key];\n    }\n}\n\nfunction px2Pt(px: string) {\n    if (px && px.indexOf('px') == px.length - 2) {\n        // Edge may not handle the floating computing well which causes the calculated value is a little less than actual value\n        // So add 0.05 to fix it\n        return Math.round(parseFloat(px) * 75 + 0.05) / 100 + 'pt';\n    }\n    return px;\n}\n","import { addBlock, setParagraphNotImplicit } from 'roosterjs-content-model-dom';\nimport { arrayPush } from 'roosterjs-editor-dom';\nimport type { ContentModelBlock, ContentModelBlockGroup } from 'roosterjs-content-model-types';\n\n/**\n * @internal\n */\nexport interface WrapBlockStep1Result<T extends ContentModelBlockGroup & ContentModelBlock> {\n    parent: ContentModelBlockGroup;\n    wrapper: T;\n}\n\n/**\n * @internal\n */\nexport function wrapBlockStep1<T extends ContentModelBlockGroup & ContentModelBlock>(\n    step1Result: WrapBlockStep1Result<T>[],\n    parent: ContentModelBlockGroup | null,\n    blockToWrap: ContentModelBlock,\n    creator: () => T,\n    canMerge: (target: ContentModelBlock) => target is T\n) {\n    const index = parent?.blocks.indexOf(blockToWrap) ?? -1;\n\n    if (parent && index >= 0) {\n        parent.blocks.splice(index, 1);\n\n        const prevBlock = parent.blocks[index - 1];\n        const wrapper = canMerge(prevBlock) ? prevBlock : createAndAdd(parent, index, creator);\n\n        setParagraphNotImplicit(blockToWrap);\n        addBlock(wrapper, blockToWrap);\n\n        // Use reverse order, so that we can merge from last to first to avoid modifying unmerged quotes\n        step1Result.unshift({ parent, wrapper });\n    }\n}\n\n/**\n * @internal\n */\nexport function wrapBlockStep2<T extends ContentModelBlockGroup & ContentModelBlock>(\n    step1Result: WrapBlockStep1Result<T>[],\n    canMerge: (target: ContentModelBlock, current: T) => target is T\n) {\n    step1Result.forEach(({ parent, wrapper }) => {\n        const index = parent.blocks.indexOf(wrapper);\n        const nextBlock = parent.blocks[index + 1];\n\n        if (index >= 0 && canMerge(nextBlock, wrapper)) {\n            wrapper.blocks.forEach(setParagraphNotImplicit);\n            arrayPush(wrapper.blocks, nextBlock.blocks);\n            parent.blocks.splice(index + 1, 1);\n        }\n    });\n}\n\nfunction createAndAdd<T extends ContentModelBlockGroup & ContentModelBlock>(\n    parent: ContentModelBlockGroup,\n    index: number,\n    creator: () => T\n): T {\n    const block = creator();\n\n    parent.blocks.splice(index, 0, block);\n    return block;\n}\n","import { deleteExpandedSelection } from './utils/deleteExpandedSelection';\nimport { DeleteResult } from './utils/DeleteSelectionStep';\nimport type { ContentModelDocument } from 'roosterjs-content-model-types';\nimport type { FormatWithContentModelContext } from '../../publicTypes/parameter/FormatWithContentModelContext';\nimport type {\n    DeleteSelectionContext,\n    DeleteSelectionResult,\n    DeleteSelectionStep,\n    ValidDeleteSelectionContext,\n} from './utils/DeleteSelectionStep';\n\n/**\n * @internal\n */\nexport function deleteSelection(\n    model: ContentModelDocument,\n    additionalSteps: (DeleteSelectionStep | null)[] = [],\n    formatContext?: FormatWithContentModelContext\n): DeleteSelectionResult {\n    const context = deleteExpandedSelection(model, formatContext);\n\n    additionalSteps.forEach(step => {\n        if (\n            step &&\n            isValidDeleteSelectionContext(context) &&\n            context.deleteResult == DeleteResult.NotDeleted\n        ) {\n            step(context);\n        }\n    });\n\n    mergeParagraphAfterDelete(context);\n\n    return context;\n}\n\nfunction isValidDeleteSelectionContext(\n    context: DeleteSelectionContext\n): context is ValidDeleteSelectionContext {\n    return !!context.insertPoint;\n}\n\n// If we end up with multiple paragraphs impacted, we need to merge them\nfunction mergeParagraphAfterDelete(context: DeleteSelectionContext) {\n    const { insertPoint, deleteResult, lastParagraph, lastTableContext } = context;\n\n    if (\n        insertPoint &&\n        deleteResult != DeleteResult.NotDeleted &&\n        deleteResult != DeleteResult.NothingToDelete &&\n        lastParagraph &&\n        lastParagraph != insertPoint.paragraph &&\n        lastTableContext == insertPoint.tableContext\n    ) {\n        insertPoint.paragraph.segments.push(...lastParagraph.segments);\n        lastParagraph.segments = [];\n    }\n}\n","import { DeleteResult } from '../utils/DeleteSelectionStep';\nimport { deleteSegment } from '../utils/deleteSegment';\nimport type { DeleteSelectionStep } from '../utils/DeleteSelectionStep';\n\n/**\n * @internal\n */\nexport const deleteAllSegmentBefore: DeleteSelectionStep = context => {\n    const { paragraph, marker } = context.insertPoint;\n    const index = paragraph.segments.indexOf(marker);\n\n    for (let i = index - 1; i >= 0; i--) {\n        const segment = paragraph.segments[i];\n\n        segment.isSelected = true;\n\n        if (deleteSegment(paragraph, segment, context.formatContext)) {\n            context.deleteResult = DeleteResult.Range;\n        }\n    }\n};\n","import { createInsertPoint } from '../utils/createInsertPoint';\nimport { deleteBlock } from '../utils/deleteBlock';\nimport { DeleteResult } from '../utils/DeleteSelectionStep';\nimport { deleteSegment } from '../utils/deleteSegment';\nimport { getLeafSiblingBlock } from '../../block/getLeafSiblingBlock';\nimport { setParagraphNotImplicit } from 'roosterjs-content-model-dom';\nimport type { BlockAndPath } from '../../block/getLeafSiblingBlock';\nimport type { ContentModelSegment } from 'roosterjs-content-model-types';\nimport type { DeleteSelectionStep } from '../utils/DeleteSelectionStep';\n\nfunction getDeleteCollapsedSelection(direction: 'forward' | 'backward'): DeleteSelectionStep {\n    return context => {\n        const isForward = direction == 'forward';\n        const { paragraph, marker, path, tableContext } = context.insertPoint;\n        const segments = paragraph.segments;\n\n        fixupBr(segments);\n\n        const index = segments.indexOf(marker) + (isForward ? 1 : -1);\n        const segmentToDelete = segments[index];\n        let blockToDelete: BlockAndPath | null;\n\n        if (segmentToDelete) {\n            if (deleteSegment(paragraph, segmentToDelete, context.formatContext, direction)) {\n                context.deleteResult = DeleteResult.SingleChar;\n\n                // It is possible that we have deleted everything from this paragraph, so we need to mark it as not implicit\n                // to avoid losing its format. See https://github.com/microsoft/roosterjs/issues/1953\n                setParagraphNotImplicit(paragraph);\n            }\n        } else if ((blockToDelete = getLeafSiblingBlock(path, paragraph, isForward))) {\n            const { block, path, siblingSegment } = blockToDelete;\n\n            if (block.blockType == 'Paragraph') {\n                if (siblingSegment) {\n                    // When selection is under general segment, need to check if it has a sibling sibling, and delete from it\n                    if (deleteSegment(block, siblingSegment, context.formatContext, direction)) {\n                        context.deleteResult = DeleteResult.Range;\n                    }\n                } else {\n                    if (isForward) {\n                        context.lastParagraph = block;\n                    } else {\n                        if (block.segments[block.segments.length - 1]?.segmentType == 'Br') {\n                            block.segments.pop();\n                        }\n\n                        context.insertPoint = createInsertPoint(marker, block, path, tableContext);\n                        context.lastParagraph = paragraph;\n                        delete block.cachedElement;\n                    }\n\n                    context.deleteResult = DeleteResult.Range;\n                }\n\n                // When go across table, getLeafSiblingBlock will return null, when we are here, we must be in the same table context\n                context.lastTableContext = tableContext;\n            } else {\n                if (\n                    deleteBlock(\n                        path[0].blocks,\n                        block,\n                        undefined /*replacement*/,\n                        context.formatContext,\n                        direction\n                    )\n                ) {\n                    context.deleteResult = DeleteResult.Range;\n                }\n            }\n        } else {\n            // We have nothing to delete, in this case we don't want browser handle it as well.\n            // Because when Backspace on an empty document, it will also delete the only DIV and SPAN element, causes\n            // editor is really empty. We don't want that happen. So the handling should stop here.\n            context.deleteResult = DeleteResult.NothingToDelete;\n        }\n    };\n}\n\n/**\n * If the last segment is BR, remove it for now. We may add it back later when normalize model.\n * So that if this is an empty paragraph, it will start to delete next block\n */\nfunction fixupBr(segments: ContentModelSegment[]) {\n    if (segments[segments.length - 1]?.segmentType == 'Br') {\n        const segmentsWithoutBr = segments.filter(x => x.segmentType != 'SelectionMarker');\n\n        if (segmentsWithoutBr[segmentsWithoutBr.length - 2]?.segmentType != 'Br') {\n            segments.pop();\n        }\n    }\n}\n\n/**\n * @internal if we didn't delete anything, and we want to delete forward, now perform it\n */\nexport const forwardDeleteCollapsedSelection = getDeleteCollapsedSelection('forward');\n\n/**\n * @internal if we didn't delete anything, and we want to delete backward, now perform it\n */\nexport const backwardDeleteCollapsedSelection = getDeleteCollapsedSelection('backward');\n","import { DeleteResult } from '../utils/DeleteSelectionStep';\nimport { isPunctuation, isSpace, normalizeText } from '../../../domUtils/stringUtil';\nimport { isWhiteSpacePreserved } from 'roosterjs-content-model-dom';\nimport type { ContentModelParagraph } from 'roosterjs-content-model-types';\nimport type { DeleteSelectionContext, DeleteSelectionStep } from '../utils/DeleteSelectionStep';\n\nconst enum DeleteWordState {\n    Start,\n    Punctuation,\n    Text,\n    NonText,\n    Space,\n    End,\n}\n\ninterface CharInfo {\n    text: boolean;\n    space: boolean;\n    punctuation: boolean;\n}\n\nfunction getDeleteWordSelection(direction: 'forward' | 'backward'): DeleteSelectionStep {\n    return context => {\n        const { marker, paragraph } = context.insertPoint;\n        const startIndex = paragraph.segments.indexOf(marker);\n        const deleteNext = direction == 'forward';\n\n        let iterator = iterateSegments(paragraph, startIndex, deleteNext, context);\n        let curr = iterator.next();\n\n        for (let state = DeleteWordState.Start; state != DeleteWordState.End && !curr.done; ) {\n            const { punctuation, space, text } = curr.value;\n\n            // This is a state machine of how to delete a whole word together with space and punctuations.\n            // For a full state machine chart, see\n            // Forward delete: https://github.com/microsoft/roosterjs/blob/master/assets/design-charts/ForwardDeleteWord.png\n            // Backward delete: https://github.com/microsoft/roosterjs/blob/master/assets/design-charts/BackwardDeleteWord.png\n            switch (state) {\n                case DeleteWordState.Start:\n                    state = space\n                        ? DeleteWordState.Space\n                        : punctuation\n                        ? DeleteWordState.Punctuation\n                        : DeleteWordState.Text;\n                    curr = iterator.next(true /*delete*/);\n                    break;\n\n                case DeleteWordState.Punctuation:\n                    if (deleteNext && space) {\n                        state = DeleteWordState.NonText;\n                        curr = iterator.next(true /*delete*/);\n                    } else if (punctuation) {\n                        curr = iterator.next(true /*delete*/);\n                    } else {\n                        state = DeleteWordState.End;\n                    }\n                    break;\n\n                case DeleteWordState.Text:\n                    if (deleteNext && space) {\n                        state = DeleteWordState.NonText;\n                        curr = iterator.next(true /*delete*/);\n                    } else if (text) {\n                        curr = iterator.next(true /*delete*/);\n                    } else {\n                        state = DeleteWordState.End;\n                    }\n                    break;\n\n                case DeleteWordState.NonText:\n                    if (punctuation || !space) {\n                        state = DeleteWordState.End;\n                    } else {\n                        curr = iterator.next(true /*delete*/);\n                    }\n                    break;\n\n                case DeleteWordState.Space:\n                    if (space) {\n                        curr = iterator.next(true /*delete*/);\n                    } else if (punctuation) {\n                        state = deleteNext ? DeleteWordState.NonText : DeleteWordState.Punctuation;\n                        curr = iterator.next(true /*delete*/);\n                    } else {\n                        state = deleteNext ? DeleteWordState.End : DeleteWordState.Text;\n                    }\n                    break;\n            }\n        }\n    };\n}\n\nfunction* iterateSegments(\n    paragraph: ContentModelParagraph,\n    markerIndex: number,\n    forward: boolean,\n    context: DeleteSelectionContext\n): Generator<CharInfo, null, boolean> {\n    const step = forward ? 1 : -1;\n    const segments = paragraph.segments;\n    const preserveWhiteSpace = isWhiteSpacePreserved(paragraph);\n\n    for (let i = markerIndex + step; i >= 0 && i < segments.length; i += step) {\n        const segment = segments[i];\n\n        switch (segment.segmentType) {\n            case 'Text':\n                for (\n                    let j = forward ? 0 : segment.text.length - 1;\n                    j >= 0 && j < segment.text.length;\n                    j += step\n                ) {\n                    const c = segment.text[j];\n                    const punctuation = isPunctuation(c);\n                    const space = isSpace(c);\n                    const text = !punctuation && !space;\n\n                    if (yield { punctuation, space, text }) {\n                        let newText = segment.text;\n\n                        newText = newText.substring(0, j) + newText.substring(j + 1);\n\n                        if (!preserveWhiteSpace) {\n                            newText = normalizeText(newText, forward);\n                        }\n\n                        context.deleteResult = DeleteResult.Range;\n\n                        if (newText) {\n                            segment.text = newText;\n\n                            if (step > 0) {\n                                j -= step;\n                            }\n                        } else {\n                            segments.splice(i, 1);\n\n                            if (step > 0) {\n                                i -= step;\n                            }\n\n                            break;\n                        }\n                    }\n                }\n                break;\n\n            case 'Image':\n                if (\n                    yield { punctuation: true, space: false, text: false } // Treat image as punctuation since they have the same behavior.\n                ) {\n                    segments.splice(i, 1);\n\n                    if (step > 0) {\n                        i -= step;\n                    }\n\n                    context.deleteResult = DeleteResult.Range;\n                }\n                break;\n\n            case 'SelectionMarker':\n                break;\n\n            default:\n                return null;\n        }\n    }\n\n    return null;\n}\n\n/**\n * @internal\n */\nexport const forwardDeleteWordSelection = getDeleteWordSelection('forward');\n\n/**\n * @internal\n */\nexport const backwardDeleteWordSelection = getDeleteWordSelection('backward');\n","import type { InsertPoint } from '../../../publicTypes/selection/InsertPoint';\nimport type { TableSelectionContext } from '../../../publicTypes/selection/TableSelectionContext';\nimport type {\n    ContentModelBlockGroup,\n    ContentModelParagraph,\n    ContentModelSelectionMarker,\n} from 'roosterjs-content-model-types';\n\n/**\n * @internal\n */\nexport function createInsertPoint(\n    marker: ContentModelSelectionMarker,\n    paragraph: ContentModelParagraph,\n    path: ContentModelBlockGroup[],\n    tableContext: TableSelectionContext | undefined\n): InsertPoint {\n    return {\n        marker,\n        paragraph,\n        path,\n        tableContext,\n    };\n}\n","import { EntityOperation } from 'roosterjs-editor-types';\nimport type { ContentModelBlock } from 'roosterjs-content-model-types';\nimport type { FormatWithContentModelContext } from '../../../publicTypes/parameter/FormatWithContentModelContext';\n\n/**\n * @internal\n */\nexport function deleteBlock(\n    blocks: ContentModelBlock[],\n    blockToDelete: ContentModelBlock,\n    replacement?: ContentModelBlock,\n    context?: FormatWithContentModelContext,\n    direction?: 'forward' | 'backward'\n): boolean {\n    const index = blocks.indexOf(blockToDelete);\n\n    switch (blockToDelete.blockType) {\n        case 'Table':\n        case 'Divider':\n            replacement ? blocks.splice(index, 1, replacement) : blocks.splice(index, 1);\n            return true;\n\n        case 'Entity':\n            const operation = blockToDelete.isSelected\n                ? EntityOperation.Overwrite\n                : direction == 'forward'\n                ? EntityOperation.RemoveFromStart\n                : direction == 'backward'\n                ? EntityOperation.RemoveFromEnd\n                : undefined;\n\n            if (operation !== undefined) {\n                replacement ? blocks.splice(index, 1, replacement) : blocks.splice(index, 1);\n                context?.deletedEntities.push({\n                    entity: blockToDelete,\n                    operation,\n                });\n            }\n\n            return true;\n\n        case 'BlockGroup':\n            switch (blockToDelete.blockGroupType) {\n                case 'General':\n                    if (replacement) {\n                        blocks.splice(index, 1, replacement);\n                        return true;\n                    } else {\n                        // no op, let browser handle it\n                        return false;\n                    }\n\n                case 'ListItem':\n                case 'FormatContainer':\n                    blocks.splice(index, 1);\n                    return true;\n            }\n    }\n\n    return false;\n}\n","import { createInsertPoint } from '../utils/createInsertPoint';\nimport { deleteBlock } from '../utils/deleteBlock';\nimport { DeleteResult } from '../utils/DeleteSelectionStep';\nimport { deleteSegment } from '../utils/deleteSegment';\nimport { iterateSelections } from '../../selection/iterateSelections';\nimport type { ContentModelDocument } from 'roosterjs-content-model-types';\nimport type { DeleteSelectionContext } from '../utils/DeleteSelectionStep';\nimport type { FormatWithContentModelContext } from '../../../publicTypes/parameter/FormatWithContentModelContext';\nimport type { IterateSelectionsOption } from '../../selection/iterateSelections';\nimport {\n    createBr,\n    createParagraph,\n    createSelectionMarker,\n    setParagraphNotImplicit,\n} from 'roosterjs-content-model-dom';\n\nconst DeleteSelectionIteratingOptions: IterateSelectionsOption = {\n    contentUnderSelectedTableCell: 'ignoreForTableOrCell', // When a table cell is selected, we replace all content for this cell, so no need to go into its content\n    contentUnderSelectedGeneralElement: 'generalElementOnly', // When a general element is selected, we replace the whole element so no need to go into its content\n    includeListFormatHolder: 'never',\n};\n\n/**\n * @internal\n * Iterate the model and find all selected content if any, delete them, and keep/create an insert point\n * at the first deleted position so that we know where to put cursor to after delete\n */\nexport function deleteExpandedSelection(\n    model: ContentModelDocument,\n    formatContext?: FormatWithContentModelContext\n): DeleteSelectionContext {\n    const context: DeleteSelectionContext = {\n        deleteResult: DeleteResult.NotDeleted,\n        insertPoint: null,\n        formatContext,\n    };\n\n    iterateSelections(\n        [model],\n        (path, tableContext, block, segments) => {\n            // Set paragraph, format and index for default position where we will put cursor to.\n            // Later we can overwrite these info when process the selections\n            let paragraph = createParagraph(\n                true /*implicit*/,\n                undefined /*blockFormat*/,\n                model.format\n            );\n            let markerFormat = model.format;\n            let insertMarkerIndex = 0;\n\n            if (segments) {\n                // Delete segments inside a paragraph\n                if (segments[0] && block?.blockType == 'Paragraph') {\n                    // Now that we have found a paragraph with selections, we can overwrite the default paragraph with this one\n                    // so we can put cursor here after delete\n                    paragraph = block;\n                    insertMarkerIndex = paragraph.segments.indexOf(segments[0]);\n                    markerFormat = segments[0].format;\n\n                    context.lastParagraph = paragraph;\n                    context.lastTableContext = tableContext;\n\n                    segments.forEach((segment, i) => {\n                        if (\n                            i == 0 &&\n                            !context.insertPoint &&\n                            segment.segmentType == 'SelectionMarker'\n                        ) {\n                            // First time we hit a selection and it is a selection marker, just mark it and not need to delete\n                            // because this is possible a collapsed selection, then it will be handled later\n                            context.insertPoint = createInsertPoint(\n                                segment,\n                                block,\n                                path,\n                                tableContext\n                            );\n                        } else if (deleteSegment(block, segment, context.formatContext)) {\n                            context.deleteResult = DeleteResult.Range;\n                        }\n                    });\n\n                    // Since we are operating on this paragraph and it possible we delete everything from this paragraph,\n                    // Need to make it \"not implicit\" so that it will always have a container element, so that when we do normalization\n                    // of this paragraph, a BR can be added if need\n                    if (context.deleteResult == DeleteResult.Range) {\n                        setParagraphNotImplicit(block);\n                    }\n                }\n            } else if (block) {\n                // Delete a whole block (divider, table, ...)\n                const blocks = path[0].blocks;\n\n                if (deleteBlock(blocks, block, paragraph, context.formatContext)) {\n                    context.deleteResult = DeleteResult.Range;\n                }\n            } else if (tableContext) {\n                // Delete a whole table cell\n                const { table, colIndex, rowIndex } = tableContext;\n                const row = table.rows[rowIndex];\n                const cell = row.cells[colIndex];\n\n                path = [cell, ...path];\n                paragraph.segments.push(createBr(model.format));\n                cell.blocks = [paragraph];\n\n                delete cell.cachedElement;\n                delete row.cachedElement;\n                context.deleteResult = DeleteResult.Range;\n            }\n\n            if (!context.insertPoint) {\n                // If we have not got a insert point after delete and we have a paragraph to put an insert point in, create insert point now\n                const marker = createSelectionMarker(markerFormat);\n\n                setParagraphNotImplicit(paragraph);\n                paragraph.segments.splice(insertMarkerIndex, 0, marker);\n                context.insertPoint = createInsertPoint(marker, paragraph, path, tableContext);\n            }\n        },\n        DeleteSelectionIteratingOptions\n    );\n\n    return context;\n}\n","import { deleteSingleChar } from './deleteSingleChar';\nimport { EntityOperation } from 'roosterjs-editor-types';\nimport { isWhiteSpacePreserved, normalizeSingleSegment } from 'roosterjs-content-model-dom';\nimport { normalizeText } from '../../../domUtils/stringUtil';\nimport type { ContentModelParagraph, ContentModelSegment } from 'roosterjs-content-model-types';\nimport type { FormatWithContentModelContext } from '../../../publicTypes/parameter/FormatWithContentModelContext';\n\n/**\n * @internal\n */\nexport function deleteSegment(\n    paragraph: ContentModelParagraph,\n    segmentToDelete: ContentModelSegment,\n    context?: FormatWithContentModelContext,\n    direction?: 'forward' | 'backward'\n): boolean {\n    const segments = paragraph.segments;\n    const index = segments.indexOf(segmentToDelete);\n    const preserveWhiteSpace = isWhiteSpacePreserved(paragraph);\n    const isForward = direction == 'forward';\n    const isBackward = direction == 'backward';\n\n    if (!preserveWhiteSpace) {\n        normalizePreviousSegment(segments, index);\n    }\n\n    switch (segmentToDelete.segmentType) {\n        case 'Br':\n        case 'Image':\n        case 'SelectionMarker':\n            segments.splice(index, 1);\n            return true;\n\n        case 'Entity':\n            const operation = segmentToDelete.isSelected\n                ? EntityOperation.Overwrite\n                : isForward\n                ? EntityOperation.RemoveFromStart\n                : isBackward\n                ? EntityOperation.RemoveFromEnd\n                : undefined;\n            if (operation !== undefined) {\n                segments.splice(index, 1);\n                context?.deletedEntities.push({\n                    entity: segmentToDelete,\n                    operation,\n                });\n            }\n\n            return true;\n\n        case 'Text':\n            let text = segmentToDelete.text;\n\n            if (text.length == 0 || segmentToDelete.isSelected) {\n                segments.splice(index, 1);\n            } else if (direction) {\n                text = deleteSingleChar(text, isForward); //  isForward ? text.substring(1) : text.substring(0, text.length - 1);\n\n                if (!preserveWhiteSpace) {\n                    text = normalizeText(text, isForward);\n                }\n\n                if (text == '') {\n                    segments.splice(index, 1);\n                } else {\n                    segmentToDelete.text = text;\n                }\n            }\n\n            return true;\n\n        case 'General':\n            if (segmentToDelete.isSelected) {\n                segments.splice(index, 1);\n                return true;\n            } else {\n                // No op if a general segment is not selected, let browser handle general segment\n                // TODO: Need to revisit this\n                return false;\n            }\n    }\n}\n\nfunction normalizePreviousSegment(segments: ContentModelSegment[], currentIndex: number) {\n    let index = currentIndex - 1;\n\n    while (segments[index]?.segmentType == 'SelectionMarker') {\n        index--;\n    }\n\n    const segment = segments[index];\n\n    if (segment) {\n        normalizeSingleSegment(segment);\n    }\n}\n","/**\n * @internal\n */\nexport function deleteSingleChar(text: string, isForward: boolean) {\n    // In case of emoji that occupies multiple characters, we need to delete the whole emoji\n    const array = [...text];\n    let deleteLength = 0;\n\n    for (\n        let i = isForward ? 0 : array.length - 1,\n            deleteState: 'notDeleted' | 'waiting' | 'done' = 'notDeleted';\n        i >= 0 && i < array.length && deleteState != 'done';\n        i += isForward ? 1 : -1\n    ) {\n        switch (array[i]) {\n            case '\\u200D': // ZERO WIDTH JOINER\n            case '\\u20E3': // COMBINING ENCLOSING KEYCAP\n            case '\\uFE0E': // VARIATION SELECTOR-15\n            case '\\uFE0F': // VARIATION SELECTOR-16\n                deleteState = 'notDeleted';\n                deleteLength++;\n                break;\n\n            default:\n                if (deleteState == 'notDeleted') {\n                    deleteState = 'waiting';\n                    deleteLength++;\n                } else if (deleteState == 'waiting') {\n                    deleteState = 'done';\n                }\n                break;\n        }\n    }\n\n    array.splice(isForward ? 0 : array.length - deleteLength, deleteLength);\n\n    return array.join('');\n}\n","import { DeleteResult } from '../edit/utils/DeleteSelectionStep';\nimport { deleteSelection } from '../edit/deleteSelection';\nimport { getClosestAncestorBlockGroupIndex } from '../common/getClosestAncestorBlockGroupIndex';\nimport { setSelection } from '../selection/setSelection';\nimport {\n    createBr,\n    createParagraph,\n    createSelectionMarker,\n    normalizeContentModel,\n} from 'roosterjs-content-model-dom';\nimport type { DeleteSelectionResult } from '../edit/utils/DeleteSelectionStep';\nimport type { FormatWithContentModelContext } from '../../publicTypes/parameter/FormatWithContentModelContext';\nimport type { InsertEntityPosition } from '../../publicTypes/parameter/InsertEntityOptions';\nimport type {\n    ContentModelBlock,\n    ContentModelBlockGroup,\n    ContentModelDocument,\n    ContentModelEntity,\n    ContentModelParagraph,\n} from 'roosterjs-content-model-types';\n\n/**\n * @internal\n */\nexport function insertEntityModel(\n    model: ContentModelDocument,\n    entityModel: ContentModelEntity,\n    position: InsertEntityPosition,\n    isBlock: boolean,\n    focusAfterEntity?: boolean,\n    context?: FormatWithContentModelContext\n) {\n    let blockParent: ContentModelBlockGroup | undefined;\n    let blockIndex = -1;\n    let deleteResult: DeleteSelectionResult;\n\n    if (position == 'begin' || position == 'end') {\n        blockParent = model;\n        blockIndex = position == 'begin' ? 0 : model.blocks.length;\n    } else if ((deleteResult = deleteSelection(model, [], context)).insertPoint) {\n        const { marker, paragraph, path } = deleteResult.insertPoint;\n\n        if (deleteResult.deleteResult == DeleteResult.Range) {\n            normalizeContentModel(model);\n        }\n\n        if (!isBlock) {\n            const index = paragraph.segments.indexOf(marker);\n\n            if (index >= 0) {\n                paragraph.segments.splice(focusAfterEntity ? index : index + 1, 0, entityModel);\n            }\n        } else {\n            const pathIndex =\n                position == 'root'\n                    ? getClosestAncestorBlockGroupIndex(path, ['TableCell', 'Document'])\n                    : 0;\n            blockParent = path[pathIndex];\n            const child = path[pathIndex - 1];\n            const directChild: ContentModelBlock =\n                child?.blockGroupType == 'FormatContainer' ||\n                child?.blockGroupType == 'General' ||\n                child?.blockGroupType == 'ListItem'\n                    ? child\n                    : paragraph;\n            const childIndex = blockParent.blocks.indexOf(directChild);\n            blockIndex = childIndex >= 0 ? childIndex + 1 : -1;\n        }\n    }\n\n    if (blockIndex >= 0 && blockParent) {\n        const blocksToInsert: ContentModelBlock[] = [];\n        let nextParagraph: ContentModelParagraph | undefined;\n\n        if (isBlock) {\n            const nextBlock = blockParent.blocks[blockIndex];\n\n            blocksToInsert.push(entityModel);\n\n            if (nextBlock?.blockType == 'Paragraph') {\n                nextParagraph = nextBlock;\n            } else if (!nextBlock || nextBlock.blockType == 'Entity' || focusAfterEntity) {\n                nextParagraph = createParagraph(false /*isImplicit*/, {}, model.format);\n                nextParagraph.segments.push(createBr(model.format));\n                blocksToInsert.push(nextParagraph);\n            }\n        } else {\n            nextParagraph = createParagraph(\n                false /*isImplicit*/,\n                undefined /*format*/,\n                model.format\n            );\n\n            nextParagraph.segments.push(entityModel);\n            blocksToInsert.push(nextParagraph);\n        }\n\n        blockParent.blocks.splice(blockIndex, 0, ...blocksToInsert);\n\n        if (focusAfterEntity && nextParagraph) {\n            const marker = createSelectionMarker(nextParagraph.segments[0]?.format || model.format);\n            const segments = nextParagraph.segments;\n\n            isBlock ? segments.unshift(marker) : segments.push(marker);\n            setSelection(model, marker, marker);\n        }\n    }\n}\n","import type { ContentModelSegmentFormat } from 'roosterjs-content-model-types';\nimport type { IContentModelEditor } from '../../publicTypes/IContentModelEditor';\nimport type { NodePosition } from 'roosterjs-editor-types';\n\n/**\n * @internal\n * Get pending segment format from editor if any, otherwise null\n * @param editor The editor to get format from\n */\nexport function getPendingFormat(editor: IContentModelEditor): ContentModelSegmentFormat | null {\n    return getPendingFormatHolder(editor).format;\n}\n\n/**\n * @internal\n * Set pending segment format to editor\n * @param editor The editor to set pending format to\n * @param format The format to set.\n * @param position Cursor position when set this format\n */\nexport function setPendingFormat(\n    editor: IContentModelEditor,\n    format: ContentModelSegmentFormat,\n    position: NodePosition\n) {\n    const holder = getPendingFormatHolder(editor);\n\n    holder.format = format;\n    holder.position = position;\n}\n\n/**\n * @internal Clear pending format if any\n * @param editor The editor to set pending format to\n */\nexport function clearPendingFormat(editor: IContentModelEditor) {\n    const holder = getPendingFormatHolder(editor);\n\n    holder.format = null;\n    holder.position = null;\n}\n\n/**\n * @internal\n * Check if this editor can apply pending format\n * @param editor The editor to get format from\n */\nexport function canApplyPendingFormat(editor: IContentModelEditor): boolean {\n    const holder = getPendingFormatHolder(editor);\n    let result = false;\n\n    if (holder.format && holder.position) {\n        const position = editor.getFocusedPosition();\n\n        if (position?.equalTo(holder.position)) {\n            result = true;\n        }\n    }\n\n    return result;\n}\ninterface PendingFormatHolder {\n    format: ContentModelSegmentFormat | null;\n    position: NodePosition | null;\n}\n\nconst PendingFormatHolderKey = '__ContentModelPendingFormat';\n\nfunction getPendingFormatHolder(editor: IContentModelEditor): PendingFormatHolder {\n    return editor.getCustomData<PendingFormatHolder>(PendingFormatHolderKey, () => ({\n        format: null,\n        position: null,\n    }));\n}\n","import { extractBorderValues } from '../../domUtils/borderValues';\nimport { parseValueWithUnit } from 'roosterjs-content-model-dom';\nimport type { Border } from '../../publicTypes/interface/Border';\nimport type { ContentModelImage } from 'roosterjs-content-model-types';\n\n/**\n * @internal\n */\nexport default function applyImageBorderFormat(\n    image: ContentModelImage,\n    border: Border | null,\n    borderRadius?: string\n) {\n    if (border) {\n        const format = image.format;\n        const { width, style, color } = border;\n        const borderKey = 'borderTop';\n        const extractedBorder = extractBorderValues(format[borderKey]);\n        const borderColor = extractedBorder.color;\n        const borderWidth = extractedBorder.width;\n        const borderStyle = extractedBorder.style;\n        let borderFormat = '';\n\n        if (width) {\n            borderFormat = parseValueWithUnit(width) + 'px';\n        } else if (borderWidth) {\n            borderFormat = borderWidth;\n        } else {\n            borderFormat = '1px';\n        }\n\n        if (style) {\n            borderFormat = `${borderFormat} ${style}`;\n        } else if (borderStyle) {\n            borderFormat = `${borderFormat} ${borderStyle}`;\n        } else {\n            borderFormat = `${borderFormat} solid`;\n        }\n\n        if (color) {\n            borderFormat = `${borderFormat} ${color}`;\n        } else if (borderColor) {\n            borderFormat = `${borderFormat} ${borderColor}`;\n        }\n        image.format.borderLeft = borderFormat;\n        image.format.borderTop = borderFormat;\n        image.format.borderBottom = borderFormat;\n        image.format.borderRight = borderFormat;\n    } else {\n        delete image.format.borderLeft;\n        delete image.format.borderTop;\n        delete image.format.borderBottom;\n        delete image.format.borderRight;\n    }\n\n    if (borderRadius) {\n        image.format.borderRadius = borderRadius;\n    }\n}\n","import type {\n    ContentModelBlockGroup,\n    ContentModelDocument,\n    ContentModelListItem,\n} from 'roosterjs-content-model-types';\n\n/**\n * @internal\n */\nexport function findListItemsInSameThread(\n    model: ContentModelDocument,\n    currentItem: ContentModelListItem\n): ContentModelListItem[] {\n    const items: (ContentModelListItem | null)[] = [];\n\n    findListItems(model, items);\n\n    return filterListItems(items, currentItem);\n}\n\nfunction findListItems(group: ContentModelBlockGroup, result: (ContentModelListItem | null)[]) {\n    group.blocks.forEach(block => {\n        switch (block.blockType) {\n            case 'BlockGroup':\n                if (block.blockGroupType == 'ListItem') {\n                    result.push(block);\n                } else {\n                    pushNullIfNecessary(result);\n                    findListItems(block, result);\n                    pushNullIfNecessary(result);\n                }\n                break;\n\n            case 'Paragraph':\n                pushNullIfNecessary(result);\n\n                block.segments.forEach(segment => {\n                    if (segment.segmentType == 'General') {\n                        findListItems(segment, result);\n                    }\n                });\n\n                pushNullIfNecessary(result);\n                break;\n\n            case 'Table':\n                pushNullIfNecessary(result);\n\n                block.rows.forEach(row =>\n                    row.cells.forEach(cell => {\n                        findListItems(cell, result);\n                    })\n                );\n                pushNullIfNecessary(result);\n\n                break;\n        }\n    });\n}\n\nfunction pushNullIfNecessary(result: (ContentModelListItem | null)[]) {\n    const last = result[result.length - 1];\n\n    if (!last || last !== null) {\n        result.push(null);\n    }\n}\n\nfunction filterListItems(\n    items: (ContentModelListItem | null)[],\n    currentItem: ContentModelListItem\n) {\n    const result: ContentModelListItem[] = [];\n    const currentIndex = items.indexOf(currentItem);\n    const levelLength = currentItem.levels.length;\n    const isOrderedList = currentItem.levels[levelLength - 1]?.listType == 'OL';\n\n    if (currentIndex >= 0) {\n        for (let i = currentIndex; i >= 0; i--) {\n            const item = items[i];\n\n            if (!item) {\n                if (isOrderedList) {\n                    continue;\n                } else {\n                    break;\n                }\n            }\n\n            const startNumberOverride = hasStartNumberOverride(item, levelLength);\n\n            if (areListTypesCompatible(items, currentIndex, i)) {\n                result.unshift(item);\n\n                if (isOrderedList && startNumberOverride) {\n                    break;\n                }\n            } else if (!isOrderedList || startNumberOverride) {\n                break;\n            }\n        }\n\n        for (let i = currentIndex + 1; i < items.length; i++) {\n            const item = items[i];\n\n            if (!item) {\n                if (isOrderedList) {\n                    continue;\n                } else {\n                    break;\n                }\n            }\n\n            const startNumberOverride = hasStartNumberOverride(item, levelLength);\n\n            if (areListTypesCompatible(items, currentIndex, i) && !startNumberOverride) {\n                result.push(item);\n            } else if (!isOrderedList || startNumberOverride) {\n                break;\n            }\n        }\n    }\n\n    return result;\n}\n\nfunction areListTypesCompatible(\n    listItems: (ContentModelListItem | null)[],\n    currentIndex: number,\n    compareToIndex: number\n): boolean {\n    const currentLevels = listItems[currentIndex]!.levels;\n    const compareToLevels = listItems[compareToIndex]!.levels;\n\n    return (\n        currentLevels.length <= compareToLevels.length &&\n        currentLevels.every(\n            (currentLevel, i) => currentLevel.listType == compareToLevels[i].listType\n        )\n    );\n}\n\nfunction hasStartNumberOverride(item: ContentModelListItem, levelLength: number): boolean {\n    return item.levels\n        .slice(0, levelLength)\n        .some(level => level.format.startNumberOverride !== undefined);\n}\n","import { getOperationalBlocks } from '../selection/collectSelections';\nimport { isBlockGroupOfType } from '../common/isBlockGroupOfType';\nimport {\n    createListItem,\n    createListLevel,\n    normalizeContentModel,\n    setParagraphNotImplicit,\n} from 'roosterjs-content-model-dom';\nimport type {\n    ContentModelBlock,\n    ContentModelDocument,\n    ContentModelListItem,\n} from 'roosterjs-content-model-types';\n\n/**\n * @internal\n */\nexport function setListType(model: ContentModelDocument, listType: 'OL' | 'UL') {\n    const paragraphOrListItems = getOperationalBlocks<ContentModelListItem>(\n        model,\n        ['ListItem'],\n        [] // Set stop types to be empty so we can find list items even cross the boundary of table, then we can always operation on the list item if any\n    );\n    const alreadyInExpectedType = paragraphOrListItems.every(({ block }) =>\n        isBlockGroupOfType<ContentModelListItem>(block, 'ListItem')\n            ? block.levels[block.levels.length - 1]?.listType == listType\n            : shouldIgnoreBlock(block)\n    );\n    let existingListItems: ContentModelListItem[] = [];\n    let hasIgnoredParagraphBefore = false;\n\n    paragraphOrListItems.forEach(({ block, parent }, itemIndex) => {\n        if (isBlockGroupOfType<ContentModelListItem>(block, 'ListItem')) {\n            const level = block.levels.pop();\n\n            if (!alreadyInExpectedType && level) {\n                level.listType = listType;\n                block.levels.push(level);\n            } else if (block.blocks.length == 1) {\n                setParagraphNotImplicit(block.blocks[0]);\n            }\n        } else {\n            const index = parent.blocks.indexOf(block);\n\n            if (index >= 0) {\n                if (paragraphOrListItems.length == 1 || !shouldIgnoreBlock(block)) {\n                    const prevBlock = parent.blocks[index - 1];\n                    const segmentFormat =\n                        (block.blockType == 'Paragraph' && block.segments[0]?.format) || {};\n                    const newListItem = createListItem(\n                        [\n                            createListLevel(listType, {\n                                startNumberOverride:\n                                    itemIndex > 0 ||\n                                    (prevBlock?.blockType == 'BlockGroup' &&\n                                        prevBlock.blockGroupType == 'ListItem' &&\n                                        prevBlock.levels[0]?.listType == 'OL')\n                                        ? undefined\n                                        : 1,\n                                direction: block.format.direction,\n                                textAlign: block.format.textAlign,\n                                marginTop: hasIgnoredParagraphBefore ? '0' : undefined,\n                            }),\n                        ],\n                        // For list bullet, we only want to carry over these formats from segments:\n                        {\n                            fontFamily: segmentFormat.fontFamily,\n                            fontSize: segmentFormat.fontSize,\n                            textColor: segmentFormat.textColor,\n                        }\n                    );\n\n                    // Since there is only one paragraph under the list item, no need to keep its paragraph element (DIV).\n                    // TODO: Do we need to keep the CSS styles applied to original DIV?\n                    if (block.blockType == 'Paragraph') {\n                        block.isImplicit = true;\n                    }\n\n                    newListItem.blocks.push(block);\n\n                    parent.blocks.splice(index, 1, newListItem);\n                    existingListItems.push(newListItem);\n                } else {\n                    hasIgnoredParagraphBefore = true;\n\n                    existingListItems.forEach(x => (x.levels[0].format.marginBottom = '0'));\n                    existingListItems = [];\n                }\n            }\n        }\n    });\n\n    normalizeContentModel(model);\n\n    return paragraphOrListItems.length > 0;\n}\n\nfunction shouldIgnoreBlock(block: ContentModelBlock) {\n    switch (block.blockType) {\n        case 'Table':\n            return false;\n        case 'Paragraph':\n            return block.segments.every(\n                x => x.segmentType == 'Br' || x.segmentType == 'SelectionMarker'\n            );\n        default:\n            return true;\n    }\n}\n","import { getSelectedParagraphs } from './collectSelections';\nimport { setSelection } from './setSelection';\nimport type { ContentModelDocument, ContentModelSegment } from 'roosterjs-content-model-types';\n\n/**\n * @internal\n */\nexport function adjustSegmentSelection(\n    model: ContentModelDocument,\n    firstMatcher: (target: ContentModelSegment) => boolean,\n    siblingMatcher: (target: ContentModelSegment, ref: ContentModelSegment) => boolean\n): boolean {\n    const paragraphs = getSelectedParagraphs(model);\n    let first: ContentModelSegment | undefined;\n    let last: ContentModelSegment | undefined;\n    let changed = false;\n\n    paragraphs.forEach(p => {\n        const index = first ? 0 : p.segments.findIndex(x => firstMatcher(x));\n        const segments = p.segments;\n\n        if (!first) {\n            first = segments[index];\n\n            for (let i = index; i > 0; i--) {\n                if (siblingMatcher(segments[i - 1], first)) {\n                    first = segments[i - 1];\n                    changed = changed || !segments[i - 1].isSelected;\n                } else {\n                    changed = changed || !!segments[i - 1].isSelected;\n                    break;\n                }\n            }\n        }\n\n        if (first) {\n            for (let i = index; i < p.segments.length; i++) {\n                if (i == index || siblingMatcher(segments[i], last || segments[index])) {\n                    last = segments[i];\n                    changed = changed || !segments[i].isSelected;\n                } else {\n                    changed = changed || !!segments[i].isSelected;\n                    break;\n                }\n            }\n        }\n    });\n\n    if (first && last) {\n        setSelection(model, first, last);\n    }\n\n    return changed;\n}\n","import { createText } from 'roosterjs-content-model-dom';\nimport { isPunctuation, isSpace } from '../../domUtils/stringUtil';\nimport { iterateSelections } from '../../modelApi/selection/iterateSelections';\nimport type {\n    ContentModelDocument,\n    ContentModelParagraph,\n    ContentModelSegment,\n    ContentModelText,\n} from 'roosterjs-content-model-types';\n\n/**\n * @internal\n */\nexport function adjustWordSelection(\n    model: ContentModelDocument,\n    marker: ContentModelSegment\n): ContentModelSegment[] {\n    let markerBlock: ContentModelParagraph | undefined;\n\n    iterateSelections([model], (path, tableContext, block, segments) => {\n        //Find the block with the selection marker\n        if (block?.blockType == 'Paragraph' && segments?.length == 1 && segments[0] == marker) {\n            markerBlock = block;\n        }\n        return true;\n    });\n\n    const tempSegments = markerBlock ? [...markerBlock.segments] : undefined;\n\n    if (tempSegments && markerBlock) {\n        const segments: ContentModelSegment[] = [];\n        let markerSelectionIndex = tempSegments.indexOf(marker);\n        for (let i = markerSelectionIndex - 1; i >= 0; i--) {\n            const currentSegment = tempSegments[i];\n            if (currentSegment.segmentType == 'Text') {\n                const found = findDelimiter(currentSegment, false /*moveRightward*/);\n                if (found > -1) {\n                    if (found == currentSegment.text.length) {\n                        break;\n                    }\n\n                    splitTextSegment(tempSegments, currentSegment, i, found);\n\n                    segments.push(tempSegments[i + 1]);\n\n                    break;\n                } else {\n                    segments.push(tempSegments[i]);\n                }\n            } else {\n                break;\n            }\n        }\n\n        markerSelectionIndex = tempSegments.indexOf(marker);\n        segments.push(marker);\n\n        // Marker is at start of word\n        if (segments.length <= 1) {\n            return segments;\n        }\n\n        for (let i = markerSelectionIndex + 1; i < tempSegments.length; i++) {\n            const currentSegment = tempSegments[i];\n            if (currentSegment.segmentType == 'Text') {\n                const found = findDelimiter(currentSegment, true /*moveRightward*/);\n                if (found > -1) {\n                    if (found == 0) {\n                        break;\n                    }\n                    splitTextSegment(tempSegments, currentSegment, i, found);\n                    segments.push(tempSegments[i]);\n                    break;\n                } else {\n                    segments.push(tempSegments[i]);\n                }\n            } else {\n                break;\n            }\n        }\n\n        // Marker is at end of word\n        if (segments[segments.length - 1] == marker) {\n            return [marker];\n        }\n\n        markerBlock.segments = tempSegments;\n        return segments;\n    } else {\n        return [marker];\n    }\n}\n\n/*\n// These are unicode characters mostly from the Category Space Separator (Zs)\nhttps://unicode.org/Public/UNIDATA/Scripts.txt\n\n\\u2000 = EN QUAD\n\\u2009 = THIN SPACE\n\\u200a = HAIR SPACE\n​\\u200b = ZERO WIDTH SPACE\n​\\u202f = NARROW NO-BREAK SPACE\n\\u205f​ = MEDIUM MATHEMATICAL SPACE\n\\u3000 = IDEOGRAPHIC SPACE\n*/\nfunction findDelimiter(segment: ContentModelText, moveRightward: boolean): number {\n    const word = segment.text;\n    let offset = -1;\n    if (moveRightward) {\n        for (let i = 0; i < word.length; i++) {\n            const char = word[i];\n\n            if (isPunctuation(char) || isSpace(char)) {\n                offset = i;\n                break;\n            }\n        }\n    } else {\n        for (let i = word.length - 1; i >= 0; i--) {\n            const char = word[i];\n\n            if (isPunctuation(char) || isSpace(char)) {\n                offset = i + 1;\n                break;\n            }\n        }\n    }\n    return offset;\n}\n\nfunction splitTextSegment(\n    segments: ContentModelSegment[],\n    textSegment: Readonly<ContentModelText>,\n    index: number,\n    found: number\n) {\n    const text = textSegment.text;\n    const newSegmentLeft = createText(\n        text.substring(0, found),\n        textSegment.format,\n        textSegment.link,\n        textSegment.code\n    );\n    const newSegmentRight = createText(\n        text.substring(found, text.length),\n        textSegment.format,\n        textSegment.link,\n        textSegment.code\n    );\n    segments.splice(index, 1, newSegmentLeft, newSegmentRight);\n}\n","import type { DOMSelection } from 'roosterjs-content-model-types';\n\n/**\n * @internal\n * Check if the given selections are the same\n */\nexport function areSameRangeEx(sel1: DOMSelection, sel2: DOMSelection): boolean {\n    if (sel1 == sel2) {\n        return true;\n    }\n\n    switch (sel1.type) {\n        case 'image':\n            return sel2.type == 'image' && sel2.image == sel1.image;\n\n        case 'table':\n            return (\n                sel2.type == 'table' &&\n                sel2.table == sel1.table &&\n                sel2.firstColumn == sel1.firstColumn &&\n                sel2.lastColumn == sel1.lastColumn &&\n                sel2.firstRow == sel1.firstRow &&\n                sel2.lastRow == sel1.lastRow\n            );\n\n        case 'range':\n        default:\n            return sel2.type == 'range' && areSameRanges(sel2.range, sel1.range);\n    }\n}\n\nfunction areSameRanges(r1?: Range, r2?: Range): boolean {\n    return !!(\n        r1 &&\n        r2 &&\n        r1.startContainer == r2.startContainer &&\n        r1.startOffset == r2.startOffset &&\n        r1.endContainer == r2.endContainer &&\n        r1.endOffset == r2.endOffset\n    );\n}\n","import { addSegment, createSelectionMarker } from 'roosterjs-content-model-dom';\nimport type { ContentModelTableRow } from 'roosterjs-content-model-types';\nimport type { TableSelectionCoordinates } from '../table/getSelectedCells';\n\n/**\n * @internal\n */\nexport function collapseTableSelection(\n    rows: ContentModelTableRow[],\n    selection: TableSelectionCoordinates\n) {\n    const { firstCol, firstRow } = selection;\n    const cell = rows[firstRow]?.cells[firstCol];\n    if (cell) {\n        addSegment(cell, createSelectionMarker());\n    }\n}\n","import { getClosestAncestorBlockGroupIndex } from '../common/getClosestAncestorBlockGroupIndex';\nimport { isBlockGroupOfType } from '../common/isBlockGroupOfType';\nimport { iterateSelections } from './iterateSelections';\nimport type { IterateSelectionsOption } from './iterateSelections';\nimport type { TableSelectionContext } from '../../publicTypes/selection/TableSelectionContext';\nimport type {\n    ContentModelBlock,\n    ContentModelBlockGroup,\n    ContentModelBlockGroupType,\n    ContentModelDocument,\n    ContentModelListItem,\n    ContentModelParagraph,\n    ContentModelSegment,\n    ContentModelTable,\n} from 'roosterjs-content-model-types';\nimport type { TypeOfBlockGroup } from '../common/getClosestAncestorBlockGroupIndex';\n\n/**\n * @internal\n */\nexport type OperationalBlocks<T extends ContentModelBlockGroup> = {\n    parent: ContentModelBlockGroup;\n    block: ContentModelBlock | T;\n};\n\n/**\n * @internal\n */\nexport function getSelectedSegmentsAndParagraphs(\n    model: ContentModelDocument,\n    includingFormatHolder: boolean\n): [ContentModelSegment, ContentModelParagraph | null][] {\n    const selections = collectSelections(model, {\n        includeListFormatHolder: includingFormatHolder ? 'allSegments' : 'never',\n    });\n    const result: [ContentModelSegment, ContentModelParagraph | null][] = [];\n\n    selections.forEach(({ segments, block }) => {\n        if (segments && ((includingFormatHolder && !block) || block?.blockType == 'Paragraph')) {\n            segments.forEach(segment => {\n                if (segment.segmentType != 'Entity' || !segment.entityFormat.isReadonly) {\n                    result.push([segment, block?.blockType == 'Paragraph' ? block : null]);\n                }\n            });\n        }\n    });\n\n    return result;\n}\n\n/**\n * @internal\n */\nexport function getSelectedParagraphs(model: ContentModelDocument): ContentModelParagraph[] {\n    const selections = collectSelections(model, { includeListFormatHolder: 'never' });\n    const result: ContentModelParagraph[] = [];\n\n    removeUnmeaningfulSelections(selections);\n\n    selections.forEach(({ block }) => {\n        if (block?.blockType == 'Paragraph') {\n            result.push(block);\n        }\n    });\n\n    return result;\n}\n\n/**\n * @internal\n */\nexport function getOperationalBlocks<T extends ContentModelBlockGroup>(\n    model: ContentModelDocument,\n    blockGroupTypes: TypeOfBlockGroup<T>[],\n    stopTypes: ContentModelBlockGroupType[],\n    deepFirst?: boolean\n): OperationalBlocks<T>[] {\n    const result: OperationalBlocks<T>[] = [];\n    const findSequence = deepFirst ? blockGroupTypes.map(type => [type]) : [blockGroupTypes];\n    const selections = collectSelections(model, {\n        includeListFormatHolder: 'never',\n        contentUnderSelectedTableCell: 'ignoreForTable', // When whole table is selected, we treat the table as a single block\n    });\n\n    removeUnmeaningfulSelections(selections);\n\n    selections.forEach(({ path, block }) => {\n        for (let i = 0; i < findSequence.length; i++) {\n            const groupIndex = getClosestAncestorBlockGroupIndex(path, findSequence[i], stopTypes);\n\n            if (groupIndex >= 0) {\n                if (result.filter(x => x.block == path[groupIndex]).length <= 0) {\n                    result.push({\n                        parent: path[groupIndex + 1],\n                        block: path[groupIndex] as T,\n                    });\n                }\n                break;\n            } else if (i == findSequence.length - 1 && block) {\n                result.push({\n                    parent: path[0],\n                    block: block,\n                });\n                break;\n            }\n        }\n    });\n\n    return result;\n}\n\n/**\n * @internal\n */\nexport function getFirstSelectedTable(\n    model: ContentModelDocument\n): [ContentModelTable | undefined, ContentModelBlockGroup[]] {\n    const selections = collectSelections(model, { includeListFormatHolder: 'never' });\n    let table: ContentModelTable | undefined;\n    let resultPath: ContentModelBlockGroup[] = [];\n\n    removeUnmeaningfulSelections(selections);\n\n    selections.forEach(({ block, tableContext, path }) => {\n        if (!table) {\n            if (block?.blockType == 'Table') {\n                table = block;\n                resultPath = [...path];\n            } else if (tableContext?.table) {\n                table = tableContext.table;\n\n                const parent = path.filter(\n                    group => group.blocks.indexOf(tableContext.table) >= 0\n                )[0];\n                const index = path.indexOf(parent);\n                resultPath = index >= 0 ? path.slice(index) : [];\n            }\n        }\n    });\n\n    return [table, resultPath];\n}\n\n/**\n * @internal\n */\nexport function getFirstSelectedListItem(\n    model: ContentModelDocument\n): ContentModelListItem | undefined {\n    let listItem: ContentModelListItem | undefined;\n\n    getOperationalBlocks(model, ['ListItem'], ['TableCell']).forEach(r => {\n        if (!listItem && isBlockGroupOfType<ContentModelListItem>(r.block, 'ListItem')) {\n            listItem = r.block;\n        }\n    });\n\n    return listItem;\n}\n\ninterface SelectionInfo {\n    path: ContentModelBlockGroup[];\n    segments?: ContentModelSegment[];\n    block?: ContentModelBlock;\n    tableContext?: TableSelectionContext;\n}\n\nfunction collectSelections(\n    model: ContentModelDocument,\n    option?: IterateSelectionsOption\n): SelectionInfo[] {\n    const selections: SelectionInfo[] = [];\n\n    iterateSelections(\n        [model],\n        (path, tableContext, block, segments) => {\n            selections.push({\n                path,\n                tableContext,\n                block,\n                segments,\n            });\n        },\n        option\n    );\n\n    return selections;\n}\n\nfunction removeUnmeaningfulSelections(selections: SelectionInfo[]) {\n    if (\n        selections.length > 1 &&\n        isOnlySelectionMarkerSelected(selections, false /*checkFirstParagraph*/)\n    ) {\n        selections.pop();\n    }\n\n    // Remove head paragraph if first selection marker is the only selection\n    if (\n        selections.length > 1 &&\n        isOnlySelectionMarkerSelected(selections, true /*checkFirstParagraph*/)\n    ) {\n        selections.shift();\n    }\n}\n\nfunction isOnlySelectionMarkerSelected(\n    selections: SelectionInfo[],\n    checkFirstParagraph: boolean\n): boolean {\n    const selection = selections[checkFirstParagraph ? 0 : selections.length - 1];\n\n    if (\n        selection.block?.blockType == 'Paragraph' &&\n        selection.segments &&\n        selection.segments.length > 0\n    ) {\n        const allSegments = selection.block.segments;\n        const segment = selection.segments[0];\n\n        return (\n            selection.segments.length == 1 &&\n            segment.segmentType == 'SelectionMarker' &&\n            segment == allSegments[checkFirstParagraph ? allSegments.length - 1 : 0]\n        );\n    } else {\n        return false;\n    }\n}\n","import type { DOMSelection } from 'roosterjs-content-model-types';\n\n/**\n * @internal\n */\nexport function getSelectionRootNode(selection: DOMSelection | undefined): Node | undefined {\n    return !selection\n        ? undefined\n        : selection.type == 'range'\n        ? selection.range.commonAncestorContainer\n        : selection.type == 'table'\n        ? selection.table\n        : selection.type == 'image'\n        ? selection.image\n        : undefined;\n}\n","import type { TableSelectionContext } from '../../publicTypes/selection/TableSelectionContext';\nimport type {\n    ContentModelBlock,\n    ContentModelBlockGroup,\n    ContentModelBlockWithCache,\n    ContentModelSegment,\n} from 'roosterjs-content-model-types';\n\n/**\n * @internal\n */\nexport interface IterateSelectionsOption {\n    /**\n     * For selected table cell, this property determines how do we handle its content.\n     * include: No matter if table cell is selected, always invoke callback function for selected content (default value)\n     * ignoreForTable: When the whole table is selected we invoke callback for the table (using block parameter) but skip\n     * all its cells and content, otherwise keep invoking callback for table cell and content\n     * ignoreForTableOrCell: If whole table is selected, same with ignoreForTable, or if a table cell is selected, only\n     * invoke callback for the table cell itself but not for its content, otherwise keep invoking callback for content.\n     * @default include\n     */\n    contentUnderSelectedTableCell?: 'include' | 'ignoreForTable' | 'ignoreForTableOrCell';\n\n    /**\n     * For a selected general element, this property determines how do we handle its content.\n     * contentOnly: (Default) When the whole general element is selected, we only invoke callback for its selected content\n     * generalElementOnly: When the whole general element is selected, we only invoke callback for the general element (using block or\n     * segment parameter depends on if it is a block or segment), but skip all its content.\n     * both: When general element is selected, we invoke callback first for its content, then for general element itself\n     */\n    contentUnderSelectedGeneralElement?: 'contentOnly' | 'generalElementOnly' | 'both';\n\n    /**\n     * Whether call the callback for the list item format holder segment\n     * anySegment: call the callback if any segment is selected under a list item\n     * allSegments: call the callback only when all segments under the list item are selected\n     * never: never call the callback for list item format holder\n     * @default allSegments\n     */\n    includeListFormatHolder?: 'anySegment' | 'allSegments' | 'never';\n}\n\n/**\n * @internal\n * @returns True to stop iterating, otherwise keep going\n */\nexport type IterateSelectionsCallback = (\n    path: ContentModelBlockGroup[],\n    tableContext?: TableSelectionContext,\n    block?: ContentModelBlock,\n    segments?: ContentModelSegment[]\n) => void | boolean;\n\n/**\n * @internal\n * @returns True to stop iterating, otherwise keep going\n */\nexport function iterateSelections(\n    path: ContentModelBlockGroup[],\n    callback: IterateSelectionsCallback,\n    option?: IterateSelectionsOption,\n    table?: TableSelectionContext,\n    treatAllAsSelect?: boolean\n) {\n    const internalCallback: IterateSelectionsCallback = (path, tableContext, block, segments) => {\n        if (!!(block as ContentModelBlockWithCache)?.cachedElement) {\n            // TODO: This is a temporary solution. A better solution would be making all results from iterationSelection() to be readonly,\n            // use a util function to change it to be editable before edit them where we clear its cached element\n            delete (block as ContentModelBlockWithCache).cachedElement;\n        }\n\n        return callback(path, tableContext, block, segments);\n    };\n\n    internalIterateSelections(path, internalCallback, option, table, treatAllAsSelect);\n}\n\nfunction internalIterateSelections(\n    path: ContentModelBlockGroup[],\n    callback: IterateSelectionsCallback,\n    option?: IterateSelectionsOption,\n    table?: TableSelectionContext,\n    treatAllAsSelect?: boolean\n): boolean {\n    const parent = path[0];\n    const includeListFormatHolder = option?.includeListFormatHolder || 'allSegments';\n    const contentUnderSelectedTableCell = option?.contentUnderSelectedTableCell || 'include';\n    const contentUnderSelectedGeneralElement =\n        option?.contentUnderSelectedGeneralElement || 'contentOnly';\n\n    let hasSelectedSegment = false;\n    let hasUnselectedSegment = false;\n\n    for (let i = 0; i < parent.blocks.length; i++) {\n        const block = parent.blocks[i];\n\n        switch (block.blockType) {\n            case 'BlockGroup':\n                const newPath = [block, ...path];\n\n                if (block.blockGroupType == 'General') {\n                    const isSelected = treatAllAsSelect || block.isSelected;\n                    const handleGeneralContent =\n                        !isSelected ||\n                        contentUnderSelectedGeneralElement == 'both' ||\n                        contentUnderSelectedGeneralElement == 'contentOnly';\n                    const handleGeneralElement =\n                        isSelected &&\n                        (contentUnderSelectedGeneralElement == 'both' ||\n                            contentUnderSelectedGeneralElement == 'generalElementOnly' ||\n                            block.blocks.length == 0);\n\n                    if (\n                        (handleGeneralContent &&\n                            internalIterateSelections(\n                                newPath,\n                                callback,\n                                option,\n                                table,\n                                isSelected\n                            )) ||\n                        (handleGeneralElement && callback(path, table, block))\n                    ) {\n                        return true;\n                    }\n                } else if (\n                    internalIterateSelections(newPath, callback, option, table, treatAllAsSelect)\n                ) {\n                    return true;\n                }\n                break;\n\n            case 'Table':\n                const rows = block.rows;\n                const isWholeTableSelected = rows.every(row =>\n                    row.cells.every(cell => cell.isSelected)\n                );\n\n                if (contentUnderSelectedTableCell != 'include' && isWholeTableSelected) {\n                    if (callback(path, table, block)) {\n                        return true;\n                    }\n                } else {\n                    for (let rowIndex = 0; rowIndex < rows.length; rowIndex++) {\n                        const row = rows[rowIndex];\n\n                        for (let colIndex = 0; colIndex < row.cells.length; colIndex++) {\n                            const cell = row.cells[colIndex];\n                            if (!cell) {\n                                continue;\n                            }\n\n                            const newTable: TableSelectionContext = {\n                                table: block,\n                                rowIndex,\n                                colIndex,\n                                isWholeTableSelected,\n                            };\n\n                            if (cell.isSelected && callback(path, newTable)) {\n                                return true;\n                            }\n\n                            if (\n                                !cell.isSelected ||\n                                contentUnderSelectedTableCell != 'ignoreForTableOrCell'\n                            ) {\n                                const newPath = [cell, ...path];\n                                const isSelected = treatAllAsSelect || cell.isSelected;\n\n                                if (\n                                    internalIterateSelections(\n                                        newPath,\n                                        callback,\n                                        option,\n                                        newTable,\n                                        isSelected\n                                    )\n                                ) {\n                                    return true;\n                                }\n                            }\n                        }\n                    }\n                }\n\n                break;\n\n            case 'Paragraph':\n                const segments: ContentModelSegment[] = [];\n\n                for (let i = 0; i < block.segments.length; i++) {\n                    const segment = block.segments[i];\n                    const isSelected = treatAllAsSelect || segment.isSelected;\n\n                    if (segment.segmentType == 'General') {\n                        const handleGeneralContent =\n                            !isSelected ||\n                            contentUnderSelectedGeneralElement == 'both' ||\n                            contentUnderSelectedGeneralElement == 'contentOnly';\n                        const handleGeneralElement =\n                            isSelected &&\n                            (contentUnderSelectedGeneralElement == 'both' ||\n                                contentUnderSelectedGeneralElement == 'generalElementOnly' ||\n                                segment.blocks.length == 0);\n\n                        if (\n                            handleGeneralContent &&\n                            internalIterateSelections(\n                                [segment, ...path],\n                                callback,\n                                option,\n                                table,\n                                isSelected\n                            )\n                        ) {\n                            return true;\n                        }\n\n                        if (handleGeneralElement) {\n                            segments.push(segment);\n                        }\n                    } else if (isSelected) {\n                        segments.push(segment);\n                    }\n\n                    if (isSelected) {\n                        hasSelectedSegment = true;\n                    } else {\n                        hasUnselectedSegment = true;\n                    }\n                }\n\n                if (segments.length > 0 && callback(path, table, block, segments)) {\n                    return true;\n                }\n                break;\n\n            case 'Divider':\n            case 'Entity':\n                if ((treatAllAsSelect || block.isSelected) && callback(path, table, block)) {\n                    return true;\n                }\n\n                break;\n        }\n    }\n\n    if (\n        includeListFormatHolder != 'never' &&\n        parent.blockGroupType == 'ListItem' &&\n        hasSelectedSegment &&\n        (!hasUnselectedSegment || includeListFormatHolder == 'anySegment') &&\n        // When whole list item is selected, also add its format holder as selected segment\n        callback(path, table, undefined /*block*/, [parent.formatHolder])\n    ) {\n        return true;\n    }\n\n    return false;\n}\n","import { isGeneralSegment } from 'roosterjs-content-model-dom';\nimport type {\n    ContentModelBlock,\n    ContentModelBlockGroup,\n    ContentModelSegment,\n    ContentModelTable,\n    Selectable,\n} from 'roosterjs-content-model-types';\n\n/**\n * @internal\n */\nexport function setSelection(group: ContentModelBlockGroup, start?: Selectable, end?: Selectable) {\n    setSelectionToBlockGroup(group, false /*isInSelection*/, start || null, end || null);\n}\n\nfunction setSelectionToBlockGroup(\n    group: ContentModelBlockGroup,\n    isInSelection: boolean,\n    start: Selectable | null,\n    end: Selectable | null\n): boolean {\n    return handleSelection(isInSelection, group, start, end, isInSelection => {\n        if (isGeneralSegment(group)) {\n            setIsSelected(group, isInSelection);\n        }\n\n        group.blocks.forEach(block => {\n            isInSelection = setSelectionToBlock(block, isInSelection, start, end);\n        });\n\n        return isInSelection;\n    });\n}\n\nfunction setSelectionToBlock(\n    block: ContentModelBlock,\n    isInSelection: boolean,\n    start: Selectable | null,\n    end: Selectable | null\n) {\n    switch (block.blockType) {\n        case 'BlockGroup':\n            return setSelectionToBlockGroup(block, isInSelection, start, end);\n\n        case 'Table':\n            return setSelectionToTable(block, isInSelection, start, end);\n\n        case 'Divider':\n        case 'Entity':\n            return handleSelection(isInSelection, block, start, end, isInSelection => {\n                if (isInSelection) {\n                    block.isSelected = true;\n                } else {\n                    delete block.isSelected;\n                }\n\n                return isInSelection;\n            });\n\n        case 'Paragraph':\n            const segmentsToDelete: number[] = [];\n\n            block.segments.forEach((segment, i) => {\n                isInSelection = handleSelection(\n                    isInSelection,\n                    segment,\n                    start,\n                    end,\n                    isInSelection => {\n                        return setSelectionToSegment(\n                            segment,\n                            isInSelection,\n                            segmentsToDelete,\n                            start,\n                            end,\n                            i\n                        );\n                    }\n                );\n            });\n\n            while (segmentsToDelete.length > 0) {\n                const index = segmentsToDelete.pop()!;\n\n                if (index >= 0) {\n                    block.segments.splice(index, 1);\n                }\n            }\n\n            return isInSelection;\n\n        default:\n            return isInSelection;\n    }\n}\n\nfunction setSelectionToTable(\n    table: ContentModelTable,\n    isInSelection: boolean,\n    start: Selectable | null,\n    end: Selectable | null\n): boolean {\n    const first = findCell(table, start);\n    const last = end ? findCell(table, end) : first;\n\n    if (!isInSelection) {\n        for (let row = 0; row < table.rows.length; row++) {\n            const currentRow = table.rows[row];\n            for (let col = 0; col < currentRow.cells.length; col++) {\n                const currentCell = table.rows[row].cells[col];\n                const isSelected =\n                    row >= first.row && row <= last.row && col >= first.col && col <= last.col;\n\n                setIsSelected(currentCell, isSelected);\n\n                if (!isSelected) {\n                    setSelectionToBlockGroup(\n                        currentCell,\n                        false /*isInSelection*/,\n                        null /*start*/,\n                        null /*end*/\n                    );\n                }\n            }\n        }\n    } else {\n        table.rows.forEach(row =>\n            row.cells.forEach(cell => {\n                isInSelection = setSelectionToBlockGroup(cell, isInSelection, start, end);\n            })\n        );\n    }\n\n    return isInSelection;\n}\n\nfunction findCell(table: ContentModelTable, cell: Selectable | null): { row: number; col: number } {\n    let col = -1;\n    const row = cell\n        ? table.rows.findIndex(row => (col = (row.cells as Selectable[]).indexOf(cell)) >= 0)\n        : -1;\n\n    return { row, col };\n}\n\nfunction setSelectionToSegment(\n    segment: ContentModelSegment,\n    isInSelection: boolean,\n    segmentsToDelete: number[],\n    start: Selectable | null,\n    end: Selectable | null,\n    i: number\n) {\n    switch (segment.segmentType) {\n        case 'SelectionMarker':\n            if (!isInSelection || (segment != start && segment != end)) {\n                // Delete the selection marker when\n                // 1. It is not in selection any more. Or\n                // 2. It is in middle of selection, so no need to have it\n                segmentsToDelete.push(i);\n            }\n            return isInSelection;\n\n        case 'General':\n            setIsSelected(segment, isInSelection);\n\n            return segment != start && segment != end\n                ? setSelectionToBlockGroup(segment, isInSelection, start, end)\n                : isInSelection;\n\n        case 'Image':\n            setIsSelected(segment, isInSelection);\n            segment.isSelectedAsImageSelection = start == segment && (!end || end == segment);\n            return isInSelection;\n        default:\n            setIsSelected(segment, isInSelection);\n            return isInSelection;\n    }\n}\n\nfunction setIsSelected(selectable: Selectable, value: boolean) {\n    if (value) {\n        selectable.isSelected = true;\n    } else {\n        delete selectable.isSelected;\n    }\n\n    return value;\n}\n\nfunction handleSelection(\n    isInSelection: boolean,\n    model: ContentModelBlockGroup | ContentModelBlock | ContentModelSegment,\n    start: Selectable | null,\n    end: Selectable | null,\n    callback: (isInSelection: boolean) => boolean\n) {\n    isInSelection = isInSelection || model == start;\n    isInSelection = callback(isInSelection);\n    return isInSelection && !!end && model != end;\n}\n","import { TableOperation } from 'roosterjs-editor-types';\nimport type { ContentModelTable } from 'roosterjs-content-model-types';\nimport type { CompatibleTableOperation } from 'roosterjs-editor-types/lib/compatibleTypes';\n\n/**\n * @internal\n */\nexport function alignTable(\n    table: ContentModelTable,\n    operation:\n        | TableOperation.AlignCenter\n        | TableOperation.AlignLeft\n        | TableOperation.AlignRight\n        | CompatibleTableOperation.AlignCenter\n        | CompatibleTableOperation.AlignLeft\n        | CompatibleTableOperation.AlignRight\n) {\n    table.format.marginLeft = operation == TableOperation.AlignLeft ? '' : 'auto';\n    table.format.marginRight = operation == TableOperation.AlignRight ? '' : 'auto';\n\n    delete table.cachedElement;\n}\n","import { getSelectedCells } from './getSelectedCells';\nimport { TableOperation } from 'roosterjs-editor-types';\nimport { updateTableCellMetadata } from '../../domUtils/metadata/updateTableCellMetadata';\nimport type { ContentModelTable } from 'roosterjs-content-model-types';\nimport type { CompatibleTableOperation } from 'roosterjs-editor-types/lib/compatibleTypes';\n\nconst TextAlignValueMap: Partial<Record<TableOperation, 'start' | 'center' | 'end'>> = {\n    [TableOperation.AlignCellLeft]: 'start',\n    [TableOperation.AlignCellCenter]: 'center',\n    [TableOperation.AlignCellRight]: 'end',\n};\n\nconst VerticalAlignValueMap: Partial<Record<TableOperation, 'top' | 'middle' | 'bottom'>> = {\n    [TableOperation.AlignCellTop]: 'top',\n    [TableOperation.AlignCellMiddle]: 'middle',\n    [TableOperation.AlignCellBottom]: 'bottom',\n};\n\n/**\n * @internal\n */\nexport function alignTableCell(\n    table: ContentModelTable,\n    operation:\n        | TableOperation.AlignCellCenter\n        | TableOperation.AlignCellLeft\n        | TableOperation.AlignCellRight\n        | TableOperation.AlignCellTop\n        | TableOperation.AlignCellMiddle\n        | TableOperation.AlignCellBottom\n        | CompatibleTableOperation.AlignCellCenter\n        | CompatibleTableOperation.AlignCellLeft\n        | CompatibleTableOperation.AlignCellRight\n        | CompatibleTableOperation.AlignCellTop\n        | CompatibleTableOperation.AlignCellMiddle\n        | CompatibleTableOperation.AlignCellBottom\n) {\n    const sel = getSelectedCells(table);\n\n    if (sel) {\n        const textAlign = TextAlignValueMap[operation];\n        const verticalAlign = VerticalAlignValueMap[operation];\n\n        for (let rowIndex = sel.firstRow; rowIndex <= sel.lastRow; rowIndex++) {\n            for (let colIndex = sel.firstCol; colIndex <= sel.lastCol; colIndex++) {\n                const cell = table.rows[rowIndex]?.cells[colIndex];\n                const format = cell?.format;\n\n                if (format) {\n                    delete cell.cachedElement;\n\n                    format.textAlign = textAlign || format.textAlign;\n                    format.verticalAlign = verticalAlign || format.verticalAlign;\n\n                    if (verticalAlign) {\n                        updateTableCellMetadata(cell, metadata => {\n                            metadata = metadata || {};\n                            metadata.vAlignOverride = true;\n                            return metadata;\n                        });\n                    }\n\n                    cell.blocks.forEach(block => {\n                        if (block.blockType === 'Paragraph') {\n                            delete block.format.textAlign;\n                        }\n                    });\n                }\n            }\n        }\n    }\n}\n","import { BorderKeys } from 'roosterjs-content-model-dom';\nimport { combineBorderValue, extractBorderValues } from '../../domUtils/borderValues';\nimport { setTableCellBackgroundColor } from './setTableCellBackgroundColor';\nimport { TableBorderFormat } from 'roosterjs-editor-types';\nimport { updateTableCellMetadata } from '../../domUtils/metadata/updateTableCellMetadata';\nimport { updateTableMetadata } from '../../domUtils/metadata/updateTableMetadata';\nimport type {\n    BorderFormat,\n    ContentModelTable,\n    ContentModelTableRow,\n    TableMetadataFormat,\n} from 'roosterjs-content-model-types';\n\nconst DEFAULT_FORMAT: Required<TableMetadataFormat> = {\n    topBorderColor: '#ABABAB',\n    bottomBorderColor: '#ABABAB',\n    verticalBorderColor: '#ABABAB',\n    hasHeaderRow: false,\n    hasFirstColumn: false,\n    hasBandedRows: false,\n    hasBandedColumns: false,\n    bgColorEven: null,\n    bgColorOdd: '#ABABAB20',\n    headerRowColor: '#ABABAB',\n    tableBorderFormat: TableBorderFormat.DEFAULT,\n    verticalAlign: null,\n};\n\ntype MetaOverrides = {\n    bgColorOverrides: boolean[][];\n    vAlignOverrides: boolean[][];\n};\n\n/**\n * @internal\n */\nexport function applyTableFormat(\n    table: ContentModelTable,\n    newFormat?: TableMetadataFormat,\n    keepCellShade?: boolean\n) {\n    const { rows } = table;\n\n    updateTableMetadata(table, format => {\n        const effectiveMetadata = {\n            ...DEFAULT_FORMAT,\n            ...format,\n            ...(newFormat || {}),\n        };\n\n        const metaOverrides: MetaOverrides = updateOverrides(rows, !keepCellShade);\n\n        delete table.cachedElement;\n\n        clearCache(rows);\n        formatCells(rows, effectiveMetadata, metaOverrides);\n        setFirstColumnFormat(rows, effectiveMetadata, metaOverrides);\n        setHeaderRowFormat(rows, effectiveMetadata, metaOverrides);\n        return effectiveMetadata;\n    });\n}\n\nfunction clearCache(rows: ContentModelTableRow[]) {\n    rows.forEach(row => {\n        row.cells.forEach(cell => {\n            delete cell.cachedElement;\n        });\n\n        delete row.cachedElement;\n    });\n}\n\nfunction updateOverrides(rows: ContentModelTableRow[], removeCellShade: boolean): MetaOverrides {\n    const overrides: MetaOverrides = { bgColorOverrides: [], vAlignOverrides: [] };\n\n    rows.forEach(row => {\n        const bgColorOverrides: boolean[] = [];\n        const vAlignOverrides: boolean[] = [];\n\n        overrides.bgColorOverrides.push(bgColorOverrides);\n        overrides.vAlignOverrides.push(vAlignOverrides);\n\n        row.cells.forEach(cell => {\n            updateTableCellMetadata(cell, metadata => {\n                if (metadata && removeCellShade) {\n                    bgColorOverrides.push(false);\n                    delete metadata.bgColorOverride;\n                } else {\n                    bgColorOverrides.push(!!metadata?.bgColorOverride);\n                }\n                vAlignOverrides.push(!!metadata?.vAlignOverride);\n\n                return metadata;\n            });\n        });\n    });\n\n    return overrides;\n}\n\ntype ShouldUseTransparentBorder = (indexProp: {\n    firstRow: boolean;\n    lastRow: boolean;\n    firstColumn: boolean;\n    lastColumn: boolean;\n}) => [boolean, boolean, boolean, boolean];\n\nconst BorderFormatters: Record<TableBorderFormat, ShouldUseTransparentBorder> = {\n    [TableBorderFormat.DEFAULT]: _ => [false, false, false, false],\n    [TableBorderFormat.LIST_WITH_SIDE_BORDERS]: ({ lastColumn, firstColumn }) => [\n        false,\n        !lastColumn,\n        false,\n        !firstColumn,\n    ],\n    [TableBorderFormat.FIRST_COLUMN_HEADER_EXTERNAL]: ({\n        firstColumn,\n        firstRow,\n        lastColumn,\n        lastRow,\n    }) => [\n        !firstRow,\n        (!lastColumn && !firstColumn) || (firstColumn && firstRow),\n        !lastRow && !firstRow,\n        !firstColumn,\n    ],\n    [TableBorderFormat.NO_HEADER_BORDERS]: ({ firstRow, firstColumn, lastColumn }) => [\n        firstRow,\n        firstRow || lastColumn,\n        false,\n        firstRow || firstColumn,\n    ],\n    [TableBorderFormat.NO_SIDE_BORDERS]: ({ firstColumn, lastColumn }) => [\n        false,\n        lastColumn,\n        false,\n        firstColumn,\n    ],\n    [TableBorderFormat.ESPECIAL_TYPE_1]: ({ firstRow, firstColumn }) => [\n        firstColumn && !firstRow,\n        firstRow,\n        firstColumn && !firstRow,\n        firstRow && !firstColumn,\n    ],\n    [TableBorderFormat.ESPECIAL_TYPE_2]: ({ firstRow, firstColumn }) => [\n        !firstRow,\n        firstRow || !firstColumn,\n        !firstRow,\n        !firstColumn,\n    ],\n    [TableBorderFormat.ESPECIAL_TYPE_3]: ({ firstColumn, firstRow }) => [\n        true,\n        firstRow || !firstColumn,\n        !firstRow,\n        true,\n    ],\n    [TableBorderFormat.CLEAR]: () => [true, true, true, true],\n};\n\n/*\n * Apply vertical align, borders, and background color to all cells in the table\n */\nfunction formatCells(\n    rows: ContentModelTableRow[],\n    format: TableMetadataFormat,\n    metaOverrides: MetaOverrides\n) {\n    const { hasBandedRows, hasBandedColumns, bgColorOdd, bgColorEven } = format;\n\n    rows.forEach((row, rowIndex) => {\n        row.cells.forEach((cell, colIndex) => {\n            // Format Borders\n            const transparentBorderMatrix = BorderFormatters[\n                format.tableBorderFormat as TableBorderFormat\n            ]({\n                firstRow: rowIndex === 0,\n                lastRow: rowIndex === rows.length - 1,\n                firstColumn: colIndex === 0,\n                lastColumn: colIndex === row.cells.length - 1,\n            });\n\n            const formatColor = [\n                format.topBorderColor,\n                format.verticalBorderColor,\n                format.bottomBorderColor,\n                format.verticalBorderColor,\n            ];\n\n            transparentBorderMatrix.forEach((alwaysUseTransparent, i) => {\n                const borderColor = (!alwaysUseTransparent && formatColor[i]) || '';\n\n                cell.format[BorderKeys[i]] = combineBorderValue({\n                    style: getBorderStyleFromColor(borderColor),\n                    width: '1px',\n                    color: borderColor,\n                });\n            });\n\n            // Format Background Color\n            if (!metaOverrides.bgColorOverrides[rowIndex][colIndex]) {\n                const color =\n                    hasBandedRows || hasBandedColumns\n                        ? (hasBandedColumns && colIndex % 2 != 0) ||\n                          (hasBandedRows && rowIndex % 2 != 0)\n                            ? bgColorOdd\n                            : bgColorEven\n                        : bgColorEven; /* bgColorEven is the default color */\n\n                setTableCellBackgroundColor(\n                    cell,\n                    color,\n                    false /*isColorOverride*/,\n                    true /*applyToSegments*/\n                );\n            }\n\n            // Format Vertical Align\n            if (format.verticalAlign && !metaOverrides.vAlignOverrides[rowIndex][colIndex]) {\n                cell.format.verticalAlign = format.verticalAlign;\n            }\n        });\n    });\n}\n\nfunction setFirstColumnFormat(\n    rows: ContentModelTableRow[],\n    format: Partial<TableMetadataFormat>,\n    metaOverrides: MetaOverrides\n) {\n    rows.forEach((row, rowIndex) => {\n        row.cells.forEach((cell, cellIndex) => {\n            if (format.hasFirstColumn && cellIndex === 0) {\n                cell.isHeader = true;\n\n                if (rowIndex !== 0 && !metaOverrides.bgColorOverrides[rowIndex][cellIndex]) {\n                    setBorderColor(cell.format, 'borderTop');\n                    setTableCellBackgroundColor(\n                        cell,\n                        null /*color*/,\n                        false /*isColorOverride*/,\n                        true /*applyToSegments*/\n                    );\n                }\n\n                if (rowIndex !== rows.length - 1 && rowIndex !== 0) {\n                    setBorderColor(cell.format, 'borderBottom');\n                }\n            } else {\n                cell.isHeader = false;\n            }\n        });\n    });\n}\n\nfunction setHeaderRowFormat(\n    rows: ContentModelTableRow[],\n    format: TableMetadataFormat,\n    metaOverrides: MetaOverrides\n) {\n    const rowIndex = 0;\n\n    rows[rowIndex]?.cells.forEach((cell, cellIndex) => {\n        cell.isHeader = format.hasHeaderRow;\n\n        if (format.hasHeaderRow && format.headerRowColor) {\n            if (!metaOverrides.bgColorOverrides[rowIndex][cellIndex]) {\n                setTableCellBackgroundColor(\n                    cell,\n                    format.headerRowColor,\n                    false /*isColorOverride*/,\n                    true /*applyToSegments*/\n                );\n            }\n\n            setBorderColor(cell.format, 'borderTop', format.headerRowColor);\n            setBorderColor(cell.format, 'borderRight', format.headerRowColor);\n            setBorderColor(cell.format, 'borderLeft', format.headerRowColor);\n        }\n    });\n}\n\nfunction setBorderColor(format: BorderFormat, key: keyof BorderFormat, value?: string) {\n    const border = extractBorderValues(format[key]);\n    border.color = value || '';\n    border.style = getBorderStyleFromColor(border.color);\n    format[key] = combineBorderValue(border);\n}\n\nfunction getBorderStyleFromColor(color?: string): string {\n    return !color || color == 'transparent' ? 'none' : 'solid';\n}\n","import type { ContentModelTableRow } from 'roosterjs-content-model-types';\n\n/**\n * @internal\n */\nexport function canMergeCells(\n    rows: ContentModelTableRow[],\n    firstRow: number,\n    firstCol: number,\n    lastRow: number,\n    lastCol: number\n): boolean {\n    const noSpanAbove =\n        firstCol == lastCol ||\n        rows[firstRow].cells.every(\n            (cell, colIndex) => colIndex < firstCol || colIndex > lastCol || !cell.spanAbove\n        );\n    const noSpanLeft =\n        firstRow == lastRow ||\n        rows.every(\n            (row, rowIndex) =>\n                rowIndex < firstRow || rowIndex > lastRow || !row.cells[firstCol].spanLeft\n        );\n\n    const noDifferentBelowSpan = rows[lastRow].cells\n        .map((_, colIndex) =>\n            colIndex >= firstCol && colIndex <= lastCol\n                ? getBelowSpanCount(rows, lastRow, colIndex)\n                : -1\n        )\n        .every((x, _, a) => x < 0 || x == a[firstCol]);\n    const noDifferentRightSpan = rows\n        .map((_, rowIndex) =>\n            rowIndex >= firstRow && rowIndex <= lastRow\n                ? getRightSpanCount(rows, rowIndex, lastCol)\n                : -1\n        )\n        .every((x, _, a) => x < 0 || x == a[firstRow]);\n\n    return noSpanAbove && noSpanLeft && noDifferentBelowSpan && noDifferentRightSpan;\n}\n\nfunction getBelowSpanCount(rows: ContentModelTableRow[], rowIndex: number, colIndex: number) {\n    let spanCount = 0;\n\n    for (let row = rowIndex + 1; row < rows.length; row++) {\n        if (rows[row]?.cells[colIndex]?.spanAbove) {\n            spanCount++;\n        } else {\n            break;\n        }\n    }\n\n    return spanCount;\n}\n\nfunction getRightSpanCount(rows: ContentModelTableRow[], rowIndex: number, colIndex: number) {\n    let spanCount = 0;\n\n    for (let col = colIndex + 1; col < rows[rowIndex]?.cells.length; col++) {\n        if (rows[rowIndex]?.cells[col]?.spanLeft) {\n            spanCount++;\n        } else {\n            break;\n        }\n    }\n\n    return spanCount;\n}\n","import { addBlock, createTable, createTableCell } from 'roosterjs-content-model-dom';\nimport type { ContentModelBlockGroup, ContentModelTable } from 'roosterjs-content-model-types';\n\n/**\n * @internal\n */\nexport function createTableStructure(\n    parent: ContentModelBlockGroup,\n    columns: number,\n    rows: number\n): ContentModelTable {\n    const table = createTable(rows);\n\n    addBlock(parent, table);\n\n    table.rows.forEach(row => {\n        for (let i = 0; i < columns; i++) {\n            const cell = createTableCell();\n\n            row.cells.push(cell);\n        }\n    });\n\n    return table;\n}\n","import type { ContentModelTable } from 'roosterjs-content-model-types';\n\n/**\n * @internal\n */\nexport function deleteTable(table: ContentModelTable) {\n    table.rows = [];\n    delete table.cachedElement;\n}\n","import { collapseTableSelection } from '../selection/collapseTableSelection';\nimport { getSelectedCells } from './getSelectedCells';\nimport type { ContentModelTable } from 'roosterjs-content-model-types';\n\n/**\n * @internal\n */\nexport function deleteTableColumn(table: ContentModelTable) {\n    const sel = getSelectedCells(table);\n\n    if (sel) {\n        for (let rowIndex = 0; rowIndex < table.rows.length; rowIndex++) {\n            const cellInNextCol = table.rows[rowIndex].cells[sel.lastCol + 1];\n\n            if (cellInNextCol) {\n                cellInNextCol.spanLeft =\n                    cellInNextCol.spanLeft && table.rows[rowIndex].cells[sel.firstCol].spanLeft;\n            }\n\n            table.rows[rowIndex].cells.splice(sel.firstCol, sel.lastCol - sel.firstCol + 1);\n        }\n\n        table.widths.splice(sel.firstCol, sel.lastCol - sel.firstCol + 1);\n        collapseTableSelection(table.rows, sel);\n    }\n}\n","import { collapseTableSelection } from '../selection/collapseTableSelection';\nimport { getSelectedCells } from './getSelectedCells';\nimport type { ContentModelTable } from 'roosterjs-content-model-types';\n\n/**\n * @internal\n */\nexport function deleteTableRow(table: ContentModelTable) {\n    const sel = getSelectedCells(table);\n\n    if (sel) {\n        table.rows[sel.firstRow].cells.forEach((cell, colIndex) => {\n            const cellInNextRow = table.rows[sel.lastRow + 1]?.cells[colIndex];\n\n            if (cellInNextRow) {\n                cellInNextRow.spanAbove = cellInNextRow.spanAbove && cell.spanAbove;\n            }\n        });\n\n        table.rows.splice(sel.firstRow, sel.lastRow - sel.firstRow + 1);\n\n        collapseTableSelection(table.rows, sel);\n    }\n}\n","import { createBr, createParagraph } from 'roosterjs-content-model-dom';\nimport type {\n    ContentModelBlock,\n    ContentModelBlockGroup,\n    ContentModelDocument,\n    ContentModelParagraph,\n    ContentModelTable,\n} from 'roosterjs-content-model-types';\n\n/**\n * @internal\n * After edit table, it maybe in a abnormal state, e.g. selected table cell is removed, or all rows are removed causes no place to put cursor.\n * We need to make sure table is in normal state, and there is a place to put cursor.\n * @returns a new paragraph that can but put focus in, or undefined if not needed\n */\nexport function ensureFocusableParagraphForTable(\n    model: ContentModelDocument,\n    path: ContentModelBlockGroup[],\n    table: ContentModelTable\n): ContentModelParagraph | undefined {\n    let paragraph: ContentModelParagraph | undefined;\n    const firstCell = table.rows.filter(row => row.cells.length > 0)[0]?.cells[0];\n\n    if (firstCell) {\n        // When there is a valid cell to put focus, use it\n        paragraph = firstCell.blocks.filter(\n            (block): block is ContentModelParagraph => block.blockType == 'Paragraph'\n        )[0];\n\n        if (!paragraph) {\n            // If there is not a paragraph under this cell, create one\n            paragraph = createEmptyParagraph(model);\n            firstCell.blocks.push(paragraph);\n        }\n    } else {\n        // No table cell at all, which means the whole table is deleted. So we need to remove it from content model.\n        let block: ContentModelBlock = table;\n        let parent: ContentModelBlockGroup | undefined;\n        paragraph = createEmptyParagraph(model);\n\n        // If the table is the only block of its parent and parent is a FormatContainer, remove the parent as well.\n        // We need to do this in a loop in case there are multiple layer of FormatContainer that match this case\n        while ((parent = path.shift())) {\n            const index = parent.blocks.indexOf(block) ?? -1;\n\n            if (parent && index >= 0) {\n                parent.blocks.splice(index, 1, paragraph);\n            }\n\n            if (\n                parent.blockGroupType == 'FormatContainer' &&\n                parent.blocks.length == 1 &&\n                parent.blocks[0] == paragraph\n            ) {\n                // If the new paragraph is the only child of parent format container, unwrap parent as well\n                block = parent;\n            } else {\n                // Otherwise, just stop here and keep processing the new paragraph\n                break;\n            }\n        }\n    }\n\n    return paragraph;\n}\n\nfunction createEmptyParagraph(model: ContentModelDocument) {\n    const newPara = createParagraph(false /*isImplicit*/, undefined /*blockFormat*/, model.format);\n    const br = createBr(model.format);\n\n    newPara.segments.push(br);\n\n    return newPara;\n}\n","import hasSelectionInBlockGroup from '../../publicApi/selection/hasSelectionInBlockGroup';\nimport type { ContentModelTable } from 'roosterjs-content-model-types';\n\n/**\n * @internal\n */\nexport interface TableSelectionCoordinates {\n    firstRow: number;\n    firstCol: number;\n    lastRow: number;\n    lastCol: number;\n}\n\n/**\n * @internal\n */\nexport function getSelectedCells(table: ContentModelTable): TableSelectionCoordinates | null {\n    let firstRow = -1;\n    let firstCol = -1;\n    let lastRow = -1;\n    let lastCol = -1;\n    let hasSelection = false;\n\n    table.rows.forEach((row, rowIndex) =>\n        row.cells.forEach((cell, colIndex) => {\n            if (hasSelectionInBlockGroup(cell)) {\n                hasSelection = true;\n\n                if (firstRow < 0) {\n                    firstRow = rowIndex;\n                }\n\n                if (firstCol < 0) {\n                    firstCol = colIndex;\n                }\n\n                lastRow = Math.max(lastRow, rowIndex);\n                lastCol = Math.max(lastCol, colIndex);\n            }\n        })\n    );\n\n    return hasSelection ? { firstRow, firstCol, lastRow, lastCol } : null;\n}\n","import { createTableCell } from 'roosterjs-content-model-dom';\nimport { getSelectedCells } from './getSelectedCells';\nimport { TableOperation } from 'roosterjs-editor-types';\nimport type { ContentModelTable } from 'roosterjs-content-model-types';\nimport type { CompatibleTableOperation } from 'roosterjs-editor-types/lib/compatibleTypes';\n\n/**\n * @internal\n */\nexport function insertTableColumn(\n    table: ContentModelTable,\n    operation:\n        | TableOperation.InsertLeft\n        | TableOperation.InsertRight\n        | CompatibleTableOperation.InsertLeft\n        | CompatibleTableOperation.InsertRight\n) {\n    const sel = getSelectedCells(table);\n    const insertLeft = operation == TableOperation.InsertLeft;\n\n    if (sel) {\n        for (let i = sel?.firstCol; i <= sel.lastCol; i++) {\n            table.rows.forEach(row => {\n                const cell = row.cells[insertLeft ? sel.firstCol : sel.lastCol];\n\n                row.cells.splice(\n                    insertLeft ? sel.firstCol : sel.lastCol + 1,\n                    0,\n                    createTableCell(cell.spanLeft, cell.spanAbove, cell.isHeader, cell.format)\n                );\n            });\n            table.widths.splice(\n                insertLeft ? sel.firstCol : sel.lastCol + 1,\n                0,\n                table.widths[insertLeft ? sel.firstCol : sel.lastCol]\n            );\n        }\n    }\n}\n","import { createTableCell } from 'roosterjs-content-model-dom';\nimport { getSelectedCells } from './getSelectedCells';\nimport { TableOperation } from 'roosterjs-editor-types';\nimport type { ContentModelTable } from 'roosterjs-content-model-types';\nimport type { CompatibleTableOperation } from 'roosterjs-editor-types/lib/compatibleTypes';\n\n/**\n * @internal\n */\nexport function insertTableRow(\n    table: ContentModelTable,\n    operation:\n        | TableOperation.InsertAbove\n        | TableOperation.InsertBelow\n        | CompatibleTableOperation.InsertAbove\n        | CompatibleTableOperation.InsertBelow\n) {\n    const sel = getSelectedCells(table);\n    const insertAbove = operation == TableOperation.InsertAbove;\n\n    if (sel) {\n        for (let i = sel.firstRow; i <= sel.lastRow; i++) {\n            const sourceRow = table.rows[insertAbove ? sel.firstRow : sel.lastRow];\n\n            table.rows.splice(insertAbove ? sel.firstRow : sel.lastRow + 1, 0, {\n                format: { ...sourceRow.format },\n                cells: sourceRow.cells.map(cell =>\n                    createTableCell(cell.spanLeft, cell.spanAbove, cell.isHeader, cell.format)\n                ),\n                height: sourceRow.height,\n            });\n        }\n    }\n}\n","import { canMergeCells } from './canMergeCells';\nimport { getSelectedCells } from './getSelectedCells';\nimport type { ContentModelTable } from 'roosterjs-content-model-types';\n\n/**\n * @internal\n */\nexport function mergeTableCells(table: ContentModelTable) {\n    const sel = getSelectedCells(table);\n\n    if (sel && canMergeCells(table.rows, sel.firstRow, sel.firstCol, sel.lastRow, sel.lastCol)) {\n        for (let rowIndex = sel.firstRow; rowIndex <= sel.lastRow; rowIndex++) {\n            for (let colIndex = sel.firstCol; colIndex <= sel.lastCol; colIndex++) {\n                const cell = table.rows[rowIndex].cells[colIndex];\n\n                if (cell) {\n                    cell.spanLeft = colIndex > sel.firstCol;\n                    cell.spanAbove = rowIndex > sel.firstRow;\n\n                    delete cell.cachedElement;\n                }\n            }\n\n            delete table.rows[rowIndex].cachedElement;\n        }\n    }\n}\n","import { canMergeCells } from './canMergeCells';\nimport { getSelectedCells } from './getSelectedCells';\nimport { TableOperation } from 'roosterjs-editor-types';\nimport type { ContentModelTable } from 'roosterjs-content-model-types';\nimport type { CompatibleTableOperation } from 'roosterjs-editor-types/lib/compatibleTypes';\n\n/**\n * @internal\n */\nexport function mergeTableColumn(\n    table: ContentModelTable,\n    operation:\n        | TableOperation.MergeLeft\n        | TableOperation.MergeRight\n        | CompatibleTableOperation.MergeLeft\n        | CompatibleTableOperation.MergeRight\n) {\n    const sel = getSelectedCells(table);\n    const mergeLeft = operation == TableOperation.MergeLeft;\n\n    if (sel) {\n        const mergingColIndex = mergeLeft ? sel.firstCol : sel.lastCol + 1;\n\n        if (mergingColIndex > 0 && mergingColIndex < table.rows[0].cells.length) {\n            for (let rowIndex = sel.firstRow; rowIndex <= sel.lastRow; rowIndex++) {\n                const cell = table.rows[rowIndex]?.cells[mergingColIndex];\n\n                if (\n                    cell &&\n                    canMergeCells(\n                        table.rows,\n                        rowIndex,\n                        mergingColIndex - 1,\n                        rowIndex,\n                        mergingColIndex\n                    )\n                ) {\n                    cell.spanLeft = true;\n\n                    let newSelectedCol = mergingColIndex;\n\n                    while (table.rows[rowIndex]?.cells[newSelectedCol]?.spanLeft) {\n                        delete table.rows[rowIndex].cells[newSelectedCol].cachedElement;\n                        newSelectedCol--;\n                    }\n\n                    if (table.rows[rowIndex]?.cells[newSelectedCol]) {\n                        table.rows[rowIndex].cells[newSelectedCol].isSelected = true;\n\n                        delete table.rows[rowIndex].cells[newSelectedCol].cachedElement;\n                    }\n\n                    delete cell.cachedElement;\n                }\n\n                delete table.rows[rowIndex].cachedElement;\n            }\n        }\n    }\n}\n","import { canMergeCells } from './canMergeCells';\nimport { getSelectedCells } from './getSelectedCells';\nimport { TableOperation } from 'roosterjs-editor-types';\nimport type { ContentModelTable } from 'roosterjs-content-model-types';\nimport type { CompatibleTableOperation } from 'roosterjs-editor-types/lib/compatibleTypes';\n\n/**\n * @internal\n */\nexport function mergeTableRow(\n    table: ContentModelTable,\n    operation:\n        | TableOperation.MergeAbove\n        | TableOperation.MergeBelow\n        | CompatibleTableOperation.MergeAbove\n        | CompatibleTableOperation.MergeBelow\n) {\n    const sel = getSelectedCells(table);\n    const mergeAbove = operation == TableOperation.MergeAbove;\n\n    if (sel) {\n        const mergingRowIndex = mergeAbove ? sel.firstRow : sel.lastRow + 1;\n\n        if (mergingRowIndex > 0 && mergingRowIndex < table.rows.length) {\n            for (let colIndex = sel.firstCol; colIndex <= sel.lastCol; colIndex++) {\n                const cell = table.rows[mergingRowIndex].cells[colIndex];\n\n                if (\n                    cell &&\n                    canMergeCells(\n                        table.rows,\n                        mergingRowIndex - 1,\n                        colIndex,\n                        mergingRowIndex,\n                        colIndex\n                    )\n                ) {\n                    cell.spanAbove = true;\n\n                    let newSelectedRow = mergingRowIndex;\n\n                    while (table.rows[newSelectedRow]?.cells[colIndex]?.spanAbove) {\n                        delete table.rows[newSelectedRow].cells[colIndex].cachedElement;\n                        delete table.rows[newSelectedRow].cachedElement;\n                        newSelectedRow--;\n                    }\n\n                    if (table.rows[newSelectedRow]?.cells[colIndex]) {\n                        table.rows[newSelectedRow].cells[colIndex].isSelected = true;\n\n                        delete table.rows[newSelectedRow].cells[colIndex].cachedElement;\n                        delete table.rows[newSelectedRow].cachedElement;\n                    }\n\n                    delete cell.cachedElement;\n                }\n            }\n        }\n    }\n}\n","import { addBlock, addSegment, createBr, createParagraph } from 'roosterjs-content-model-dom';\nimport { arrayPush } from 'roosterjs-editor-dom';\nimport type {\n    ContentModelSegment,\n    ContentModelSegmentFormat,\n    ContentModelTable,\n    ContentModelTableCell,\n} from 'roosterjs-content-model-types';\n\nconst MIN_HEIGHT = 22;\n\n/**\n * @internal\n */\nexport function normalizeTable(\n    table: ContentModelTable,\n    defaultSegmentFormat?: ContentModelSegmentFormat\n) {\n    // Always collapse border and use border box for table in roosterjs to make layout simpler\n    const format = table.format;\n\n    if (!format.borderCollapse || !format.useBorderBox) {\n        format.borderCollapse = true;\n        format.useBorderBox = true;\n    }\n\n    // Make sure all first cells are not spanned\n    // Make sure all inner cells are not header\n    // Make sure all cells have content and width\n    table.rows.forEach((row, rowIndex) => {\n        row.cells.forEach((cell, colIndex) => {\n            if (cell.blocks.length == 0) {\n                const format = cell.format.textColor\n                    ? {\n                          ...defaultSegmentFormat,\n                          textColor: cell.format.textColor,\n                      }\n                    : defaultSegmentFormat;\n                addBlock(\n                    cell,\n                    createParagraph(undefined /*isImplicit*/, undefined /*blockFormat*/, format)\n                );\n                addSegment(cell, createBr(format));\n            }\n\n            if (rowIndex == 0) {\n                cell.spanAbove = false;\n            } else if (rowIndex > 0 && cell.isHeader) {\n                cell.isHeader = false;\n                delete cell.cachedElement;\n            }\n\n            if (colIndex == 0) {\n                cell.spanLeft = false;\n            }\n\n            cell.format.useBorderBox = true;\n        });\n\n        // Make sure table has correct width and height array\n        if (row.height < MIN_HEIGHT) {\n            row.height = MIN_HEIGHT;\n        }\n    });\n\n    const columns = Math.max(...table.rows.map(row => row.cells.length));\n\n    for (let i = 0; i < columns; i++) {\n        if (table.widths[i] === undefined) {\n            table.widths[i] = getTableCellWidth(columns);\n        }\n    }\n\n    // Move blocks from spanned cell to its main cell if any,\n    // and remove rows/columns if all cells in it are spanned\n    const colCount = table.rows[0]?.cells.length || 0;\n\n    for (let colIndex = colCount - 1; colIndex > 0; colIndex--) {\n        table.rows.forEach(row => {\n            const cell = row.cells[colIndex];\n            const leftCell = row.cells[colIndex - 1];\n            if (cell && leftCell && cell.spanLeft) {\n                tryMoveBlocks(leftCell, cell);\n            }\n        });\n\n        if (table.rows.every(row => row.cells[colIndex]?.spanLeft)) {\n            table.rows.forEach(row => row.cells.splice(colIndex, 1));\n            table.widths.splice(\n                colIndex - 1,\n                2,\n                table.widths[colIndex - 1] + table.widths[colIndex]\n            );\n        }\n    }\n\n    for (let rowIndex = table.rows.length - 1; rowIndex > 0; rowIndex--) {\n        const row = table.rows[rowIndex];\n\n        row.cells.forEach((cell, colIndex) => {\n            const aboveCell = table.rows[rowIndex - 1]?.cells[colIndex];\n            if (aboveCell && cell.spanAbove) {\n                tryMoveBlocks(aboveCell, cell);\n            }\n        });\n\n        if (row.cells.every(cell => cell.spanAbove)) {\n            table.rows[rowIndex - 1].height += row.height;\n            table.rows.splice(rowIndex, 1);\n        }\n    }\n}\n\nfunction getTableCellWidth(columns: number): number {\n    if (columns <= 4) {\n        return 120;\n    } else if (columns <= 6) {\n        return 100;\n    } else {\n        return 70;\n    }\n}\n\nfunction tryMoveBlocks(targetCell: ContentModelTableCell, sourceCell: ContentModelTableCell) {\n    const onlyHasEmptyOrBr = sourceCell.blocks.every(\n        block => block.blockType == 'Paragraph' && hasOnlyBrSegment(block.segments)\n    );\n\n    if (!onlyHasEmptyOrBr) {\n        arrayPush(targetCell.blocks, sourceCell.blocks);\n        sourceCell.blocks = [];\n    }\n}\n\nfunction hasOnlyBrSegment(segments: ContentModelSegment[]): boolean {\n    segments = segments.filter(s => s.segmentType != 'SelectionMarker');\n\n    return segments.length == 0 || (segments.length == 1 && segments[0].segmentType == 'Br');\n}\n","import { parseColor } from 'roosterjs-editor-dom';\nimport { updateTableCellMetadata } from '../../domUtils/metadata/updateTableCellMetadata';\nimport type { ContentModelTableCell } from 'roosterjs-content-model-types';\n\n// Using the HSL (hue, saturation and lightness) representation for RGB color values.\n// If the value of the lightness is less than 20, the color is dark.\n// If the value of the lightness is more than 80, the color is bright\nconst DARK_COLORS_LIGHTNESS = 20;\nconst BRIGHT_COLORS_LIGHTNESS = 80;\nconst White = '#ffffff';\nconst Black = '#000000';\n\n/**\n * @internal\n */\nexport function setTableCellBackgroundColor(\n    cell: ContentModelTableCell,\n    color: string | null | undefined,\n    isColorOverride?: boolean,\n    applyToSegments?: boolean\n) {\n    if (color) {\n        cell.format.backgroundColor = color;\n\n        if (isColorOverride) {\n            updateTableCellMetadata(cell, metadata => {\n                metadata = metadata || {};\n                metadata.bgColorOverride = true;\n                return metadata;\n            });\n        }\n\n        const lightness = calculateLightness(color);\n\n        if (lightness < DARK_COLORS_LIGHTNESS) {\n            cell.format.textColor = White;\n        } else if (lightness > BRIGHT_COLORS_LIGHTNESS) {\n            cell.format.textColor = Black;\n        } else {\n            delete cell.format.textColor;\n        }\n\n        if (applyToSegments && cell.format.textColor) {\n            cell.blocks.forEach(block => {\n                if (block.blockType == 'Paragraph') {\n                    block.segmentFormat = {\n                        ...block.segmentFormat,\n                        textColor: cell.format.textColor,\n                    };\n                    block.segments.forEach(segment => {\n                        segment.format = {\n                            ...segment.format,\n                            textColor: cell.format.textColor,\n                        };\n                    });\n                }\n            });\n        }\n    } else {\n        delete cell.format.backgroundColor;\n        delete cell.format.textColor;\n    }\n\n    delete cell.cachedElement;\n}\n\nfunction calculateLightness(color: string) {\n    const colorValues = parseColor(color);\n\n    // Use the values of r,g,b to calculate the lightness in the HSl representation\n    //First calculate the fraction of the light in each color, since in css the value of r,g,b is in the interval of [0,255], we have\n    if (colorValues) {\n        const red = colorValues[0] / 255;\n        const green = colorValues[1] / 255;\n        const blue = colorValues[2] / 255;\n\n        //Then the lightness in the HSL representation is the average between maximum fraction of r,g,b and the minimum fraction\n        return (Math.max(red, green, blue) + Math.min(red, green, blue)) * 50;\n    } else {\n        return 255;\n    }\n}\n","import { createTableCell } from 'roosterjs-content-model-dom';\nimport { getSelectedCells } from './getSelectedCells';\nimport type { ContentModelTable } from 'roosterjs-content-model-types';\n\nconst MIN_WIDTH = 30;\n\n/**\n * @internal\n */\nexport function splitTableCellHorizontally(table: ContentModelTable) {\n    const sel = getSelectedCells(table);\n\n    if (sel) {\n        for (let colIndex = sel.lastCol; colIndex >= sel.firstCol; colIndex--) {\n            if (\n                table.rows.every(\n                    (row, rowIndex) =>\n                        rowIndex < sel.firstRow ||\n                        rowIndex > sel.lastRow ||\n                        row.cells[colIndex + 1]?.spanLeft\n                )\n            ) {\n                table.rows.forEach((row, rowIndex) => {\n                    delete row.cells[colIndex].cachedElement;\n\n                    if (rowIndex >= sel.firstRow && rowIndex <= sel.lastRow) {\n                        row.cells[colIndex + 1].spanLeft = false;\n                        delete row.cells[colIndex + 1].cachedElement;\n                    }\n                });\n            } else {\n                table.rows.forEach((row, rowIndex) => {\n                    const cell = row.cells[colIndex];\n                    if (cell) {\n                        const newCell = createTableCell(\n                            cell.spanLeft,\n                            cell.spanAbove,\n                            cell.isHeader,\n                            cell.format\n                        );\n\n                        newCell.dataset = { ...cell.dataset };\n\n                        if (rowIndex < sel.firstRow || rowIndex > sel.lastRow) {\n                            newCell.spanLeft = true;\n                        } else {\n                            newCell.isSelected = cell.isSelected;\n                        }\n                        row.cells.splice(colIndex + 1, 0, newCell);\n\n                        delete row.cells[colIndex].cachedElement;\n                    }\n                });\n\n                const newWidth = Math.max(table.widths[colIndex] / 2, MIN_WIDTH);\n\n                table.widths.splice(colIndex, 1, newWidth, newWidth);\n            }\n        }\n    }\n}\n","import { createTableCell } from 'roosterjs-content-model-dom';\nimport { getSelectedCells } from './getSelectedCells';\nimport type { ContentModelTable, ContentModelTableRow } from 'roosterjs-content-model-types';\n\nconst MIN_HEIGHT = 22;\n\n/**\n * @internal\n */\nexport function splitTableCellVertically(table: ContentModelTable) {\n    const sel = getSelectedCells(table);\n\n    if (sel) {\n        for (let rowIndex = sel.lastRow; rowIndex >= sel.firstRow; rowIndex--) {\n            const row = table.rows[rowIndex];\n            const belowRow = table.rows[rowIndex + 1];\n\n            row.cells.forEach(cell => {\n                delete cell.cachedElement;\n            });\n\n            delete row.cachedElement;\n\n            if (\n                belowRow?.cells.every(\n                    (belowCell, colIndex) =>\n                        colIndex < sel.firstCol || colIndex > sel.lastCol || belowCell.spanAbove\n                )\n            ) {\n                belowRow.cells.forEach((belowCell, colIndex) => {\n                    if (colIndex >= sel.firstCol && colIndex <= sel.lastCol) {\n                        belowCell.spanAbove = false;\n                        delete belowCell.cachedElement;\n                    }\n                });\n\n                delete belowRow.cachedElement;\n            } else {\n                const newHeight = Math.max((row.height /= 2), MIN_HEIGHT);\n                const newRow: ContentModelTableRow = {\n                    format: { ...row.format },\n                    height: newHeight,\n                    cells: row.cells.map((cell, colIndex) => {\n                        const newCell = createTableCell(\n                            cell.spanLeft,\n                            cell.spanAbove,\n                            cell.isHeader,\n                            cell.format\n                        );\n\n                        newCell.dataset = { ...cell.dataset };\n\n                        if (colIndex < sel.firstCol || colIndex > sel.lastCol) {\n                            newCell.spanAbove = true;\n                        } else {\n                            newCell.isSelected = cell.isSelected;\n                        }\n\n                        return newCell;\n                    }),\n                };\n\n                row.height = newHeight;\n                table.rows.splice(rowIndex + 1, 0, newRow);\n            }\n        }\n    }\n}\n","import { formatWithContentModel } from '../utils/formatWithContentModel';\nimport { setModelAlignment } from '../../modelApi/block/setModelAlignment';\nimport type { IContentModelEditor } from '../../publicTypes/IContentModelEditor';\n\n/**\n * Set text alignment of selected paragraphs\n * @param editor The editor to set alignment\n * @param alignment Alignment value: left, center or right\n */\nexport default function setAlignment(\n    editor: IContentModelEditor,\n    alignment: 'left' | 'center' | 'right'\n) {\n    formatWithContentModel(editor, 'setAlignment', model => setModelAlignment(model, alignment));\n}\n","import { formatWithContentModel } from '../utils/formatWithContentModel';\nimport { setModelDirection } from '../../modelApi/block/setModelDirection';\nimport type { IContentModelEditor } from '../../publicTypes/IContentModelEditor';\n\n/**\n * Set text direction of selected paragraphs (Left to right or Right to left)\n * @param editor The editor to set alignment\n * @param direction Direction value: ltr (Left to right) or rtl (Right to left)\n */\nexport default function setDirection(editor: IContentModelEditor, direction: 'ltr' | 'rtl') {\n    formatWithContentModel(editor, 'setDirection', model => setModelDirection(model, direction));\n}\n","import { formatParagraphWithContentModel } from '../utils/formatParagraphWithContentModel';\nimport type { ContentModelParagraphDecorator } from 'roosterjs-content-model-types';\nimport type { IContentModelEditor } from '../../publicTypes/IContentModelEditor';\n\ntype HeadingLevelTags = 'h1' | 'h2' | 'h3' | 'h4' | 'h5' | 'h6';\n\nconst HeaderFontSizes: Record<HeadingLevelTags, string> = {\n    h1: '2em',\n    h2: '1.5em',\n    h3: '1.17em',\n    h4: '1em',\n    h5: '0.83em',\n    h6: '0.67em',\n};\n\n/**\n * Set heading level of selected paragraphs\n * @param editor The editor to set heading level to\n * @param headingLevel Level of heading, from 1 to 6. Set to 0 means set it back to a regular paragraph\n */\nexport default function setHeadingLevel(\n    editor: IContentModelEditor,\n    headingLevel: 0 | 1 | 2 | 3 | 4 | 5 | 6\n) {\n    formatParagraphWithContentModel(editor, 'setHeadingLevel', para => {\n        const tagName =\n            headingLevel > 0\n                ? (('h' + headingLevel) as HeadingLevelTags | null)\n                : getExistingHeadingTag(para.decorator);\n\n        if (headingLevel > 0) {\n            para.decorator = {\n                tagName: tagName!,\n                format: tagName\n                    ? {\n                          fontWeight: 'bold',\n                          fontSize: HeaderFontSizes[tagName],\n                      }\n                    : {},\n            };\n\n            // Remove existing formats since tags have default font size and weight\n            para.segments.forEach(segment => {\n                delete segment.format.fontSize;\n                delete segment.format.fontWeight;\n            });\n        } else if (tagName) {\n            delete para.decorator;\n        }\n    });\n}\n\nfunction getExistingHeadingTag(\n    decorator?: ContentModelParagraphDecorator\n): HeadingLevelTags | null {\n    const tag = decorator?.tagName || '';\n    const level = parseInt(tag.substring(1));\n\n    return level >= 1 && level <= 6 ? (tag as HeadingLevelTags) : null;\n}\n","import { formatWithContentModel } from '../utils/formatWithContentModel';\nimport { normalizeContentModel } from 'roosterjs-content-model-dom';\nimport { setModelIndentation } from '../../modelApi/block/setModelIndentation';\nimport type { IContentModelEditor } from '../../publicTypes/IContentModelEditor';\n\n/**\n * Indent or outdent to selected paragraphs\n * @param editor The editor to operate on\n * @param indentation Whether indent or outdent\n * @param length The length of pixel to indent/outdent @default 40\n */\nexport default function setIndentation(\n    editor: IContentModelEditor,\n    indentation: 'indent' | 'outdent',\n    length?: number\n) {\n    formatWithContentModel(\n        editor,\n        'setIndentation',\n        model => {\n            const result = setModelIndentation(model, indentation, length);\n\n            if (result) {\n                normalizeContentModel(model);\n            }\n\n            return result;\n        },\n        {\n            preservePendingFormat: true,\n        }\n    );\n}\n","import { createParagraphDecorator } from 'roosterjs-content-model-dom';\nimport { formatParagraphWithContentModel } from '../utils/formatParagraphWithContentModel';\nimport type { IContentModelEditor } from '../../publicTypes/IContentModelEditor';\n\n/**\n * Toggles the current block(s) margin properties.\n * null deletes any existing value, undefined is ignored\n * @param editor The editor to operate on\n * @param marginTop value for top margin\n * @param marginBottom value for bottom margin\n */\nexport default function setParagraphMargin(\n    editor: IContentModelEditor,\n    marginTop?: string | null,\n    marginBottom?: string | null\n) {\n    formatParagraphWithContentModel(editor, 'setParagraphMargin', para => {\n        if (!para.decorator) {\n            para.decorator = createParagraphDecorator('p');\n        }\n\n        if (marginTop) {\n            para.format.marginTop = marginTop;\n        } else if (marginTop === null) {\n            delete para.format.marginTop;\n        }\n\n        if (marginBottom) {\n            para.format.marginBottom = marginBottom;\n        } else if (marginBottom === null) {\n            delete para.format.marginBottom;\n        }\n    });\n}\n","import { formatParagraphWithContentModel } from '../utils/formatParagraphWithContentModel';\nimport type { IContentModelEditor } from '../../publicTypes/IContentModelEditor';\n\n/**\n * Sets current selected block(s) line-height property and wipes such property from child segments\n * @param editor The editor to operate on\n * @param spacing Unitless/px value to set line height\n */\nexport default function setSpacing(editor: IContentModelEditor, spacing: number | string) {\n    formatParagraphWithContentModel(editor, 'setSpacing', paragraph => {\n        paragraph.format.lineHeight = spacing.toString();\n        paragraph.segments.forEach(segment => {\n            if (segment.format.lineHeight) {\n                delete segment.format.lineHeight;\n            }\n        });\n    });\n}\n","import { formatWithContentModel } from '../utils/formatWithContentModel';\nimport { toggleModelBlockQuote } from '../../modelApi/block/toggleModelBlockQuote';\nimport type { ContentModelFormatContainerFormat } from 'roosterjs-content-model-types';\nimport type { IContentModelEditor } from '../../publicTypes/IContentModelEditor';\n\nconst DefaultQuoteFormat: ContentModelFormatContainerFormat = {\n    borderLeft: '3px solid rgb(200, 200, 200)', // TODO: Support RTL\n    textColor: 'rgb(102, 102, 102)',\n};\nconst BuildInQuoteFormat: ContentModelFormatContainerFormat = {\n    marginTop: '1em',\n    marginBottom: '1em',\n    marginLeft: '40px',\n    marginRight: '40px',\n    paddingLeft: '10px',\n};\n\n/**\n * Toggle BLOCKQUOTE state of selected paragraphs.\n * If any selected paragraph is not under a BLOCKQUOTE, wrap them into a BLOCKQUOTE.\n * Otherwise, unwrap all related BLOCKQUOTEs.\n * @param editor The editor object to toggle BLOCKQUOTE onto\n * @param quoteFormat @optional Block format for the new quote object\n */\nexport default function toggleBlockQuote(\n    editor: IContentModelEditor,\n    quoteFormat: ContentModelFormatContainerFormat = DefaultQuoteFormat\n) {\n    const fullQuoteFormat = {\n        ...BuildInQuoteFormat,\n        ...quoteFormat,\n    };\n\n    formatWithContentModel(\n        editor,\n        'toggleBlockQuote',\n        model => toggleModelBlockQuote(model, fullQuoteFormat),\n        {\n            preservePendingFormat: true,\n        }\n    );\n}\n","import { Browser, isModifierKey } from 'roosterjs-editor-dom';\nimport { ChangeSource, Keys } from 'roosterjs-editor-types';\nimport { deleteAllSegmentBefore } from '../../modelApi/edit/deleteSteps/deleteAllSegmentBefore';\nimport { DeleteResult } from '../../modelApi/edit/utils/DeleteSelectionStep';\nimport { deleteSelection } from '../../modelApi/edit/deleteSelection';\nimport { formatWithContentModel } from '../utils/formatWithContentModel';\nimport { isNodeOfType } from 'roosterjs-content-model-dom';\nimport type { DeleteSelectionStep } from '../../modelApi/edit/utils/DeleteSelectionStep';\nimport type { IContentModelEditor } from '../../publicTypes/IContentModelEditor';\nimport {\n    handleKeyboardEventResult,\n    shouldDeleteAllSegmentsBefore,\n    shouldDeleteWord,\n} from '../../editor/utils/handleKeyboardEventCommon';\nimport {\n    backwardDeleteWordSelection,\n    forwardDeleteWordSelection,\n} from '../../modelApi/edit/deleteSteps/deleteWordSelection';\nimport {\n    backwardDeleteCollapsedSelection,\n    forwardDeleteCollapsedSelection,\n} from '../../modelApi/edit/deleteSteps/deleteCollapsedSelection';\n\n/**\n * Do keyboard event handling for DELETE/BACKSPACE key\n * @param editor The Content Model Editor\n * @param rawEvent DOM keyboard event\n * @returns True if the event is handled with this function, otherwise false\n */\nexport default function keyboardDelete(\n    editor: IContentModelEditor,\n    rawEvent: KeyboardEvent\n): boolean {\n    const which = rawEvent.which;\n    const selection = editor.getDOMSelection();\n    const range = selection?.type == 'range' ? selection.range : null;\n    let isDeleted = false;\n\n    if (shouldDeleteWithContentModel(range, rawEvent)) {\n        formatWithContentModel(\n            editor,\n            which == Keys.DELETE ? 'handleDeleteKey' : 'handleBackspaceKey',\n            (model, context) => {\n                const result = deleteSelection(model, getDeleteSteps(rawEvent), context)\n                    .deleteResult;\n\n                isDeleted = result != DeleteResult.NotDeleted;\n\n                return handleKeyboardEventResult(editor, model, rawEvent, result, context);\n            },\n            {\n                rawEvent,\n                changeSource: ChangeSource.Keyboard,\n                getChangeData: () => which,\n            }\n        );\n\n        return true;\n    }\n\n    return isDeleted;\n}\n\nfunction getDeleteSteps(rawEvent: KeyboardEvent): (DeleteSelectionStep | null)[] {\n    const isForward = rawEvent.which == Keys.DELETE;\n    const deleteAllSegmentBeforeStep =\n        shouldDeleteAllSegmentsBefore(rawEvent) && !isForward ? deleteAllSegmentBefore : null;\n    const deleteWordSelection = shouldDeleteWord(rawEvent, !!Browser.isMac)\n        ? isForward\n            ? forwardDeleteWordSelection\n            : backwardDeleteWordSelection\n        : null;\n    const deleteCollapsedSelection = isForward\n        ? forwardDeleteCollapsedSelection\n        : backwardDeleteCollapsedSelection;\n    return [deleteAllSegmentBeforeStep, deleteWordSelection, deleteCollapsedSelection];\n}\n\nfunction shouldDeleteWithContentModel(range: Range | null, rawEvent: KeyboardEvent) {\n    return !(\n        range?.collapsed &&\n        isNodeOfType(range.startContainer, 'TEXT_NODE') &&\n        !isModifierKey(rawEvent) &&\n        (canDeleteBefore(rawEvent, range) || canDeleteAfter(rawEvent, range))\n    );\n}\n\nfunction canDeleteBefore(rawEvent: KeyboardEvent, range: Range) {\n    return (\n        rawEvent.which == Keys.BACKSPACE &&\n        (range.startOffset > 1 || range.startContainer.previousSibling)\n    );\n}\n\nfunction canDeleteAfter(rawEvent: KeyboardEvent, range: Range) {\n    return (\n        rawEvent.which == Keys.DELETE &&\n        (range.startOffset < (range.startContainer.nodeValue?.length ?? 0) - 1 ||\n            range.startContainer.nextSibling)\n    );\n}\n","import { ChangeSource } from 'roosterjs-editor-types';\nimport { createEntity, normalizeContentModel } from 'roosterjs-content-model-dom';\nimport { formatWithContentModel } from '../utils/formatWithContentModel';\nimport { insertEntityModel } from '../../modelApi/entity/insertEntityModel';\nimport type { ContentModelEntity, DOMSelection } from 'roosterjs-content-model-types';\nimport type { Entity } from 'roosterjs-editor-types';\nimport type { IContentModelEditor } from '../../publicTypes/IContentModelEditor';\nimport type {\n    InsertEntityOptions,\n    InsertEntityPosition,\n} from '../../publicTypes/parameter/InsertEntityOptions';\n\nconst BlockEntityTag = 'div';\nconst InlineEntityTag = 'span';\n\n/**\n * Insert an entity into editor\n * @param editor The Content Model editor\n * @param type Type of entity\n * @param isBlock True to insert a block entity, false to insert an inline entity\n * @param position Position of the entity to insert. It can be\n * Value of InsertEntityPosition: see InsertEntityPosition\n * selectionRangeEx: Use this range instead of current focus position to insert. After insert, focus will be moved to\n * the beginning of this range (when focusAfterEntity is not set to true) or after the new entity (when focusAfterEntity is set to true)\n * @param options Move options to insert. See InsertEntityOptions\n */\nexport default function insertEntity(\n    editor: IContentModelEditor,\n    type: string,\n    isBlock: boolean,\n    position: 'focus' | 'begin' | 'end' | DOMSelection,\n    options?: InsertEntityOptions\n): ContentModelEntity | null;\n\n/**\n * Insert a block entity into editor\n * @param editor The Content Model editor\n * @param type Type of entity\n * @param isBlock Must be true for a block entity\n * @param position Position of the entity to insert. It can be\n * Value of InsertEntityPosition: see InsertEntityPosition\n * selectionRangeEx: Use this range instead of current focus position to insert. After insert, focus will be moved to\n * the beginning of this range (when focusAfterEntity is not set to true) or after the new entity (when focusAfterEntity is set to true)\n * @param options Move options to insert. See InsertEntityOptions\n */\nexport default function insertEntity(\n    editor: IContentModelEditor,\n    type: string,\n    isBlock: true,\n    position: InsertEntityPosition | DOMSelection,\n    options?: InsertEntityOptions\n): ContentModelEntity | null;\n\nexport default function insertEntity(\n    editor: IContentModelEditor,\n    type: string,\n    isBlock: boolean,\n    position?: InsertEntityPosition | DOMSelection,\n    options?: InsertEntityOptions\n): ContentModelEntity | null {\n    const { contentNode, focusAfterEntity, wrapperDisplay, skipUndoSnapshot } = options || {};\n    const wrapper = editor.getDocument().createElement(isBlock ? BlockEntityTag : InlineEntityTag);\n    const display = wrapperDisplay ?? (isBlock ? undefined : 'inline-block');\n\n    wrapper.style.setProperty('display', display || null);\n\n    if (contentNode) {\n        wrapper.appendChild(contentNode);\n    }\n\n    const entityModel = createEntity(wrapper, true /*isReadonly*/, undefined /*format*/, type);\n\n    formatWithContentModel(\n        editor,\n        'insertEntity',\n        (model, context) => {\n            insertEntityModel(\n                model,\n                entityModel,\n                typeof position == 'string' ? position : 'focus',\n                isBlock,\n                focusAfterEntity,\n                context\n            );\n\n            normalizeContentModel(model);\n\n            context.skipUndoSnapshot = skipUndoSnapshot;\n            context.newEntities.push(entityModel);\n\n            return true;\n        },\n        {\n            selectionOverride: typeof position === 'object' ? position : undefined,\n            changeSource: ChangeSource.InsertEntity,\n            getChangeData: () => {\n                // TODO: Remove this entity when we have standalone editor\n                const entity: Entity = {\n                    wrapper,\n                    type,\n                    id: '',\n                    isReadonly: true,\n                };\n\n                return entity;\n            },\n        }\n    );\n\n    return entityModel;\n}\n","import { DeleteResult } from '../../modelApi/edit/utils/DeleteSelectionStep';\nimport { deleteSelection } from '../../modelApi/edit/deleteSelection';\nimport { formatWithContentModel } from '../utils/formatWithContentModel';\nimport { getPendingFormat, setPendingFormat } from '../../modelApi/format/pendingFormat';\nimport { isBlockElement, Position } from 'roosterjs-editor-dom';\nimport { isNodeOfType, normalizeContentModel } from 'roosterjs-content-model-dom';\nimport type { ContentModelSegmentFormat } from 'roosterjs-content-model-types';\nimport type { IContentModelEditor } from '../../publicTypes/IContentModelEditor';\nimport type { NodePosition } from 'roosterjs-editor-types';\n\n/**\n * @internal\n * When necessary, set default format as current pending format so it will be applied when Input event is fired\n * @param editor The Content Model Editor\n * @param defaultFormat The default segment format to apply\n */\nexport default function applyDefaultFormat(\n    editor: IContentModelEditor,\n    defaultFormat: ContentModelSegmentFormat\n) {\n    const selection = editor.getDOMSelection();\n    const range = selection?.type == 'range' ? selection.range : null;\n    const startPos = range ? Position.getStart(range) : null;\n    let node: Node | null = startPos?.node ?? null;\n\n    while (node && editor.contains(node)) {\n        if (isNodeOfType(node, 'ELEMENT_NODE') && node.getAttribute?.('style')) {\n            return;\n        } else if (isBlockElement(node)) {\n            break;\n        } else {\n            node = node.parentNode;\n        }\n    }\n\n    formatWithContentModel(editor, 'input', (model, context) => {\n        const result = deleteSelection(model, [], context);\n\n        if (result.deleteResult == DeleteResult.Range) {\n            normalizeContentModel(model);\n            editor.addUndoSnapshot();\n\n            return true;\n        } else if (\n            result.deleteResult == DeleteResult.NotDeleted &&\n            result.insertPoint &&\n            startPos\n        ) {\n            const { paragraph, path, marker } = result.insertPoint;\n            const blocks = path[0].blocks;\n            const blockCount = blocks.length;\n            const blockIndex = blocks.indexOf(paragraph);\n\n            if (\n                paragraph.isImplicit &&\n                paragraph.segments.length == 1 &&\n                paragraph.segments[0] == marker &&\n                blockCount > 0 &&\n                blockIndex == blockCount - 1\n            ) {\n                // Focus is in the last paragraph which is implicit and there is not other segments.\n                // This can happen when focus is moved after all other content under current block group.\n                // We need to check if browser will merge focus into previous paragraph by checking if\n                // previous block is block. If previous block is paragraph, browser will most likely merge\n                // the input into previous paragraph, then nothing need to do here. Otherwise we need to\n                // apply pending format since this input event will start a new real paragraph.\n                const previousBlock = blocks[blockIndex - 1];\n\n                if (previousBlock?.blockType != 'Paragraph') {\n                    internalApplyDefaultFormat(editor, defaultFormat, marker.format, startPos);\n                }\n            } else if (paragraph.segments.every(x => x.segmentType != 'Text')) {\n                internalApplyDefaultFormat(editor, defaultFormat, marker.format, startPos);\n            }\n\n            // We didn't do any change but just apply default format to pending format, so no need to write back\n            return false;\n        } else {\n            return false;\n        }\n    });\n}\n\nfunction internalApplyDefaultFormat(\n    editor: IContentModelEditor,\n    defaultFormat: ContentModelSegmentFormat,\n    currentFormat: ContentModelSegmentFormat,\n    startPos: NodePosition\n) {\n    const pendingFormat = getPendingFormat(editor) || {};\n    const newFormat: ContentModelSegmentFormat = {\n        ...defaultFormat,\n        ...pendingFormat,\n        ...currentFormat,\n    };\n\n    setPendingFormat(editor, newFormat, startPos);\n}\n","import { formatWithContentModel } from '../utils/formatWithContentModel';\nimport { getPendingFormat } from '../../modelApi/format/pendingFormat';\nimport { iterateSelections } from '../../modelApi/selection/iterateSelections';\nimport type { IContentModelEditor } from '../../publicTypes/IContentModelEditor';\nimport {\n    createText,\n    normalizeContentModel,\n    setParagraphNotImplicit,\n} from 'roosterjs-content-model-dom';\n\nconst ANSI_SPACE = '\\u0020';\nconst NON_BREAK_SPACE = '\\u00A0';\n\n/**\n * Apply pending format to the text user just input\n * @param editor The editor to get format from\n * @param data The text user just input\n */\nexport default function applyPendingFormat(editor: IContentModelEditor, data: string) {\n    const format = getPendingFormat(editor);\n\n    if (format) {\n        let isChanged = false;\n\n        formatWithContentModel(editor, 'applyPendingFormat', (model, context) => {\n            iterateSelections([model], (_, __, block, segments) => {\n                if (\n                    block?.blockType == 'Paragraph' &&\n                    segments?.length == 1 &&\n                    segments[0].segmentType == 'SelectionMarker'\n                ) {\n                    const marker = segments[0];\n                    const index = block.segments.indexOf(marker);\n                    const previousSegment = block.segments[index - 1];\n\n                    if (previousSegment?.segmentType == 'Text') {\n                        const text = previousSegment.text;\n                        const subStr = text.substr(-data.length, data.length);\n\n                        // For space, there can be &#32 (space) or &#160 (&nbsp;), we treat them as the same\n                        if (subStr == data || (data == ANSI_SPACE && subStr == NON_BREAK_SPACE)) {\n                            marker.format = { ...format };\n                            previousSegment.text = text.substring(0, text.length - data.length);\n\n                            const newText = createText(\n                                data == ANSI_SPACE ? NON_BREAK_SPACE : data,\n                                {\n                                    ...previousSegment.format,\n                                    ...format,\n                                }\n                            );\n\n                            block.segments.splice(index, 0, newText);\n                            setParagraphNotImplicit(block);\n                            isChanged = true;\n                        }\n                    }\n                }\n                return true;\n            });\n\n            if (isChanged) {\n                normalizeContentModel(model);\n                context.skipUndoSnapshot = true;\n            }\n\n            return isChanged;\n        });\n    }\n}\n","import { clearModelFormat } from '../../modelApi/common/clearModelFormat';\nimport { formatWithContentModel } from '../utils/formatWithContentModel';\nimport { normalizeContentModel } from 'roosterjs-content-model-dom';\nimport type { IContentModelEditor } from '../../publicTypes/IContentModelEditor';\nimport type {\n    ContentModelBlock,\n    ContentModelBlockGroup,\n    ContentModelSegment,\n    ContentModelTable,\n} from 'roosterjs-content-model-types';\n\n/**\n * Clear format of selection\n * @param editor The editor to clear format from\n */\nexport default function clearFormat(editor: IContentModelEditor) {\n    formatWithContentModel(editor, 'clearFormat', model => {\n        const blocksToClear: [ContentModelBlockGroup[], ContentModelBlock][] = [];\n        const segmentsToClear: ContentModelSegment[] = [];\n        const tablesToClear: [ContentModelTable, boolean][] = [];\n\n        clearModelFormat(model, blocksToClear, segmentsToClear, tablesToClear);\n\n        normalizeContentModel(model);\n\n        return blocksToClear.length > 0 || segmentsToClear.length > 0 || tablesToClear.length > 0;\n    });\n}\n","import { contains } from 'roosterjs-editor-dom';\nimport { getPendingFormat } from '../../modelApi/format/pendingFormat';\nimport { getSelectionRootNode } from '../../modelApi/selection/getSelectionRootNode';\nimport { retrieveModelFormatState } from '../../modelApi/common/retrieveModelFormatState';\nimport type { ContentModelBlockGroup, DomToModelContext } from 'roosterjs-content-model-types';\nimport type { ContentModelFormatState } from '../../publicTypes/format/formatState/ContentModelFormatState';\nimport type { IContentModelEditor } from '../../publicTypes/IContentModelEditor';\nimport {\n    getRegularSelectionOffsets,\n    handleRegularSelection,\n    isNodeOfType,\n    processChildNode,\n} from 'roosterjs-content-model-dom';\n\n/**\n * Get current format state\n * @param editor The editor to get format from\n */\nexport default function getFormatState(editor: IContentModelEditor): ContentModelFormatState {\n    const pendingFormat = getPendingFormat(editor);\n    const model = editor.createContentModel({\n        processorOverride: {\n            child: reducedModelChildProcessor,\n        },\n    });\n    const result: ContentModelFormatState = {\n        ...editor.getUndoState(),\n        isDarkMode: editor.isDarkMode(),\n        zoomScale: editor.getZoomScale(),\n    };\n\n    retrieveModelFormatState(model, pendingFormat, result);\n\n    return result;\n}\n\n/**\n * @internal\n */\ninterface FormatStateContext extends DomToModelContext {\n    /**\n     * An optional stack of parent elements to process. When provided, the child nodes of current parent element will be ignored,\n     * but use the top element in this stack instead in childProcessor.\n     */\n    nodeStack?: Node[];\n}\n\n/**\n * @internal\n * Export for test only\n * In order to get format, we can still use the regular child processor. However, to improve performance, we don't need to create\n * content model for the whole doc, instead we only need to traverse the tree path that can arrive current selected node.\n * This \"reduced\" child processor will first create a node stack that stores DOM node from root to current common ancestor node of selection,\n * then use this stack as a faked DOM tree to create a reduced content model which we can use to retrieve format state\n */\nexport function reducedModelChildProcessor(\n    group: ContentModelBlockGroup,\n    parent: ParentNode,\n    context: FormatStateContext\n) {\n    const selectionRootNode = getSelectionRootNode(context.selection);\n\n    if (selectionRootNode) {\n        if (!context.nodeStack) {\n            context.nodeStack = createNodeStack(parent, selectionRootNode);\n        }\n\n        const stackChild = context.nodeStack.pop();\n\n        if (stackChild) {\n            const [nodeStartOffset, nodeEndOffset] = getRegularSelectionOffsets(context, parent);\n\n            // If selection is not on this node, skip getting node index to save some time since we don't need it here\n            const index =\n                nodeStartOffset >= 0 || nodeEndOffset >= 0 ? getChildIndex(parent, stackChild) : -1;\n\n            if (index >= 0) {\n                handleRegularSelection(index, context, group, nodeStartOffset, nodeEndOffset);\n            }\n\n            processChildNode(group, stackChild, context);\n\n            if (index >= 0) {\n                handleRegularSelection(index + 1, context, group, nodeStartOffset, nodeEndOffset);\n            }\n        } else {\n            // No child node from node stack, that means we have reached the deepest node of selection.\n            // Now we can use default child processor to perform full sub tree scanning for content model,\n            // So that all selected node will be included.\n            context.defaultElementProcessors.child(group, parent, context);\n        }\n    }\n}\n\nfunction createNodeStack(root: Node, startNode: Node): Node[] {\n    const result: Node[] = [];\n    let node: Node | null = startNode;\n\n    while (node && contains(root, node)) {\n        if (isNodeOfType(node, 'ELEMENT_NODE') && node.tagName == 'TABLE') {\n            // For table, we can't do a reduced model creation since we need to handle their cells and indexes,\n            // so clean up whatever we already have, and just put table into the stack\n            result.splice(0, result.length, node);\n        } else {\n            result.push(node);\n        }\n\n        node = node.parentNode;\n    }\n\n    return result;\n}\n\nfunction getChildIndex(parent: ParentNode, stackChild: Node) {\n    let index = 0;\n    let child = parent.firstChild;\n\n    while (child && child != stackChild) {\n        index++;\n        child = child.nextSibling;\n    }\n    return index;\n}\n","import { adjustSegmentSelection } from '../../modelApi/selection/adjustSegmentSelection';\nimport { formatWithContentModel } from '../utils/formatWithContentModel';\nimport type { ContentModelImage } from 'roosterjs-content-model-types';\nimport type { IContentModelEditor } from '../../publicTypes/IContentModelEditor';\n\n/**\n * Adjust selection to make sure select an image if any\n * @return Content Model Image object if an image is select, or null\n */\nexport default function adjustImageSelection(\n    editor: IContentModelEditor\n): ContentModelImage | null {\n    let image: ContentModelImage | null = null;\n\n    formatWithContentModel(editor, 'adjustImageSelection', model =>\n        adjustSegmentSelection(\n            model,\n            target => {\n                if (target.isSelected && target.segmentType == 'Image') {\n                    image = target;\n                    return true;\n                } else {\n                    return false;\n                }\n            },\n            (target, ref) => target == ref\n        )\n    );\n\n    return image;\n}\n","import formatImageWithContentModel from '../utils/formatImageWithContentModel';\nimport { getMetadata, readFile } from 'roosterjs-editor-dom';\nimport type { ContentModelImage } from 'roosterjs-content-model-types';\nimport type { IContentModelEditor } from '../../publicTypes/IContentModelEditor';\n\n/**\n * Change the selected image src\n * @param editor The editor instance\n * @param file The image file\n */\nexport default function changeImage(editor: IContentModelEditor, file: File) {\n    const selection = editor.getDOMSelection();\n    readFile(file, dataUrl => {\n        if (dataUrl && !editor.isDisposed() && selection?.type === 'image') {\n            formatImageWithContentModel(\n                editor,\n                'changeImage',\n                (image: ContentModelImage) => {\n                    image.src = dataUrl;\n                    image.dataset = {};\n                    image.format.width = '';\n                    image.format.height = '';\n                    image.alt = '';\n                },\n                {\n                    image: selection.image,\n                    previousSrc: selection.image.src,\n                    newSrc: dataUrl,\n                    originalSrc: getImageSrc(selection.image),\n                }\n            );\n        }\n    });\n}\n\nconst getImageSrc = (image: HTMLImageElement) => {\n    const obj = getMetadata<{ src: string }>(image);\n    return (obj && obj.src) || '';\n};\n","import { addSegment, createContentModelDocument, createImage } from 'roosterjs-content-model-dom';\nimport { formatWithContentModel } from '../utils/formatWithContentModel';\nimport { mergeModel } from '../../modelApi/common/mergeModel';\nimport { readFile } from 'roosterjs-editor-dom';\nimport type { IContentModelEditor } from '../../publicTypes/IContentModelEditor';\n\n/**\n * Insert an image into current selected position\n * @param editor The editor to operate on\n * @param file Image Blob file or source string\n */\nexport default function insertImage(editor: IContentModelEditor, imageFileOrSrc: File | string) {\n    if (typeof imageFileOrSrc == 'string') {\n        insertImageWithSrc(editor, imageFileOrSrc);\n    } else {\n        readFile(imageFileOrSrc, dataUrl => {\n            if (dataUrl && !editor.isDisposed()) {\n                insertImageWithSrc(editor, dataUrl);\n            }\n        });\n    }\n}\n\nfunction insertImageWithSrc(editor: IContentModelEditor, src: string) {\n    formatWithContentModel(editor, 'insertImage', (model, context) => {\n        const image = createImage(src, { backgroundColor: '' });\n        const doc = createContentModelDocument();\n\n        addSegment(doc, image);\n        mergeModel(model, doc, context, {\n            mergeFormat: 'mergeAll',\n        });\n\n        return true;\n    });\n}\n","import formatImageWithContentModel from '../utils/formatImageWithContentModel';\nimport type { ContentModelImage } from 'roosterjs-content-model-types';\nimport type { IContentModelEditor } from '../../publicTypes/IContentModelEditor';\n\n/**\n * Set image alt text for all selected images at selection. If no images is contained\n * in selection, do nothing.\n * @param editor The editor instance\n * @param altText The image alt text\n */\nexport default function setImageAltText(editor: IContentModelEditor, altText: string) {\n    formatImageWithContentModel(editor, 'setImageAltText', (image: ContentModelImage) => {\n        image.alt = altText;\n    });\n}\n","import applyImageBorderFormat from '../../modelApi/image/applyImageBorderFormat';\nimport formatImageWithContentModel from '../utils/formatImageWithContentModel';\nimport type { Border } from '../../publicTypes/interface/Border';\nimport type { ContentModelImage } from 'roosterjs-content-model-types';\nimport type { IContentModelEditor } from '../../publicTypes/IContentModelEditor';\n\n/**\n * Set image border style for all selected images at selection.\n * @param editor The editor instance\n * @param border the border format object. Ex: { color: 'red', width: '10px', style: 'solid'}, if one of the value in object is undefined\n * its value will not be changed. Passing null instead of an object will remove the border\n * @param borderRadius the border radius value, if undefined, the border radius will keep the actual value\n */\nexport default function setImageBorder(\n    editor: IContentModelEditor,\n    border: Border | null,\n    borderRadius?: string\n) {\n    formatImageWithContentModel(editor, 'setImageBorder', (image: ContentModelImage) => {\n        applyImageBorderFormat(image, border, borderRadius);\n    });\n}\n","import formatImageWithContentModel from '../utils/formatImageWithContentModel';\nimport type { ContentModelImage } from 'roosterjs-content-model-types';\nimport type { IContentModelEditor } from '../../publicTypes/IContentModelEditor';\n\n/**\n * Set image box shadow for all selected images at selection.\n * @param editor The editor instance\n * @param boxShadow The image box boxShadow\n * @param margin The image margin for all sides (eg. \"4px\"), null to remove margin\n */\nexport default function setImageBoxShadow(\n    editor: IContentModelEditor,\n    boxShadow: string,\n    margin?: string | null\n) {\n    formatImageWithContentModel(editor, 'setImageBoxShadow', (image: ContentModelImage) => {\n        image.format.boxShadow = boxShadow;\n        if (margin) {\n            image.format.marginBottom = margin;\n            image.format.marginLeft = margin;\n            image.format.marginRight = margin;\n            image.format.marginTop = margin;\n        } else if (margin === null) {\n            delete image.format.marginBottom;\n            delete image.format.marginLeft;\n            delete image.format.marginRight;\n            delete image.format.marginTop;\n        }\n    });\n}\n","import getSelectedSegments from '../selection/getSelectedSegments';\nimport { adjustSegmentSelection } from '../../modelApi/selection/adjustSegmentSelection';\nimport { adjustWordSelection } from '../../modelApi/selection/adjustWordSelection';\nimport { formatWithContentModel } from '../utils/formatWithContentModel';\nimport { setSelection } from '../../modelApi/selection/setSelection';\nimport type { IContentModelEditor } from '../../publicTypes/IContentModelEditor';\n\n/**\n * Adjust selection to make sure select a hyperlink if any, or a word if original selection is collapsed\n * @return A combination of existing link display text and url if any. If there is no existing link, return selected text and null\n */\nexport default function adjustLinkSelection(editor: IContentModelEditor): [string, string | null] {\n    let text = '';\n    let url: string | null = null;\n\n    formatWithContentModel(editor, 'adjustLinkSelection', model => {\n        let changed = adjustSegmentSelection(\n            model,\n            target => !!target.isSelected && !!target.link,\n            (target, ref) => !!target.link && target.link.format.href == ref.link!.format.href\n        );\n        let segments = getSelectedSegments(model, false /*includingFormatHolder*/);\n        const firstSegment = segments[0];\n\n        if (segments.length == 1 && firstSegment.segmentType == 'SelectionMarker') {\n            segments = adjustWordSelection(model, firstSegment);\n\n            if (segments.length > 1) {\n                changed = true;\n                setSelection(model, segments[0], segments[segments.length - 1]);\n            }\n        }\n\n        text = segments.map(x => (x.segmentType == 'Text' ? x.text : '')).join('');\n        url = segments[0]?.link?.format.href || null;\n\n        return changed;\n    });\n\n    return [text, url];\n}\n","import getSelectedSegments from '../selection/getSelectedSegments';\nimport { ChangeSource } from 'roosterjs-editor-types';\nimport { formatWithContentModel } from '../utils/formatWithContentModel';\nimport { getPendingFormat } from '../../modelApi/format/pendingFormat';\nimport { HtmlSanitizer, matchLink } from 'roosterjs-editor-dom';\nimport { mergeModel } from '../../modelApi/common/mergeModel';\nimport type { ContentModelLink } from 'roosterjs-content-model-types';\nimport type { IContentModelEditor } from '../../publicTypes/IContentModelEditor';\nimport {\n    addLink,\n    addSegment,\n    createContentModelDocument,\n    createText,\n} from 'roosterjs-content-model-dom';\n\n// Regex matching Uri scheme\nconst URI_REGEX = /^[a-zA-Z]+:/i;\n// Regex matching begin of email address\nconst MAILTO_REGEX = /^[\\w.%+-]+@/i;\n// Regex matching begin of ftp, i.e. ftp.microsoft.com\nconst FTP_REGEX = /^ftp\\./i;\n\n/**\n * Insert a hyperlink at cursor.\n * When there is a selection, hyperlink will be applied to the selection,\n * otherwise a hyperlink will be inserted to the cursor position.\n * @param editor Editor object\n * @param link Link address, can be http(s), mailto, notes, file, unc, ftp, news, telnet, gopher, wais.\n * When protocol is not specified, a best matched protocol will be predicted.\n * @param anchorTitle Optional alt text of the link, will be shown when hover on the link\n * @param displayText Optional display text for the link.\n * @param target Optional display target for the link (\"_blank\"|\"_self\"|\"_parent\"|\"_top\"|\"{framename}\")\n * If specified, the display text of link will be replaced with this text.\n * If not specified and there wasn't a link, the link url will be used as display text.\n */\nexport default function insertLink(\n    editor: IContentModelEditor,\n    link: string,\n    anchorTitle?: string,\n    displayText?: string,\n    target?: string\n) {\n    let url = (checkXss(link) || '').trim();\n    if (url) {\n        const linkData = matchLink(url);\n        const linkUrl = linkData ? linkData.normalizedUrl : applyLinkPrefix(url);\n        const links: ContentModelLink[] = [];\n        let anchorNode: Node | undefined;\n\n        formatWithContentModel(\n            editor,\n            'insertLink',\n            (model, context) => {\n                const segments = getSelectedSegments(model, false /*includingFormatHolder*/);\n                const originalText = segments\n                    .map(x => (x.segmentType == 'Text' ? x.text : ''))\n                    .join('');\n                const text = displayText || originalText || '';\n\n                if (\n                    segments.some(x => x.segmentType != 'SelectionMarker') &&\n                    originalText == text\n                ) {\n                    segments.forEach(x => {\n                        const link = createLink(\n                            linkUrl,\n                            anchorTitle,\n                            target,\n                            x.segmentType == 'Text'\n                        );\n                        addLink(x, link);\n                        if (x.link) {\n                            links.push(x.link);\n                        }\n                    });\n                } else if (\n                    segments.every(x => x.segmentType == 'SelectionMarker') ||\n                    (!!text && text != originalText)\n                ) {\n                    const segment = createText(text || (linkData ? linkData.originalUrl : url), {\n                        ...(segments[0]?.format || {}),\n                        ...(getPendingFormat(editor) || {}),\n                    });\n                    const doc = createContentModelDocument();\n                    const link = createLink(linkUrl, anchorTitle, target);\n\n                    addLink(segment, link);\n                    addSegment(doc, segment);\n\n                    if (segment.link) {\n                        links.push(segment.link);\n                    }\n\n                    mergeModel(model, doc, context, {\n                        mergeFormat: 'mergeAll',\n                    });\n                }\n\n                return segments.length > 0;\n            },\n            {\n                changeSource: ChangeSource.CreateLink,\n                onNodeCreated: (modelElement, node) => {\n                    if (!anchorNode && links.indexOf(modelElement as ContentModelLink) >= 0) {\n                        anchorNode = node;\n                    }\n                },\n                getChangeData: () => anchorNode,\n            }\n        );\n    }\n}\n\nconst createLink = (\n    url: string,\n    anchorTitle?: string,\n    target?: string,\n    underline: boolean = true\n): ContentModelLink => {\n    return {\n        dataset: {},\n        format: {\n            href: url,\n            anchorTitle,\n            target,\n            underline: underline,\n        },\n    };\n};\n\n// TODO: This is copied from original code. We may need to integrate this logic into matchLink() later.\nfunction applyLinkPrefix(url: string): string {\n    if (!url) {\n        return url;\n    }\n\n    // Add link prefix per rule:\n    // (a) if the url always starts with a URI scheme, leave it as it is\n    // (b) if the url is an email address, xxx@... add mailto: prefix\n    // (c) if the url starts with ftp., add ftp:// prefix\n    // (d) rest, add http:// prefix\n    let prefix = '';\n    if (url.search(URI_REGEX) < 0) {\n        if (url.search(MAILTO_REGEX) == 0) {\n            prefix = 'mailto:';\n        } else if (url.search(FTP_REGEX) == 0) {\n            prefix = 'ftp://';\n        } else {\n            // fallback to http://\n            prefix = 'http://';\n        }\n    }\n\n    return prefix + url;\n}\n\n// TODO: This is copied from original code. However, ContentModel should be able to filter out malicious\n// attributes later, so no need to use HtmlSanitizer here\nfunction checkXss(link: string): string {\n    const sanitizer = new HtmlSanitizer();\n    const a = document.createElement('a');\n\n    a.href = link || '';\n\n    sanitizer.sanitize(a);\n    // We use getAttribute because some browsers will try to make the href property a valid link.\n    // This has unintended side effects when the link lacks a protocol.\n    return a.getAttribute('href') || '';\n}\n","import getSelectedSegments from '../selection/getSelectedSegments';\nimport { adjustSegmentSelection } from '../../modelApi/selection/adjustSegmentSelection';\nimport { formatWithContentModel } from '../utils/formatWithContentModel';\nimport type { IContentModelEditor } from '../../publicTypes/IContentModelEditor';\n\n/**\n * Remove link at selection. If no links at selection, do nothing.\n * If selection contains multiple links, all of the link styles will be removed.\n * If only part of a link is selected, the whole link style will be removed.\n * @param editor The editor instance\n */\nexport default function removeLink(editor: IContentModelEditor) {\n    formatWithContentModel(editor, 'removeLink', model => {\n        adjustSegmentSelection(\n            model,\n            target => !!target.isSelected && !!target.link,\n            (target, ref) =>\n                target.isSelected || // Expand the selection to any link that is involved. So we can remove multiple links together\n                (!!target.link && target.link.format.href == ref.link!.format.href)\n        );\n\n        const segments = getSelectedSegments(model, false /*includingFormatHolder*/);\n        let isChanged = false;\n\n        segments.forEach(segment => {\n            if (segment.link) {\n                isChanged = true;\n\n                delete segment.link;\n            }\n        });\n\n        return isChanged;\n    });\n}\n","import { formatWithContentModel } from '../utils/formatWithContentModel';\nimport { getFirstSelectedListItem } from '../../modelApi/selection/collectSelections';\nimport type { IContentModelEditor } from '../../publicTypes/IContentModelEditor';\n\n/**\n * Set start number of a list item\n * @param editor The editor to operate on\n * @param value The number to set to, must be equal or greater than 1\n */\nexport default function setListStartNumber(editor: IContentModelEditor, value: number) {\n    formatWithContentModel(editor, 'setListStartNumber', model => {\n        const listItem = getFirstSelectedListItem(model);\n        const level = listItem?.levels[listItem?.levels.length - 1];\n\n        if (level) {\n            level.format.startNumberOverride = value;\n\n            return true;\n        } else {\n            return false;\n        }\n    });\n}\n","import { findListItemsInSameThread } from '../../modelApi/list/findListItemsInSameThread';\nimport { formatWithContentModel } from '../utils/formatWithContentModel';\nimport { getFirstSelectedListItem } from '../../modelApi/selection/collectSelections';\nimport { updateListMetadata } from 'roosterjs-content-model-dom';\nimport type { IContentModelEditor } from '../../publicTypes/IContentModelEditor';\nimport type { ListMetadataFormat } from 'roosterjs-content-model-types';\n\n/**\n * Set style of list items with in same thread of current item\n * @param editor The editor to operate on\n * @param style The target list item style to set\n */\nexport default function setListStyle(editor: IContentModelEditor, style: ListMetadataFormat) {\n    formatWithContentModel(editor, 'setListStyle', model => {\n        const listItem = getFirstSelectedListItem(model);\n\n        if (listItem) {\n            const listItems = findListItemsInSameThread(model, listItem);\n            const levelIndex = listItem.levels.length - 1;\n\n            listItems.forEach(listItem => {\n                const level = listItem.levels[levelIndex];\n\n                if (level) {\n                    updateListMetadata(level, metadata => Object.assign({}, metadata, style));\n                }\n            });\n\n            return true;\n        } else {\n            return false;\n        }\n    });\n}\n","import { formatWithContentModel } from '../utils/formatWithContentModel';\nimport { setListType } from '../../modelApi/list/setListType';\nimport type { IContentModelEditor } from '../../publicTypes/IContentModelEditor';\n\n/**\n * Toggle bullet list type\n * - When there are some blocks not in bullet list, set all blocks to the given type\n * - When all blocks are already in bullet list, turn off / outdent there list type\n * @param editor The editor to operate on\n */\nexport default function toggleBullet(editor: IContentModelEditor) {\n    formatWithContentModel(editor, 'toggleBullet', model => setListType(model, 'UL'), {\n        preservePendingFormat: true,\n    });\n}\n","import { formatWithContentModel } from '../utils/formatWithContentModel';\nimport { setListType } from '../../modelApi/list/setListType';\nimport type { IContentModelEditor } from '../../publicTypes/IContentModelEditor';\n\n/**\n * Toggle numbering list type\n * - When there are some blocks not in numbering list, set all blocks to the given type\n * - When all blocks are already in numbering list, turn off / outdent there list type\n * @param editor The editor to operate on\n */\nexport default function toggleNumbering(editor: IContentModelEditor) {\n    formatWithContentModel(editor, 'toggleNumbering', model => setListType(model, 'OL'), {\n        preservePendingFormat: true,\n    });\n}\n","import { formatSegmentWithContentModel } from '../utils/formatSegmentWithContentModel';\nimport type { ContentModelSegmentFormat } from 'roosterjs-content-model-types';\nimport type { IContentModelEditor } from '../../publicTypes/IContentModelEditor';\n\n/**\n * Bulk apply segment format to all selected content. This is usually used for format painter.\n * @param editor The editor to operate on\n * @param newFormat The segment format to apply\n */\nexport default function applySegmentFormat(\n    editor: IContentModelEditor,\n    newFormat: ContentModelSegmentFormat\n) {\n    formatSegmentWithContentModel(\n        editor,\n        'applySegmentFormat',\n        format => {\n            format.backgroundColor = newFormat.backgroundColor;\n            format.fontFamily = newFormat.fontFamily;\n            format.fontSize = newFormat.fontSize;\n            format.fontWeight = newFormat.fontWeight;\n            format.italic = newFormat.italic;\n            format.strikethrough = newFormat.strikethrough;\n            format.superOrSubScriptSequence = newFormat.superOrSubScriptSequence;\n            format.textColor = newFormat.textColor;\n            format.underline = newFormat.underline;\n        },\n        undefined /* segmentHasStyleCallback*/,\n        true /*includingFormatHandler*/\n    );\n}\n","import { formatSegmentWithContentModel } from '../utils/formatSegmentWithContentModel';\nimport type { IContentModelEditor } from '../../publicTypes/IContentModelEditor';\n\n/**\n * Change the capitalization of text in the selection\n * @param editor The editor instance\n * @param capitalization The case option\n * @param language Optional parameter for language string that should comply to \"IETF BCP 47 Tags for\n * Identifying Languages\". For example: 'en' or 'en-US' for English, 'tr' for Turkish.\n * Default is the host environment’s current locale.\n */\nexport default function changeCapitalization(\n    editor: IContentModelEditor,\n    capitalization: 'sentence' | 'lowerCase' | 'upperCase' | 'capitalize',\n    language?: string\n) {\n    formatSegmentWithContentModel(editor, 'changeCapitalization', (_, __, segment) => {\n        if (segment?.segmentType == 'Text') {\n            switch (capitalization) {\n                case 'lowerCase':\n                    segment.text = segment.text.toLocaleLowerCase(language);\n                    break;\n\n                case 'upperCase':\n                    segment.text = segment.text.toLocaleUpperCase(language);\n                    break;\n\n                case 'capitalize':\n                    const wordArray = segment.text.toLocaleLowerCase(language).split(' ');\n\n                    for (let i = 0; i < wordArray.length; i++) {\n                        wordArray[i] =\n                            wordArray[i].charAt(0).toLocaleUpperCase(language) +\n                            wordArray[i].slice(1);\n                    }\n\n                    segment.text = wordArray.join(' ');\n                    break;\n\n                case 'sentence':\n                    // TODO: Add rules on punctuation for internationalization - TASK 104769\n                    const punctuationMarks = '[\\\\.\\\\!\\\\?]';\n                    // Find a match of a word character either:\n                    // - At the beginning of a string with or without preceding whitespace, for\n                    // example: '  hello world' and 'hello world' strings would both match 'h'.\n                    // - Or preceded by a punctuation mark and at least one whitespace, for\n                    // example 'yes. hello world' would match 'y' and 'h'.\n                    const regex = new RegExp('^\\\\s*\\\\w|' + punctuationMarks + '\\\\s+\\\\w', 'g');\n\n                    segment.text = segment.text\n                        .toLocaleLowerCase(language)\n                        .replace(regex, match => match.toLocaleUpperCase(language));\n                    break;\n            }\n        }\n    });\n}\n","import { formatSegmentWithContentModel } from '../utils/formatSegmentWithContentModel';\nimport { parseValueWithUnit } from 'roosterjs-content-model-dom';\nimport { setFontSizeInternal } from './setFontSize';\nimport type {\n    ContentModelParagraph,\n    ContentModelSegmentFormat,\n} from 'roosterjs-content-model-types';\nimport type { IContentModelEditor } from '../../publicTypes/IContentModelEditor';\n\n/**\n * Default font size sequence, in pt. Suggest editor UI use this sequence as your font size list,\n * So that when increase/decrease font size, the font size can match the sequence of your font size picker\n */\nconst FONT_SIZES = [8, 9, 10, 11, 12, 14, 16, 18, 20, 22, 24, 26, 28, 36, 48, 72];\nconst MIN_FONT_SIZE = 1;\nconst MAX_FONT_SIZE = 1000;\n\n/**\n * Increase or decrease font size in selection\n * @param editor The editor instance\n * @param change Whether increase or decrease font size\n * @param fontSizes A sorted font size array, in pt. Default value is FONT_SIZES\n */\nexport default function changeFontSize(\n    editor: IContentModelEditor,\n    change: 'increase' | 'decrease'\n) {\n    formatSegmentWithContentModel(\n        editor,\n        'changeFontSize',\n        (format, _, __, paragraph) => changeFontSizeInternal(change, format, paragraph),\n        undefined /* segmentHasStyleCallback*/,\n        true /*includingFormatHandler*/\n    );\n}\n\nfunction changeFontSizeInternal(\n    change: 'increase' | 'decrease',\n    format: ContentModelSegmentFormat,\n    paragraph: ContentModelParagraph | null\n) {\n    if (format.fontSize) {\n        let sizeInPt = parseValueWithUnit(format.fontSize, undefined /*element*/, 'pt');\n\n        if (sizeInPt > 0) {\n            const newSize = getNewFontSize(sizeInPt, change == 'increase' ? 1 : -1, FONT_SIZES);\n\n            setFontSizeInternal(newSize + 'pt', format, paragraph);\n        }\n    }\n}\n\nfunction getNewFontSize(pt: number, changeBase: 1 | -1, fontSizes: number[]): number {\n    pt = changeBase == 1 ? Math.floor(pt) : Math.ceil(pt);\n    let last = fontSizes[fontSizes.length - 1];\n    if (pt <= fontSizes[0]) {\n        pt = Math.max(pt + changeBase, MIN_FONT_SIZE);\n    } else if (pt > last || (pt == last && changeBase == 1)) {\n        pt = pt / 10;\n        pt = changeBase == 1 ? Math.floor(pt) : Math.ceil(pt);\n        pt = Math.min(Math.max((pt + changeBase) * 10, last), MAX_FONT_SIZE);\n    } else if (changeBase == 1) {\n        for (let i = 0; i < fontSizes.length; i++) {\n            if (pt < fontSizes[i]) {\n                pt = fontSizes[i];\n                break;\n            }\n        }\n    } else {\n        for (let i = fontSizes.length - 1; i >= 0; i--) {\n            if (pt > fontSizes[i]) {\n                pt = fontSizes[i];\n                break;\n            }\n        }\n    }\n    return pt;\n}\n","import { createSelectionMarker } from 'roosterjs-content-model-dom';\nimport { formatSegmentWithContentModel } from '../utils/formatSegmentWithContentModel';\nimport { setSelection } from '../../modelApi/selection/setSelection';\nimport type { ContentModelParagraph } from 'roosterjs-content-model-types';\nimport type { IContentModelEditor } from '../../publicTypes/IContentModelEditor';\n\n/**\n * Set background color\n * @param editor The editor to operate on\n * @param backgroundColor The color to set. Pass null to remove existing color.\n */\nexport default function setBackgroundColor(\n    editor: IContentModelEditor,\n    backgroundColor: string | null\n) {\n    let lastParagraph: ContentModelParagraph | null = null;\n    let lastSegmentIndex: number = -1;\n\n    formatSegmentWithContentModel(\n        editor,\n        'setBackgroundColor',\n        (format, _, segment, paragraph) => {\n            if (backgroundColor === null) {\n                delete format.backgroundColor;\n            } else {\n                format.backgroundColor = backgroundColor;\n            }\n\n            if (segment && paragraph && segment.segmentType != 'SelectionMarker') {\n                lastParagraph = paragraph;\n                lastSegmentIndex = lastParagraph.segments.indexOf(segment);\n            }\n        },\n        undefined /*segmentHasStyleCallback*/,\n        undefined /*includingFormatHolder*/,\n        model => {\n            if (lastParagraph && lastSegmentIndex >= 0) {\n                const marker = createSelectionMarker(\n                    lastParagraph.segments[lastSegmentIndex]?.format\n                );\n\n                lastParagraph.segments.splice(lastSegmentIndex + 1, 0, marker);\n                setSelection(model, marker, marker);\n            }\n        }\n    );\n}\n","import { formatSegmentWithContentModel } from '../utils/formatSegmentWithContentModel';\nimport type { IContentModelEditor } from '../../publicTypes/IContentModelEditor';\n\n/**\n * Set font name\n * @param editor The editor to operate on\n * @param fontName The font name to set\n */\nexport default function setFontName(editor: IContentModelEditor, fontName: string) {\n    formatSegmentWithContentModel(\n        editor,\n        'setFontName',\n        (format, _, segment) => {\n            format.fontFamily = fontName;\n\n            if (segment?.code) {\n                segment.code.format.fontFamily = fontName;\n            }\n        },\n        undefined /* segmentHasStyleCallback*/,\n        true /*includingFormatHandler*/\n    );\n}\n","import { formatSegmentWithContentModel } from '../utils/formatSegmentWithContentModel';\nimport type {\n    ContentModelParagraph,\n    ContentModelSegmentFormat,\n} from 'roosterjs-content-model-types';\nimport type { IContentModelEditor } from '../../publicTypes/IContentModelEditor';\n\n/**\n * Set font size\n * @param editor The editor to operate on\n * @param fontSize The font size to set\n */\nexport default function setFontSize(editor: IContentModelEditor, fontSize: string) {\n    formatSegmentWithContentModel(\n        editor,\n        'setFontSize',\n        (format, _, __, paragraph) => setFontSizeInternal(fontSize, format, paragraph),\n        undefined /* segmentHasStyleCallback*/,\n        true /*includingFormatHandler*/\n    );\n}\n\n/**\n * @internal\n * Internal set font function shared by setFontSize and changeFontSize\n */\nexport function setFontSizeInternal(\n    fontSize: string,\n    format: ContentModelSegmentFormat,\n    paragraph: ContentModelParagraph | null\n) {\n    format.fontSize = fontSize;\n\n    // Since we have set font size to segment, it can be smaller than the one in paragraph format, so delete font size from paragraph\n    if (paragraph?.segmentFormat?.fontSize) {\n        const size = paragraph.segmentFormat.fontSize;\n\n        paragraph.segments.forEach(segment => {\n            if (!segment.format.fontSize) {\n                segment.format.fontSize = size;\n            }\n        });\n\n        delete paragraph.segmentFormat.fontSize;\n    }\n}\n","import { formatSegmentWithContentModel } from '../utils/formatSegmentWithContentModel';\nimport type { IContentModelEditor } from '../../publicTypes/IContentModelEditor';\n\n/**\n * Set text color\n * @param editor The editor to operate on\n * @param textColor The text color to set. Pass null to remove existing color.\n */\nexport default function setTextColor(editor: IContentModelEditor, textColor: string | null) {\n    formatSegmentWithContentModel(\n        editor,\n        'setTextColor',\n        textColor === null\n            ? (format, _, segment) => {\n                  delete format.textColor;\n\n                  if (segment?.link) {\n                      delete segment.link.format.textColor;\n                  }\n              }\n            : (format, _, segment) => {\n                  format.textColor = textColor;\n\n                  if (segment?.link) {\n                      segment.link.format.textColor = textColor;\n                  }\n              },\n        undefined /* segmentHasStyleCallback*/,\n        true /*includingFormatHandler*/\n    );\n}\n","import { formatSegmentWithContentModel } from '../utils/formatSegmentWithContentModel';\nimport type { IContentModelEditor } from '../../publicTypes/IContentModelEditor';\n\n/**\n * Toggle bold style\n * @param editor The editor to operate on\n */\nexport default function toggleBold(editor: IContentModelEditor) {\n    formatSegmentWithContentModel(\n        editor,\n        'toggleBold',\n        (format, isTurningOn) => {\n            format.fontWeight = isTurningOn ? 'bold' : 'normal';\n        },\n        (format, _, paragraph) =>\n            isBold(\n                typeof format.fontWeight == 'undefined'\n                    ? paragraph?.decorator?.format.fontWeight\n                    : format.fontWeight\n            )\n    );\n}\n\n/**\n * @internal\n */\nexport function isBold(boldStyle?: string): boolean {\n    return (\n        !!boldStyle && (boldStyle == 'bold' || boldStyle == 'bolder' || parseInt(boldStyle) >= 600)\n    );\n}\n","import { addCode } from 'roosterjs-content-model-dom';\nimport { formatSegmentWithContentModel } from '../utils/formatSegmentWithContentModel';\nimport type { ContentModelCode } from 'roosterjs-content-model-types';\nimport type { IContentModelEditor } from '../../publicTypes/IContentModelEditor';\n\nconst DefaultCode: ContentModelCode = {\n    format: {\n        fontFamily: 'monospace',\n    },\n};\n\n/**\n * Toggle italic style\n * @param editor The editor to operate on\n */\nexport default function toggleCode(editor: IContentModelEditor) {\n    formatSegmentWithContentModel(\n        editor,\n        'toggleCode',\n        (_, isTurningOn, segment) => {\n            if (segment) {\n                if (isTurningOn) {\n                    addCode(segment, DefaultCode);\n                } else {\n                    delete segment.code;\n                }\n            }\n        },\n        (_, segment) => !!segment?.code\n    );\n}\n","import { formatSegmentWithContentModel } from '../utils/formatSegmentWithContentModel';\nimport type { IContentModelEditor } from '../../publicTypes/IContentModelEditor';\n\n/**\n * Toggle italic style\n * @param editor The editor to operate on\n */\nexport default function toggleItalic(editor: IContentModelEditor) {\n    formatSegmentWithContentModel(\n        editor,\n        'toggleItalic',\n        (format, isTurningOn) => {\n            format.italic = !!isTurningOn;\n        },\n        format => !!format.italic\n    );\n}\n","import { formatSegmentWithContentModel } from '../utils/formatSegmentWithContentModel';\nimport type { IContentModelEditor } from '../../publicTypes/IContentModelEditor';\n\n/**\n * Toggle strikethrough style\n * @param editor The editor to operate on\n */\nexport default function toggleStrikethrough(editor: IContentModelEditor) {\n    formatSegmentWithContentModel(\n        editor,\n        'toggleStrikethrough',\n        (format, isTurningOn) => {\n            format.strikethrough = !!isTurningOn;\n        },\n        format => !!format.strikethrough\n    );\n}\n","import { formatSegmentWithContentModel } from '../utils/formatSegmentWithContentModel';\nimport type { IContentModelEditor } from '../../publicTypes/IContentModelEditor';\n\n/**\n * Toggle subscript style\n * @param editor The editor to operate on\n */\nexport default function toggleSubscript(editor: IContentModelEditor) {\n    formatSegmentWithContentModel(\n        editor,\n        'toggleSubscript',\n        (format, isTurningOn) => {\n            format.superOrSubScriptSequence = isTurningOn ? 'sub' : '';\n        },\n        format => format.superOrSubScriptSequence?.split(' ').pop() == 'sub'\n    );\n}\n","import { formatSegmentWithContentModel } from '../utils/formatSegmentWithContentModel';\nimport type { IContentModelEditor } from '../../publicTypes/IContentModelEditor';\n\n/**\n * Toggle superscript style\n * @param editor The editor to operate on\n */\nexport default function toggleSuperscript(editor: IContentModelEditor) {\n    formatSegmentWithContentModel(\n        editor,\n        'toggleSuperscript',\n        (format, isTurningOn) => {\n            format.superOrSubScriptSequence = isTurningOn ? 'super' : '';\n        },\n        format => format.superOrSubScriptSequence?.split(' ').pop() == 'super'\n    );\n}\n","import { formatSegmentWithContentModel } from '../utils/formatSegmentWithContentModel';\nimport type { IContentModelEditor } from '../../publicTypes/IContentModelEditor';\n\n/**\n * Toggle underline style\n * @param editor The editor to operate on\n */\nexport default function toggleUnderline(editor: IContentModelEditor) {\n    formatSegmentWithContentModel(\n        editor,\n        'toggleUnderline',\n        (format, isTurningOn, segment) => {\n            format.underline = !!isTurningOn;\n\n            if (segment?.link) {\n                segment.link.format.underline = !!isTurningOn;\n            }\n        },\n        (format, segment) => !!format.underline || !!segment?.link?.format?.underline\n    );\n}\n","import { getSelectedSegmentsAndParagraphs } from '../../modelApi/selection/collectSelections';\nimport type { ContentModelDocument, ContentModelSegment } from 'roosterjs-content-model-types';\n\n/**\n * Get selected segments from a content model\n */\nexport default function getSelectedSegments(\n    model: ContentModelDocument,\n    includingFormatHolder: boolean\n): ContentModelSegment[] {\n    return getSelectedSegmentsAndParagraphs(model, includingFormatHolder).map(x => x[0]);\n}\n","import hasSelectionInBlockGroup from './hasSelectionInBlockGroup';\nimport hasSelectionInSegment from './hasSelectionInSegment';\nimport type { ContentModelBlock } from 'roosterjs-content-model-types';\n\n/**\n * Check if there is selection within the given block\n * @param block The block to check\n */\nexport default function hasSelectionInBlock(block: ContentModelBlock): boolean {\n    switch (block.blockType) {\n        case 'Paragraph':\n            return block.segments.some(hasSelectionInSegment);\n\n        case 'Table':\n            return block.rows.some(row => row.cells.some(hasSelectionInBlockGroup));\n\n        case 'BlockGroup':\n            return hasSelectionInBlockGroup(block);\n\n        case 'Divider':\n        case 'Entity':\n            return !!block.isSelected;\n\n        default:\n            return false;\n    }\n}\n","import hasSelectionInBlock from './hasSelectionInBlock';\nimport type { ContentModelBlockGroup } from 'roosterjs-content-model-types';\n\n/**\n * Check if there is selection within the given block\n * @param block The block to check\n */\nexport default function hasSelectionInBlockGroup(group: ContentModelBlockGroup): boolean {\n    if (group.blockGroupType == 'TableCell' && group.isSelected) {\n        return true;\n    }\n\n    if (group.blocks.some(hasSelectionInBlock)) {\n        return true;\n    }\n\n    return false;\n}\n","import hasSelectionInBlock from './hasSelectionInBlock';\nimport type { ContentModelSegment } from 'roosterjs-content-model-types';\n\n/**\n * Check if there is selection within the given segment\n * @param segment The segment to check\n */\nexport default function hasSelectionInSegment(segment: ContentModelSegment): boolean {\n    return (\n        segment.isSelected ||\n        (segment.segmentType == 'General' && segment.blocks.some(hasSelectionInBlock))\n    );\n}\n","import hasSelectionInBlock from '../selection/hasSelectionInBlock';\nimport { alignTable } from '../../modelApi/table/alignTable';\nimport { alignTableCell } from '../../modelApi/table/alignTableCell';\nimport { applyTableFormat } from '../../modelApi/table/applyTableFormat';\nimport { deleteTable } from '../../modelApi/table/deleteTable';\nimport { deleteTableColumn } from '../../modelApi/table/deleteTableColumn';\nimport { deleteTableRow } from '../../modelApi/table/deleteTableRow';\nimport { ensureFocusableParagraphForTable } from '../../modelApi/table/ensureFocusableParagraphForTable';\nimport { formatWithContentModel } from '../utils/formatWithContentModel';\nimport { getFirstSelectedTable } from '../../modelApi/selection/collectSelections';\nimport { insertTableColumn } from '../../modelApi/table/insertTableColumn';\nimport { insertTableRow } from '../../modelApi/table/insertTableRow';\nimport { mergeTableCells } from '../../modelApi/table/mergeTableCells';\nimport { mergeTableColumn } from '../../modelApi/table/mergeTableColumn';\nimport { mergeTableRow } from '../../modelApi/table/mergeTableRow';\nimport { normalizeTable } from '../../modelApi/table/normalizeTable';\nimport { setSelection } from '../../modelApi/selection/setSelection';\nimport { splitTableCellHorizontally } from '../../modelApi/table/splitTableCellHorizontally';\nimport { splitTableCellVertically } from '../../modelApi/table/splitTableCellVertically';\nimport { TableOperation } from 'roosterjs-editor-types';\nimport type { IContentModelEditor } from '../../publicTypes/IContentModelEditor';\nimport {\n    createSelectionMarker,\n    hasMetadata,\n    setParagraphNotImplicit,\n} from 'roosterjs-content-model-dom';\n\n/**\n * Format current focused table with the given format\n * @param editor The editor instance\n * @param operation The table operation to apply\n */\nexport default function editTable(editor: IContentModelEditor, operation: TableOperation) {\n    formatWithContentModel(editor, 'editTable', model => {\n        const [tableModel, path] = getFirstSelectedTable(model);\n\n        if (tableModel) {\n            switch (operation) {\n                case TableOperation.AlignCellLeft:\n                case TableOperation.AlignCellCenter:\n                case TableOperation.AlignCellRight:\n                    alignTableCell(tableModel, operation);\n                    break;\n                case TableOperation.AlignCellTop:\n                case TableOperation.AlignCellMiddle:\n                case TableOperation.AlignCellBottom:\n                    alignTableCell(tableModel, operation);\n                    break;\n                case TableOperation.AlignCenter:\n                case TableOperation.AlignLeft:\n                case TableOperation.AlignRight:\n                    alignTable(tableModel, operation);\n                    break;\n\n                case TableOperation.DeleteColumn:\n                    deleteTableColumn(tableModel);\n                    break;\n\n                case TableOperation.DeleteRow:\n                    deleteTableRow(tableModel);\n                    break;\n\n                case TableOperation.DeleteTable:\n                    deleteTable(tableModel);\n                    break;\n\n                case TableOperation.InsertAbove:\n                case TableOperation.InsertBelow:\n                    insertTableRow(tableModel, operation);\n                    break;\n\n                case TableOperation.InsertLeft:\n                case TableOperation.InsertRight:\n                    insertTableColumn(tableModel, operation);\n                    break;\n\n                case TableOperation.MergeAbove:\n                case TableOperation.MergeBelow:\n                    mergeTableRow(tableModel, operation);\n                    break;\n\n                case TableOperation.MergeCells:\n                    mergeTableCells(tableModel);\n                    break;\n\n                case TableOperation.MergeLeft:\n                case TableOperation.MergeRight:\n                    mergeTableColumn(tableModel, operation);\n                    break;\n\n                case TableOperation.SplitHorizontally:\n                    splitTableCellHorizontally(tableModel);\n                    break;\n\n                case TableOperation.SplitVertically:\n                    splitTableCellVertically(tableModel);\n                    break;\n            }\n\n            if (!hasSelectionInBlock(tableModel)) {\n                const paragraph = ensureFocusableParagraphForTable(model, path, tableModel);\n\n                if (paragraph) {\n                    const marker = createSelectionMarker(model.format);\n\n                    paragraph.segments.unshift(marker);\n                    setParagraphNotImplicit(paragraph);\n                    setSelection(model, marker);\n                }\n            }\n\n            normalizeTable(tableModel);\n\n            if (hasMetadata(tableModel)) {\n                applyTableFormat(tableModel, undefined /*newFormat*/, true /*keepCellShade*/);\n            }\n\n            return true;\n        } else {\n            return false;\n        }\n    });\n}\n","import { applyTableFormat } from '../../modelApi/table/applyTableFormat';\nimport { formatWithContentModel } from '../utils/formatWithContentModel';\nimport { getFirstSelectedTable } from '../../modelApi/selection/collectSelections';\nimport type { IContentModelEditor } from '../../publicTypes/IContentModelEditor';\nimport type { TableMetadataFormat } from 'roosterjs-content-model-types';\n\n/**\n * Format current focused table with the given format\n * @param editor The editor instance\n * @param format The table format to apply\n * @param keepCellShade Whether keep existing shade color when apply format if there is a manually set shade color\n */\nexport default function formatTable(\n    editor: IContentModelEditor,\n    format: TableMetadataFormat,\n    keepCellShade?: boolean\n) {\n    formatWithContentModel(editor, 'formatTable', model => {\n        const [tableModel] = getFirstSelectedTable(model);\n\n        if (tableModel) {\n            applyTableFormat(tableModel, format, keepCellShade);\n\n            return true;\n        } else {\n            return false;\n        }\n    });\n}\n","import { applyTableFormat } from '../../modelApi/table/applyTableFormat';\nimport { createContentModelDocument, createSelectionMarker } from 'roosterjs-content-model-dom';\nimport { createTableStructure } from '../../modelApi/table/createTableStructure';\nimport { deleteSelection } from '../../modelApi/edit/deleteSelection';\nimport { formatWithContentModel } from '../utils/formatWithContentModel';\nimport { getPendingFormat } from '../../modelApi/format/pendingFormat';\nimport { mergeModel } from '../../modelApi/common/mergeModel';\nimport { normalizeTable } from '../../modelApi/table/normalizeTable';\nimport { setSelection } from '../../modelApi/selection/setSelection';\nimport type { IContentModelEditor } from '../../publicTypes/IContentModelEditor';\nimport type { TableMetadataFormat } from 'roosterjs-content-model-types';\n\n/**\n * Insert table into editor at current selection\n * @param editor The editor instance\n * @param columns Number of columns in table, it also controls the default table cell width:\n * if columns &lt;= 4, width = 120px; if columns &lt;= 6, width = 100px; else width = 70px\n * @param rows Number of rows in table\n * @param format (Optional) The table format. If not passed, the default format will be applied:\n * background color: #FFF; border color: #ABABAB\n */\nexport default function insertTable(\n    editor: IContentModelEditor,\n    columns: number,\n    rows: number,\n    format?: Partial<TableMetadataFormat>\n) {\n    formatWithContentModel(editor, 'insertTable', (model, context) => {\n        const insertPosition = deleteSelection(model, [], context).insertPoint;\n\n        if (insertPosition) {\n            const doc = createContentModelDocument();\n            const table = createTableStructure(doc, columns, rows);\n\n            normalizeTable(table, getPendingFormat(editor) || insertPosition.marker.format);\n            // Assign default vertical align\n            format = format || { verticalAlign: 'top' };\n            applyTableFormat(table, format);\n            mergeModel(model, doc, context, {\n                insertPosition,\n                mergeFormat: 'mergeAll',\n            });\n\n            const firstBlock = table.rows[0]?.cells[0]?.blocks[0];\n\n            if (firstBlock?.blockType == 'Paragraph') {\n                const marker = createSelectionMarker(firstBlock.segments[0]?.format);\n                firstBlock.segments.unshift(marker);\n                setSelection(model, marker);\n            }\n\n            return true;\n        } else {\n            return false;\n        }\n    });\n}\n","import hasSelectionInBlockGroup from '../selection/hasSelectionInBlockGroup';\nimport { formatWithContentModel } from '../utils/formatWithContentModel';\nimport { getFirstSelectedTable } from '../../modelApi/selection/collectSelections';\nimport { normalizeTable } from '../../modelApi/table/normalizeTable';\nimport { setTableCellBackgroundColor } from '../../modelApi/table/setTableCellBackgroundColor';\nimport type { IContentModelEditor } from '../../publicTypes/IContentModelEditor';\n\n/**\n * Set table cell shade color\n * @param editor The editor instance\n * @param color The color to set. Pass null to remove existing shade color\n */\nexport default function setTableCellShade(editor: IContentModelEditor, color: string | null) {\n    formatWithContentModel(editor, 'setTableCellShade', model => {\n        const [table] = getFirstSelectedTable(model);\n\n        if (table) {\n            normalizeTable(table);\n\n            table.rows.forEach(row =>\n                row.cells.forEach(cell => {\n                    if (hasSelectionInBlockGroup(cell)) {\n                        setTableCellBackgroundColor(cell, color, true /*isColorOverride*/);\n                    }\n                })\n            );\n\n            return true;\n        } else {\n            return false;\n        }\n    });\n}\n","import { formatSegmentWithContentModel } from './formatSegmentWithContentModel';\nimport { PluginEventType } from 'roosterjs-editor-types';\nimport type { ContentModelImage } from 'roosterjs-content-model-types';\nimport type { EditImageEventData } from 'roosterjs-editor-types';\nimport type { IContentModelEditor } from '../../publicTypes/IContentModelEditor';\n\n/**\n * @internal\n */\nexport default function formatImageWithContentModel(\n    editor: IContentModelEditor,\n    apiName: string,\n    callback: (segment: ContentModelImage) => void,\n    eventChangeData?: EditImageEventData\n) {\n    formatSegmentWithContentModel(\n        editor,\n        apiName,\n        (_, __, segment) => {\n            if (segment?.segmentType == 'Image') {\n                callback(segment);\n                if (eventChangeData) {\n                    editor.triggerPluginEvent(PluginEventType.EditImage, eventChangeData);\n                }\n            }\n        },\n        undefined /** segmentHasStyleCallback **/,\n        undefined /** includingFormatHolder */\n    );\n}\n","import { formatWithContentModel } from './formatWithContentModel';\nimport { getSelectedParagraphs } from '../../modelApi/selection/collectSelections';\nimport type { ContentModelParagraph } from 'roosterjs-content-model-types';\nimport type { IContentModelEditor } from '../../publicTypes/IContentModelEditor';\n\n/**\n * @internal\n */\nexport function formatParagraphWithContentModel(\n    editor: IContentModelEditor,\n    apiName: string,\n    setStyleCallback: (paragraph: ContentModelParagraph) => void\n) {\n    formatWithContentModel(\n        editor,\n        apiName,\n        model => {\n            const paragraphs = getSelectedParagraphs(model);\n\n            paragraphs.forEach(setStyleCallback);\n\n            return paragraphs.length > 0;\n        },\n        {\n            preservePendingFormat: true,\n        }\n    );\n}\n","import { adjustWordSelection } from '../../modelApi/selection/adjustWordSelection';\nimport { formatWithContentModel } from './formatWithContentModel';\nimport { getPendingFormat, setPendingFormat } from '../../modelApi/format/pendingFormat';\nimport { getSelectedSegmentsAndParagraphs } from '../../modelApi/selection/collectSelections';\nimport type { IContentModelEditor } from '../../publicTypes/IContentModelEditor';\nimport type {\n    ContentModelDocument,\n    ContentModelParagraph,\n    ContentModelSegment,\n    ContentModelSegmentFormat,\n} from 'roosterjs-content-model-types';\n/**\n * @internal\n */\nexport function formatSegmentWithContentModel(\n    editor: IContentModelEditor,\n    apiName: string,\n    toggleStyleCallback: (\n        format: ContentModelSegmentFormat,\n        isTuringOn: boolean,\n        segment: ContentModelSegment | null,\n        paragraph: ContentModelParagraph | null\n    ) => void,\n    segmentHasStyleCallback?: (\n        format: ContentModelSegmentFormat,\n        segment: ContentModelSegment | null,\n        paragraph: ContentModelParagraph | null\n    ) => boolean,\n    includingFormatHolder?: boolean,\n    afterFormatCallback?: (model: ContentModelDocument) => void\n) {\n    formatWithContentModel(editor, apiName, model => {\n        let segmentAndParagraphs = getSelectedSegmentsAndParagraphs(model, !!includingFormatHolder);\n        const pendingFormat = getPendingFormat(editor);\n        let isCollapsedSelection =\n            segmentAndParagraphs.length == 1 &&\n            segmentAndParagraphs[0][0].segmentType == 'SelectionMarker';\n\n        if (isCollapsedSelection) {\n            const para = segmentAndParagraphs[0][1];\n\n            segmentAndParagraphs = adjustWordSelection(model, segmentAndParagraphs[0][0]).map(x => [\n                x,\n                para,\n            ]);\n\n            if (segmentAndParagraphs.length > 1) {\n                isCollapsedSelection = false;\n            }\n        }\n\n        const formatsAndSegments: [\n            ContentModelSegmentFormat,\n            ContentModelSegment | null,\n            ContentModelParagraph | null\n        ][] = pendingFormat\n            ? [[pendingFormat, null, null]]\n            : segmentAndParagraphs.map(item => [item[0].format, item[0], item[1]]);\n\n        const isTurningOff = segmentHasStyleCallback\n            ? formatsAndSegments.every(([format, segment, paragraph]) =>\n                  segmentHasStyleCallback(format, segment, paragraph)\n              )\n            : false;\n\n        formatsAndSegments.forEach(([format, segment, paragraph]) =>\n            toggleStyleCallback(format, !isTurningOff, segment, paragraph)\n        );\n\n        afterFormatCallback?.(model);\n\n        if (!pendingFormat && isCollapsedSelection) {\n            const pos = editor.getFocusedPosition();\n\n            if (pos) {\n                setPendingFormat(editor, segmentAndParagraphs[0][0].format, pos);\n            }\n        }\n\n        if (isCollapsedSelection) {\n            editor.focus();\n            return false;\n        } else {\n            return formatsAndSegments.length > 0;\n        }\n    });\n}\n","import { ChangeSource, PluginEventType } from 'roosterjs-editor-types';\nimport { getPendingFormat, setPendingFormat } from '../../modelApi/format/pendingFormat';\nimport type { Entity } from 'roosterjs-editor-types';\nimport type { ContentModelContentChangedEventData } from '../../publicTypes/event/ContentModelContentChangedEvent';\nimport type { IContentModelEditor } from '../../publicTypes/IContentModelEditor';\nimport type {\n    ContentModelFormatter,\n    FormatWithContentModelContext,\n    FormatWithContentModelOptions,\n} from '../../publicTypes/parameter/FormatWithContentModelContext';\nimport type { DOMSelection } from 'roosterjs-content-model-types';\n\n/**\n * The general API to do format change with Content Model\n * It will grab a Content Model for current editor content, and invoke a callback function\n * to do format change. Then according to the return value, write back the modified content model into editor.\n * If there is cached model, it will be used and updated.\n * @param editor Content Model editor\n * @param apiName Name of the format API\n * @param formatter Formatter function, see ContentModelFormatter\n * @param options More options, see FormatWithContentModelOptions\n */\nexport function formatWithContentModel(\n    editor: IContentModelEditor,\n    apiName: string,\n    formatter: ContentModelFormatter,\n    options?: FormatWithContentModelOptions\n) {\n    const {\n        onNodeCreated,\n        preservePendingFormat,\n        getChangeData,\n        changeSource,\n        rawEvent,\n        selectionOverride,\n    } = options || {};\n\n    editor.focus();\n\n    const model = editor.createContentModel(undefined /*option*/, selectionOverride);\n    const context: FormatWithContentModelContext = {\n        newEntities: [],\n        deletedEntities: [],\n        rawEvent,\n    };\n    let selection: DOMSelection | undefined;\n\n    if (formatter(model, context)) {\n        const writeBack = () => {\n            handleNewEntities(editor, context);\n            handleDeletedEntities(editor, context);\n\n            selection =\n                editor.setContentModel(model, undefined /*options*/, onNodeCreated) || undefined;\n\n            if (preservePendingFormat) {\n                const pendingFormat = getPendingFormat(editor);\n                const pos = editor.getFocusedPosition();\n\n                if (pendingFormat && pos) {\n                    setPendingFormat(editor, pendingFormat, pos);\n                }\n            }\n        };\n\n        if (context.skipUndoSnapshot) {\n            writeBack();\n        } else {\n            editor.addUndoSnapshot(\n                writeBack,\n                undefined /*changeSource, passing undefined here to avoid triggering ContentChangedEvent. We will trigger it using it with Content Model below */,\n                false /*canUndoByBackspace*/,\n                {\n                    formatApiName: apiName,\n                }\n            );\n        }\n\n        const eventData: ContentModelContentChangedEventData = {\n            contentModel: model,\n            selection: selection,\n            source: changeSource || ChangeSource.Format,\n            data: getChangeData?.(),\n            additionalData: {\n                formatApiName: apiName,\n            },\n        };\n        editor.triggerPluginEvent(PluginEventType.ContentChanged, eventData);\n    }\n}\n\nfunction handleNewEntities(editor: IContentModelEditor, context: FormatWithContentModelContext) {\n    // TODO: Ideally we can trigger NewEntity event here. But to be compatible with original editor code, we don't do it here for now.\n    // Once Content Model Editor can be standalone, we can change this behavior to move triggering NewEntity event code\n    // from EntityPlugin to here\n\n    if (editor.isDarkMode()) {\n        context.newEntities.forEach(entity => {\n            editor.transformToDarkColor(entity.wrapper);\n        });\n    }\n}\n\nfunction handleDeletedEntities(\n    editor: IContentModelEditor,\n    context: FormatWithContentModelContext\n) {\n    context.deletedEntities.forEach(\n        ({\n            entity: {\n                wrapper,\n                entityFormat: { id, entityType, isReadonly },\n            },\n            operation,\n        }) => {\n            if (id && entityType) {\n                // TODO: Revisit this entity parameter for standalone editor, we may just directly pass ContentModelEntity object instead\n                const entity: Entity = {\n                    id,\n                    type: entityType,\n                    isReadonly: !!isReadonly,\n                    wrapper,\n                };\n                editor.triggerPluginEvent(PluginEventType.EntityOperation, {\n                    entity,\n                    operation,\n                    rawEvent: context.rawEvent,\n                });\n            }\n        }\n    );\n}\n","import getSelectedSegments from '../selection/getSelectedSegments';\nimport { ChangeSource, GetContentMode, PasteType, PluginEventType } from 'roosterjs-editor-types';\nimport { formatWithContentModel } from './formatWithContentModel';\nimport { mergeModel } from '../../modelApi/common/mergeModel';\nimport type {\n    ContentModelDocument,\n    ContentModelSegmentFormat,\n} from 'roosterjs-content-model-types';\nimport type { FormatWithContentModelContext } from '../../publicTypes/parameter/FormatWithContentModelContext';\nimport type { IContentModelEditor } from '../../publicTypes/IContentModelEditor';\nimport type { NodePosition, ClipboardData } from 'roosterjs-editor-types';\nimport {\n    applySegmentFormatToElement,\n    createDomToModelContext,\n    domToContentModel,\n} from 'roosterjs-content-model-dom';\nimport type { ContentModelBeforePasteEventData } from '../../publicTypes/event/ContentModelBeforePasteEvent';\nimport type ContentModelBeforePasteEvent from '../../publicTypes/event/ContentModelBeforePasteEvent';\nimport {\n    createDefaultHtmlSanitizerOptions,\n    getPasteType,\n    handleImagePaste,\n    handleTextPaste,\n    moveChildNodes,\n    retrieveMetadataFromClipboard,\n    sanitizePasteContent,\n} from 'roosterjs-editor-dom';\n\n/**\n * Paste into editor using a clipboardData object\n * @param clipboardData Clipboard data retrieved from clipboard\n * @param pasteAsText Force pasting as plain text. Default value is false\n * @param applyCurrentStyle True if apply format of current selection to the pasted content,\n * false to keep original format.  Default value is false. When pasteAsText is true, this parameter is ignored\n * @param pasteAsImage: When set to true, if the clipboardData contains a imageDataUri will paste the image to the editor\n */\nexport default function paste(\n    editor: IContentModelEditor,\n    clipboardData: ClipboardData,\n    pasteAsText: boolean = false,\n    applyCurrentFormat: boolean = false,\n    pasteAsImage: boolean = false\n) {\n    if (clipboardData.snapshotBeforePaste) {\n        // Restore original content before paste a new one\n        editor.setContent(clipboardData.snapshotBeforePaste);\n    } else {\n        clipboardData.snapshotBeforePaste = editor.getContent(GetContentMode.RawHTMLWithSelection);\n    }\n\n    formatWithContentModel(\n        editor,\n        'Paste',\n        (model, context) => {\n            const eventData = createBeforePasteEventData(\n                editor,\n                clipboardData,\n                getPasteType(pasteAsText, applyCurrentFormat, pasteAsImage)\n            );\n            const currentSegment = getSelectedSegments(model, true /*includingFormatHolder*/)[0];\n            const { fontFamily, fontSize, textColor, backgroundColor, letterSpacing, lineHeight } =\n                currentSegment?.format ?? {};\n            const {\n                domToModelOption,\n                fragment,\n                customizedMerge,\n            } = triggerPluginEventAndCreatePasteFragment(\n                editor,\n                clipboardData,\n                null /* position */,\n                pasteAsText,\n                pasteAsImage,\n                eventData,\n                { fontFamily, fontSize, textColor, backgroundColor, letterSpacing, lineHeight }\n            );\n\n            const pasteModel = domToContentModel(\n                fragment,\n                createDomToModelContext(undefined /*editorContext*/, domToModelOption)\n            );\n\n            mergePasteContent(model, context, pasteModel, applyCurrentFormat, customizedMerge);\n\n            return true;\n        },\n\n        {\n            changeSource: ChangeSource.Paste,\n            getChangeData: () => clipboardData,\n        }\n    );\n}\n\n/**\n * @internal\n * Export only for unit test\n */\nexport function mergePasteContent(\n    model: ContentModelDocument,\n    context: FormatWithContentModelContext,\n    pasteModel: ContentModelDocument,\n    applyCurrentFormat: boolean,\n    customizedMerge:\n        | undefined\n        | ((source: ContentModelDocument, target: ContentModelDocument) => void)\n) {\n    if (customizedMerge) {\n        customizedMerge(model, pasteModel);\n    } else {\n        mergeModel(model, pasteModel, context, {\n            mergeFormat: applyCurrentFormat ? 'keepSourceEmphasisFormat' : 'none',\n            mergeTable: shouldMergeTable(pasteModel),\n        });\n    }\n}\n\nfunction shouldMergeTable(pasteModel: ContentModelDocument): boolean | undefined {\n    // If model contains a table and a paragraph element after the table with a single BR segment, remove the Paragraph after the table\n    if (\n        pasteModel.blocks.length == 2 &&\n        pasteModel.blocks[0].blockType === 'Table' &&\n        pasteModel.blocks[1].blockType === 'Paragraph' &&\n        pasteModel.blocks[1].segments.length === 1 &&\n        pasteModel.blocks[1].segments[0].segmentType === 'Br'\n    ) {\n        pasteModel.blocks.splice(1);\n    }\n    // Only merge table when the document contain a single table.\n    return pasteModel.blocks.length === 1 && pasteModel.blocks[0].blockType === 'Table';\n}\n\nfunction createBeforePasteEventData(\n    editor: IContentModelEditor,\n    clipboardData: ClipboardData,\n    pasteType: PasteType\n): ContentModelBeforePasteEventData {\n    const options = createDefaultHtmlSanitizerOptions();\n\n    // Remove \"caret-color\" style generated by Safari to make sure caret shows in right color after paste\n    options.cssStyleCallbacks['caret-color'] = () => false;\n\n    return {\n        clipboardData,\n        fragment: editor.getDocument().createDocumentFragment(),\n        sanitizingOption: options,\n        htmlBefore: '',\n        htmlAfter: '',\n        htmlAttributes: {},\n        domToModelOption: {},\n        pasteType,\n    };\n}\n\n/**\n * This function is used to create a BeforePasteEvent object after trigger the event, so other plugins can modify the event object\n * This function will also create a DocumentFragment for paste.\n */\nfunction triggerPluginEventAndCreatePasteFragment(\n    editor: IContentModelEditor,\n    clipboardData: ClipboardData,\n    position: NodePosition | null,\n    pasteAsText: boolean,\n    pasteAsImage: boolean,\n    eventData: ContentModelBeforePasteEventData,\n    currentFormat: ContentModelSegmentFormat\n): ContentModelBeforePasteEventData {\n    const event = {\n        eventType: PluginEventType.BeforePaste,\n        ...eventData,\n    } as ContentModelBeforePasteEvent;\n\n    const { fragment } = event;\n    const { rawHtml, text, imageDataUri } = clipboardData;\n    const trustedHTMLHandler = editor.getTrustedHTMLHandler();\n\n    let doc: Document | undefined = rawHtml\n        ? new DOMParser().parseFromString(trustedHTMLHandler(rawHtml), 'text/html')\n        : undefined;\n\n    // Step 2: Retrieve Metadata from Html and the Html that was copied.\n    retrieveMetadataFromClipboard(doc, event, trustedHTMLHandler);\n\n    // Step 3: Fill the BeforePasteEvent object, especially the fragment for paste\n    if ((pasteAsImage && imageDataUri) || (!pasteAsText && !text && imageDataUri)) {\n        // Paste image\n        handleImagePaste(imageDataUri, fragment);\n    } else if (!pasteAsText && rawHtml && doc ? doc.body : false) {\n        moveChildNodes(fragment, doc?.body);\n    } else if (text) {\n        // Paste text\n        handleTextPaste(text, position, fragment);\n    }\n\n    const formatContainer = fragment.ownerDocument.createElement('span');\n\n    moveChildNodes(formatContainer, fragment);\n    fragment.appendChild(formatContainer);\n\n    applySegmentFormatToElement(formatContainer, currentFormat);\n\n    let pluginEvent: ContentModelBeforePasteEvent = event;\n    // Step 4: Trigger BeforePasteEvent so that plugins can do proper change before paste, when the type of paste is different than Plain Text\n    if (event.pasteType !== PasteType.AsPlainText) {\n        pluginEvent = editor.triggerPluginEvent(\n            PluginEventType.BeforePaste,\n            event,\n            true /* broadcast */\n        ) as ContentModelBeforePasteEvent;\n    }\n\n    // Step 5. Sanitize the fragment before paste to make sure the content is safe\n    sanitizePasteContent(event, position);\n\n    return pluginEvent;\n}\n","import { ContentModelEditor, ContentModelPastePlugin } from 'roosterjs-content-model-editor';\nimport { getDarkColor } from 'roosterjs-color-utils';\nimport type { EditorPlugin } from 'roosterjs-editor-types';\nimport type {\n    ContentModelEditorOptions,\n    IContentModelEditor,\n} from 'roosterjs-content-model-editor';\n\n/**\n * Create a Content Model Editor using the given options\n * @param contentDiv The html div element needed for creating the editor\n * @param additionalPlugins The additional user defined plugins. Currently the default plugins that are already included are\n * ContentEdit, HyperLink and Paste, user don't need to add those.\n * @param initialContent The initial content to show in editor. It can't be removed by undo, user need to manually remove it if needed.\n * @returns The ContentModelEditor instance\n */\nexport function createContentModelEditor(\n    contentDiv: HTMLDivElement,\n    additionalPlugins?: EditorPlugin[],\n    initialContent?: string\n): IContentModelEditor {\n    let plugins: EditorPlugin[] = [new ContentModelPastePlugin()];\n\n    if (additionalPlugins) {\n        plugins = plugins.concat(additionalPlugins);\n    }\n\n    let options: ContentModelEditorOptions = {\n        plugins: plugins,\n        initialContent: initialContent,\n        getDarkColor: getDarkColor,\n        defaultFormat: {\n            fontFamily: 'Calibri,Arial,Helvetica,sans-serif',\n            fontSize: '11pt',\n            textColor: '#000000',\n        },\n    };\n    return new ContentModelEditor(contentDiv, options);\n}\n","export { createContentModelEditor } from './createContentModelEditor';\nexport * from 'roosterjs-content-model-types';\nexport * from 'roosterjs-content-model-dom';\nexport * from 'roosterjs-content-model-editor';\n","module.exports = roosterjs;","/******************************************************************************\nCopyright (c) Microsoft Corporation.\n\nPermission to use, copy, modify, and/or distribute this software for any\npurpose with or without fee is hereby granted.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\nPERFORMANCE OF THIS SOFTWARE.\n***************************************************************************** */\n/* global Reflect, Promise */\n\nvar extendStatics = function(d, b) {\n  extendStatics = Object.setPrototypeOf ||\n      ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n      function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n  return extendStatics(d, b);\n};\n\nexport function __extends(d, b) {\n  if (typeof b !== \"function\" && b !== null)\n      throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n  extendStatics(d, b);\n  function __() { this.constructor = d; }\n  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n}\n\nexport var __assign = function() {\n  __assign = Object.assign || function __assign(t) {\n      for (var s, i = 1, n = arguments.length; i < n; i++) {\n          s = arguments[i];\n          for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n      return t;\n  }\n  return __assign.apply(this, arguments);\n}\n\nexport function __rest(s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n      t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n      for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n          if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n              t[p[i]] = s[p[i]];\n      }\n  return t;\n}\n\nexport function __decorate(decorators, target, key, desc) {\n  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n  else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n}\n\nexport function __param(paramIndex, decorator) {\n  return function (target, key) { decorator(target, key, paramIndex); }\n}\n\nexport function __esDecorate(ctor, descriptorIn, decorators, contextIn, initializers, extraInitializers) {\n  function accept(f) { if (f !== void 0 && typeof f !== \"function\") throw new TypeError(\"Function expected\"); return f; }\n  var kind = contextIn.kind, key = kind === \"getter\" ? \"get\" : kind === \"setter\" ? \"set\" : \"value\";\n  var target = !descriptorIn && ctor ? contextIn[\"static\"] ? ctor : ctor.prototype : null;\n  var descriptor = descriptorIn || (target ? Object.getOwnPropertyDescriptor(target, contextIn.name) : {});\n  var _, done = false;\n  for (var i = decorators.length - 1; i >= 0; i--) {\n      var context = {};\n      for (var p in contextIn) context[p] = p === \"access\" ? {} : contextIn[p];\n      for (var p in contextIn.access) context.access[p] = contextIn.access[p];\n      context.addInitializer = function (f) { if (done) throw new TypeError(\"Cannot add initializers after decoration has completed\"); extraInitializers.push(accept(f || null)); };\n      var result = (0, decorators[i])(kind === \"accessor\" ? { get: descriptor.get, set: descriptor.set } : descriptor[key], context);\n      if (kind === \"accessor\") {\n          if (result === void 0) continue;\n          if (result === null || typeof result !== \"object\") throw new TypeError(\"Object expected\");\n          if (_ = accept(result.get)) descriptor.get = _;\n          if (_ = accept(result.set)) descriptor.set = _;\n          if (_ = accept(result.init)) initializers.unshift(_);\n      }\n      else if (_ = accept(result)) {\n          if (kind === \"field\") initializers.unshift(_);\n          else descriptor[key] = _;\n      }\n  }\n  if (target) Object.defineProperty(target, contextIn.name, descriptor);\n  done = true;\n};\n\nexport function __runInitializers(thisArg, initializers, value) {\n  var useValue = arguments.length > 2;\n  for (var i = 0; i < initializers.length; i++) {\n      value = useValue ? initializers[i].call(thisArg, value) : initializers[i].call(thisArg);\n  }\n  return useValue ? value : void 0;\n};\n\nexport function __propKey(x) {\n  return typeof x === \"symbol\" ? x : \"\".concat(x);\n};\n\nexport function __setFunctionName(f, name, prefix) {\n  if (typeof name === \"symbol\") name = name.description ? \"[\".concat(name.description, \"]\") : \"\";\n  return Object.defineProperty(f, \"name\", { configurable: true, value: prefix ? \"\".concat(prefix, \" \", name) : name });\n};\n\nexport function __metadata(metadataKey, metadataValue) {\n  if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\n}\n\nexport function __awaiter(thisArg, _arguments, P, generator) {\n  function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n  return new (P || (P = Promise))(function (resolve, reject) {\n      function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n      function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n      function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n      step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n}\n\nexport function __generator(thisArg, body) {\n  var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n  return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n  function verb(n) { return function (v) { return step([n, v]); }; }\n  function step(op) {\n      if (f) throw new TypeError(\"Generator is already executing.\");\n      while (g && (g = 0, op[0] && (_ = 0)), _) try {\n          if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n          if (y = 0, t) op = [op[0] & 2, t.value];\n          switch (op[0]) {\n              case 0: case 1: t = op; break;\n              case 4: _.label++; return { value: op[1], done: false };\n              case 5: _.label++; y = op[1]; op = [0]; continue;\n              case 7: op = _.ops.pop(); _.trys.pop(); continue;\n              default:\n                  if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                  if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                  if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                  if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                  if (t[2]) _.ops.pop();\n                  _.trys.pop(); continue;\n          }\n          op = body.call(thisArg, _);\n      } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n      if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n  }\n}\n\nexport var __createBinding = Object.create ? (function(o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n  if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n  }\n  Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nexport function __exportStar(m, o) {\n  for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(o, p)) __createBinding(o, m, p);\n}\n\nexport function __values(o) {\n  var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\n  if (m) return m.call(o);\n  if (o && typeof o.length === \"number\") return {\n      next: function () {\n          if (o && i >= o.length) o = void 0;\n          return { value: o && o[i++], done: !o };\n      }\n  };\n  throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n}\n\nexport function __read(o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o), r, ar = [], e;\n  try {\n      while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  }\n  catch (error) { e = { error: error }; }\n  finally {\n      try {\n          if (r && !r.done && (m = i[\"return\"])) m.call(i);\n      }\n      finally { if (e) throw e.error; }\n  }\n  return ar;\n}\n\n/** @deprecated */\nexport function __spread() {\n  for (var ar = [], i = 0; i < arguments.length; i++)\n      ar = ar.concat(__read(arguments[i]));\n  return ar;\n}\n\n/** @deprecated */\nexport function __spreadArrays() {\n  for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\n  for (var r = Array(s), k = 0, i = 0; i < il; i++)\n      for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\n          r[k] = a[j];\n  return r;\n}\n\nexport function __spreadArray(to, from, pack) {\n  if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n      if (ar || !(i in from)) {\n          if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n          ar[i] = from[i];\n      }\n  }\n  return to.concat(ar || Array.prototype.slice.call(from));\n}\n\nexport function __await(v) {\n  return this instanceof __await ? (this.v = v, this) : new __await(v);\n}\n\nexport function __asyncGenerator(thisArg, _arguments, generator) {\n  if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\n  var g = generator.apply(thisArg, _arguments || []), i, q = [];\n  return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\n  function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\n  function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\n  function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\n  function fulfill(value) { resume(\"next\", value); }\n  function reject(value) { resume(\"throw\", value); }\n  function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\n}\n\nexport function __asyncDelegator(o) {\n  var i, p;\n  return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\n  function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: false } : f ? f(v) : v; } : f; }\n}\n\nexport function __asyncValues(o) {\n  if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\n  var m = o[Symbol.asyncIterator], i;\n  return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\n  function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\n  function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\n}\n\nexport function __makeTemplateObject(cooked, raw) {\n  if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\n  return cooked;\n};\n\nvar __setModuleDefault = Object.create ? (function(o, v) {\n  Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n  o[\"default\"] = v;\n};\n\nexport function __importStar(mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n  __setModuleDefault(result, mod);\n  return result;\n}\n\nexport function __importDefault(mod) {\n  return (mod && mod.__esModule) ? mod : { default: mod };\n}\n\nexport function __classPrivateFieldGet(receiver, state, kind, f) {\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n  return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n}\n\nexport function __classPrivateFieldSet(receiver, state, value, kind, f) {\n  if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n  return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\n}\n\nexport function __classPrivateFieldIn(state, receiver) {\n  if (receiver === null || (typeof receiver !== \"object\" && typeof receiver !== \"function\")) throw new TypeError(\"Cannot use 'in' operator on non-object\");\n  return typeof state === \"function\" ? receiver === state : state.has(receiver);\n}\n\nexport default {\n  __extends,\n  __assign,\n  __rest,\n  __decorate,\n  __param,\n  __metadata,\n  __awaiter,\n  __generator,\n  __createBinding,\n  __exportStar,\n  __values,\n  __read,\n  __spread,\n  __spreadArrays,\n  __spreadArray,\n  __await,\n  __asyncGenerator,\n  __asyncDelegator,\n  __asyncValues,\n  __makeTemplateObject,\n  __importStar,\n  __importDefault,\n  __classPrivateFieldGet,\n  __classPrivateFieldSet,\n  __classPrivateFieldIn,\n};\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(2594);\n"],"names":["defaultContentModelFormatMap","a","underline","blockquote","marginTop","marginBottom","marginLeft","marginRight","code","fontFamily","h1","fontWeight","fontSize","h2","h3","h4","h5","h6","p","pre","whiteSpace","blockElement","display","defaultHTMLStyleMap","address","article","aside","b","br","center","textAlign","dd","div","dl","dt","em","fontStyle","fieldset","figcaption","figure","footer","form","header","hr","i","li","main","nav","ol","s","textDecoration","section","strike","strong","sub","verticalAlign","sup","table","boxSizing","td","th","u","ul","createDomToModelContextWithConfig","config","editorContext","Object","assign","isInSelection","blockFormat","isRootRtl","direction","segmentFormat","listFormat","levels","threadItemCounts","link","format","dataset","blockDecorator","tagName","createDomToModelConfig","options","elementProcessors","defaultProcessorMap","map","x","processorOverride","formatParsers","buildFormatParsers","formatParserOverride","additionalFormatParsers","defaultElementProcessors","defaultFormatParsers","overrides","additionalParsersArray","combinedOverrides","getObjectKeys","defaultFormatKeysPerCategory","reduce","result","key","value","formatKey","undefined","concat","parsers","linkProcessor","knownElementProcessor","brProcessor","codeProcessor","font","fontProcessor","img","imageProcessor","headingProcessor","hrProcessor","listItemProcessor","listProcessor","pProcessor","formatContainerProcessor","span","tableProcessor","generalProcessor","textProcessor","element","elementProcessor","entity","entityProcessor","child","childProcessor","delimiter","delimiterProcessor","root","context","selection","model","createContentModelDocument","defaultFormat","normalizeContentModel","SegmentDecoratorTags","group","decorator","isSegmentDecorator","indexOf","parseFormat","block","container","ContextStyles","forEach","style","paragraph","createParagraph","addBlock","createBr","isSelected","addSegment","domIndexer","onSegment","processChildNode","isNodeOfType","handleRegularSelection","index","nodeStartOffset","nodeEndOffset","addSelectionMarker","type","range","collapsed","parent","getRegularSelectionOffsets","firstChild","nextSibling","stackFormat","toLowerCase","processor","isEntityElement","contentEditable","tryGetProcessorForEntity","getDelimiterFromElement","tryGetProcessorForDelimiter","isBlockEntity","isBlockElement","segment","entityModel","createEntity","entityFormat","FontSizes","size","intSize","getAttribute","parseInt","Number","isNaN","length","textColor","segmentOnBlock","getDefaultStyle","formatContainer","createFormatContainer","zeroFontSize","blocks","blockType","isImplicit","shouldFallbackToParagraph","setParagraphNotImplicit","generalBlockProcessor","createGeneralBlock","isSelectedBefore","generalSegmentProcessor","createGeneralSegment","addDecorators","createParagraphDecorator","blockProcessor","divider","createDivider","imageFormat","image","createImage","src","alt","title","isSelectedAsImageSelection","FormatContainerTriggerStyles","ByPassFormatContainerTags","isBlock","defaultStyle","bgcolor","getPropertyValue","some","shouldUseFormatContainer","href","segmentUnderLink","hasAttribute","listParent","listItem","createListItem","listItemElement","push","currentBlocks","lastItem","level","createListLevel","listLevel","updateListMetadata","metadata","listLevelMetadataFormatHandler","parse","orderedStyleType","unorderedStyleType","originalListParent","pop","calcSizes","positions","lastPos","tableElement","createTable","rows","tableSelection","hasTableSelection","allowCacheElement","cachedElement","onTable","tableBorder","columnPositions","rowPositions","zoomScale","row","tr","tableRow","tbody","parentNode","isElementOfType","parentElement","parentTag","sourceCol","targetCol","cells","hasSelectionBeforeCell","colEnd","colSpan","rowEnd","rowSpan","needCalcWidth","needCalcHeight","rect","getBoundingClientRect","width","height","segmentOnTableCell","cellFormat","tableCell","hasTd","cell","createTableCell","spannedRow","hasSelectionAfterCell","firstRow","lastRow","firstColumn","lastColumn","col","widths","heights","textNode","txt","nodeValue","txtStartOffset","txtEndOffset","segments","ensureParagraph","subText","substring","addTextSegment","filter","WhiteSpaceValuesNeedToHandle","text","textModel","hasSpacesOnly","createText","marker","createSelectionMarker","f1","f2","keys1","keys2","every","tag","currentContainer","startContainer","startOffset","endContainer","endOffset","BLOCK_DISPLAY_STYLES","parser","SkippedStylesForBlock","SkippedStylesForTable","stackFormatInternal","processType","callback","linkFormat","codeFormat","decoratorFormat","stackLinkInternal","stackCodeInternal","ENTITY_INFO_NAME","ENTITY_TYPE_PREFIX","ENTITY_ID_PREFIX","ENTITY_READONLY_PREFIX","node","classList","contains","className","entityType","id","isReadonly","isFakeEntity","obj","keys","toLocaleLowerCase","expectedType","nodeType","Node","ListStyleDefinitionMetadata","createObjectDefinition","createNumberDefinition","list","updateMetadata","EditingInfoDatasetName","definition","metadataString","JSON","validate","stringify","collection","slice","call","directionFormatHandler","_","dir","apply","displayFormatHandler","htmlAlignFormatHandler","htmlAlign","calcAlign","setAttribute","ResultMap","lineHeightFormatHandler","lineHeight","MarginKeys","marginFormatHandler","parseValueWithUnit","implicitFormat","PaddingKeys","paddingFormatHandler","textAlignFormatHandler","flexDirection","alignSelf","whiteSpaceFormatHandler","backgroundColorFormatHandler","backgroundColor","getColor","darkColorHandler","isDarkMode","setColor","borderBoxFormatHandler","useBorderBox","BorderKeys","borderFormatHandler","boxShadowFormatHandler","boxShadow","datasetFormatHandler","floatFormatHandler","float","idFormatHandler","PercentageRegex","tryParseSize","attrName","attrValue","test","sizeFormatHandler","maxWidth","maxHeight","minWidth","minHeight","verticalAlignFormatHandler","wordBreakFormatHandler","wordBreak","defaultFormatHandlerMap","bold","boldFormatHandler","border","borderBox","fontFamilyFormatHandler","fontSizeFormatHandler","entityFormatHandler","italic","italicFormatHandler","letterSpacing","letterSpacingFormatHandler","linkFormatHandler","listItemThread","listItemThreadFormatHandler","listLevelThread","listLevelThreadFormatHandler","listStylePosition","listStylePositionFormatHandler","margin","padding","strikeFormatHandler","superOrSubScript","superOrSubScriptFormatHandler","tableLayout","tableLayoutFormatHandler","tableSpacing","tableSpacingFormatHandler","textColorFormatHandler","textColorOnTableCell","textColorOnTableCellFormatHandler","underlineFormatHandler","styleBasedSegmentFormats","elementBasedSegmentFormats","sharedBlockFormats","sharedContainerFormats","styleBasedSegment","elementBasedSegment","tableCellBorder","defaultFormatAppliers","isEntity","name","parseEntityClassName","isContentEditable","generateEntityClassNames","removeAttribute","OrderedMapPlaceholderRegex","DefaultOrderedListStyles","DefaultUnorderedListStyles","CharCodeOfA","RomanValues","M","CM","D","CD","C","XC","L","XL","X","IX","V","IV","I","getOrderedListStyleValue","template","listNumber","replace","match","subStr","convertDecimalsToAlpha","convertDecimalsToRoman","decimal","isLowerCase","alpha","String","fromCharCode","Math","floor","romanValue","timesRomanCharAppear","repeat","listItemMetadataFormatHandler","depth","nodeStack","listStyleType","OrderedMap","UnorderedMap","isLiUnderOl","defaultStyles","displayForDummyItem","splice","startNumberOverride","OLTypeToStyleMap","A","getKeyFromValue","listStyle","listType","start","startNumber","blockFontWeight","ownerDocument","createElement","moveChildNodes","appendChild","isSuperOrSubScript","contextFont","knownFontSize","KnownFontSizes","endsWith","existingFontSize","round","normalizeFontSize","small","medium","large","target","rel","anchorId","relationship","anchorTitle","anchorClass","strikethrough","superOrSubScriptSequence","split","join","trim","reverse","wrapper","color","implicitColor","BorderCollapsed","borderCollapse","borderSpacing","DeprecatedColors","isBackground","darkColor","findLightColorFromDarkColor","tryGetFontColor","parseColorValue","lightModeColor","effectiveColor","registerColor","ltr","rtl","end","initial","justify","align","MarginValueRegex","getFontSize","currentSizeOrElement","styleInPt","defaultView","getComputedStyle","ptToPx","parseFloat","pt","currentSizePxOrElement","resultUnit","px","exec","numStr","unit","num","domToContentModel","contentModelToDom","get","areSameFormats","hasMetadata","default","addCode","addLink","isGeneralSegment","unwrapBlock","isWhiteSpacePreserved","normalizeSingleSegment","applySegmentFormatToElement","createDomToModelContext","createModelToDomContext","createModelToDomContextWithConfig","createModelToDomConfig","newSegment","lastSegment","segmentType","applyFormat","formatAppliers","lastBlock","SPACE_TEXT_REGEX","isBlockEmpty","isBlockGroupEmpty","blockGroupType","isSegmentEmpty","isBlockGroup","isSegment","WHITESPACE_PRE_VALUES","normalizeParagraph","r","c","last","secondLast","noMarkerSegments","normalizeAllSegments","find","markerIndex","prev","next","removeEmptyLinks","j","removeEmptySegments","SPACE","NONE_BREAK_SPACE","LEADING_SPACE_REGEX","TRAILING_SPACE_REGEX","resetNormalizeSegmentContext","textSegments","ignoreLeadingSpaces","ignoreTrailingSpaces","lastInlineSegment","lastTextSegment","normalizeSegment","normalizeTextSegments","normalizeLastTextSegment","first","substr","groupToUnwrap","formatHolder","rowCount","spanLeftOrColSpan","spanAboveOrRowSpan","isHeader","spanLeft","spanAbove","calcPosition","pos","Position","childNodes","normalize","doc","onNodeCreated","modelHandlers","blockGroupChildren","startPosition","endPosition","createRange","extractSelectionRange","regularSelection","current","defaultContentModelHandlers","modelHandlerOverride","buildFormatAppliers","formatApplierOverride","additionalFormatAppliers","defaultModelHandlers","additionalAppliersArray","appliers","handleBlock","handleBlockGroupChildren","handleBr","entityBlock","handleEntityBlock","entitySegment","handleEntitySegment","generalBlock","handleGeneralBlock","generalSegment","handleGeneralSegment","handleDivider","handleImage","handleList","handleListItem","handleParagraph","handleFormatContainer","handleSegment","segmentDecorator","handleSegmentDecorator","handleTable","handleText","refNode","handlers","childBlock","removeChild","segmentNodes","handleSegmentCommon","reuseCachedElement","insertBefore","newSegments","wrap","addDelimiterForEntity","addDelimiters","after","before","PreChildFormat","cloneNode","imageModel","document","widthNum","heightNum","imageSelection","layer","stackLevel","itemLevel","editingInfo","newList","unwrap","needParagraphWrapper","formatOnWrapper","handleSegments","firstSegment","optimize","onParagraph","codeNode","tableNode","max","createTextNode","OptimizeTags","hasSameAttributes","element1","element2","attr1","attributes","attr2","removeUnnecessarySpan","mergeNode","lastChild","newNode","applier","segmentNode","containerNode","tagNameOrFormat","newFormat","BorderStyles","BorderSizeRegex","combinedBorder","v","NumberDefinition","ImageMetadataFormatDefinition","widthPx","heightPx","leftPercent","rightPercent","topPercent","bottomPercent","angleRad","createStringDefinition","naturalHeight","naturalWidth","TableCellMetadataFormatDefinition","bgColorOverride","createBooleanDefinition","vAlignOverride","NullStringDefinition","BooleanDefinition","TableFormatDefinition","topBorderColor","bottomBorderColor","verticalBorderColor","hasHeaderRow","headerRowColor","hasFirstColumn","hasBandedColumns","hasBandedRows","bgColorEven","bgColorOdd","tableBorderFormat","SPACES_REGEX","char","charCodeAt","isForward","contentDiv","createContentModelEditorCore","cacheModel","createContentModel","option","selectionOverride","core","this","getCore","api","setContentModel","getDOMSelection","setDOMSelection","EditorBase","cachedModel","cache","lifecycle","shadowEditFragment","cloneModel","includeCachedElement","createEditorContext","domToModelContext","defaultDomToModelOptions","defaultDomToModelConfig","internalCreateContentModel","cachedSelection","checkRootRtl","originalWidth","visualWidth","offsetWidth","checkZoomScale","rangeEx","getSelectionRangeEx","ranges","coordinates","firstCell","lastCell","y","getNewSelection","modelToDomContext","defaultModelToDomOptions","defaultModelToDomConfig","areAllCollapsed","select","switchShadowEdit","editorCore","isOn","getSelectionRange","fragment","createDocumentFragment","selectionPath","getSelectionPath","triggerEvent","eventType","shadowEditSelectionPath","state","editor","onNativeSelectionChange","hasFocus","updateCachedModel","getName","initialize","getDocument","addEventListener","dispose","removeEventListener","getState","onPluginEvent","event","shouldClearCache","invalidateCache","contentModel","isInShadowEdit","forceUpdate","newRangeEx","areSameRangeEx","reconcileSelection","rawEvent","defaultPrevented","which","isCharacterValue","ContentModelCachePlugin","disposer","onPaste","clipboardData","isClipboardEvent","dataTransfer","items","preventDefault","extractClipboardItems","toArray","allowedCustomPasteType","then","isDisposed","addDomEventHandler","paste","e","copy","onCutCopy","cut","isCut","pasteModel","transformToDarkColor","iterateSelections","path","tableContext","getTempDiv","newRange","tempDiv","querySelector","elementToSelect","childElementCount","selectionExToRange","triggerPluginEvent","clonedRoot","addRangeToSelection","runAsync","cleanUpAndRestoreSelection","focus","formatWithContentModel","deleteSelection","deleteResult","changeSource","getCustomData","body","handleKeyDownEvent","handledByEditFeature","ContentModelEditPlugin","hasDefaultFormat","isComposing","isInIME","checkAndApplyPendingFormat","data","clearPendingFormat","canApplyPendingFormat","ContentModelFormatPlugin","promoteToContentModelEditorCore","pluginState","cmCore","promoteCorePluginState","tablePreProcessor","promoteContentModelInfo","originalApi","promoteCoreApi","contentModelDomIndexer","copyPaste","textColors","backgroundColors","getPluginState","modifiedOptions","plugins","createContentModelCachePlugin","createContentModelFormatPlugin","createContentModelEditPlugin","corePluginOverride","typeInContainer","createEditorCore","getSelectionRootNode","shouldUseTableProcessor","unknownTagReplacement","ev","domToModelOption","sanitizingOption","getPasteSource","processPastedContentFromWordDesktop","processPastedContentWacComponents","pasteType","processPastedContentFromExcel","getTrustedHTMLHandler","additionalTagReplacements","processPastedContentFromPowerPoint","parseLink","deprecatedBorderColorParser","chainSanitizerCallback","cssStyleCallbacks","blockElementParser","LAST_TD_END_REGEX","LAST_TR_END_REGEX","LAST_TR_REGEX","LAST_TABLE_REGEX","DEFAULT_BORDER_STYLE","excelHandler","html","htmlBefore","trMatch","tableMatch","trustedHTMLHandler","DOMParser","parseFromString","Array","from","replaceChildren","borderStyle","borderBottom","borderLeft","borderRight","borderTop","setProcessor","LIST_CONTAINER_ELEMENT_CLASS_NAME","TABLE_CONTAINER","TEMP_ELEMENTS_CLASSES","CLASSES_TO_KEEP","LIST_ELEMENT_TAGS","LIST_ELEMENT_SELECTOR","wacSubSuperParser","wacElementProcessor","elementTag","matchesSelector","removeProperty","findClosestElementAncestor","shouldClearListContext","wacLiElementProcessor","lastblock","currentLevel","wacListItemParser","wacListLevelParser","paddingLeft","wacBlockParser","wacListProcessor","additionalAllowedCssClasses","isWrappedInContainer","previousElementSibling","toUpperCase","startsWith","PERCENTAGE_REGEX","removeNonValidLineHeight","parsedLineHeight","listLevelParser","wordDesktopElementProcessor","listItemElementParser","elementCallbacks","styles","getStyles","processWordList","processWordComments","MSO_COMMENT_ANCHOR_HREF_REGEX","MSO_LIST","MSO_LIST_IGNORE","startNumberOverrideParser","fakeBullet","wordKnownLevels","wordLevel","wordList","has","getFakeBulletText","isIgnoreNode","textContent","listAttribute","Map","wordListStyle","listProps","isFakeBullet","getFakeBulletTagName","newLevel","lastLevel","processAsListItem","set","entry","dColor","newValue","trimRight","SUPPORTED_PROTOCOLS","INVALID_LINKS_REGEX","url","URL","protocol","isIndexedSegment","__roosterjsContentModel","isArray","reconcileNodeSelection","offset","reconcileTextSelection","insertMarker","isAfter","formatSegment","selectable","middle","newLast","firstIndex","lastIndex","paragraphElement","previousText","item","tableRows","newSelection","oldSelection","setSelection","marker1","marker2","skipUndoSnapshot","isMac","altKey","metaKey","ctrlKey","combineBorderValue","extractBorderValues","updateImageMetadata","updateTableCellMetadata","updateTableMetadata","isNext","newPath","nextBlock","unshift","shift","para","siblingSegment","left","right","TableAlignMap","alignment","paragraphOrListItemOrTable","getOperationalBlocks","newAligment","alignTable","internalSetDirection","setProperty","paddingRight","isBlockGroupOfType","findListItemsInSameThread","indentation","paragraphOrListItem","isIndent","isRtl","originalValue","ceil","isQuote","paragraphOfQuote","blockAndParent","canMergeQuote","wrapBlockStep1","wrapBlockStep2","clearContainerFormat","containerPathIndex","getClosestAncestorBlockGroupIndex","containerIndex","blockIndex","newContainer","clearListFormat","clearBlockFormat","blocksToClear","segmentsToClear","tablesToClear","arrayPush","colIndex","rowIndex","isWholeTableSelected","clearTableCellFormat","includeListFormatHolder","isOnlySelectionMarkerSelected","adjustWordSelection","isWholeBlockSelected","defaultSegmentFormat","clearSegmentsFormat","applyTableFormat","createTablesFormat","cloneModelWithFormat","cloneModelWithDataset","cloneBlockBase","cloneBlockGroupBase","handleCachedElement","cloneFormatContainer","cloneGeneralBlock","cloneSelectionMarker","cloneListLevel","cloneListItem","cloneDivider","cloneEntity","newParagraph","cloneSegmentBase","general","cloneGeneralSegment","textSegment","cloneSegment","cloneParagraph","cloneTableCell","cloneTableRow","cloneTable","cloneBlock","Error","newModel","blockGroupTypes","stopTypes","input","HeadingTags","mergeParagraph","markerPosition","newPara","mergeToCurrentParagraph","splitParagraph","segmentIndex","mergeFormat","newEntities","sourceKeys","mergeTable","newTable","source","newCell","k","leftCell","aboveCell","normalizeTable","insertBlock","mergeList","listItemIndex","newParaFormat","paraIndex","newListItem","applyDefaultFormat","applyDefaultFormatOption","mergeSegmentFormat","targetformat","sourceFormat","insertPosition","insertPoint","mergeValue","isFirst","pendingFormat","formatState","firstTableContext","firstBlock","isFirstImage","isFirstSegment","retrieveStructureFormat","isMultilineSelection","headingLevel","validHeadingLevel","retrieveParagraphFormat","extractedBorder","borderColor","borderWidth","modelFormat","mergedFormat","superOrSubscript","isBold","retrieveSegmentFormat","canUnlink","canAddImageAltText","borderRadius","canMergeTableCell","tableFormat","isInTable","tableHasHeader","retrieveTableFormat","step1Result","blockToWrap","creator","canMerge","prevBlock","createAndAdd","additionalSteps","formatContext","deleteExpandedSelection","step","isValidDeleteSelectionContext","lastParagraph","lastTableContext","mergeParagraphAfterDelete","deleteAllSegmentBefore","deleteSegment","getDeleteCollapsedSelection","segmentsWithoutBr","fixupBr","blockToDelete","segmentToDelete","getLeafSiblingBlock","createInsertPoint","deleteBlock","forwardDeleteCollapsedSelection","backwardDeleteCollapsedSelection","DeleteWordState","getDeleteWordSelection","startIndex","deleteNext","iterator","forward","preserveWhiteSpace","punctuation","isPunctuation","space","isSpace","newText","normalizeText","iterateSegments","curr","done","forwardDeleteWordSelection","backwardDeleteWordSelection","replacement","operation","deletedEntities","DeleteSelectionIteratingOptions","contentUnderSelectedTableCell","contentUnderSelectedGeneralElement","markerFormat","insertMarkerIndex","isBackward","currentIndex","normalizePreviousSegment","deleteSingleChar","array","deleteLength","deleteState","position","focusAfterEntity","blockParent","pathIndex","directChild","childIndex","blocksToInsert","nextParagraph","getPendingFormatHolder","holder","getFocusedPosition","equalTo","PendingFormatHolderKey","borderFormat","findListItems","pushNullIfNecessary","areListTypesCompatible","listItems","compareToIndex","currentLevels","compareToLevels","hasStartNumberOverride","levelLength","currentItem","isOrderedList","filterListItems","shouldIgnoreBlock","paragraphOrListItems","alreadyInExpectedType","existingListItems","hasIgnoredParagraphBefore","itemIndex","firstMatcher","siblingMatcher","paragraphs","getSelectedParagraphs","changed","findIndex","findDelimiter","moveRightward","word","splitTextSegment","found","newSegmentLeft","newSegmentRight","markerBlock","tempSegments","markerSelectionIndex","currentSegment","sel1","sel2","r1","r2","firstCol","deepFirst","findSequence","selections","collectSelections","removeUnmeaningfulSelections","groupIndex","checkFirstParagraph","allSegments","includingFormatHolder","resultPath","commonAncestorContainer","internalIterateSelections","treatAllAsSelect","hasSelectedSegment","hasUnselectedSegment","handleGeneralContent","handleGeneralElement","setSelectionToBlockGroup","handleSelection","setIsSelected","findCell","currentRow","currentCell","setSelectionToTable","segmentsToDelete","setSelectionToSegment","setSelectionToBlock","TextAlignValueMap","VerticalAlignValueMap","sel","getSelectedCells","lastCol","DEFAULT_FORMAT","keepCellShade","effectiveMetadata","metaOverrides","removeCellShade","bgColorOverrides","vAlignOverrides","updateOverrides","clearCache","transparentBorderMatrix","BorderFormatters","formatColor","alwaysUseTransparent","getBorderStyleFromColor","setTableCellBackgroundColor","formatCells","cellIndex","setBorderColor","setFirstColumnFormat","setHeaderRowFormat","noSpanAbove","noSpanLeft","noDifferentBelowSpan","spanCount","getBelowSpanCount","noDifferentRightSpan","getRightSpanCount","columns","cellInNextCol","collapseTableSelection","cellInNextRow","createEmptyParagraph","hasSelection","insertLeft","insertAbove","sourceRow","canMergeCells","mergingColIndex","newSelectedCol","mergingRowIndex","newSelectedRow","getTableCellWidth","tryMoveBlocks","targetCell","sourceCell","isColorOverride","applyToSegments","lightness","colorValues","parseColor","red","green","blue","min","calculateLightness","newWidth","belowRow","belowCell","newHeight","newRow","setModelAlignment","setModelDirection","HeaderFontSizes","formatParagraphWithContentModel","setModelIndentation","preservePendingFormat","spacing","toString","DefaultQuoteFormat","BuildInQuoteFormat","quoteFormat","fullQuoteFormat","toggleModelBlockQuote","isDeleted","isModifierKey","previousSibling","canDeleteBefore","canDeleteAfter","shouldDeleteWithContentModel","shouldDeleteAllSegmentsBefore","shouldDeleteWord","Browser","getDeleteSteps","handleKeyboardEventResult","getChangeData","contentNode","wrapperDisplay","insertEntityModel","internalApplyDefaultFormat","currentFormat","startPos","getPendingFormat","setPendingFormat","getStart","addUndoSnapshot","blockCount","previousBlock","__","previousSegment","clearModelFormat","reducedModelChildProcessor","selectionRootNode","startNode","createNodeStack","stackChild","getChildIndex","getUndoState","getZoomScale","retrieveModelFormatState","adjustSegmentSelection","ref","file","readFile","dataUrl","previousSrc","newSrc","originalSrc","getImageSrc","getMetadata","insertImageWithSrc","mergeModel","imageFileOrSrc","altText","URI_REGEX","MAILTO_REGEX","FTP_REGEX","displayText","sanitizer","HtmlSanitizer","sanitize","checkXss","matchLink","normalizedUrl","prefix","search","applyLinkPrefix","originalText","createLink","originalUrl","modelElement","isChanged","getFirstSelectedListItem","setListType","formatSegmentWithContentModel","capitalization","language","toLocaleUpperCase","wordArray","charAt","regex","RegExp","FONT_SIZES","change","sizeInPt","newSize","changeBase","fontSizes","getNewFontSize","setFontSizeInternal","changeFontSizeInternal","lastSegmentIndex","fontName","boldStyle","isTurningOn","DefaultCode","getSelectedSegmentsAndParagraphs","getFirstSelectedTable","tableModel","alignTableCell","deleteTableColumn","deleteTableRow","deleteTable","insertTableRow","insertTableColumn","mergeTableRow","mergeTableCells","mergeTableColumn","splitTableCellHorizontally","splitTableCellVertically","ensureFocusableParagraphForTable","createTableStructure","apiName","eventChangeData","setStyleCallback","toggleStyleCallback","segmentHasStyleCallback","afterFormatCallback","segmentAndParagraphs","isCollapsedSelection","formatsAndSegments","isTurningOff","formatter","writeBack","handleNewEntities","handleDeletedEntities","formatApiName","eventData","additionalData","mergePasteContent","applyCurrentFormat","customizedMerge","shouldMergeTable","pasteAsText","pasteAsImage","snapshotBeforePaste","setContent","getContent","createDefaultHtmlSanitizerOptions","htmlAfter","htmlAttributes","createBeforePasteEventData","getPasteType","rawHtml","imageDataUri","retrieveMetadataFromClipboard","handleImagePaste","handleTextPaste","pluginEvent","sanitizePasteContent","triggerPluginEventAndCreatePasteFragment","additionalPlugins","initialContent","ContentModelPastePlugin","getDarkColor","ContentModelEditor","createContentModelEditor","module","exports","roosterjs","extendStatics","d","setPrototypeOf","__proto__","prototype","hasOwnProperty","__extends","TypeError","constructor","create","__assign","t","n","arguments","__rest","getOwnPropertySymbols","propertyIsEnumerable","__decorate","decorators","desc","getOwnPropertyDescriptor","Reflect","decorate","defineProperty","__param","paramIndex","__esDecorate","ctor","descriptorIn","contextIn","initializers","extraInitializers","accept","f","kind","descriptor","access","addInitializer","init","__runInitializers","thisArg","useValue","__propKey","__setFunctionName","description","configurable","__metadata","metadataKey","metadataValue","__awaiter","_arguments","P","generator","Promise","resolve","reject","fulfilled","rejected","__generator","g","label","sent","trys","ops","verb","Symbol","op","__createBinding","o","m","k2","__esModule","writable","enumerable","__exportStar","__values","__read","ar","error","__spread","__spreadArrays","il","jl","__spreadArray","to","pack","l","__await","__asyncGenerator","asyncIterator","q","resume","fulfill","settle","__asyncDelegator","__asyncValues","__makeTemplateObject","cooked","raw","__setModuleDefault","__importStar","mod","__importDefault","__classPrivateFieldGet","receiver","__classPrivateFieldSet","__classPrivateFieldIn","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","__webpack_modules__","prop","toStringTag","__webpack_exports__"],"sourceRoot":""}